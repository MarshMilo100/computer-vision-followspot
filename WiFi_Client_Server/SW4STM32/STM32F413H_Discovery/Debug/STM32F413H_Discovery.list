
STM32F413H_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003734  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041cc  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ae8  08007ae8  00017ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007aec  08007aec  00017aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  20000000  08007af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a04  200000fc  08007bec  000200fc  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20000b00  08007bec  00020b00  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015489  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f03  00000000  00000000  000355b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000818b  00000000  00000000  000384b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad8  00000000  00000000  00040648  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e68  00000000  00000000  00041120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002413b  00000000  00000000  00041f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c3bd  00000000  00000000  000660c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d9d53  00000000  00000000  00072480  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014c1d3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000024c0  00000000  00000000  0014c250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000fc 	.word	0x200000fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080038fc 	.word	0x080038fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000100 	.word	0x20000100
 800021c:	080038fc 	.word	0x080038fc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005d4:	b09f      	sub	sp, #124	; 0x7c
  int32_t Socket = -1;
  uint16_t Datalen;
  uint16_t Trials = CONNECTION_TRIAL_MAX;
#if defined (LCD_USE)
  uint8_t modulestr[20] = {0};
 80005d6:	2214      	movs	r2, #20
 80005d8:	2100      	movs	r1, #0
 80005da:	a807      	add	r0, sp, #28
 80005dc:	f002 fcde 	bl	8002f9c <memset>
#endif /* LCD_USE */  
  
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fcfc 	bl	8001fdc <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	4bc1      	ldr	r3, [pc, #772]	; (80008ec <main+0x31c>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	9105      	str	r1, [sp, #20]
 80005ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005f0:	641a      	str	r2, [r3, #64]	; 0x40
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	9305      	str	r3, [sp, #20]
 80005fa:	9b05      	ldr	r3, [sp, #20]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	4bbc      	ldr	r3, [pc, #752]	; (80008f0 <main+0x320>)
 80005fe:	9106      	str	r1, [sp, #24]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060e:	9306      	str	r3, [sp, #24]
 8000610:	9b06      	ldr	r3, [sp, #24]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000612:	2401      	movs	r4, #1
 8000614:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061a:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	e9cd 5317 	strd	r5, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000626:	f04f 0908 	mov.w	r9, #8
 800062a:	23c8      	movs	r3, #200	; 0xc8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062c:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLR = 2;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800062e:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000630:	e9cd 9319 	strd	r9, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000636:	e9cd 651c 	strd	r6, r5, [sp, #112]	; 0x70
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800063a:	f001 ff19 	bl	8002470 <HAL_RCC_OscConfig>
  
  if(ret != HAL_OK)
 800063e:	b100      	cbz	r0, 8000642 <main+0x72>
 8000640:	e7fe      	b.n	8000640 <main+0x70>
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	900e      	str	r0, [sp, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800064c:	f04f 080f 	mov.w	r8, #15
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8000650:	2103      	movs	r1, #3
 8000652:	a80c      	add	r0, sp, #48	; 0x30
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8000658:	f001 fe70 	bl	800233c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800065c:	4607      	mov	r7, r0
 800065e:	b100      	cbz	r0, 8000662 <main+0x92>
 8000660:	e7fe      	b.n	8000660 <main+0x90>
  BSP_LED_Init(LED4);
 8000662:	4620      	mov	r0, r4
 8000664:	f000 ff56 	bl	8001514 <BSP_LED_Init>
  BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE_ROT180);
 8000668:	4628      	mov	r0, r5
 800066a:	f001 f9b5 	bl	80019d8 <BSP_LCD_InitEx>
  BSP_LCD_DisplayOn();
 800066e:	f001 f967 	bl	8001940 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000672:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000676:	f001 f935 	bl	80018e4 <BSP_LCD_Clear>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800067a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800067e:	f001 f931 	bl	80018e4 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000682:	201f      	movs	r0, #31
 8000684:	f001 f848 	bl	8001718 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8000688:	201f      	movs	r0, #31
 800068a:	f001 f83f 	bl	800170c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), (BSP_LCD_GetYSize() -200));
 800068e:	f001 f82d 	bl	80016ec <BSP_LCD_GetXSize>
 8000692:	4605      	mov	r5, r0
 8000694:	f001 f832 	bl	80016fc <BSP_LCD_GetYSize>
 8000698:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
 800069c:	b2aa      	uxth	r2, r5
 800069e:	b29b      	uxth	r3, r3
 80006a0:	4639      	mov	r1, r7
 80006a2:	4638      	mov	r0, r7
 80006a4:	f001 f936 	bl	8001914 <BSP_LCD_FillRect>
  BSP_LCD_SetFont(&Font12);
 80006a8:	4892      	ldr	r0, [pc, #584]	; (80008f4 <main+0x324>)
 80006aa:	f001 f83b 	bl	8001724 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 80006ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006b2:	f001 f82b 	bl	800170c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"ES-WIFI Module in TCP", CENTER_MODE );
 80006b6:	210a      	movs	r1, #10
 80006b8:	4608      	mov	r0, r1
 80006ba:	4623      	mov	r3, r4
 80006bc:	4a8e      	ldr	r2, [pc, #568]	; (80008f8 <main+0x328>)
 80006be:	f001 f891 	bl	80017e4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(10, 23, (uint8_t *)"Client mode demonstration", CENTER_MODE );  
 80006c2:	4623      	mov	r3, r4
 80006c4:	4a8d      	ldr	r2, [pc, #564]	; (80008fc <main+0x32c>)
 80006c6:	2117      	movs	r1, #23
 80006c8:	200a      	movs	r0, #10
 80006ca:	f001 f88b 	bl	80017e4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80006ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006d2:	f001 f821 	bl	8001718 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 80006d6:	4638      	mov	r0, r7
 80006d8:	f001 f818 	bl	800170c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"TCP Client Instructions:");
 80006dc:	4988      	ldr	r1, [pc, #544]	; (8000900 <main+0x330>)
 80006de:	2004      	movs	r0, #4
 80006e0:	f001 f8cc 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(6, (uint8_t *)"1-Make sure your Phone connected ");
 80006e4:	4987      	ldr	r1, [pc, #540]	; (8000904 <main+0x334>)
 80006e6:	2006      	movs	r0, #6
 80006e8:	f001 f8c8 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(7, (uint8_t *)"to the network that you configured");
 80006ec:	4986      	ldr	r1, [pc, #536]	; (8000908 <main+0x338>)
 80006ee:	4630      	mov	r0, r6
 80006f0:	f001 f8c4 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(8, (uint8_t *)"using Configuration AccessPoint.");
 80006f4:	4985      	ldr	r1, [pc, #532]	; (800090c <main+0x33c>)
 80006f6:	4648      	mov	r0, r9
 80006f8:	f001 f8c0 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(10,(uint8_t *)"2-Create a server by using the ");
 80006fc:	4984      	ldr	r1, [pc, #528]	; (8000910 <main+0x340>)
 80006fe:	200a      	movs	r0, #10
 8000700:	f001 f8bc 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(11,(uint8_t *)"android application TCP Server");
 8000704:	4983      	ldr	r1, [pc, #524]	; (8000914 <main+0x344>)
 8000706:	200b      	movs	r0, #11
 8000708:	f001 f8b8 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(12,(uint8_t *)"with port(8002).");
 800070c:	4982      	ldr	r1, [pc, #520]	; (8000918 <main+0x348>)
 800070e:	200c      	movs	r0, #12
 8000710:	f001 f8b4 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(14,(uint8_t *)"3-Get the Network Name or IP Address");
 8000714:	4981      	ldr	r1, [pc, #516]	; (800091c <main+0x34c>)
 8000716:	200e      	movs	r0, #14
 8000718:	f001 f8b0 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(15,(uint8_t *)"of your Android from the step 2.");
 800071c:	4980      	ldr	r1, [pc, #512]	; (8000920 <main+0x350>)
 800071e:	4640      	mov	r0, r8
 8000720:	f001 f8ac 	bl	800187c <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(2000);
 8000724:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000728:	f001 fc84 	bl	8002034 <HAL_Delay>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800072c:	f000 fe54 	bl	80013d8 <WIFI_Init>
 8000730:	4605      	mov	r5, r0
 8000732:	2800      	cmp	r0, #0
 8000734:	f040 80d0 	bne.w	80008d8 <main+0x308>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000738:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800073c:	f001 f8d2 	bl	80018e4 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000740:	201f      	movs	r0, #31
 8000742:	f000 ffe9 	bl	8001718 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8000746:	201f      	movs	r0, #31
 8000748:	f000 ffe0 	bl	800170c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), (BSP_LCD_GetYSize() -200));
 800074c:	f000 ffce 	bl	80016ec <BSP_LCD_GetXSize>
 8000750:	4607      	mov	r7, r0
 8000752:	f000 ffd3 	bl	80016fc <BSP_LCD_GetYSize>
 8000756:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
 800075a:	4629      	mov	r1, r5
 800075c:	b29b      	uxth	r3, r3
 800075e:	b2ba      	uxth	r2, r7
 8000760:	4628      	mov	r0, r5
 8000762:	f001 f8d7 	bl	8001914 <BSP_LCD_FillRect>
    BSP_LCD_SetFont(&Font12);
 8000766:	4863      	ldr	r0, [pc, #396]	; (80008f4 <main+0x324>)
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8000768:	4d6e      	ldr	r5, [pc, #440]	; (8000924 <main+0x354>)
    BSP_LCD_SetFont(&Font12);
 800076a:	f000 ffdb 	bl	8001724 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800076e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000772:	f000 ffcb 	bl	800170c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"ES-WIFI Module in TCP", CENTER_MODE );
 8000776:	210a      	movs	r1, #10
 8000778:	4608      	mov	r0, r1
 800077a:	4623      	mov	r3, r4
 800077c:	4a5e      	ldr	r2, [pc, #376]	; (80008f8 <main+0x328>)
 800077e:	f001 f831 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(10, 23, (uint8_t *)"Client mode demonstration", CENTER_MODE );  
 8000782:	4623      	mov	r3, r4
 8000784:	4a5d      	ldr	r2, [pc, #372]	; (80008fc <main+0x32c>)
 8000786:	2117      	movs	r1, #23
 8000788:	200a      	movs	r0, #10
 800078a:	f001 f82b 	bl	80017e4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800078e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000792:	f000 ffc1 	bl	8001718 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8000796:	201f      	movs	r0, #31
 8000798:	f000 ffb8 	bl	800170c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(7, (uint8_t *)"ES-WIFI Module Initialized.");
 800079c:	4630      	mov	r0, r6
 800079e:	4962      	ldr	r1, [pc, #392]	; (8000928 <main+0x358>)
 80007a0:	f001 f86c 	bl	800187c <BSP_LCD_DisplayStringAtLine>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80007a4:	4628      	mov	r0, r5
 80007a6:	f000 fe4f 	bl	8001448 <WIFI_GetMAC_Address>
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d160      	bne.n	8000870 <main+0x2a0>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 80007ae:	f000 ffad 	bl	800170c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"Es-wifi module MAC Address:");
 80007b2:	495e      	ldr	r1, [pc, #376]	; (800092c <main+0x35c>)
 80007b4:	2009      	movs	r0, #9
 80007b6:	f001 f861 	bl	800187c <BSP_LCD_DisplayStringAtLine>
      sprintf((char*)modulestr,"%X:%X:%X:%X:%X:%X.", MAC_Addr[0],
 80007ba:	7969      	ldrb	r1, [r5, #5]
 80007bc:	786b      	ldrb	r3, [r5, #1]
 80007be:	782a      	ldrb	r2, [r5, #0]
 80007c0:	9103      	str	r1, [sp, #12]
 80007c2:	7929      	ldrb	r1, [r5, #4]
 80007c4:	9102      	str	r1, [sp, #8]
 80007c6:	78e9      	ldrb	r1, [r5, #3]
 80007c8:	9101      	str	r1, [sp, #4]
 80007ca:	78a9      	ldrb	r1, [r5, #2]
 80007cc:	9100      	str	r1, [sp, #0]
 80007ce:	a807      	add	r0, sp, #28
 80007d0:	4957      	ldr	r1, [pc, #348]	; (8000930 <main+0x360>)
 80007d2:	f002 fbeb 	bl	8002fac <siprintf>
      BSP_LCD_DisplayStringAtLine(10, (uint8_t *) modulestr);
 80007d6:	a907      	add	r1, sp, #28
 80007d8:	200a      	movs	r0, #10
 80007da:	f001 f84f 	bl	800187c <BSP_LCD_DisplayStringAtLine>
    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80007de:	2203      	movs	r2, #3
 80007e0:	4954      	ldr	r1, [pc, #336]	; (8000934 <main+0x364>)
 80007e2:	4855      	ldr	r0, [pc, #340]	; (8000938 <main+0x368>)
 80007e4:	f000 fe1c 	bl	8001420 <WIFI_Connect>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d16e      	bne.n	80008ca <main+0x2fa>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80007ec:	4c53      	ldr	r4, [pc, #332]	; (800093c <main+0x36c>)
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 80007ee:	f000 ff8d 	bl	800170c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"Es-wifi module connected");
 80007f2:	4953      	ldr	r1, [pc, #332]	; (8000940 <main+0x370>)
 80007f4:	200b      	movs	r0, #11
 80007f6:	f001 f841 	bl	800187c <BSP_LCD_DisplayStringAtLine>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80007fa:	4620      	mov	r0, r4
 80007fc:	f000 fe30 	bl	8001460 <WIFI_GetIP_Address>
 8000800:	4605      	mov	r5, r0
 8000802:	2800      	cmp	r0, #0
 8000804:	d153      	bne.n	80008ae <main+0x2de>
        BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"es-wifi module got IP Address :");
 8000806:	494f      	ldr	r1, [pc, #316]	; (8000944 <main+0x374>)
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", (char *)RemoteIP, 8002, 0) == WIFI_STATUS_OK) 
 8000808:	4f4f      	ldr	r7, [pc, #316]	; (8000948 <main+0x378>)
 800080a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8000974 <main+0x3a4>
            BSP_LCD_DisplayStringAtLine(16, (uint8_t *)"TCP Connection opened successfully.");
 800080e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8000978 <main+0x3a8>
        BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"es-wifi module got IP Address :");
 8000812:	200c      	movs	r0, #12
 8000814:	f001 f832 	bl	800187c <BSP_LCD_DisplayStringAtLine>
        sprintf((char*)modulestr,"%d.%d.%d.%d",  IP_Addr[0],
 8000818:	78e1      	ldrb	r1, [r4, #3]
 800081a:	7863      	ldrb	r3, [r4, #1]
 800081c:	7822      	ldrb	r2, [r4, #0]
 800081e:	9101      	str	r1, [sp, #4]
 8000820:	78a1      	ldrb	r1, [r4, #2]
 8000822:	9100      	str	r1, [sp, #0]
 8000824:	a807      	add	r0, sp, #28
 8000826:	4949      	ldr	r1, [pc, #292]	; (800094c <main+0x37c>)
 8000828:	f002 fbc0 	bl	8002fac <siprintf>
        BSP_LCD_DisplayStringAtLine(13, (uint8_t *) modulestr);
 800082c:	a907      	add	r1, sp, #28
 800082e:	200d      	movs	r0, #13
 8000830:	f001 f824 	bl	800187c <BSP_LCD_DisplayStringAtLine>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Trying to connect to Server:");
 8000834:	4946      	ldr	r1, [pc, #280]	; (8000950 <main+0x380>)
 8000836:	200e      	movs	r0, #14
 8000838:	f001 f820 	bl	800187c <BSP_LCD_DisplayStringAtLine>
        sprintf((char*)modulestr,"%d.%d.%d.%d:8002",  RemoteIP[0],
 800083c:	2301      	movs	r3, #1
 800083e:	e9cd 5300 	strd	r5, r3, [sp]
 8000842:	227f      	movs	r2, #127	; 0x7f
 8000844:	462b      	mov	r3, r5
 8000846:	4943      	ldr	r1, [pc, #268]	; (8000954 <main+0x384>)
 8000848:	a807      	add	r0, sp, #28
 800084a:	f002 fbaf 	bl	8002fac <siprintf>
        BSP_LCD_DisplayStringAtLine(15, (uint8_t *) modulestr);
 800084e:	a907      	add	r1, sp, #28
 8000850:	200f      	movs	r0, #15
 8000852:	f001 f813 	bl	800187c <BSP_LCD_DisplayStringAtLine>
        while (Trials--)
 8000856:	250b      	movs	r5, #11
  int32_t Socket = -1;
 8000858:	f04f 34ff 	mov.w	r4, #4294967295
 800085c:	3d01      	subs	r5, #1
 800085e:	b2ad      	uxth	r5, r5
        while (Trials--)
 8000860:	b995      	cbnz	r5, 8000888 <main+0x2b8>
      if(WIFI_ReceiveData(Socket, RxData, sizeof(RxData), &Datalen) == WIFI_STATUS_OK)
 8000862:	4e3d      	ldr	r6, [pc, #244]	; (8000958 <main+0x388>)
            BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"ERROR : Failed to Receive Data.");
 8000864:	4d3d      	ldr	r5, [pc, #244]	; (800095c <main+0x38c>)
          if(WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen) != WIFI_STATUS_OK)
 8000866:	4f3e      	ldr	r7, [pc, #248]	; (8000960 <main+0x390>)
    if(Socket != -1)
 8000868:	2c00      	cmp	r4, #0
 800086a:	f000 8087 	beq.w	800097c <main+0x3ac>
 800086e:	e7fe      	b.n	800086e <main+0x29e>
      BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8000870:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000874:	f000 ff4a 	bl	800170c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"ERROR : CANNOT get MAC address");
 8000878:	493a      	ldr	r1, [pc, #232]	; (8000964 <main+0x394>)
 800087a:	2009      	movs	r0, #9
 800087c:	f000 fffe 	bl	800187c <BSP_LCD_DisplayStringAtLine>
      BSP_LED_On(LED4);      
 8000880:	4620      	mov	r0, r4
 8000882:	f000 fe7d 	bl	8001580 <BSP_LED_On>
 8000886:	e7aa      	b.n	80007de <main+0x20e>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", (char *)RemoteIP, 8002, 0) == WIFI_STATUS_OK) 
 8000888:	2100      	movs	r1, #0
 800088a:	f641 7342 	movw	r3, #8002	; 0x1f42
 800088e:	e9cd 3100 	strd	r3, r1, [sp]
 8000892:	4642      	mov	r2, r8
 8000894:	463b      	mov	r3, r7
 8000896:	4608      	mov	r0, r1
 8000898:	f000 fdf0 	bl	800147c <WIFI_OpenClientConnection>
 800089c:	4606      	mov	r6, r0
 800089e:	2800      	cmp	r0, #0
 80008a0:	d1dc      	bne.n	800085c <main+0x28c>
            BSP_LCD_DisplayStringAtLine(16, (uint8_t *)"TCP Connection opened successfully.");
 80008a2:	4649      	mov	r1, r9
 80008a4:	2010      	movs	r0, #16
 80008a6:	f000 ffe9 	bl	800187c <BSP_LCD_DisplayStringAtLine>
            Socket = 0;
 80008aa:	4634      	mov	r4, r6
 80008ac:	e7d6      	b.n	800085c <main+0x28c>
        BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80008ae:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80008b2:	f000 ff2b 	bl	800170c <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"ERROR: es-wifi module CANNOT get IP address");
 80008b6:	492c      	ldr	r1, [pc, #176]	; (8000968 <main+0x398>)
 80008b8:	200c      	movs	r0, #12
      BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"ERROR:es-wifi module NOT connected\n");
 80008ba:	f000 ffdf 	bl	800187c <BSP_LCD_DisplayStringAtLine>
      BSP_LED_On(LED4);
 80008be:	2001      	movs	r0, #1
    BSP_LED_On(LED4);
 80008c0:	f000 fe5e 	bl	8001580 <BSP_LED_On>
  int32_t Socket = -1;
 80008c4:	f04f 34ff 	mov.w	r4, #4294967295
 80008c8:	e7cb      	b.n	8000862 <main+0x292>
      BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80008ca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80008ce:	f000 ff1d 	bl	800170c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"ERROR:es-wifi module NOT connected\n");
 80008d2:	4926      	ldr	r1, [pc, #152]	; (800096c <main+0x39c>)
 80008d4:	200b      	movs	r0, #11
 80008d6:	e7f0      	b.n	80008ba <main+0x2ea>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80008d8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80008dc:	f000 ff16 	bl	800170c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(7, (uint8_t *)"ERROR : WIFI Module cannot be initialized.\n");
 80008e0:	4630      	mov	r0, r6
 80008e2:	4923      	ldr	r1, [pc, #140]	; (8000970 <main+0x3a0>)
 80008e4:	f000 ffca 	bl	800187c <BSP_LCD_DisplayStringAtLine>
    BSP_LED_On(LED4);
 80008e8:	4620      	mov	r0, r4
 80008ea:	e7e9      	b.n	80008c0 <main+0x2f0>
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000
 80008f4:	20000028 	.word	0x20000028
 80008f8:	08007620 	.word	0x08007620
 80008fc:	08007636 	.word	0x08007636
 8000900:	08007650 	.word	0x08007650
 8000904:	08007669 	.word	0x08007669
 8000908:	0800768b 	.word	0x0800768b
 800090c:	080076ae 	.word	0x080076ae
 8000910:	080076cf 	.word	0x080076cf
 8000914:	080076ef 	.word	0x080076ef
 8000918:	0800770e 	.word	0x0800770e
 800091c:	0800771f 	.word	0x0800771f
 8000920:	08007744 	.word	0x08007744
 8000924:	2000012e 	.word	0x2000012e
 8000928:	08007765 	.word	0x08007765
 800092c:	08007781 	.word	0x08007781
 8000930:	0800779d 	.word	0x0800779d
 8000934:	080077cf 	.word	0x080077cf
 8000938:	080077de 	.word	0x080077de
 800093c:	20000328 	.word	0x20000328
 8000940:	080077ee 	.word	0x080077ee
 8000944:	08007807 	.word	0x08007807
 8000948:	08003914 	.word	0x08003914
 800094c:	08007827 	.word	0x08007827
 8000950:	08007833 	.word	0x08007833
 8000954:	08007850 	.word	0x08007850
 8000958:	20000134 	.word	0x20000134
 800095c:	08007929 	.word	0x08007929
 8000960:	20000000 	.word	0x20000000
 8000964:	080077b0 	.word	0x080077b0
 8000968:	08007890 	.word	0x08007890
 800096c:	080078bc 	.word	0x080078bc
 8000970:	080078e0 	.word	0x080078e0
 8000974:	08007861 	.word	0x08007861
 8000978:	0800786c 	.word	0x0800786c
      if(WIFI_ReceiveData(Socket, RxData, sizeof(RxData), &Datalen) == WIFI_STATUS_OK)
 800097c:	ab11      	add	r3, sp, #68	; 0x44
 800097e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000982:	4631      	mov	r1, r6
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fdb3 	bl	80014f0 <WIFI_ReceiveData>
 800098a:	b9a8      	cbnz	r0, 80009b8 <main+0x3e8>
        if(Datalen > 0)
 800098c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8000990:	2b00      	cmp	r3, #0
 8000992:	f43f af69 	beq.w	8000868 <main+0x298>
          if(WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen) != WIFI_STATUS_OK)
 8000996:	ab11      	add	r3, sp, #68	; 0x44
 8000998:	2210      	movs	r2, #16
 800099a:	4639      	mov	r1, r7
 800099c:	f000 fd96 	bl	80014cc <WIFI_SendData>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	f43f af61 	beq.w	8000868 <main+0x298>
            BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80009a6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009aa:	f000 feaf 	bl	800170c <BSP_LCD_SetTextColor>
            BSP_LCD_DisplayStringAtLine(8, (uint8_t *)"ERROR : Failed to send Data.");
 80009ae:	4906      	ldr	r1, [pc, #24]	; (80009c8 <main+0x3f8>)
 80009b0:	2008      	movs	r0, #8
            BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"ERROR : Failed to Receive Data.");
 80009b2:	f000 ff63 	bl	800187c <BSP_LCD_DisplayStringAtLine>
 80009b6:	e757      	b.n	8000868 <main+0x298>
            BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80009b8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009bc:	f000 fea6 	bl	800170c <BSP_LCD_SetTextColor>
            BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"ERROR : Failed to Receive Data.");
 80009c0:	4629      	mov	r1, r5
 80009c2:	2009      	movs	r0, #9
 80009c4:	e7f5      	b.n	80009b2 <main+0x3e2>
 80009c6:	bf00      	nop
 80009c8:	0800790c 	.word	0x0800790c

080009cc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80009cc:	4770      	bx	lr

080009ce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler>

080009d0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler>

080009d2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler>

080009d4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler>

080009d6 <SVC_Handler>:
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{ 
  HAL_IncTick();
 80009dc:	f001 bb18 	b.w	8002010 <HAL_IncTick>

080009e0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;
    
    if (*ptr == '-') {                                		/* Check for minus character */
 80009e2:	7803      	ldrb	r3, [r0, #0]
 80009e4:	2b2d      	cmp	r3, #45	; 0x2d
 80009e6:	d115      	bne.n	8000a14 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 80009e8:	3001      	adds	r0, #1
        minus = 1;
 80009ea:	2501      	movs	r5, #1
 80009ec:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 80009ee:	462a      	mov	r2, r5
 80009f0:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80009f2:	270a      	movs	r7, #10
 80009f4:	e003      	b.n	80009fe <ParseNumber+0x1e>
        ptr++;
        i++;
 80009f6:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 80009f8:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 80009fc:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80009fe:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000a02:	3c30      	subs	r4, #48	; 0x30
 8000a04:	b2e6      	uxtb	r6, r4
 8000a06:	2e09      	cmp	r6, #9
 8000a08:	d9f5      	bls.n	80009f6 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000a0a:	b101      	cbz	r1, 8000a0e <ParseNumber+0x2e>
        *cnt = i;
 8000a0c:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000a0e:	b105      	cbz	r5, 8000a12 <ParseNumber+0x32>
        return 0 - sum;
 8000a10:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8000a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8000a14:	2500      	movs	r5, #0
 8000a16:	e7e9      	b.n	80009ec <ParseNumber+0xc>

08000a18 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr) 
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8000a1a:	2600      	movs	r6, #0
  
  while(* ptr) { 
 8000a1c:	7803      	ldrb	r3, [r0, #0]
 8000a1e:	b903      	cbnz	r3, 8000a22 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8000a22:	2b3a      	cmp	r3, #58	; 0x3a
 8000a24:	d029      	beq.n	8000a7a <ParseMAC+0x62>
 8000a26:	4684      	mov	ip, r0
    uint32_t sum = 0;
 8000a28:	2400      	movs	r4, #0
 8000a2a:	ebac 0500 	sub.w	r5, ip, r0
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000a2e:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000a32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	2a09      	cmp	r2, #9
 8000a3a:	b2ed      	uxtb	r5, r5
 8000a3c:	d909      	bls.n	8000a52 <ParseMAC+0x3a>
 8000a3e:	f023 0720 	bic.w	r7, r3, #32
 8000a42:	3f41      	subs	r7, #65	; 0x41
 8000a44:	2f05      	cmp	r7, #5
 8000a46:	d904      	bls.n	8000a52 <ParseMAC+0x3a>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000a48:	1c73      	adds	r3, r6, #1
 8000a4a:	558c      	strb	r4, [r1, r6]
 8000a4c:	b2de      	uxtb	r6, r3
    ptr = ptr + hexcnt;
 8000a4e:	4428      	add	r0, r5
 8000a50:	e7e4      	b.n	8000a1c <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a52:	2a09      	cmp	r2, #9
        sum <<= 4;
 8000a54:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000a58:	d905      	bls.n	8000a66 <ParseMAC+0x4e>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000a5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000a5e:	2a05      	cmp	r2, #5
 8000a60:	d803      	bhi.n	8000a6a <ParseMAC+0x52>
        return (a - 'a') + 10;
 8000a62:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8000a64:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8000a66:	4414      	add	r4, r2
 8000a68:	e7df      	b.n	8000a2a <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000a6a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000a6e:	2a05      	cmp	r2, #5
 8000a70:	d801      	bhi.n	8000a76 <ParseMAC+0x5e>
        return (a - 'A') + 10;
 8000a72:	3b37      	subs	r3, #55	; 0x37
 8000a74:	e7f6      	b.n	8000a64 <ParseMAC+0x4c>
    return 0;
 8000a76:	2200      	movs	r2, #0
 8000a78:	e7f5      	b.n	8000a66 <ParseMAC+0x4e>
    hexcnt = 1;
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	e7e7      	b.n	8000a4e <ParseMAC+0x36>

08000a7e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 8000a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a80:	4604      	mov	r4, r0
 8000a82:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8000a84:	2500      	movs	r5, #0
  
  while(* ptr) { 
    hexcnt = 1;
 8000a86:	2701      	movs	r7, #1
  while(* ptr) { 
 8000a88:	7823      	ldrb	r3, [r4, #0]
 8000a8a:	b90b      	cbnz	r3, 8000a90 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000a8c:	b003      	add	sp, #12
 8000a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8000a90:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8000a92:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8000a96:	d007      	beq.n	8000aa8 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000a98:	f10d 0107 	add.w	r1, sp, #7
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f7ff ff9f 	bl	80009e0 <ParseNumber>
 8000aa2:	1c6b      	adds	r3, r5, #1
 8000aa4:	5570      	strb	r0, [r6, r5]
 8000aa6:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8000aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000aac:	441c      	add	r4, r3
 8000aae:	e7eb      	b.n	8000a88 <ParseIP+0xa>

08000ab0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4604      	mov	r4, r0
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000ab4:	4608      	mov	r0, r1
{
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4615      	mov	r5, r2
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000aba:	f7ff fbb1 	bl	8000220 <strlen>
 8000abe:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8000ac2:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8000ac6:	b281      	uxth	r1, r0
 8000ac8:	4630      	mov	r0, r6
 8000aca:	4798      	blx	r3
 8000acc:	2800      	cmp	r0, #0
 8000ace:	dd14      	ble.n	8000afa <AT_ExecuteCommand+0x4a>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000ad0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8000ad4:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4628      	mov	r0, r5
 8000adc:	4798      	blx	r3
    if(n > 0)
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	dd0b      	ble.n	8000afa <AT_ExecuteCommand+0x4a>
    {
      *(pdata+n)=0;
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <AT_ExecuteCommand+0x58>)
 8000ae8:	4628      	mov	r0, r5
 8000aea:	f002 fa9c 	bl	8003026 <strstr>
 8000aee:	b930      	cbnz	r0, 8000afe <AT_ExecuteCommand+0x4e>
      {
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000af0:	4906      	ldr	r1, [pc, #24]	; (8000b0c <AT_ExecuteCommand+0x5c>)
 8000af2:	4628      	mov	r0, r5
 8000af4:	f002 fa97 	bl	8003026 <strstr>
 8000af8:	b918      	cbnz	r0, 8000b02 <AT_ExecuteCommand+0x52>
      {
        return ES_WIFI_STATUS_ERROR;
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000afa:	2004      	movs	r0, #4
}
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8000afe:	4620      	mov	r0, r4
 8000b00:	e7fc      	b.n	8000afc <AT_ExecuteCommand+0x4c>
        return ES_WIFI_STATUS_ERROR;
 8000b02:	2002      	movs	r0, #2
 8000b04:	e7fa      	b.n	8000afc <AT_ExecuteCommand+0x4c>
 8000b06:	bf00      	nop
 8000b08:	08007949 	.word	0x08007949
 8000b0c:	08007952 	.word	0x08007952

08000b10 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b18:	f8c0 3760 	str.w	r3, [r0, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8000b1c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
{
 8000b20:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init() == 0)
 8000b22:	4798      	blx	r3
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d14b      	bne.n	8000bc0 <ES_WIFI_Init+0xb0>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000b28:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8000b2c:	4925      	ldr	r1, [pc, #148]	; (8000bc4 <ES_WIFI_Init+0xb4>)
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff ffbe 	bl	8000ab0 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8000b34:	4605      	mov	r5, r0
 8000b36:	b960      	cbnz	r0, 8000b52 <ES_WIFI_Init+0x42>
  ptr = strtok((char *)pdata + 2, ",");  
 8000b38:	4923      	ldr	r1, [pc, #140]	; (8000bc8 <ES_WIFI_Init+0xb8>)
      ptr = strtok(ptr, "\r"); 
 8000b3a:	4f24      	ldr	r7, [pc, #144]	; (8000bcc <ES_WIFI_Init+0xbc>)
    ptr = strtok(NULL, ","); 
 8000b3c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000bc8 <ES_WIFI_Init+0xb8>
  ptr = strtok((char *)pdata + 2, ",");  
 8000b40:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8000b44:	f002 fa8a 	bl	800305c <strtok>
 8000b48:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000b4a:	f104 0860 	add.w	r8, r4, #96	; 0x60
 8000b4e:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000b50:	b910      	cbnz	r0, 8000b58 <ES_WIFI_Init+0x48>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8000b52:	4628      	mov	r0, r5
 8000b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) { 
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	d824      	bhi.n	8000ba6 <ES_WIFI_Init+0x96>
 8000b5c:	e8df f003 	tbb	[pc, r3]
 8000b60:	140f0a04 	.word	0x140f0a04
 8000b64:	1e19      	.short	0x1e19
 8000b66:	29          	.byte	0x29
 8000b67:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000b68:	4601      	mov	r1, r0
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000b6e:	f002 fa45 	bl	8002ffc <strncpy>
 8000b72:	e018      	b.n	8000ba6 <ES_WIFI_Init+0x96>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000b74:	4601      	mov	r1, r0
 8000b76:	2210      	movs	r2, #16
 8000b78:	f104 0020 	add.w	r0, r4, #32
 8000b7c:	e7f7      	b.n	8000b6e <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 8000b7e:	4601      	mov	r1, r0
 8000b80:	2210      	movs	r2, #16
 8000b82:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000b86:	e7f2      	b.n	8000b6e <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 8000b88:	4601      	mov	r1, r0
 8000b8a:	2210      	movs	r2, #16
 8000b8c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8000b90:	e7ed      	b.n	8000b6e <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 8000b92:	4601      	mov	r1, r0
 8000b94:	2210      	movs	r2, #16
 8000b96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000b9a:	e7e8      	b.n	8000b6e <ES_WIFI_Init+0x5e>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f7ff ff1f 	bl	80009e0 <ParseNumber>
 8000ba2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ptr = strtok(NULL, ","); 
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f002 fa57 	bl	800305c <strtok>
 8000bae:	3601      	adds	r6, #1
 8000bb0:	e7cd      	b.n	8000b4e <ES_WIFI_Init+0x3e>
      ptr = strtok(ptr, "\r"); 
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	f002 fa52 	bl	800305c <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000bb8:	2220      	movs	r2, #32
 8000bba:	4601      	mov	r1, r0
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	e7d6      	b.n	8000b6e <ES_WIFI_Init+0x5e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000bc0:	2502      	movs	r5, #2
 8000bc2:	e7c6      	b.n	8000b52 <ES_WIFI_Init+0x42>
 8000bc4:	0800795a 	.word	0x0800795a
 8000bc8:	0800795f 	.word	0x0800795f
 8000bcc:	08007a42 	.word	0x08007a42

08000bd0 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000bd0:	b530      	push	{r4, r5, lr}
 8000bd2:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000bd6:	b168      	cbz	r0, 8000bf4 <ES_WIFI_RegisterBusIO+0x24>
 8000bd8:	b161      	cbz	r1, 8000bf4 <ES_WIFI_RegisterBusIO+0x24>
 8000bda:	b15a      	cbz	r2, 8000bf4 <ES_WIFI_RegisterBusIO+0x24>
 8000bdc:	b155      	cbz	r5, 8000bf4 <ES_WIFI_RegisterBusIO+0x24>
 8000bde:	b14c      	cbz	r4, 8000bf4 <ES_WIFI_RegisterBusIO+0x24>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8000be0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8000be4:	f8c0 5118 	str.w	r5, [r0, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8000be8:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8000bec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8000bf0:	2000      	movs	r0, #0
}
 8000bf2:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	e7fc      	b.n	8000bf2 <ES_WIFI_RegisterBusIO+0x22>

08000bf8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000bfa:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8000bfe:	4605      	mov	r5, r0
 8000c00:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000c02:	4620      	mov	r0, r4
 8000c04:	460a      	mov	r2, r1
 8000c06:	4918      	ldr	r1, [pc, #96]	; (8000c68 <ES_WIFI_Connect+0x70>)
{
 8000c08:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000c0a:	f002 f9cf 	bl	8002fac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c0e:	4622      	mov	r2, r4
 8000c10:	4621      	mov	r1, r4
 8000c12:	4628      	mov	r0, r5
 8000c14:	f7ff ff4c 	bl	8000ab0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000c18:	bb20      	cbnz	r0, 8000c64 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000c1a:	463a      	mov	r2, r7
 8000c1c:	4913      	ldr	r1, [pc, #76]	; (8000c6c <ES_WIFI_Connect+0x74>)
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f002 f9c4 	bl	8002fac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c24:	4622      	mov	r2, r4
 8000c26:	4621      	mov	r1, r4
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f7ff ff41 	bl	8000ab0 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8000c2e:	b9c8      	cbnz	r0, 8000c64 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000c30:	4632      	mov	r2, r6
 8000c32:	490f      	ldr	r1, [pc, #60]	; (8000c70 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000c34:	f885 6084 	strb.w	r6, [r5, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f002 f9b7 	bl	8002fac <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c3e:	4622      	mov	r2, r4
 8000c40:	4621      	mov	r1, r4
 8000c42:	4628      	mov	r0, r5
 8000c44:	f7ff ff34 	bl	8000ab0 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8000c48:	b960      	cbnz	r0, 8000c64 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000c4a:	490a      	ldr	r1, [pc, #40]	; (8000c74 <ES_WIFI_Connect+0x7c>)
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f002 f9cd 	bl	8002fec <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8000c52:	4622      	mov	r2, r4
 8000c54:	4621      	mov	r1, r4
 8000c56:	4628      	mov	r0, r5
 8000c58:	f7ff ff2a 	bl	8000ab0 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000c5c:	b910      	cbnz	r0, 8000c64 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
}
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	bf00      	nop
 8000c68:	08007985 	.word	0x08007985
 8000c6c:	0800798c 	.word	0x0800798c
 8000c70:	08007993 	.word	0x08007993
 8000c74:	0800799a 	.word	0x0800799a

08000c78 <ES_WIFI_GetNetworkSettings>:
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8000c78:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8000c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8000c80:	4932      	ldr	r1, [pc, #200]	; (8000d4c <ES_WIFI_GetNetworkSettings+0xd4>)
{
 8000c82:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8000c84:	4610      	mov	r0, r2
 8000c86:	f002 f9b1 	bl	8002fec <strcpy>
 8000c8a:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c8c:	4601      	mov	r1, r0
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f7ff ff0e 	bl	8000ab0 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8000c94:	4605      	mov	r5, r0
 8000c96:	b968      	cbnz	r0, 8000cb4 <ES_WIFI_GetNetworkSettings+0x3c>
  ptr = strtok(pdata + 2, ",");   
 8000c98:	492d      	ldr	r1, [pc, #180]	; (8000d50 <ES_WIFI_GetNetworkSettings+0xd8>)
    ptr = strtok(NULL, ","); 
 8000c9a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000d50 <ES_WIFI_GetNetworkSettings+0xd8>
  ptr = strtok(pdata + 2, ",");   
 8000c9e:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8000ca2:	f002 f9db 	bl	800305c <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000ca6:	f104 0785 	add.w	r7, r4, #133	; 0x85
  ptr = strtok(pdata + 2, ",");   
 8000caa:	462e      	mov	r6, r5
      ParseIP(ptr, NetSettings->DNS2);
 8000cac:	f104 08dd 	add.w	r8, r4, #221	; 0xdd
 8000cb0:	b2f3      	uxtb	r3, r6
  while (ptr != NULL) {
 8000cb2:	b910      	cbnz	r0, 8000cba <ES_WIFI_GetNetworkSettings+0x42>
  }  
  return ret;
}
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {      
 8000cba:	2b0b      	cmp	r3, #11
 8000cbc:	d80c      	bhi.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
 8000cbe:	e8df f003 	tbb	[pc, r3]
 8000cc2:	1106      	.short	0x1106
 8000cc4:	28221c16 	.word	0x28221c16
 8000cc8:	3633302d 	.word	0x3633302d
 8000ccc:	3e38      	.short	0x3e38
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 8000cce:	4601      	mov	r1, r0
 8000cd0:	2221      	movs	r2, #33	; 0x21
 8000cd2:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8000cd4:	f002 f992 	bl	8002ffc <strncpy>
    ptr = strtok(NULL, ","); 
 8000cd8:	4649      	mov	r1, r9
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f002 f9be 	bl	800305c <strtok>
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7e5      	b.n	8000cb0 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	2221      	movs	r2, #33	; 0x21
 8000ce8:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8000cec:	e7f2      	b.n	8000cd4 <ES_WIFI_GetNetworkSettings+0x5c>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f7ff fe76 	bl	80009e0 <ParseNumber>
 8000cf4:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
 8000cf8:	e7ee      	b.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f7ff fe70 	bl	80009e0 <ParseNumber>
 8000d00:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
 8000d04:	e7e8      	b.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000d06:	2100      	movs	r1, #0
 8000d08:	f7ff fe6a 	bl	80009e0 <ParseNumber>
 8000d0c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
 8000d10:	e7e2      	b.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
      ParseIP(ptr, NetSettings->IP_Addr);
 8000d12:	f104 01cd 	add.w	r1, r4, #205	; 0xcd
      ParseIP(ptr, NetSettings->IP_Mask);
 8000d16:	f7ff feb2 	bl	8000a7e <ParseIP>
 8000d1a:	e7dd      	b.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
 8000d1c:	f104 01d1 	add.w	r1, r4, #209	; 0xd1
 8000d20:	e7f9      	b.n	8000d16 <ES_WIFI_GetNetworkSettings+0x9e>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000d22:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
 8000d26:	e7f6      	b.n	8000d16 <ES_WIFI_GetNetworkSettings+0x9e>
      ParseIP(ptr, NetSettings->DNS1);
 8000d28:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000d2c:	e7f3      	b.n	8000d16 <ES_WIFI_GetNetworkSettings+0x9e>
      ParseIP(ptr, NetSettings->DNS2);
 8000d2e:	4641      	mov	r1, r8
 8000d30:	e7f1      	b.n	8000d16 <ES_WIFI_GetNetworkSettings+0x9e>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000d32:	2100      	movs	r1, #0
 8000d34:	f7ff fe54 	bl	80009e0 <ParseNumber>
 8000d38:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
 8000d3c:	e7cc      	b.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f7ff fe4e 	bl	80009e0 <ParseNumber>
 8000d44:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
 8000d48:	e7c6      	b.n	8000cd8 <ES_WIFI_GetNetworkSettings+0x60>
 8000d4a:	bf00      	nop
 8000d4c:	080079a2 	.word	0x080079a2
 8000d50:	0800795f 	.word	0x0800795f

08000d54 <ES_WIFI_GetMACAddress>:
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000d54:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4909      	ldr	r1, [pc, #36]	; (8000d88 <ES_WIFI_GetMACAddress+0x34>)
 8000d62:	f002 f943 	bl	8002fec <strcpy>
 8000d66:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d68:	4601      	mov	r1, r0
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff fea0 	bl	8000ab0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000d70:	4605      	mov	r5, r0
 8000d72:	b938      	cbnz	r0, 8000d84 <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");    
 8000d74:	4905      	ldr	r1, [pc, #20]	; (8000d8c <ES_WIFI_GetMACAddress+0x38>)
 8000d76:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8000d7a:	f002 f96f 	bl	800305c <strtok>
    ParseMAC(ptr, mac) ;
 8000d7e:	4631      	mov	r1, r6
 8000d80:	f7ff fe4a 	bl	8000a18 <ParseMAC>
  }           
  return ret;
}
 8000d84:	4628      	mov	r0, r5
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
 8000d88:	080079a6 	.word	0x080079a6
 8000d8c:	08007a96 	.word	0x08007a96

08000d90 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000d90:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000d92:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8000d96:	784a      	ldrb	r2, [r1, #1]
{
 8000d98:	4606      	mov	r6, r0
 8000d9a:	460d      	mov	r5, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	4928      	ldr	r1, [pc, #160]	; (8000e40 <ES_WIFI_StartClientConnection+0xb0>)
 8000da0:	f002 f904 	bl	8002fac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000da4:	4622      	mov	r2, r4
 8000da6:	4621      	mov	r1, r4
 8000da8:	4630      	mov	r0, r6
 8000daa:	f7ff fe81 	bl	8000ab0 <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d144      	bne.n	8000e3c <ES_WIFI_StartClientConnection+0xac>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000db2:	782a      	ldrb	r2, [r5, #0]
 8000db4:	4923      	ldr	r1, [pc, #140]	; (8000e44 <ES_WIFI_StartClientConnection+0xb4>)
 8000db6:	4620      	mov	r0, r4
 8000db8:	f002 f8f8 	bl	8002fac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dbc:	4622      	mov	r2, r4
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f7ff fe75 	bl	8000ab0 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	d138      	bne.n	8000e3c <ES_WIFI_StartClientConnection+0xac>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8000dca:	782b      	ldrb	r3, [r5, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d026      	beq.n	8000e1e <ES_WIFI_StartClientConnection+0x8e>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
        {
          return ES_WIFI_STATUS_ERROR;
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8000dd0:	886a      	ldrh	r2, [r5, #2]
 8000dd2:	491d      	ldr	r1, [pc, #116]	; (8000e48 <ES_WIFI_StartClientConnection+0xb8>)
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f002 f8e9 	bl	8002fac <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dda:	4622      	mov	r2, r4
 8000ddc:	4621      	mov	r1, r4
 8000dde:	4630      	mov	r0, r6
 8000de0:	f7ff fe66 	bl	8000ab0 <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8000de4:	bb50      	cbnz	r0, 8000e3c <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8000de6:	7a69      	ldrb	r1, [r5, #9]
 8000de8:	9101      	str	r1, [sp, #4]
 8000dea:	7a29      	ldrb	r1, [r5, #8]
 8000dec:	79aa      	ldrb	r2, [r5, #6]
 8000dee:	9100      	str	r1, [sp, #0]
 8000df0:	79eb      	ldrb	r3, [r5, #7]
 8000df2:	4916      	ldr	r1, [pc, #88]	; (8000e4c <ES_WIFI_StartClientConnection+0xbc>)
 8000df4:	4620      	mov	r0, r4
 8000df6:	f002 f8d9 	bl	8002fac <siprintf>
                conn->RemoteIP[2],conn->RemoteIP[3]);
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	4621      	mov	r1, r4
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f7ff fe56 	bl	8000ab0 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000e04:	b9d0      	cbnz	r0, 8000e3c <ES_WIFI_StartClientConnection+0xac>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 8000e06:	4912      	ldr	r1, [pc, #72]	; (8000e50 <ES_WIFI_StartClientConnection+0xc0>)
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f002 f8ef 	bl	8002fec <strcpy>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8000e0e:	4622      	mov	r2, r4
 8000e10:	4621      	mov	r1, r4
 8000e12:	4630      	mov	r0, r6
        }          
      }           
    }
  }
  return ret;
}
 8000e14:	b002      	add	sp, #8
 8000e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 8000e1a:	f7ff be49 	b.w	8000ab0 <AT_ExecuteCommand>
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8000e1e:	88ab      	ldrh	r3, [r5, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0d5      	beq.n	8000dd0 <ES_WIFI_StartClientConnection+0x40>
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8000e24:	886a      	ldrh	r2, [r5, #2]
 8000e26:	490b      	ldr	r1, [pc, #44]	; (8000e54 <ES_WIFI_StartClientConnection+0xc4>)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f002 f8bf 	bl	8002fac <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 8000e2e:	4622      	mov	r2, r4
 8000e30:	4621      	mov	r1, r4
 8000e32:	4630      	mov	r0, r6
 8000e34:	f7ff fe3c 	bl	8000ab0 <AT_ExecuteCommand>
 8000e38:	2802      	cmp	r0, #2
 8000e3a:	d1c9      	bne.n	8000dd0 <ES_WIFI_StartClientConnection+0x40>
}
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	08007a01 	.word	0x08007a01
 8000e44:	08007a08 	.word	0x08007a08
 8000e48:	08007a0f 	.word	0x08007a0f
 8000e4c:	08007a1d 	.word	0x08007a1d
 8000e50:	08007a2d 	.word	0x08007a2d
 8000e54:	08007a16 	.word	0x08007a16

08000e58 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8000e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e5c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000e60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8000e64:	bf28      	it	cs
 8000e66:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
  
  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000e6a:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8000e6e:	4605      	mov	r5, r0
  *SentLen = Reqlen;
 8000e70:	f8a9 3000 	strh.w	r3, [r9]
{
 8000e74:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000e76:	4620      	mov	r0, r4
 8000e78:	460a      	mov	r2, r1
 8000e7a:	4930      	ldr	r1, [pc, #192]	; (8000f3c <ES_WIFI_SendData+0xe4>)
 8000e7c:	4698      	mov	r8, r3
 8000e7e:	f002 f895 	bl	8002fac <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e82:	4622      	mov	r2, r4
 8000e84:	4621      	mov	r1, r4
 8000e86:	4628      	mov	r0, r5
 8000e88:	f7ff fe12 	bl	8000ab0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000e8c:	4606      	mov	r6, r0
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d150      	bne.n	8000f34 <ES_WIFI_SendData+0xdc>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8000e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000e94:	492a      	ldr	r1, [pc, #168]	; (8000f40 <ES_WIFI_SendData+0xe8>)
 8000e96:	4620      	mov	r0, r4
 8000e98:	f002 f888 	bl	8002fac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff fe05 	bl	8000ab0 <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8000ea6:	4606      	mov	r6, r0
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d143      	bne.n	8000f34 <ES_WIFI_SendData+0xdc>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8000eac:	4925      	ldr	r1, [pc, #148]	; (8000f44 <ES_WIFI_SendData+0xec>)
 8000eae:	4642      	mov	r2, r8
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f002 f87b 	bl	8002fac <siprintf>
  uint16_t n=strlen((char*)cmd);
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff f9b2 	bl	8000220 <strlen>
 8000ebc:	b281      	uxth	r1, r0
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8000ebe:	f010 0701 	ands.w	r7, r0, #1
 8000ec2:	468b      	mov	fp, r1
 8000ec4:	d006      	beq.n	8000ed4 <ES_WIFI_SendData+0x7c>
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8a9 3000 	strh.w	r3, [r9]
 8000ecc:	2602      	movs	r6, #2
  return ret;  
}
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 8000ed4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8000ed8:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8000edc:	4620      	mov	r0, r4
 8000ede:	4798      	blx	r3
 8000ee0:	4583      	cmp	fp, r0
 8000ee2:	d001      	beq.n	8000ee8 <ES_WIFI_SendData+0x90>
{
 8000ee4:	2604      	movs	r6, #4
 8000ee6:	e7f2      	b.n	8000ece <ES_WIFI_SendData+0x76>
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000ee8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8000eec:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	4798      	blx	r3
    if(n == len)
 8000ef6:	4580      	cmp	r8, r0
 8000ef8:	d1e5      	bne.n	8000ec6 <ES_WIFI_SendData+0x6e>
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000efa:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8000efe:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8000f02:	4639      	mov	r1, r7
 8000f04:	4620      	mov	r0, r4
 8000f06:	4798      	blx	r3
      if(n > 0)
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	ddeb      	ble.n	8000ee4 <ES_WIFI_SendData+0x8c>
        *(pdata+n)=0;
 8000f0c:	5427      	strb	r7, [r4, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <ES_WIFI_SendData+0xf0>)
 8000f10:	4620      	mov	r0, r4
 8000f12:	f002 f888 	bl	8003026 <strstr>
 8000f16:	b930      	cbnz	r0, 8000f26 <ES_WIFI_SendData+0xce>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <ES_WIFI_SendData+0xf4>)
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f002 f883 	bl	8003026 <strstr>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d1d0      	bne.n	8000ec6 <ES_WIFI_SendData+0x6e>
 8000f24:	e7de      	b.n	8000ee4 <ES_WIFI_SendData+0x8c>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <ES_WIFI_SendData+0xf8>)
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f002 f87c 	bl	8003026 <strstr>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d1c9      	bne.n	8000ec6 <ES_WIFI_SendData+0x6e>
 8000f32:	e7cc      	b.n	8000ece <ES_WIFI_SendData+0x76>
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 8000f34:	2e02      	cmp	r6, #2
 8000f36:	d1ca      	bne.n	8000ece <ES_WIFI_SendData+0x76>
 8000f38:	e7c5      	b.n	8000ec6 <ES_WIFI_SendData+0x6e>
 8000f3a:	bf00      	nop
 8000f3c:	08007a01 	.word	0x08007a01
 8000f40:	08007a83 	.word	0x08007a83
 8000f44:	08007a8b 	.word	0x08007a8b
 8000f48:	08007949 	.word	0x08007949
 8000f4c:	08007952 	.word	0x08007952
 8000f50:	08007a94 	.word	0x08007a94

08000f54 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8000f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8000f58:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	4690      	mov	r8, r2
 8000f60:	461f      	mov	r7, r3
 8000f62:	f8dd 9020 	ldr.w	r9, [sp, #32]
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8000f66:	d85d      	bhi.n	8001024 <ES_WIFI_ReceiveData+0xd0>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000f68:	f500 7490 	add.w	r4, r0, #288	; 0x120
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	4620      	mov	r0, r4
 8000f70:	492d      	ldr	r1, [pc, #180]	; (8001028 <ES_WIFI_ReceiveData+0xd4>)
 8000f72:	f002 f81b 	bl	8002fac <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f76:	4622      	mov	r2, r4
 8000f78:	4621      	mov	r1, r4
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	f7ff fd98 	bl	8000ab0 <AT_ExecuteCommand>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4682      	mov	sl, r0
    
    if(ret == ES_WIFI_STATUS_OK)
 8000f84:	bb48      	cbnz	r0, 8000fda <ES_WIFI_ReceiveData+0x86>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8000f86:	463a      	mov	r2, r7
 8000f88:	4928      	ldr	r1, [pc, #160]	; (800102c <ES_WIFI_ReceiveData+0xd8>)
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f002 f80e 	bl	8002fac <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f90:	4622      	mov	r2, r4
 8000f92:	4621      	mov	r1, r4
 8000f94:	4628      	mov	r0, r5
 8000f96:	f7ff fd8b 	bl	8000ab0 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8000f9a:	4606      	mov	r6, r0
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d13e      	bne.n	800101e <ES_WIFI_ReceiveData+0xca>
      { 
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8000fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fa2:	4923      	ldr	r1, [pc, #140]	; (8001030 <ES_WIFI_ReceiveData+0xdc>)
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f002 f801 	bl	8002fac <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000faa:	4622      	mov	r2, r4
 8000fac:	4621      	mov	r1, r4
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f7ff fd7e 	bl	8000ab0 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	b980      	cbnz	r0, 8000fda <ES_WIFI_ReceiveData+0x86>
        {  
          sprintf((char*)Obj->CmdData,"R0=\r");
 8000fb8:	491e      	ldr	r1, [pc, #120]	; (8001034 <ES_WIFI_ReceiveData+0xe0>)
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f002 f816 	bl	8002fec <strcpy>
    if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f7ff f92d 	bl	8000220 <strlen>
 8000fc6:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8000fca:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8000fce:	b281      	uxth	r1, r0
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4798      	blx	r3
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	dc03      	bgt.n	8000fe0 <ES_WIFI_ReceiveData+0x8c>
    return ES_WIFI_STATUS_IO_ERROR;
 8000fd8:	2604      	movs	r6, #4
        *Receivedlen = 0;
      }
    }
  }
  return ret;
}
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(Obj->fops.IO_Receive((uint8_t *)pdata, 2, Obj->Timeout) == 2) /* Read Prompt */
 8000fe0:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8000fe4:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4640      	mov	r0, r8
 8000fec:	4798      	blx	r3
 8000fee:	2802      	cmp	r0, #2
 8000ff0:	d1f2      	bne.n	8000fd8 <ES_WIFI_ReceiveData+0x84>
        len = Obj->fops.IO_Receive((uint8_t *)pdata, Reqlen + strlen(AT_OK_STRING) , Obj->Timeout);
 8000ff2:	f107 0108 	add.w	r1, r7, #8
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8000ffc:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 8001000:	4640      	mov	r0, r8
 8001002:	4798      	blx	r3
 8001004:	b280      	uxth	r0, r0
        if(strstr((char *)pdata + len -strlen(AT_OK_STRING), AT_OK_STRING))
 8001006:	f1a0 0408 	sub.w	r4, r0, #8
 800100a:	490b      	ldr	r1, [pc, #44]	; (8001038 <ES_WIFI_ReceiveData+0xe4>)
 800100c:	eb08 0004 	add.w	r0, r8, r4
 8001010:	f002 f809 	bl	8003026 <strstr>
 8001014:	2800      	cmp	r0, #0
 8001016:	d0df      	beq.n	8000fd8 <ES_WIFI_ReceiveData+0x84>
          *ReadData = len - strlen(AT_OK_STRING);
 8001018:	f8a9 4000 	strh.w	r4, [r9]
 800101c:	e7dd      	b.n	8000fda <ES_WIFI_ReceiveData+0x86>
        *Receivedlen = 0;
 800101e:	f8a9 a000 	strh.w	sl, [r9]
 8001022:	e7da      	b.n	8000fda <ES_WIFI_ReceiveData+0x86>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
 8001024:	2602      	movs	r6, #2
 8001026:	e7d8      	b.n	8000fda <ES_WIFI_ReceiveData+0x86>
 8001028:	08007a01 	.word	0x08007a01
 800102c:	08007a99 	.word	0x08007a99
 8001030:	08007aa0 	.word	0x08007aa0
 8001034:	08007aa8 	.word	0x08007aa8
 8001038:	08007949 	.word	0x08007949

0800103c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800103c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001040:	b08b      	sub	sp, #44	; 0x2c
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001042:	2400      	movs	r4, #0
 8001044:	4b41      	ldr	r3, [pc, #260]	; (800114c <SPI_WIFI_MspInit+0x110>)
 8001046:	9401      	str	r4, [sp, #4]
 8001048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 800104a:	4e41      	ldr	r6, [pc, #260]	; (8001150 <SPI_WIFI_MspInit+0x114>)
  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 800104c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800115c <SPI_WIFI_MspInit+0x120>
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800105c:	9201      	str	r2, [sp, #4]
 800105e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	9402      	str	r4, [sp, #8]
 8001062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001064:	f042 0202 	orr.w	r2, r2, #2
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
 800106a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106c:	f002 0202 	and.w	r2, r2, #2
 8001070:	9202      	str	r2, [sp, #8]
 8001072:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001074:	9403      	str	r4, [sp, #12]
 8001076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800107c:	631a      	str	r2, [r3, #48]	; 0x30
 800107e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001080:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001084:	9203      	str	r2, [sp, #12]
 8001086:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001088:	9404      	str	r4, [sp, #16]
 800108a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 8001098:	4622      	mov	r2, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 800109c:	4630      	mov	r0, r6
 800109e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010a2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 80010a6:	f001 f915 	bl	80022d4 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80010ae:	a905      	add	r1, sp, #20
 80010b0:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010b2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010b6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80010ba:	f001 f82b 	bl	8002114 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <SPI_WIFI_MspInit+0x118>)
 80010c0:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 80010c4:	a905      	add	r1, sp, #20
 80010c6:	4640      	mov	r0, r8
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010c8:	e9cd 9305 	strd	r9, r3, [sp, #20]

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80010cc:	2702      	movs	r7, #2
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010ce:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 80010d2:	f001 f81f 	bl	8002114 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_Init.Alternate = 0;
  HAL_GPIO_Init( GPIOH, &GPIO_Init );
 80010d6:	a905      	add	r1, sp, #20
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <SPI_WIFI_MspInit+0x11c>)
  GPIO_Init.Alternate = 0;
 80010da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010dc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010e0:	e9cd 7505 	strd	r7, r5, [sp, #20]
  HAL_GPIO_Init( GPIOH, &GPIO_Init );
 80010e4:	f001 f816 	bl	8002114 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOG, GPIO_PIN_11, GPIO_PIN_SET ); 
 80010e8:	462a      	mov	r2, r5
 80010ea:	4640      	mov	r0, r8
 80010ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f0:	f001 f8f0 	bl	80022d4 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_11;
 80010f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 80010f8:	a905      	add	r1, sp, #20
 80010fa:	4640      	mov	r0, r8
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010fc:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001100:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 8001104:	f001 f806 	bl	8002114 <HAL_GPIO_Init>
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF7_SPI3;
 8001108:	2307      	movs	r3, #7
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 800110a:	a905      	add	r1, sp, #20
 800110c:	4630      	mov	r0, r6
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800110e:	e9cd 4507 	strd	r4, r5, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF7_SPI3;
 8001112:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001114:	e9cd 9705 	strd	r9, r7, [sp, #20]
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001118:	f000 fffc 	bl	8002114 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_5;
 800111c:	2320      	movs	r3, #32
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800111e:	e9cd 4507 	strd	r4, r5, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001122:	a905      	add	r1, sp, #20
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001124:	2406      	movs	r4, #6
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001126:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001128:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800112c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 800112e:	f000 fff1 	bl	8002114 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_4;
 8001132:	2310      	movs	r3, #16
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001134:	a905      	add	r1, sp, #20
 8001136:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001138:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800113c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001140:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001142:	f000 ffe7 	bl	8002114 <HAL_GPIO_Init>
}
 8001146:	b00b      	add	sp, #44	; 0x2c
 8001148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020400 	.word	0x40020400
 8001154:	10110000 	.word	0x10110000
 8001158:	40021c00 	.word	0x40021c00
 800115c:	40021800 	.word	0x40021800

08001160 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8001160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8001162:	f000 ff61 	bl	8002028 <HAL_GetTick>
  uint8_t Prompt[6];
  uint8_t count = 0;
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8001166:	4c40      	ldr	r4, [pc, #256]	; (8001268 <SPI_WIFI_Init+0x108>)
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <SPI_WIFI_Init+0x10c>)
 800116a:	6023      	str	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800116c:	4607      	mov	r7, r0
  SPI_WIFI_MspInit(&hspi);
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff64 	bl	800103c <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001174:	2500      	movs	r5, #0
 8001176:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
  hspi.Init.NSS               = SPI_NSS_SOFT;
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supportes up to 20MHz)*/
 800117a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800117e:	e9c4 3501 	strd	r3, r5, [r4, #4]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001182:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001186:	2308      	movs	r3, #8
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  hspi.Init.CRCPolynomial     = 0;
  
  HAL_SPI_Init( &hspi );
 8001188:	4620      	mov	r0, r4
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supportes up to 20MHz)*/
 800118a:	e9c4 2306 	strd	r2, r3, [r4, #24]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800118e:	e9c4 6503 	strd	r6, r5, [r4, #12]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001192:	6165      	str	r5, [r4, #20]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001194:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi.Init.CRCPolynomial     = 0;
 8001198:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  HAL_SPI_Init( &hspi );
 800119c:	f001 fb7f 	bl	800289e <HAL_SPI_Init>
  
  WIFI_RESET_MODULE();
 80011a0:	462a      	mov	r2, r5
 80011a2:	2102      	movs	r1, #2
 80011a4:	4832      	ldr	r0, [pc, #200]	; (8001270 <SPI_WIFI_Init+0x110>)
 80011a6:	f001 f895 	bl	80022d4 <HAL_GPIO_WritePin>
 80011aa:	200a      	movs	r0, #10
 80011ac:	f000 ff42 	bl	8002034 <HAL_Delay>
 80011b0:	2201      	movs	r2, #1
 80011b2:	2102      	movs	r1, #2
 80011b4:	482e      	ldr	r0, [pc, #184]	; (8001270 <SPI_WIFI_Init+0x110>)
 80011b6:	f001 f88d 	bl	80022d4 <HAL_GPIO_WritePin>
 80011ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011be:	f000 ff39 	bl	8002034 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 80011c2:	482c      	ldr	r0, [pc, #176]	; (8001274 <SPI_WIFI_Init+0x114>)
 80011c4:	462a      	mov	r2, r5
 80011c6:	4631      	mov	r1, r6
 80011c8:	f001 f884 	bl	80022d4 <HAL_GPIO_WritePin>
 80011cc:	200a      	movs	r0, #10
 80011ce:	f000 ff31 	bl	8002034 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4827      	ldr	r0, [pc, #156]	; (8001274 <SPI_WIFI_Init+0x114>)
 80011d8:	f001 f876 	bl	80022c8 <HAL_GPIO_ReadPin>
 80011dc:	2801      	cmp	r0, #1
 80011de:	4602      	mov	r2, r0
 80011e0:	d022      	beq.n	8001228 <SPI_WIFI_Init+0xc8>
      WIFI_DISABLE_NSS(); 
      return -1;
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80011e2:	f89d 3000 	ldrb.w	r3, [sp]
 80011e6:	2b15      	cmp	r3, #21
 80011e8:	d12e      	bne.n	8001248 <SPI_WIFI_Init+0xe8>
 80011ea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80011ee:	2b15      	cmp	r3, #21
 80011f0:	d12a      	bne.n	8001248 <SPI_WIFI_Init+0xe8>
 80011f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80011f6:	2b0d      	cmp	r3, #13
 80011f8:	d126      	bne.n	8001248 <SPI_WIFI_Init+0xe8>
 80011fa:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80011fe:	2c0a      	cmp	r4, #10
 8001200:	d122      	bne.n	8001248 <SPI_WIFI_Init+0xe8>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001202:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001206:	2b3e      	cmp	r3, #62	; 0x3e
 8001208:	d11e      	bne.n	8001248 <SPI_WIFI_Init+0xe8>
 800120a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800120e:	2b20      	cmp	r3, #32
 8001210:	d11a      	bne.n	8001248 <SPI_WIFI_Init+0xe8>
  {
    WIFI_DISABLE_NSS(); 
    return -1;
  }    
   
  WIFI_DISABLE_NSS(); 
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	4816      	ldr	r0, [pc, #88]	; (8001274 <SPI_WIFI_Init+0x114>)
 800121a:	f001 f85b 	bl	80022d4 <HAL_GPIO_WritePin>
 800121e:	4620      	mov	r0, r4
 8001220:	f000 ff08 	bl	8002034 <HAL_Delay>
  return 0;
 8001224:	2000      	movs	r0, #0
 8001226:	e01a      	b.n	800125e <SPI_WIFI_Init+0xfe>
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001228:	eb0d 0105 	add.w	r1, sp, r5
 800122c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001230:	4620      	mov	r0, r4
 8001232:	f001 fd20 	bl	8002c76 <HAL_SPI_Receive>
 8001236:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001238:	f000 fef6 	bl	8002028 <HAL_GetTick>
 800123c:	1bc0      	subs	r0, r0, r7
    count += 2;
 800123e:	3502      	adds	r5, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001240:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8001244:	b2ed      	uxtb	r5, r5
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001246:	d30c      	bcc.n	8001262 <SPI_WIFI_Init+0x102>
      WIFI_DISABLE_NSS(); 
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124e:	4809      	ldr	r0, [pc, #36]	; (8001274 <SPI_WIFI_Init+0x114>)
 8001250:	f001 f840 	bl	80022d4 <HAL_GPIO_WritePin>
 8001254:	200a      	movs	r0, #10
 8001256:	f000 feed 	bl	8002034 <HAL_Delay>
      return -1;
 800125a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800125e:	b003      	add	sp, #12
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001262:	2e00      	cmp	r6, #0
 8001264:	d0b5      	beq.n	80011d2 <SPI_WIFI_Init+0x72>
 8001266:	e7ef      	b.n	8001248 <SPI_WIFI_Init+0xe8>
 8001268:	2000032c 	.word	0x2000032c
 800126c:	40003c00 	.word	0x40003c00
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40021800 	.word	0x40021800

08001278 <SPI_WIFI_DeInit>:
  * @brief  Initialize the UART1
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001278:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <SPI_WIFI_DeInit+0xc>)
 800127c:	f001 fb4d 	bl	800291a <HAL_SPI_DeInit>
  return 0;
}
 8001280:	2000      	movs	r0, #0
 8001282:	bd08      	pop	{r3, pc}
 8001284:	2000032c 	.word	0x2000032c

08001288 <SPI_WIFI_ReceiveData>:
  * @brief  Receive wifi Data from SPI
  * @param  Pdata : pointer to data
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	4689      	mov	r9, r1
 800128e:	4616      	mov	r6, r2
 8001290:	4607      	mov	r7, r0
  uint32_t tickstart = HAL_GetTick();
 8001292:	f000 fec9 	bl	8002028 <HAL_GetTick>
  int16_t length = 0;
   
  WIFI_DISABLE_NSS(); 
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 6100 	mov.w	r1, #2048	; 0x800
  uint32_t tickstart = HAL_GetTick();
 800129c:	4680      	mov	r8, r0
  WIFI_DISABLE_NSS(); 
 800129e:	482f      	ldr	r0, [pc, #188]	; (800135c <SPI_WIFI_ReceiveData+0xd4>)
  
  while (!WIFI_IS_CMDDATA_READY())
 80012a0:	4c2e      	ldr	r4, [pc, #184]	; (800135c <SPI_WIFI_ReceiveData+0xd4>)
  WIFI_DISABLE_NSS(); 
 80012a2:	f001 f817 	bl	80022d4 <HAL_GPIO_WritePin>
 80012a6:	200a      	movs	r0, #10
 80012a8:	f000 fec4 	bl	8002034 <HAL_Delay>
  while (!WIFI_IS_CMDDATA_READY())
 80012ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b0:	4620      	mov	r0, r4
 80012b2:	f001 f809 	bl	80022c8 <HAL_GPIO_ReadPin>
 80012b6:	2801      	cmp	r0, #1
 80012b8:	d12e      	bne.n	8001318 <SPI_WIFI_ReceiveData+0x90>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c0:	4826      	ldr	r0, [pc, #152]	; (800135c <SPI_WIFI_ReceiveData+0xd4>)
  
  while (WIFI_IS_CMDDATA_READY())
  {
    if((length < len) || (!len))
    {
      HAL_SPI_Receive(&hspi, pData, 1, timeout) ;
 80012c2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8001360 <SPI_WIFI_ReceiveData+0xd8>
  WIFI_ENABLE_NSS(); 
 80012c6:	f001 f805 	bl	80022d4 <HAL_GPIO_WritePin>
 80012ca:	200a      	movs	r0, #10
 80012cc:	f000 feb2 	bl	8002034 <HAL_Delay>
  while (WIFI_IS_CMDDATA_READY())
 80012d0:	463d      	mov	r5, r7
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	4821      	ldr	r0, [pc, #132]	; (800135c <SPI_WIFI_ReceiveData+0xd4>)
 80012d8:	f000 fff6 	bl	80022c8 <HAL_GPIO_ReadPin>
 80012dc:	1bec      	subs	r4, r5, r7
 80012de:	b2a4      	uxth	r4, r4
 80012e0:	2801      	cmp	r0, #1
 80012e2:	fa0f fa84 	sxth.w	sl, r4
 80012e6:	d104      	bne.n	80012f2 <SPI_WIFI_ReceiveData+0x6a>
    if((length < len) || (!len))
 80012e8:	45ca      	cmp	sl, r9
 80012ea:	db1e      	blt.n	800132a <SPI_WIFI_ReceiveData+0xa2>
 80012ec:	f1b9 0f00 	cmp.w	r9, #0
 80012f0:	d01b      	beq.n	800132a <SPI_WIFI_ReceiveData+0xa2>
    {
      break;
    }
  }
  
  if(*(--pData) == 0x15)
 80012f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80012f6:	2a15      	cmp	r2, #21
 80012f8:	d102      	bne.n	8001300 <SPI_WIFI_ReceiveData+0x78>
  {
    length--;
 80012fa:	3c01      	subs	r4, #1
 80012fc:	fa0f fa84 	sxth.w	sl, r4
  }
  
  WIFI_DISABLE_NSS(); 
 8001300:	4816      	ldr	r0, [pc, #88]	; (800135c <SPI_WIFI_ReceiveData+0xd4>)
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001308:	f000 ffe4 	bl	80022d4 <HAL_GPIO_WritePin>
 800130c:	200a      	movs	r0, #10
 800130e:	f000 fe91 	bl	8002034 <HAL_Delay>
  return length;
}
 8001312:	4650      	mov	r0, sl
 8001314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8001318:	f000 fe86 	bl	8002028 <HAL_GetTick>
 800131c:	eba0 0008 	sub.w	r0, r0, r8
 8001320:	42b0      	cmp	r0, r6
 8001322:	d9c3      	bls.n	80012ac <SPI_WIFI_ReceiveData+0x24>
      return -1;
 8001324:	f04f 3aff 	mov.w	sl, #4294967295
 8001328:	e7f3      	b.n	8001312 <SPI_WIFI_ReceiveData+0x8a>
      HAL_SPI_Receive(&hspi, pData, 1, timeout) ;
 800132a:	4629      	mov	r1, r5
 800132c:	4633      	mov	r3, r6
 800132e:	2201      	movs	r2, #1
 8001330:	4658      	mov	r0, fp
 8001332:	f001 fca0 	bl	8002c76 <HAL_SPI_Receive>
      if((HAL_GetTick() - tickstart ) > timeout)
 8001336:	f000 fe77 	bl	8002028 <HAL_GetTick>
 800133a:	eba0 0008 	sub.w	r0, r0, r8
 800133e:	42b0      	cmp	r0, r6
      pData  += 2;
 8001340:	f105 0502 	add.w	r5, r5, #2
      if((HAL_GetTick() - tickstart ) > timeout)
 8001344:	d9c5      	bls.n	80012d2 <SPI_WIFI_ReceiveData+0x4a>
        WIFI_DISABLE_NSS(); 
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <SPI_WIFI_ReceiveData+0xd4>)
 800134e:	f000 ffc1 	bl	80022d4 <HAL_GPIO_WritePin>
 8001352:	200a      	movs	r0, #10
 8001354:	f000 fe6e 	bl	8002034 <HAL_Delay>
 8001358:	e7e4      	b.n	8001324 <SPI_WIFI_ReceiveData+0x9c>
 800135a:	bf00      	nop
 800135c:	40021800 	.word	0x40021800
 8001360:	2000032c 	.word	0x2000032c

08001364 <SPI_WIFI_SendData>:
  * @brief  Send wifi Data thru SPI
  * @param  Pdata : pointer to data
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001368:	4605      	mov	r5, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800136e:	f000 fe5b 	bl	8002028 <HAL_GetTick>
   
  while (!WIFI_IS_CMDDATA_READY())
 8001372:	4f16      	ldr	r7, [pc, #88]	; (80013cc <SPI_WIFI_SendData+0x68>)
  uint32_t tickstart = HAL_GetTick();
 8001374:	4680      	mov	r8, r0
  while (!WIFI_IS_CMDDATA_READY())
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	4638      	mov	r0, r7
 800137c:	f000 ffa4 	bl	80022c8 <HAL_GPIO_ReadPin>
 8001380:	2801      	cmp	r0, #1
 8001382:	d119      	bne.n	80013b8 <SPI_WIFI_SendData+0x54>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800138a:	4810      	ldr	r0, [pc, #64]	; (80013cc <SPI_WIFI_SendData+0x68>)
 800138c:	f000 ffa2 	bl	80022d4 <HAL_GPIO_WritePin>
 8001390:	200a      	movs	r0, #10
 8001392:	f000 fe4f 	bl	8002034 <HAL_Delay>
  
  if(len & 0x1) 
 8001396:	07e3      	lsls	r3, r4, #31
  {
    pdata[len] = '\n';
 8001398:	bf48      	it	mi
 800139a:	230a      	movmi	r3, #10
  }
  if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , (len+1)/2, timeout) != HAL_OK)
 800139c:	f104 0201 	add.w	r2, r4, #1
    pdata[len] = '\n';
 80013a0:	bf48      	it	mi
 80013a2:	552b      	strbmi	r3, [r5, r4]
  if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , (len+1)/2, timeout) != HAL_OK)
 80013a4:	0852      	lsrs	r2, r2, #1
 80013a6:	4633      	mov	r3, r6
 80013a8:	4629      	mov	r1, r5
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <SPI_WIFI_SendData+0x6c>)
 80013ac:	f001 facb 	bl	8002946 <HAL_SPI_Transmit>
 80013b0:	b940      	cbnz	r0, 80013c4 <SPI_WIFI_SendData+0x60>
  {
    return -1;
  }
  pdata[len] = 0;  
 80013b2:	5528      	strb	r0, [r5, r4]
  return len;
 80013b4:	b220      	sxth	r0, r4
 80013b6:	e007      	b.n	80013c8 <SPI_WIFI_SendData+0x64>
    if((HAL_GetTick() - tickstart ) > timeout)
 80013b8:	f000 fe36 	bl	8002028 <HAL_GetTick>
 80013bc:	eba0 0008 	sub.w	r0, r0, r8
 80013c0:	42b0      	cmp	r0, r6
 80013c2:	d9d8      	bls.n	8001376 <SPI_WIFI_SendData+0x12>
      return -1;
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013cc:	40021800 	.word	0x40021800
 80013d0:	2000032c 	.word	0x2000032c

080013d4 <SPI_WIFI_Delay>:
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80013d4:	f000 be2e 	b.w	8002034 <HAL_Delay>

080013d8 <WIFI_Init>:
  * @brief  Initialiaze the LL part of the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80013d8:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <WIFI_Init+0x30>)
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <WIFI_Init+0x34>)
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <WIFI_Init+0x38>)
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <WIFI_Init+0x3c>)
 80013e6:	490c      	ldr	r1, [pc, #48]	; (8001418 <WIFI_Init+0x40>)
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <WIFI_Init+0x44>)
 80013ea:	f7ff fbf1 	bl	8000bd0 <ES_WIFI_RegisterBusIO>
 80013ee:	b940      	cbnz	r0, 8001402 <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80013f0:	480a      	ldr	r0, [pc, #40]	; (800141c <WIFI_Init+0x44>)
 80013f2:	f7ff fb8d 	bl	8000b10 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80013f6:	3000      	adds	r0, #0
 80013f8:	bf18      	it	ne
 80013fa:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80013fc:	b003      	add	sp, #12
 80013fe:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	e7fa      	b.n	80013fc <WIFI_Init+0x24>
 8001406:	bf00      	nop
 8001408:	08001289 	.word	0x08001289
 800140c:	08001365 	.word	0x08001365
 8001410:	08001279 	.word	0x08001279
 8001414:	080013d5 	.word	0x080013d5
 8001418:	08001161 	.word	0x08001161
 800141c:	20000384 	.word	0x20000384

08001420 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8001420:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8001422:	4613      	mov	r3, r2
 8001424:	460a      	mov	r2, r1
 8001426:	4601      	mov	r1, r0
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <WIFI_Connect+0x24>)
 800142a:	f7ff fbe5 	bl	8000bf8 <ES_WIFI_Connect>
 800142e:	b930      	cbnz	r0, 800143e <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <WIFI_Connect+0x24>)
 8001432:	f7ff fc21 	bl	8000c78 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8001436:	3000      	adds	r0, #0
 8001438:	bf18      	it	ne
 800143a:	2001      	movne	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 800143c:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800143e:	2001      	movs	r0, #1
 8001440:	e7fc      	b.n	800143c <WIFI_Connect+0x1c>
 8001442:	bf00      	nop
 8001444:	20000384 	.word	0x20000384

08001448 <WIFI_GetMAC_Address>:
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8001448:	4601      	mov	r1, r0
{
 800144a:	b508      	push	{r3, lr}
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <WIFI_GetMAC_Address+0x14>)
 800144e:	f7ff fc81 	bl	8000d54 <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001452:	3000      	adds	r0, #0
 8001454:	bf18      	it	ne
 8001456:	2001      	movne	r0, #1
 8001458:	bd08      	pop	{r3, pc}
 800145a:	bf00      	nop
 800145c:	20000384 	.word	0x20000384

08001460 <WIFI_GetIP_Address>:
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.NetSettings.IsConnected)
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <WIFI_GetIP_Address+0x18>)
 8001462:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 8001466:	b122      	cbz	r2, 8001472 <WIFI_GetIP_Address+0x12>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001468:	f8d3 30cd 	ldr.w	r3, [r3, #205]	; 0xcd
 800146c:	6003      	str	r3, [r0, #0]
    ret = WIFI_STATUS_OK;
 800146e:	2000      	movs	r0, #0
 8001470:	4770      	bx	lr
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8001472:	2001      	movs	r0, #1
  }
  return ret;
}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000384 	.word	0x20000384

0800147c <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, char* location, uint16_t port, uint16_t local_port)
{
 800147c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 800147e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001482:	f8ad 2002 	strh.w	r2, [sp, #2]
  conn.LocalPort = local_port;
 8001486:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800148a:	f8ad 2004 	strh.w	r2, [sp, #4]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800148e:	3100      	adds	r1, #0
  conn.RemoteIP[0] = location[0];
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	f88d 2006 	strb.w	r2, [sp, #6]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001496:	bf18      	it	ne
 8001498:	2101      	movne	r1, #1
  conn.RemoteIP[1] = location[1];
 800149a:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 800149c:	f88d 0001 	strb.w	r0, [sp, #1]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80014a0:	f88d 1000 	strb.w	r1, [sp]
  conn.RemoteIP[1] = location[1];
 80014a4:	f88d 2007 	strb.w	r2, [sp, #7]
  conn.RemoteIP[2] = location[2];
  conn.RemoteIP[3] = location[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80014a8:	4669      	mov	r1, sp
  conn.RemoteIP[2] = location[2];
 80014aa:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = location[3];
 80014ae:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = location[2];
 80014b0:	f88d 2008 	strb.w	r2, [sp, #8]
  conn.RemoteIP[3] = location[3];
 80014b4:	f88d 3009 	strb.w	r3, [sp, #9]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80014b8:	f7ff fc6a 	bl	8000d90 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 80014bc:	3000      	adds	r0, #0
 80014be:	bf18      	it	ne
 80014c0:	2001      	movne	r0, #1
 80014c2:	b005      	add	sp, #20
 80014c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014c8:	20000384 	.word	0x20000384

080014cc <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen)
{
 80014cc:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, 10000) == ES_WIFI_STATUS_OK)
 80014ce:	f242 7410 	movw	r4, #10000	; 0x2710
 80014d2:	e9cd 3400 	strd	r3, r4, [sp]
 80014d6:	4613      	mov	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	4601      	mov	r1, r0
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <WIFI_SendData+0x20>)
 80014de:	f7ff fcbb 	bl	8000e58 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 80014e2:	3000      	adds	r0, #0
 80014e4:	bf18      	it	ne
 80014e6:	2001      	movne	r0, #1
 80014e8:	b002      	add	sp, #8
 80014ea:	bd10      	pop	{r4, pc}
 80014ec:	20000384 	.word	0x20000384

080014f0 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen)
{
 80014f0:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, 10000) == ES_WIFI_STATUS_OK)
 80014f2:	f242 7410 	movw	r4, #10000	; 0x2710
 80014f6:	e9cd 3400 	strd	r3, r4, [sp]
 80014fa:	4613      	mov	r3, r2
 80014fc:	460a      	mov	r2, r1
 80014fe:	4601      	mov	r1, r0
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <WIFI_ReceiveData+0x20>)
 8001502:	f7ff fd27 	bl	8000f54 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8001506:	3000      	adds	r0, #0
 8001508:	bf18      	it	ne
 800150a:	2001      	movne	r0, #1
 800150c:	b002      	add	sp, #8
 800150e:	bd10      	pop	{r4, pc}
 8001510:	20000384 	.word	0x20000384

08001514 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001514:	b500      	push	{lr}
 8001516:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8001518:	b9e0      	cbnz	r0, 8001554 <BSP_LED_Init+0x40>
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <BSP_LED_Init+0x60>)
 800151c:	9001      	str	r0, [sp, #4]
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	f042 0204 	orr.w	r2, r2, #4
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <BSP_LED_Init+0x64>)
 8001532:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001536:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800153a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <BSP_LED_Init+0x68>)
 8001544:	a903      	add	r1, sp, #12
 8001546:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800154a:	f000 fde3 	bl	8002114 <HAL_GPIO_Init>
}
 800154e:	b009      	add	sp, #36	; 0x24
 8001550:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 8001554:	2801      	cmp	r0, #1
 8001556:	d1eb      	bne.n	8001530 <BSP_LED_Init+0x1c>
 8001558:	2300      	movs	r3, #0
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <BSP_LED_Init+0x60>)
 800155e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001560:	f042 0210 	orr.w	r2, r2, #16
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	9b02      	ldr	r3, [sp, #8]
 8001570:	e7de      	b.n	8001530 <BSP_LED_Init+0x1c>
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	08003918 	.word	0x08003918
 800157c:	20000010 	.word	0x20000010

08001580 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <BSP_LED_On+0x14>)
 8001582:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <BSP_LED_On+0x18>)
 8001588:	2201      	movs	r2, #1
 800158a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800158e:	f000 bea1 	b.w	80022d4 <HAL_GPIO_WritePin>
 8001592:	bf00      	nop
 8001594:	08003918 	.word	0x08003918
 8001598:	20000010 	.word	0x20000010

0800159c <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 800159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a0:	b0a0      	sub	sp, #128	; 0x80
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015a2:	2400      	movs	r4, #0
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <LCD_IO_Init+0x118>)
 80015a6:	9400      	str	r4, [sp, #0]
 80015a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80015aa:	4843      	ldr	r0, [pc, #268]	; (80016b8 <LCD_IO_Init+0x11c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
 80015b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015b4:	f002 0201 	and.w	r2, r2, #1
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	9401      	str	r4, [sp, #4]
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	f042 0208 	orr.w	r2, r2, #8
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
 80015c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c8:	f002 0208 	and.w	r2, r2, #8
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d0:	9402      	str	r4, [sp, #8]
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	f042 0210 	orr.w	r2, r2, #16
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
 80015da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015dc:	f002 0210 	and.w	r2, r2, #16
 80015e0:	9202      	str	r2, [sp, #8]
 80015e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e4:	9403      	str	r4, [sp, #12]
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	f042 0220 	orr.w	r2, r2, #32
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
 80015ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f0:	f002 0220 	and.w	r2, r2, #32
 80015f4:	9203      	str	r2, [sp, #12]
 80015f6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f8:	9404      	str	r4, [sp, #16]
 80015fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001608:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 800160a:	ad20      	add	r5, sp, #128	; 0x80
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800160c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160e:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001610:	2602      	movs	r6, #2
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8001612:	f04f 0803 	mov.w	r8, #3
 8001616:	230c      	movs	r3, #12
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001618:	e9cd 670d 	strd	r6, r7, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800161c:	e9cd 830f 	strd	r8, r3, [sp, #60]	; 0x3c
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8001620:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001624:	f845 3d50 	str.w	r3, [r5, #-80]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001628:	4629      	mov	r1, r5
 800162a:	f000 fd73 	bl	8002114 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 800162e:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001632:	4629      	mov	r1, r5
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <LCD_IO_Init+0x120>)
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8001636:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001638:	f000 fd6c 	bl	8002114 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800163c:	f24f 033f 	movw	r3, #61503	; 0xf03f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001640:	4629      	mov	r1, r5
 8001642:	481f      	ldr	r0, [pc, #124]	; (80016c0 <LCD_IO_Init+0x124>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001644:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001646:	f000 fd65 	bl	8002114 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800164a:	f240 433f 	movw	r3, #1087	; 0x43f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800164e:	4629      	mov	r1, r5
 8001650:	481c      	ldr	r0, [pc, #112]	; (80016c4 <LCD_IO_Init+0x128>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001652:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001654:	f000 fd5e 	bl	8002114 <HAL_GPIO_Init>
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8001658:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800165c:	930c      	str	r3, [sp, #48]	; 0x30
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 800165e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001662:	930d      	str	r3, [sp, #52]	; 0x34
  sram_timing.DataSetupTime         = 4;
 8001664:	2304      	movs	r3, #4
  sram_timing.BusTurnAroundDuration = 1;
 8001666:	e9cd 3707 	strd	r3, r7, [sp, #28]
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800166a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800166e:	2310      	movs	r3, #16
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001670:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8001678:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 800167c:	aa05      	add	r2, sp, #20
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 800167e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001682:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8001686:	4611      	mov	r1, r2
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8001688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 800168c:	4628      	mov	r0, r5
  sram_timing.AddressHoldTime       = 1;
 800168e:	e9cd 8705 	strd	r8, r7, [sp, #20]
  sram_timing.DataLatency           = 2;
 8001692:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8001696:	940b      	str	r4, [sp, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8001698:	9410      	str	r4, [sp, #64]	; 0x40
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 800169a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 800169e:	9415      	str	r4, [sp, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80016a0:	941a      	str	r4, [sp, #104]	; 0x68
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80016a2:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80016a6:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 80016a8:	f001 fb7d 	bl	8002da6 <HAL_SRAM_Init>
  FMC_BANK3_Init();
}
 80016ac:	b020      	add	sp, #128	; 0x80
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800

080016c8 <LCD_IO_WriteData>:
  FMC_BANK3->RAM = Data;
 80016c8:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80016cc:	8058      	strh	r0, [r3, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016ce:	f3bf 8f4f 	dsb	sy
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
}
 80016d2:	4770      	bx	lr

080016d4 <LCD_IO_WriteReg>:
  FMC_BANK3->REG = Reg;
 80016d4:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80016d8:	8018      	strh	r0, [r3, #0]
 80016da:	f3bf 8f4f 	dsb	sy
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
}
 80016de:	4770      	bx	lr

080016e0 <LCD_IO_ReadData>:
  return FMC_BANK3->RAM;
 80016e0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80016e4:	8858      	ldrh	r0, [r3, #2]
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
  return FMC_BANK3_ReadData();
}
 80016e6:	4770      	bx	lr

080016e8 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80016e8:	f000 bca4 	b.w	8002034 <HAL_Delay>

080016ec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80016ec:	b508      	push	{r3, lr}
  return(LcdDrv->GetLcdPixelWidth());
 80016ee:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <BSP_LCD_GetXSize+0xc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	4798      	blx	r3
}
 80016f6:	bd08      	pop	{r3, pc}
 80016f8:	20000118 	.word	0x20000118

080016fc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80016fc:	b508      	push	{r3, lr}
  return(LcdDrv->GetLcdPixelHeight());
 80016fe:	4b02      	ldr	r3, [pc, #8]	; (8001708 <BSP_LCD_GetYSize+0xc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	4798      	blx	r3
}
 8001706:	bd08      	pop	{r3, pc}
 8001708:	20000118 	.word	0x20000118

0800170c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
  DrawProp.TextColor = Color;
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <BSP_LCD_SetTextColor+0x8>)
 800170e:	6018      	str	r0, [r3, #0]
}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000aec 	.word	0x20000aec

08001718 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
  DrawProp.BackColor = Color;
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <BSP_LCD_SetBackColor+0x8>)
 800171a:	6058      	str	r0, [r3, #4]
}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000aec 	.word	0x20000aec

08001724 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp.pFont = fonts;
 8001724:	4b01      	ldr	r3, [pc, #4]	; (800172c <BSP_LCD_SetFont+0x8>)
 8001726:	6098      	str	r0, [r3, #8]
}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000aec 	.word	0x20000aec

08001730 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
  if(LcdDrv->WritePixel != NULL)
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <BSP_LCD_DrawPixel+0xc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	b103      	cbz	r3, 800173a <BSP_LCD_DrawPixel+0xa>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8001738:	4718      	bx	r3
  }
}
 800173a:	4770      	bx	lr
 800173c:	20000118 	.word	0x20000118

08001740 <BSP_LCD_DisplayChar>:
{
 8001740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <BSP_LCD_DisplayChar+0xa0>)
{
 8001746:	b085      	sub	sp, #20
 8001748:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800174c:	6899      	ldr	r1, [r3, #8]
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800174e:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001752:	f8b1 a006 	ldrh.w	sl, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001756:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800175a:	f10b 0607 	add.w	r6, fp, #7
 800175e:	680a      	ldr	r2, [r1, #0]
 8001760:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001762:	fb0a f505 	mul.w	r5, sl, r5
  uint32_t line;
  
  height = DrawProp.pFont->Height;
  width  = DrawProp.pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8001766:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 800176a:	fb06 2505 	mla	r5, r6, r5, r2
      break;
    }  
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 800176e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8001772:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 8001776:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 800177a:	9303      	str	r3, [sp, #12]
 800177c:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 800177e:	45d0      	cmp	r8, sl
 8001780:	eb03 0908 	add.w	r9, r3, r8
 8001784:	fa1f f989 	uxth.w	r9, r9
 8001788:	d302      	bcc.n	8001790 <BSP_LCD_DisplayChar+0x50>
}
 800178a:	b005      	add	sp, #20
 800178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001790:	2e01      	cmp	r6, #1
 8001792:	782c      	ldrb	r4, [r5, #0]
 8001794:	d004      	beq.n	80017a0 <BSP_LCD_DisplayChar+0x60>
 8001796:	2e02      	cmp	r6, #2
 8001798:	d109      	bne.n	80017ae <BSP_LCD_DisplayChar+0x6e>
      line =  (pchar[0]<< 8) | pchar[1];
 800179a:	882c      	ldrh	r4, [r5, #0]
 800179c:	ba64      	rev16	r4, r4
 800179e:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 80017a0:	2700      	movs	r7, #0
 80017a2:	45bb      	cmp	fp, r7
 80017a4:	d80a      	bhi.n	80017bc <BSP_LCD_DisplayChar+0x7c>
  for(i = 0; i < height; i++)
 80017a6:	f108 0801 	add.w	r8, r8, #1
 80017aa:	4435      	add	r5, r6
 80017ac:	e7e6      	b.n	800177c <BSP_LCD_DisplayChar+0x3c>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017ae:	786a      	ldrb	r2, [r5, #1]
 80017b0:	0424      	lsls	r4, r4, #16
 80017b2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80017b6:	78aa      	ldrb	r2, [r5, #2]
 80017b8:	4314      	orrs	r4, r2
 80017ba:	e7f1      	b.n	80017a0 <BSP_LCD_DisplayChar+0x60>
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 80017c0:	9b03      	ldr	r3, [sp, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	1bd9      	subs	r1, r3, r7
 80017c6:	408a      	lsls	r2, r1
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <BSP_LCD_DisplayChar+0xa0>)
      if(line & (1 << (width- j + offset- 1))) 
 80017ca:	4222      	tst	r2, r4
 80017cc:	b280      	uxth	r0, r0
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80017ce:	bf14      	ite	ne
 80017d0:	881a      	ldrhne	r2, [r3, #0]
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80017d2:	889a      	ldrheq	r2, [r3, #4]
 80017d4:	4649      	mov	r1, r9
 80017d6:	f7ff ffab 	bl	8001730 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80017da:	3701      	adds	r7, #1
 80017dc:	e7e1      	b.n	80017a2 <BSP_LCD_DisplayChar+0x62>
 80017de:	bf00      	nop
 80017e0:	20000aec 	.word	0x20000aec

080017e4 <BSP_LCD_DisplayStringAt>:
{
 80017e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017e8:	4604      	mov	r4, r0
 80017ea:	460e      	mov	r6, r1
 80017ec:	4615      	mov	r5, r2
 80017ee:	4699      	mov	r9, r3
 80017f0:	eba2 0805 	sub.w	r8, r2, r5
  while (*ptr++) size ++ ;
 80017f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f9      	bne.n	80017f0 <BSP_LCD_DisplayStringAt+0xc>
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80017fc:	4f1e      	ldr	r7, [pc, #120]	; (8001878 <BSP_LCD_DisplayStringAt+0x94>)
 80017fe:	f7ff ff75 	bl	80016ec <BSP_LCD_GetXSize>
 8001802:	68bb      	ldr	r3, [r7, #8]
  switch (Mode)
 8001804:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001808:	889a      	ldrh	r2, [r3, #4]
 800180a:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 800180e:	d01b      	beq.n	8001848 <BSP_LCD_DisplayStringAt+0x64>
 8001810:	f1b9 0f02 	cmp.w	r9, #2
 8001814:	d01f      	beq.n	8001856 <BSP_LCD_DisplayStringAt+0x72>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001816:	b223      	sxth	r3, r4
    refcolumn = 1;
 8001818:	2b00      	cmp	r3, #0
 800181a:	bfd8      	it	le
 800181c:	2401      	movle	r4, #1
 800181e:	46a9      	mov	r9, r5
 8001820:	eba9 0805 	sub.w	r8, r9, r5
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001824:	f819 ab01 	ldrb.w	sl, [r9], #1
 8001828:	f7ff ff60 	bl	80016ec <BSP_LCD_GetXSize>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	889b      	ldrh	r3, [r3, #4]
 8001830:	fa1f f888 	uxth.w	r8, r8
 8001834:	fb03 0018 	mls	r0, r3, r8, r0
 8001838:	b280      	uxth	r0, r0
 800183a:	4298      	cmp	r0, r3
 800183c:	d302      	bcc.n	8001844 <BSP_LCD_DisplayStringAt+0x60>
 800183e:	f1ba 0f00 	cmp.w	sl, #0
 8001842:	d10e      	bne.n	8001862 <BSP_LCD_DisplayStringAt+0x7e>
}
 8001844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001848:	eba0 0008 	sub.w	r0, r0, r8
 800184c:	4350      	muls	r0, r2
 800184e:	eb04 0450 	add.w	r4, r4, r0, lsr #1
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001852:	b2a4      	uxth	r4, r4
      break;
 8001854:	e7df      	b.n	8001816 <BSP_LCD_DisplayStringAt+0x32>
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001856:	eba0 0008 	sub.w	r0, r0, r8
 800185a:	fb10 f002 	smulbb	r0, r0, r2
 800185e:	1b04      	subs	r4, r0, r4
 8001860:	e7f7      	b.n	8001852 <BSP_LCD_DisplayStringAt+0x6e>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001862:	4620      	mov	r0, r4
 8001864:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 8001868:	4631      	mov	r1, r6
 800186a:	f7ff ff69 	bl	8001740 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp.pFont->Width;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	441c      	add	r4, r3
 8001874:	b2a4      	uxth	r4, r4
 8001876:	e7d3      	b.n	8001820 <BSP_LCD_DisplayStringAt+0x3c>
 8001878:	20000aec 	.word	0x20000aec

0800187c <BSP_LCD_DisplayStringAtLine>:
  return DrawProp.pFont;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <BSP_LCD_DisplayStringAtLine+0x18>)
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	88db      	ldrh	r3, [r3, #6]
 8001882:	fb13 f000 	smulbb	r0, r3, r0
 8001886:	460a      	mov	r2, r1
 8001888:	2303      	movs	r3, #3
 800188a:	b281      	uxth	r1, r0
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff bfa9 	b.w	80017e4 <BSP_LCD_DisplayStringAt>
 8001892:	bf00      	nop
 8001894:	20000aec 	.word	0x20000aec

08001898 <BSP_LCD_DrawHLine>:
  if(LcdDrv->DrawHLine != NULL)
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <BSP_LCD_DrawHLine+0x44>)
 800189a:	681b      	ldr	r3, [r3, #0]
{
 800189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(LcdDrv->DrawHLine != NULL)
 80018a0:	6a1c      	ldr	r4, [r3, #32]
{
 80018a2:	4605      	mov	r5, r0
 80018a4:	460e      	mov	r6, r1
 80018a6:	4617      	mov	r7, r2
  if(LcdDrv->DrawHLine != NULL)
 80018a8:	b974      	cbnz	r4, 80018c8 <BSP_LCD_DrawHLine+0x30>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80018aa:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80018e0 <BSP_LCD_DrawHLine+0x48>
    for(index = 0; index < Length; index++)
 80018ae:	42bc      	cmp	r4, r7
 80018b0:	d301      	bcc.n	80018b6 <BSP_LCD_DrawHLine+0x1e>
}
 80018b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80018b6:	1928      	adds	r0, r5, r4
 80018b8:	f8b8 2000 	ldrh.w	r2, [r8]
 80018bc:	4631      	mov	r1, r6
 80018be:	b280      	uxth	r0, r0
 80018c0:	f7ff ff36 	bl	8001730 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80018c4:	3401      	adds	r4, #1
 80018c6:	e7f2      	b.n	80018ae <BSP_LCD_DrawHLine+0x16>
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80018c8:	4613      	mov	r3, r2
 80018ca:	460a      	mov	r2, r1
 80018cc:	4601      	mov	r1, r0
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <BSP_LCD_DrawHLine+0x48>)
 80018d0:	46a4      	mov	ip, r4
 80018d2:	8800      	ldrh	r0, [r0, #0]
}
 80018d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80018d8:	4760      	bx	ip
 80018da:	bf00      	nop
 80018dc:	20000118 	.word	0x20000118
 80018e0:	20000aec 	.word	0x20000aec

080018e4 <BSP_LCD_Clear>:
{ 
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp.TextColor; 
 80018e6:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <BSP_LCD_Clear+0x2c>)
 80018e8:	6826      	ldr	r6, [r4, #0]
  DrawProp.TextColor = Color;
 80018ea:	6020      	str	r0, [r4, #0]
  y_size =  BSP_LCD_GetYSize();
 80018ec:	f7ff ff06 	bl	80016fc <BSP_LCD_GetYSize>
  for(counter = 0; counter < y_size; counter++)
 80018f0:	2500      	movs	r5, #0
  y_size =  BSP_LCD_GetYSize();
 80018f2:	4607      	mov	r7, r0
  for(counter = 0; counter < y_size; counter++)
 80018f4:	42bd      	cmp	r5, r7
 80018f6:	d102      	bne.n	80018fe <BSP_LCD_Clear+0x1a>
  DrawProp.TextColor = Color;
 80018f8:	b2b6      	uxth	r6, r6
 80018fa:	6026      	str	r6, [r4, #0]
}
 80018fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80018fe:	f7ff fef5 	bl	80016ec <BSP_LCD_GetXSize>
 8001902:	b2a9      	uxth	r1, r5
 8001904:	b282      	uxth	r2, r0
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ffc6 	bl	8001898 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 800190c:	3501      	adds	r5, #1
 800190e:	e7f1      	b.n	80018f4 <BSP_LCD_Clear+0x10>
 8001910:	20000aec 	.word	0x20000aec

08001914 <BSP_LCD_FillRect>:
{
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	4617      	mov	r7, r2
  DrawProp.TextColor = Color;
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <BSP_LCD_FillRect+0x28>)
 800191a:	1c5c      	adds	r4, r3, #1
{
 800191c:	4606      	mov	r6, r0
 800191e:	440c      	add	r4, r1
  DrawProp.TextColor = Color;
 8001920:	8810      	ldrh	r0, [r2, #0]
 8001922:	6010      	str	r0, [r2, #0]
 8001924:	b2a4      	uxth	r4, r4
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8001926:	1c4d      	adds	r5, r1, #1
 8001928:	b2ad      	uxth	r5, r5
 800192a:	463a      	mov	r2, r7
 800192c:	4630      	mov	r0, r6
 800192e:	f7ff ffb3 	bl	8001898 <BSP_LCD_DrawHLine>
  while(Height--);
 8001932:	42a5      	cmp	r5, r4
 8001934:	4629      	mov	r1, r5
 8001936:	d1f6      	bne.n	8001926 <BSP_LCD_FillRect+0x12>
}
 8001938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000aec 	.word	0x20000aec

08001940 <BSP_LCD_DisplayOn>:
  LcdDrv->DisplayOn();
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <BSP_LCD_DisplayOn+0x8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4718      	bx	r3
 8001948:	20000118 	.word	0x20000118

0800194c <BSP_LCD_MspInit>:
{
 800194c:	b570      	push	{r4, r5, r6, lr}
 800194e:	b088      	sub	sp, #32
  LCD_RESET_GPIO_CLK_ENABLE();
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <BSP_LCD_MspInit+0x80>)
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8001952:	4e1f      	ldr	r6, [pc, #124]	; (80019d0 <BSP_LCD_MspInit+0x84>)
  LCD_RESET_GPIO_CLK_ENABLE();
 8001954:	2400      	movs	r4, #0
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195a:	f042 0202 	orr.w	r2, r2, #2
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
 8001960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001962:	f002 0202 	and.w	r2, r2, #2
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	9a00      	ldr	r2, [sp, #0]
  LCD_TE_GPIO_CLK_ENABLE();
 800196a:	9401      	str	r4, [sp, #4]
 800196c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196e:	f042 0202 	orr.w	r2, r2, #2
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
 8001974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001976:	f002 0202 	and.w	r2, r2, #2
 800197a:	9201      	str	r2, [sp, #4]
 800197c:	9a01      	ldr	r2, [sp, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800197e:	9402      	str	r4, [sp, #8]
 8001980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001982:	f042 0210 	orr.w	r2, r2, #16
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800198a:	9405      	str	r4, [sp, #20]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800199a:	2501      	movs	r5, #1
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800199c:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 800199e:	a903      	add	r1, sp, #12
 80019a0:	4630      	mov	r0, r6
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80019a2:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80019a4:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80019a6:	f000 fbb5 	bl	8002114 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80019aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80019ae:	a903      	add	r1, sp, #12
 80019b0:	4630      	mov	r0, r6
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80019b2:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80019b6:	f000 fbad 	bl	8002114 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80019ba:	2320      	movs	r3, #32
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80019bc:	a903      	add	r1, sp, #12
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <BSP_LCD_MspInit+0x88>)
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80019c0:	e9cd 3503 	strd	r3, r5, [sp, #12]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80019c4:	f000 fba6 	bl	8002114 <HAL_GPIO_Init>
}
 80019c8:	b008      	add	sp, #32
 80019ca:	bd70      	pop	{r4, r5, r6, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40021000 	.word	0x40021000

080019d8 <BSP_LCD_InitEx>:
{ 
 80019d8:	b570      	push	{r4, r5, r6, lr}
  DrawProp.BackColor = 0xFFFF;
 80019da:	4c25      	ldr	r4, [pc, #148]	; (8001a70 <BSP_LCD_InitEx+0x98>)
 80019dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  DrawProp.TextColor = 0x0000;
 80019e0:	2600      	movs	r6, #0
  DrawProp.BackColor = 0xFFFF;
 80019e2:	6063      	str	r3, [r4, #4]
  DrawProp.pFont     = &Font24;
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <BSP_LCD_InitEx+0x9c>)
 80019e6:	60a3      	str	r3, [r4, #8]
{ 
 80019e8:	4605      	mov	r5, r0
  DrawProp.TextColor = 0x0000;
 80019ea:	6026      	str	r6, [r4, #0]
  BSP_LCD_MspInit();
 80019ec:	f7ff ffae 	bl	800194c <BSP_LCD_MspInit>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2120      	movs	r1, #32
 80019f4:	4820      	ldr	r0, [pc, #128]	; (8001a78 <BSP_LCD_InitEx+0xa0>)
 80019f6:	f000 fc6d 	bl	80022d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80019fa:	4632      	mov	r2, r6
 80019fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a00:	481e      	ldr	r0, [pc, #120]	; (8001a7c <BSP_LCD_InitEx+0xa4>)
 8001a02:	f000 fc67 	bl	80022d4 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8001a06:	2005      	movs	r0, #5
 8001a08:	f000 fb14 	bl	8002034 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a12:	481a      	ldr	r0, [pc, #104]	; (8001a7c <BSP_LCD_InitEx+0xa4>)
 8001a14:	f000 fc5e 	bl	80022d4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8001a18:	200a      	movs	r0, #10
 8001a1a:	f000 fb0b 	bl	8002034 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8001a1e:	4632      	mov	r2, r6
 8001a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a24:	4815      	ldr	r0, [pc, #84]	; (8001a7c <BSP_LCD_InitEx+0xa4>)
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8001a26:	4e16      	ldr	r6, [pc, #88]	; (8001a80 <BSP_LCD_InitEx+0xa8>)
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8001a28:	f000 fc54 	bl	80022d4 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8001a2c:	2014      	movs	r0, #20
 8001a2e:	f000 fb01 	bl	8002034 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a38:	4810      	ldr	r0, [pc, #64]	; (8001a7c <BSP_LCD_InitEx+0xa4>)
 8001a3a:	f000 fc4b 	bl	80022d4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8001a3e:	200a      	movs	r0, #10
 8001a40:	f000 faf8 	bl	8002034 <HAL_Delay>
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8001a44:	6873      	ldr	r3, [r6, #4]
 8001a46:	4798      	blx	r3
 8001a48:	2885      	cmp	r0, #133	; 0x85
 8001a4a:	d10e      	bne.n	8001a6a <BSP_LCD_InitEx+0x92>
    LcdDrv = &ST7789H2_drv;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <BSP_LCD_InitEx+0xac>)
 8001a4e:	601e      	str	r6, [r3, #0]
    LcdDrv->Init();
 8001a50:	6833      	ldr	r3, [r6, #0]
 8001a52:	4798      	blx	r3
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001a54:	b91d      	cbnz	r5, 8001a5e <BSP_LCD_InitEx+0x86>
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8001a56:	4628      	mov	r0, r5
 8001a58:	f000 f87a 	bl	8001b50 <ST7789H2_SetOrientation>
 8001a5c:	e001      	b.n	8001a62 <BSP_LCD_InitEx+0x8a>
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8001a5e:	2d02      	cmp	r5, #2
 8001a60:	d0f9      	beq.n	8001a56 <BSP_LCD_InitEx+0x7e>
  DrawProp.pFont = fonts;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <BSP_LCD_InitEx+0xb0>)
 8001a64:	60a3      	str	r3, [r4, #8]
    ret = LCD_OK;   
 8001a66:	2000      	movs	r0, #0
}
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = LCD_ERROR;
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	e7fc      	b.n	8001a68 <BSP_LCD_InitEx+0x90>
 8001a6e:	bf00      	nop
 8001a70:	20000aec 	.word	0x20000aec
 8001a74:	20000030 	.word	0x20000030
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	20000058 	.word	0x20000058
 8001a84:	20000118 	.word	0x20000118
 8001a88:	20000028 	.word	0x20000028

08001a8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	490f      	ldr	r1, [pc, #60]	; (8001acc <SystemInit+0x40>)
 8001a8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <SystemInit+0x44>)
 8001a9c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a9e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001aa6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <SystemInit+0x48>)
 8001ab6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001abe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ac0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ac6:	608b      	str	r3, [r1, #8]
#endif
}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	24003010 	.word	0x24003010

08001ad8 <ST7789H2_GetLcdPixelWidth>:
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
}
 8001ad8:	20f0      	movs	r0, #240	; 0xf0
 8001ada:	4770      	bx	lr

08001adc <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001adc:	b530      	push	{r4, r5, lr}
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8001ade:	28ef      	cmp	r0, #239	; 0xef
 8001ae0:	4c10      	ldr	r4, [pc, #64]	; (8001b24 <ST7789H2_SetDisplayWindow+0x48>)
  {
    WindowsXstart = Xpos;
  }
  else
  {
    WindowsXstart = 0;
 8001ae2:	bf8a      	itet	hi
 8001ae4:	2500      	movhi	r5, #0
    WindowsXstart = Xpos;
 8001ae6:	8020      	strhls	r0, [r4, #0]
    WindowsXstart = 0;
 8001ae8:	8025      	strhhi	r5, [r4, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8001aea:	29ef      	cmp	r1, #239	; 0xef
  {
    WindowsYstart = Ypos;
  }
  else
  {
    WindowsYstart = 0;
 8001aec:	bf8a      	itet	hi
 8001aee:	2500      	movhi	r5, #0
    WindowsYstart = Ypos;
 8001af0:	8061      	strhls	r1, [r4, #2]
    WindowsYstart = 0;
 8001af2:	8065      	strhhi	r5, [r4, #2]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8001af4:	1814      	adds	r4, r2, r0
 8001af6:	2cf0      	cmp	r4, #240	; 0xf0
 8001af8:	4c0b      	ldr	r4, [pc, #44]	; (8001b28 <ST7789H2_SetDisplayWindow+0x4c>)
  {
    WindowsXend = Width  + Xpos - 1;
 8001afa:	bfd5      	itete	le
 8001afc:	f102 32ff 	addle.w	r2, r2, #4294967295
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001b00:	22ef      	movgt	r2, #239	; 0xef
    WindowsXend = Width  + Xpos - 1;
 8001b02:	1880      	addle	r0, r0, r2
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8001b04:	8022      	strhgt	r2, [r4, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001b06:	eb03 0201 	add.w	r2, r3, r1
    WindowsXend = Width  + Xpos - 1;
 8001b0a:	bfd8      	it	le
 8001b0c:	8020      	strhle	r0, [r4, #0]
  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8001b0e:	2af0      	cmp	r2, #240	; 0xf0
  {
    WindowsYend = Height + Ypos - 1;
 8001b10:	bfdb      	ittet	le
 8001b12:	f103 33ff 	addle.w	r3, r3, #4294967295
 8001b16:	18c9      	addle	r1, r1, r3
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001b18:	23ef      	movgt	r3, #239	; 0xef
    WindowsYend = Height + Ypos - 1;
 8001b1a:	8061      	strhle	r1, [r4, #2]
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8001b1c:	bfc8      	it	gt
 8001b1e:	8063      	strhgt	r3, [r4, #2]
  }
}
 8001b20:	bd30      	pop	{r4, r5, pc}
 8001b22:	bf00      	nop
 8001b24:	2000011c 	.word	0x2000011c
 8001b28:	20000054 	.word	0x20000054

08001b2c <ST7789H2_GetLcdPixelHeight>:
 8001b2c:	20f0      	movs	r0, #240	; 0xf0
 8001b2e:	4770      	bx	lr

08001b30 <ST7789H2_WriteReg>:
{
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	460c      	mov	r4, r1
 8001b34:	4615      	mov	r5, r2
  LCD_IO_WriteReg(Command);
 8001b36:	f7ff fdcd 	bl	80016d4 <LCD_IO_WriteReg>
 8001b3a:	3c01      	subs	r4, #1
 8001b3c:	4425      	add	r5, r4
  for (i=0; i<NbParameters; i++)
 8001b3e:	42ac      	cmp	r4, r5
 8001b40:	d100      	bne.n	8001b44 <ST7789H2_WriteReg+0x14>
}
 8001b42:	bd38      	pop	{r3, r4, r5, pc}
    LCD_IO_WriteData(Parameters[i]);
 8001b44:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001b48:	f7ff fdbe 	bl	80016c8 <LCD_IO_WriteData>
 8001b4c:	e7f7      	b.n	8001b3e <ST7789H2_WriteReg+0xe>
	...

08001b50 <ST7789H2_SetOrientation>:
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b50:	2801      	cmp	r0, #1
{
 8001b52:	b513      	push	{r0, r1, r4, lr}
 8001b54:	4604      	mov	r4, r0
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001b56:	d109      	bne.n	8001b6c <ST7789H2_SetOrientation+0x1c>
    parameter[0] = 0x00;     
 8001b58:	2300      	movs	r3, #0
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4669      	mov	r1, sp
 8001b5e:	2036      	movs	r0, #54	; 0x36
    parameter[0] = 0x60;     
 8001b60:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001b64:	f7ff ffe4 	bl	8001b30 <ST7789H2_WriteReg>
}
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd10      	pop	{r4, pc}
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001b6c:	2802      	cmp	r0, #2
 8001b6e:	d114      	bne.n	8001b9a <ST7789H2_SetOrientation+0x4a>
    parameter[0] = 0x00;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <ST7789H2_SetOrientation+0x50>)
 8001b72:	9300      	str	r3, [sp, #0]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001b74:	2206      	movs	r2, #6
    parameter[3] = 0xF0;
 8001b76:	2300      	movs	r3, #0
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001b78:	4669      	mov	r1, sp
 8001b7a:	2033      	movs	r0, #51	; 0x33
    parameter[3] = 0xF0;
 8001b7c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001b80:	f7ff ffd6 	bl	8001b30 <ST7789H2_WriteReg>
    parameter[0] = 0x00;
 8001b84:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001b88:	4622      	mov	r2, r4
 8001b8a:	4669      	mov	r1, sp
 8001b8c:	2037      	movs	r0, #55	; 0x37
    parameter[0] = 0x00;
 8001b8e:	f8ad 3000 	strh.w	r3, [sp]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001b92:	f7ff ffcd 	bl	8001b30 <ST7789H2_WriteReg>
    parameter[0] = 0xC0; 
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	e7df      	b.n	8001b5a <ST7789H2_SetOrientation+0xa>
    parameter[0] = 0x60;     
 8001b9a:	2360      	movs	r3, #96	; 0x60
 8001b9c:	e7dd      	b.n	8001b5a <ST7789H2_SetOrientation+0xa>
 8001b9e:	bf00      	nop
 8001ba0:	f0010000 	.word	0xf0010000

08001ba4 <ST7789H2_DisplayOn>:
{
 8001ba4:	b508      	push	{r3, lr}
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4611      	mov	r1, r2
 8001baa:	2029      	movs	r0, #41	; 0x29
 8001bac:	f7ff ffc0 	bl	8001b30 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	2011      	movs	r0, #17
}
 8001bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001bba:	f7ff bfb9 	b.w	8001b30 <ST7789H2_WriteReg>
	...

08001bc0 <ST7789H2_Init>:
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	b085      	sub	sp, #20
  LCD_IO_Init();
 8001bc4:	f7ff fcea 	bl	800159c <LCD_IO_Init>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4611      	mov	r1, r2
 8001bcc:	2010      	movs	r0, #16
 8001bce:	f7ff ffaf 	bl	8001b30 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f7ff fd88 	bl	80016e8 <LCD_IO_Delay>
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4611      	mov	r1, r2
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ffa7 	bl	8001b30 <ST7789H2_WriteReg>
  LCD_IO_Delay(200);
 8001be2:	20c8      	movs	r0, #200	; 0xc8
 8001be4:	f7ff fd80 	bl	80016e8 <LCD_IO_Delay>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001be8:	2200      	movs	r2, #0
  parameter[0] = 0x00;     
 8001bea:	ac04      	add	r4, sp, #16
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001bec:	4611      	mov	r1, r2
 8001bee:	2011      	movs	r0, #17
 8001bf0:	f7ff ff9e 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x00;     
 8001bf4:	2500      	movs	r5, #0
  LCD_IO_Delay(120); 
 8001bf6:	2078      	movs	r0, #120	; 0x78
 8001bf8:	f7ff fd76 	bl	80016e8 <LCD_IO_Delay>
  parameter[0] = 0x00;     
 8001bfc:	f804 5d10 	strb.w	r5, [r4, #-16]!
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001c00:	2201      	movs	r2, #1
 8001c02:	4621      	mov	r1, r4
 8001c04:	2036      	movs	r0, #54	; 0x36
 8001c06:	f7ff ff93 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x05;     
 8001c0a:	2605      	movs	r6, #5
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	2201      	movs	r2, #1
 8001c10:	203a      	movs	r0, #58	; 0x3a
  parameter[0] = 0x05;     
 8001c12:	f88d 6000 	strb.w	r6, [sp]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001c16:	f7ff ff8b 	bl	8001b30 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001c1a:	462a      	mov	r2, r5
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	2021      	movs	r0, #33	; 0x21
 8001c20:	f7ff ff86 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x00;
 8001c24:	f04f 476f 	mov.w	r7, #4009754624	; 0xef000000
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c28:	4621      	mov	r1, r4
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	202a      	movs	r0, #42	; 0x2a
  parameter[0] = 0x00;
 8001c2e:	9700      	str	r7, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001c30:	f7ff ff7e 	bl	8001b30 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001c34:	4621      	mov	r1, r4
 8001c36:	2204      	movs	r2, #4
 8001c38:	202b      	movs	r0, #43	; 0x2b
  parameter[0] = 0x00;
 8001c3a:	9700      	str	r7, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001c3c:	f7ff ff78 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x0C;
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <ST7789H2_Init+0x170>)
 8001c42:	9300      	str	r3, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001c44:	4632      	mov	r2, r6
  parameter[3] = 0x33;
 8001c46:	2333      	movs	r3, #51	; 0x33
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001c48:	4621      	mov	r1, r4
 8001c4a:	20b2      	movs	r0, #178	; 0xb2
  parameter[3] = 0x33;
 8001c4c:	f88d 3004 	strb.w	r3, [sp, #4]
  parameter[0] = 0x35; 
 8001c50:	2635      	movs	r6, #53	; 0x35
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001c52:	f7ff ff6d 	bl	8001b30 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001c56:	4621      	mov	r1, r4
 8001c58:	2201      	movs	r2, #1
 8001c5a:	20b7      	movs	r0, #183	; 0xb7
  parameter[0] = 0x35; 
 8001c5c:	f88d 6000 	strb.w	r6, [sp]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001c60:	f7ff ff66 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x1F; 
 8001c64:	231f      	movs	r3, #31
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001c66:	4621      	mov	r1, r4
 8001c68:	2201      	movs	r2, #1
 8001c6a:	20bb      	movs	r0, #187	; 0xbb
  parameter[0] = 0x1F; 
 8001c6c:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001c70:	f7ff ff5e 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x2C; 
 8001c74:	232c      	movs	r3, #44	; 0x2c
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001c76:	4621      	mov	r1, r4
 8001c78:	2201      	movs	r2, #1
 8001c7a:	20c0      	movs	r0, #192	; 0xc0
  parameter[0] = 0x2C; 
 8001c7c:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001c80:	f7ff ff56 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x01;
 8001c84:	f24c 3301 	movw	r3, #49921	; 0xc301
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001c88:	4621      	mov	r1, r4
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	20c2      	movs	r0, #194	; 0xc2
  parameter[0] = 0x01;
 8001c8e:	f8ad 3000 	strh.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001c92:	f7ff ff4d 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x20; 
 8001c96:	2320      	movs	r3, #32
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001c98:	4621      	mov	r1, r4
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	20c4      	movs	r0, #196	; 0xc4
  parameter[0] = 0x20; 
 8001c9e:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001ca2:	f7ff ff45 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0x0F; 
 8001ca6:	230f      	movs	r3, #15
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001ca8:	4621      	mov	r1, r4
 8001caa:	2201      	movs	r2, #1
 8001cac:	20c6      	movs	r0, #198	; 0xc6
  parameter[0] = 0x0F; 
 8001cae:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001cb2:	f7ff ff3d 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0xA4;
 8001cb6:	f24a 13a4 	movw	r3, #41380	; 0xa1a4
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8001cba:	4621      	mov	r1, r4
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	20d0      	movs	r0, #208	; 0xd0
  parameter[0] = 0xA4;
 8001cc0:	f8ad 3000 	strh.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8001cc4:	f7ff ff34 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[0] = 0xD0;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <ST7789H2_Init+0x174>)
 8001cca:	9300      	str	r3, [sp, #0]
  parameter[3] = 0x08;
 8001ccc:	f103 532c 	add.w	r3, r3, #721420288	; 0x2b000000
 8001cd0:	f503 1320 	add.w	r3, r3, #2621440	; 0x280000
 8001cd4:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 8001cd8:	9301      	str	r3, [sp, #4]
  parameter[7] = 0x33;
 8001cda:	f1a3 53f9 	sub.w	r3, r3, #522190848	; 0x1f200000
 8001cde:	f5a3 23bb 	sub.w	r3, r3, #382976	; 0x5d800
 8001ce2:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 8001ce6:	9302      	str	r3, [sp, #8]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001ce8:	4621      	mov	r1, r4
  parameter[11] = 0x14;
 8001cea:	f642 5329 	movw	r3, #11561	; 0x2d29
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001cee:	220e      	movs	r2, #14
 8001cf0:	20e0      	movs	r0, #224	; 0xe0
  parameter[11] = 0x14;
 8001cf2:	f8ad 300c 	strh.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001cf6:	f7ff ff1b 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[3] = 0x08;
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <ST7789H2_Init+0x178>)
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <ST7789H2_Init+0x17c>)
 8001cfe:	e9cd 2300 	strd	r2, r3, [sp]
  parameter[7] = 0x44;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <ST7789H2_Init+0x180>)
 8001d04:	9302      	str	r3, [sp, #8]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001d06:	4621      	mov	r1, r4
  parameter[11] = 0x14;
 8001d08:	f243 132f 	movw	r3, #12591	; 0x312f
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001d0c:	220e      	movs	r2, #14
 8001d0e:	20e1      	movs	r0, #225	; 0xe1
  parameter[11] = 0x14;
 8001d10:	f8ad 300c 	strh.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001d14:	f7ff ff0c 	bl	8001b30 <ST7789H2_WriteReg>
  ST7789H2_DisplayOn();  
 8001d18:	f7ff ff44 	bl	8001ba4 <ST7789H2_DisplayOn>
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4621      	mov	r1, r4
 8001d20:	4630      	mov	r0, r6
  parameter[0] = 0x00;     
 8001d22:	f88d 5000 	strb.w	r5, [sp]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001d26:	f7ff ff03 	bl	8001b30 <ST7789H2_WriteReg>
}
 8001d2a:	b005      	add	sp, #20
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	33000c0c 	.word	0x33000c0c
 8001d34:	081108d0 	.word	0x081108d0
 8001d38:	081008d0 	.word	0x081008d0
 8001d3c:	44390606 	.word	0x44390606
 8001d40:	14160b51 	.word	0x14160b51

08001d44 <ST7789H2_DisplayOff>:
{
 8001d44:	b507      	push	{r0, r1, r2, lr}
  parameter[0] = 0xFE;
 8001d46:	a902      	add	r1, sp, #8
 8001d48:	23fe      	movs	r3, #254	; 0xfe
 8001d4a:	f801 3d04 	strb.w	r3, [r1, #-4]!
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001d4e:	2201      	movs	r2, #1
 8001d50:	20bd      	movs	r0, #189	; 0xbd
 8001d52:	f7ff feed 	bl	8001b30 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001d56:	2200      	movs	r2, #0
 8001d58:	4611      	mov	r1, r2
 8001d5a:	2010      	movs	r0, #16
 8001d5c:	f7ff fee8 	bl	8001b30 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8001d60:	200a      	movs	r0, #10
 8001d62:	f7ff fcc1 	bl	80016e8 <LCD_IO_Delay>
}
 8001d66:	b003      	add	sp, #12
 8001d68:	f85d fb04 	ldr.w	pc, [sp], #4

08001d6c <ST7789H2_SetCursor>:
{
 8001d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  parameter[1] = 0x00 + Xpos;
 8001d6e:	b2c0      	uxtb	r0, r0
 8001d70:	f88d 0005 	strb.w	r0, [sp, #5]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001d74:	2204      	movs	r2, #4
  parameter[3] = 0xEF + Xpos;
 8001d76:	3811      	subs	r0, #17
  parameter[0] = 0x00;     
 8001d78:	2500      	movs	r5, #0
{
 8001d7a:	460c      	mov	r4, r1
  parameter[3] = 0xEF + Xpos;
 8001d7c:	f88d 0007 	strb.w	r0, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001d80:	eb0d 0102 	add.w	r1, sp, r2
 8001d84:	202a      	movs	r0, #42	; 0x2a
  parameter[0] = 0x00;     
 8001d86:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[2] = 0x00;
 8001d8a:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001d8e:	f7ff fecf 	bl	8001b30 <ST7789H2_WriteReg>
  parameter[1] = 0x00 + Ypos;
 8001d92:	b2e1      	uxtb	r1, r4
 8001d94:	f88d 1005 	strb.w	r1, [sp, #5]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001d98:	2204      	movs	r2, #4
  parameter[3] = 0xEF + Ypos;
 8001d9a:	3911      	subs	r1, #17
 8001d9c:	f88d 1007 	strb.w	r1, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001da0:	202b      	movs	r0, #43	; 0x2b
 8001da2:	eb0d 0102 	add.w	r1, sp, r2
  parameter[0] = 0x00;
 8001da6:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[2] = 0x00;
 8001daa:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001dae:	f7ff febf 	bl	8001b30 <ST7789H2_WriteReg>
}
 8001db2:	b003      	add	sp, #12
 8001db4:	bd30      	pop	{r4, r5, pc}

08001db6 <ST7789H2_WritePixel>:
{
 8001db6:	b510      	push	{r4, lr}
 8001db8:	4614      	mov	r4, r2
  ST7789H2_SetCursor(Xpos, Ypos);
 8001dba:	f7ff ffd7 	bl	8001d6c <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	202c      	movs	r0, #44	; 0x2c
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	f7ff feb4 	bl	8001b30 <ST7789H2_WriteReg>
  LCD_IO_WriteData(RGBCode);
 8001dc8:	4620      	mov	r0, r4
}
 8001dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_IO_WriteData(RGBCode);
 8001dce:	f7ff bc7b 	b.w	80016c8 <LCD_IO_WriteData>

08001dd2 <ST7789H2_ReadPixel>:
{
 8001dd2:	b538      	push	{r3, r4, r5, lr}
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	460d      	mov	r5, r1
  ST7789H2_SetCursor(Xpos, Ypos);
 8001dd8:	f7ff ffc8 	bl	8001d6c <ST7789H2_SetCursor>
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8001ddc:	4629      	mov	r1, r5
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ffc4 	bl	8001d6c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8001de4:	2200      	movs	r2, #0
 8001de6:	4611      	mov	r1, r2
 8001de8:	202e      	movs	r0, #46	; 0x2e
 8001dea:	f7ff fea1 	bl	8001b30 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8001dee:	f7ff fc77 	bl	80016e0 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8001df2:	f7ff fc75 	bl	80016e0 <LCD_IO_ReadData>
 8001df6:	4604      	mov	r4, r0
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8001df8:	f7ff fc72 	bl	80016e0 <LCD_IO_ReadData>
  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8001dfc:	f3c4 0385 	ubfx	r3, r4, #2, #6
 8001e00:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8001e04:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001e08:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8001e0c:	4420      	add	r0, r4
}
 8001e0e:	b280      	uxth	r0, r0
 8001e10:	bd38      	pop	{r3, r4, r5, pc}

08001e12 <ST7789H2_DrawHLine>:
{
 8001e12:	b570      	push	{r4, r5, r6, lr}
 8001e14:	4606      	mov	r6, r0
 8001e16:	4608      	mov	r0, r1
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001e18:	4611      	mov	r1, r2
{
 8001e1a:	461d      	mov	r5, r3
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001e1c:	f7ff ffa6 	bl	8001d6c <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e20:	2200      	movs	r2, #0
 8001e22:	4611      	mov	r1, r2
 8001e24:	202c      	movs	r0, #44	; 0x2c
 8001e26:	f7ff fe83 	bl	8001b30 <ST7789H2_WriteReg>
  for(counter = 0; counter < Length; counter++)
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	42ac      	cmp	r4, r5
 8001e2e:	d100      	bne.n	8001e32 <ST7789H2_DrawHLine+0x20>
}
 8001e30:	bd70      	pop	{r4, r5, r6, pc}
    LCD_IO_WriteData(RGBCode);
 8001e32:	4630      	mov	r0, r6
 8001e34:	f7ff fc48 	bl	80016c8 <LCD_IO_WriteData>
 8001e38:	3401      	adds	r4, #1
 8001e3a:	e7f7      	b.n	8001e2c <ST7789H2_DrawHLine+0x1a>

08001e3c <ST7789H2_DrawVLine>:
{
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	460e      	mov	r6, r1
 8001e40:	4607      	mov	r7, r0
  ST7789H2_SetCursor(Xpos, Ypos);
 8001e42:	4611      	mov	r1, r2
 8001e44:	4630      	mov	r0, r6
{
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
  ST7789H2_SetCursor(Xpos, Ypos);
 8001e4a:	f7ff ff8f 	bl	8001d6c <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4611      	mov	r1, r2
 8001e52:	202c      	movs	r0, #44	; 0x2c
 8001e54:	f7ff fe6c 	bl	8001b30 <ST7789H2_WriteReg>
 8001e58:	4425      	add	r5, r4
 8001e5a:	b2ad      	uxth	r5, r5
  for(counter = 0; counter < Length; counter++)
 8001e5c:	42ac      	cmp	r4, r5
 8001e5e:	d100      	bne.n	8001e62 <ST7789H2_DrawVLine+0x26>
}
 8001e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001e62:	4621      	mov	r1, r4
 8001e64:	463a      	mov	r2, r7
 8001e66:	4630      	mov	r0, r6
 8001e68:	3401      	adds	r4, #1
 8001e6a:	f7ff ffa4 	bl	8001db6 <ST7789H2_WritePixel>
 8001e6e:	b2a4      	uxth	r4, r4
 8001e70:	e7f4      	b.n	8001e5c <ST7789H2_DrawVLine+0x20>
	...

08001e74 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8001e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e78:	4615      	mov	r5, r2
  uint32_t i = 0;
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e7a:	2200      	movs	r2, #0
{
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	460f      	mov	r7, r1
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e80:	202c      	movs	r0, #44	; 0x2c
 8001e82:	4611      	mov	r1, r2
{
 8001e84:	469a      	mov	sl, r3
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001e86:	f7ff fe53 	bl	8001b30 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001e8a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001ecc <ST7789H2_DrawRGBHLine+0x58>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001e8e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8001ed0 <ST7789H2_DrawRGBHLine+0x5c>
  uint32_t i = 0;
 8001e92:	2600      	movs	r6, #0
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8001e94:	4425      	add	r5, r4
 8001e96:	42a5      	cmp	r5, r4
 8001e98:	d801      	bhi.n	8001e9e <ST7789H2_DrawRGBHLine+0x2a>
        LCD_IO_WriteData(rgb565[i]);        
      }      
      i++;
    }
  }
}
 8001e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001e9e:	f8b8 3000 	ldrh.w	r3, [r8]
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	d810      	bhi.n	8001ec8 <ST7789H2_DrawRGBHLine+0x54>
 8001ea6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8001eaa:	42bb      	cmp	r3, r7
 8001eac:	d80c      	bhi.n	8001ec8 <ST7789H2_DrawRGBHLine+0x54>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001eae:	f8b9 3000 	ldrh.w	r3, [r9]
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001eb2:	42a3      	cmp	r3, r4
 8001eb4:	d308      	bcc.n	8001ec8 <ST7789H2_DrawRGBHLine+0x54>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001eb6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8001eba:	42bb      	cmp	r3, r7
 8001ebc:	d304      	bcc.n	8001ec8 <ST7789H2_DrawRGBHLine+0x54>
        LCD_IO_WriteData(rgb565[i]);        
 8001ebe:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 8001ec2:	f7ff fc01 	bl	80016c8 <LCD_IO_WriteData>
      i++;
 8001ec6:	3601      	adds	r6, #1
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8001ec8:	3401      	adds	r4, #1
 8001eca:	e7e4      	b.n	8001e96 <ST7789H2_DrawRGBHLine+0x22>
 8001ecc:	2000011c 	.word	0x2000011c
 8001ed0:	20000054 	.word	0x20000054

08001ed4 <ST7789H2_DrawBitmap>:
{
 8001ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	460e      	mov	r6, r1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001eda:	4916      	ldr	r1, [pc, #88]	; (8001f34 <ST7789H2_DrawBitmap+0x60>)
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <ST7789H2_DrawBitmap+0x64>)
 8001ede:	880d      	ldrh	r5, [r1, #0]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001ee0:	8849      	ldrh	r1, [r1, #2]
{
 8001ee2:	4607      	mov	r7, r0
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001ee4:	8818      	ldrh	r0, [r3, #0]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001ee6:	885b      	ldrh	r3, [r3, #2]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001ee8:	3501      	adds	r5, #1
 8001eea:	1a2d      	subs	r5, r5, r0
  size = *(volatile uint16_t *) (pbmp + 2);
 8001eec:	8850      	ldrh	r0, [r2, #2]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001eee:	8890      	ldrh	r0, [r2, #4]
  index = *(volatile uint16_t *) (pbmp + 10);
 8001ef0:	f8b2 800a 	ldrh.w	r8, [r2, #10]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001ef4:	8990      	ldrh	r0, [r2, #12]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001ef6:	3101      	adds	r1, #1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001ef8:	b2ad      	uxth	r5, r5
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001efa:	1ac9      	subs	r1, r1, r3
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001efc:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001f00:	fa16 f181 	uxtah	r1, r6, r1
 8001f04:	ea4f 0945 	mov.w	r9, r5, lsl #1
 8001f08:	4490      	add	r8, r2
 8001f0a:	428e      	cmp	r6, r1
 8001f0c:	d301      	bcc.n	8001f12 <ST7789H2_DrawBitmap+0x3e>
}
 8001f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f12:	1e4c      	subs	r4, r1, #1
 8001f14:	fa1f fa84 	uxth.w	sl, r4
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001f18:	4651      	mov	r1, sl
 8001f1a:	4638      	mov	r0, r7
 8001f1c:	f7ff ff26 	bl	8001d6c <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001f20:	4643      	mov	r3, r8
 8001f22:	4651      	mov	r1, sl
 8001f24:	462a      	mov	r2, r5
 8001f26:	4638      	mov	r0, r7
 8001f28:	f7ff ffa4 	bl	8001e74 <ST7789H2_DrawRGBHLine>
 8001f2c:	44c8      	add	r8, r9
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001f2e:	4621      	mov	r1, r4
 8001f30:	e7eb      	b.n	8001f0a <ST7789H2_DrawBitmap+0x36>
 8001f32:	bf00      	nop
 8001f34:	20000054 	.word	0x20000054
 8001f38:	2000011c 	.word	0x2000011c

08001f3c <ST7789H2_DrawRGBImage>:
{
 8001f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f40:	9d08      	ldr	r5, [sp, #32]
 8001f42:	4606      	mov	r6, r0
 8001f44:	4617      	mov	r7, r2
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8001f46:	460c      	mov	r4, r1
 8001f48:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8001f4c:	eb01 0903 	add.w	r9, r1, r3
 8001f50:	45a1      	cmp	r9, r4
 8001f52:	d801      	bhi.n	8001f58 <ST7789H2_DrawRGBImage+0x1c>
}
 8001f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ST7789H2_SetCursor(Xpos, posY);
 8001f58:	fa1f f884 	uxth.w	r8, r4
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f7ff ff04 	bl	8001d6c <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8001f64:	462b      	mov	r3, r5
 8001f66:	463a      	mov	r2, r7
 8001f68:	4641      	mov	r1, r8
 8001f6a:	4630      	mov	r0, r6
 8001f6c:	f7ff ff82 	bl	8001e74 <ST7789H2_DrawRGBHLine>
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8001f70:	3401      	adds	r4, #1
 8001f72:	4455      	add	r5, sl
 8001f74:	e7ec      	b.n	8001f50 <ST7789H2_DrawRGBImage+0x14>

08001f76 <ST7789H2_ReadReg>:
{
 8001f76:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(Command);
 8001f78:	f7ff fbac 	bl	80016d4 <LCD_IO_WriteReg>
  LCD_IO_ReadData();
 8001f7c:	f7ff fbb0 	bl	80016e0 <LCD_IO_ReadData>
  return (LCD_IO_ReadData());
 8001f80:	f7ff fbae 	bl	80016e0 <LCD_IO_ReadData>
}
 8001f84:	b2c0      	uxtb	r0, r0
 8001f86:	bd08      	pop	{r3, pc}

08001f88 <ST7789H2_ReadID>:
{
 8001f88:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8001f8a:	f7ff fb07 	bl	800159c <LCD_IO_Init>
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7ff fff1 	bl	8001f76 <ST7789H2_ReadReg>
}
 8001f94:	bd08      	pop	{r3, pc}

08001f96 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001f96:	4770      	bx	lr

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_InitTick+0x3c>)
 8001f9c:	4e0e      	ldr	r6, [pc, #56]	; (8001fd8 <HAL_InitTick+0x40>)
{
 8001f9e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa4:	7830      	ldrb	r0, [r6, #0]
 8001fa6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001faa:	6810      	ldr	r0, [r2, #0]
 8001fac:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fb0:	f000 f89a 	bl	80020e8 <HAL_SYSTICK_Config>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	b950      	cbnz	r0, 8001fce <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb8:	2d0f      	cmp	r5, #15
 8001fba:	d808      	bhi.n	8001fce <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f000 f85c 	bl	8002080 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc8:	6075      	str	r5, [r6, #4]
 8001fca:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e7fc      	b.n	8001fcc <HAL_InitTick+0x34>
 8001fd2:	bf00      	nop
 8001fd4:	20000050 	.word	0x20000050
 8001fd8:	20000090 	.word	0x20000090

08001fdc <HAL_Init>:
{
 8001fdc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_Init+0x30>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f82f 	bl	800205c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	200e      	movs	r0, #14
 8002000:	f7ff ffca 	bl	8001f98 <HAL_InitTick>
  HAL_MspInit();
 8002004:	f7ff ffc7 	bl	8001f96 <HAL_MspInit>
}
 8002008:	2000      	movs	r0, #0
 800200a:	bd08      	pop	{r3, pc}
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_IncTick+0x10>)
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_IncTick+0x14>)
 8002014:	6811      	ldr	r1, [r2, #0]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	440b      	add	r3, r1
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000af8 	.word	0x20000af8
 8002024:	20000090 	.word	0x20000090

08002028 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002028:	4b01      	ldr	r3, [pc, #4]	; (8002030 <HAL_GetTick+0x8>)
 800202a:	6818      	ldr	r0, [r3, #0]
}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000af8 	.word	0x20000af8

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff fff6 	bl	8002028 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	bf1c      	itt	ne
 8002040:	4b05      	ldrne	r3, [pc, #20]	; (8002058 <HAL_Delay+0x24>)
 8002042:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002044:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002046:	bf18      	it	ne
 8002048:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204a:	f7ff ffed 	bl	8002028 <HAL_GetTick>
 800204e:	1b40      	subs	r0, r0, r5
 8002050:	42a0      	cmp	r0, r4
 8002052:	d3fa      	bcc.n	800204a <HAL_Delay+0x16>
  {
  }
}
 8002054:	bd38      	pop	{r3, r4, r5, pc}
 8002056:	bf00      	nop
 8002058:	20000090 	.word	0x20000090

0800205c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800205e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002060:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	0200      	lsls	r0, r0, #8
 800206e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002072:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002076:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002078:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800207a:	4770      	bx	lr
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b570      	push	{r4, r5, r6, lr}
 8002084:	68dc      	ldr	r4, [r3, #12]
 8002086:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208a:	f1c4 0507 	rsb	r5, r4, #7
 800208e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002090:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	bf28      	it	cs
 8002096:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	bf8c      	ite	hi
 80020a4:	3c03      	subhi	r4, #3
 80020a6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	ea21 0303 	bic.w	r3, r1, r3
 80020ac:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ae:	fa06 f404 	lsl.w	r4, r6, r4
 80020b2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80020b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	bfa8      	it	ge
 80020be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80020c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	bfbc      	itt	lt
 80020c8:	f000 000f 	andlt.w	r0, r0, #15
 80020cc:	4a05      	ldrlt	r2, [pc, #20]	; (80020e4 <HAL_NVIC_SetPriority+0x64>)
 80020ce:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	bfaa      	itet	ge
 80020d2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00
 80020e4:	e000ed14 	.word	0xe000ed14

080020e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	3801      	subs	r0, #1
 80020ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80020ee:	d20a      	bcs.n	8002106 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	21f0      	movs	r1, #240	; 0xf0
 80020f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002118:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80022c0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002120:	4a65      	ldr	r2, [pc, #404]	; (80022b8 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002122:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80022c4 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002128:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800212a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800212e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002130:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8002132:	42ac      	cmp	r4, r5
 8002134:	f040 80ac 	bne.w	8002290 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002138:	684c      	ldr	r4, [r1, #4]
 800213a:	f024 0c10 	bic.w	ip, r4, #16
 800213e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002142:	2603      	movs	r6, #3
 8002144:	f10c 37ff 	add.w	r7, ip, #4294967295
 8002148:	fa06 f60e 	lsl.w	r6, r6, lr
 800214c:	2f01      	cmp	r7, #1
 800214e:	ea6f 0606 	mvn.w	r6, r6
 8002152:	d811      	bhi.n	8002178 <HAL_GPIO_Init+0x64>
        temp = GPIOx->OSPEEDR; 
 8002154:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002156:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	68cf      	ldr	r7, [r1, #12]
 800215c:	fa07 f70e 	lsl.w	r7, r7, lr
 8002160:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002164:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002166:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002168:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800216c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8002170:	409f      	lsls	r7, r3
 8002172:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002176:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002178:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217e:	688f      	ldr	r7, [r1, #8]
 8002180:	fa07 f70e 	lsl.w	r7, r7, lr
 8002184:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002188:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800218c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218e:	d116      	bne.n	80021be <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8002190:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002194:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002198:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800219c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80021a4:	f04f 0c0f 	mov.w	ip, #15
 80021a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80021ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	690f      	ldr	r7, [r1, #16]
 80021b2:	fa07 f70b 	lsl.w	r7, r7, fp
 80021b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80021ba:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80021be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c2:	f004 0703 	and.w	r7, r4, #3
 80021c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80021ca:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80021ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d0:	00e6      	lsls	r6, r4, #3
 80021d2:	d55d      	bpl.n	8002290 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d4:	f04f 0b00 	mov.w	fp, #0
 80021d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80021dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e0:	4e36      	ldr	r6, [pc, #216]	; (80022bc <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80021e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80021ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80021ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80021f2:	9703      	str	r7, [sp, #12]
 80021f4:	9f03      	ldr	r7, [sp, #12]
 80021f6:	f023 0703 	bic.w	r7, r3, #3
 80021fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80021fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002202:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800220a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800220e:	f04f 0c0f 	mov.w	ip, #15
 8002212:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002216:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002218:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221c:	d03f      	beq.n	800229e <HAL_GPIO_Init+0x18a>
 800221e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002222:	42b0      	cmp	r0, r6
 8002224:	d03d      	beq.n	80022a2 <HAL_GPIO_Init+0x18e>
 8002226:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800222a:	42b0      	cmp	r0, r6
 800222c:	d03b      	beq.n	80022a6 <HAL_GPIO_Init+0x192>
 800222e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002232:	42b0      	cmp	r0, r6
 8002234:	d039      	beq.n	80022aa <HAL_GPIO_Init+0x196>
 8002236:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800223a:	42b0      	cmp	r0, r6
 800223c:	d037      	beq.n	80022ae <HAL_GPIO_Init+0x19a>
 800223e:	4548      	cmp	r0, r9
 8002240:	d037      	beq.n	80022b2 <HAL_GPIO_Init+0x19e>
 8002242:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002246:	42b0      	cmp	r0, r6
 8002248:	bf14      	ite	ne
 800224a:	2607      	movne	r6, #7
 800224c:	2606      	moveq	r6, #6
 800224e:	fa06 f60e 	lsl.w	r6, r6, lr
 8002252:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002256:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8002258:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800225a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002260:	bf0c      	ite	eq
 8002262:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8002264:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8002266:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8002268:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800226e:	bf0c      	ite	eq
 8002270:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8002272:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8002274:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002278:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800227c:	bf0c      	ite	eq
 800227e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8002280:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8002282:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8002284:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002286:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8002288:	bf54      	ite	pl
 800228a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800228c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800228e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002290:	3301      	adds	r3, #1
 8002292:	2b10      	cmp	r3, #16
 8002294:	f47f af49 	bne.w	800212a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002298:	b005      	add	sp, #20
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229e:	465e      	mov	r6, fp
 80022a0:	e7d5      	b.n	800224e <HAL_GPIO_Init+0x13a>
 80022a2:	2601      	movs	r6, #1
 80022a4:	e7d3      	b.n	800224e <HAL_GPIO_Init+0x13a>
 80022a6:	2602      	movs	r6, #2
 80022a8:	e7d1      	b.n	800224e <HAL_GPIO_Init+0x13a>
 80022aa:	2603      	movs	r6, #3
 80022ac:	e7cf      	b.n	800224e <HAL_GPIO_Init+0x13a>
 80022ae:	2604      	movs	r6, #4
 80022b0:	e7cd      	b.n	800224e <HAL_GPIO_Init+0x13a>
 80022b2:	2605      	movs	r6, #5
 80022b4:	e7cb      	b.n	800224e <HAL_GPIO_Init+0x13a>
 80022b6:	bf00      	nop
 80022b8:	40013c00 	.word	0x40013c00
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40021400 	.word	0x40021400

080022c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c8:	6903      	ldr	r3, [r0, #16]
 80022ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80022cc:	bf14      	ite	ne
 80022ce:	2001      	movne	r0, #1
 80022d0:	2000      	moveq	r0, #0
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	b10a      	cbz	r2, 80022da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d6:	6181      	str	r1, [r0, #24]
  }
}
 80022d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022da:	0409      	lsls	r1, r1, #16
 80022dc:	e7fb      	b.n	80022d6 <HAL_GPIO_WritePin+0x2>
	...

080022e0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e0:	4913      	ldr	r1, [pc, #76]	; (8002330 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80022e2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e4:	688b      	ldr	r3, [r1, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x16>
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f2:	4810      	ldr	r0, [pc, #64]	; (8002334 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80022f4:	e000      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80022f6:	4810      	ldr	r0, [pc, #64]	; (8002338 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80022f8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002300:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002304:	bf14      	ite	ne
 8002306:	480c      	ldrne	r0, [pc, #48]	; (8002338 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002308:	480a      	ldreq	r0, [pc, #40]	; (8002334 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800230e:	bf18      	it	ne
 8002310:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002312:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	fba1 0100 	umull	r0, r1, r1, r0
 800231a:	f7fd ffd9 	bl	80002d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_RCC_GetSysClockFreq+0x50>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800232a:	fbb0 f0f3 	udiv	r0, r0, r3
 800232e:	e7e3      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x18>
 8002330:	40023800 	.word	0x40023800
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_ClockConfig>:
{
 800233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002340:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002342:	4604      	mov	r4, r0
 8002344:	b910      	cbnz	r0, 800234c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
}
 8002348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCC_ClockConfig+0x120>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f002 020f 	and.w	r2, r2, #15
 8002354:	428a      	cmp	r2, r1
 8002356:	d328      	bcc.n	80023aa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	6821      	ldr	r1, [r4, #0]
 800235a:	078f      	lsls	r7, r1, #30
 800235c:	d42d      	bmi.n	80023ba <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	07c8      	lsls	r0, r1, #31
 8002360:	d440      	bmi.n	80023e4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCC_ClockConfig+0x120>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f002 020f 	and.w	r2, r2, #15
 800236a:	42aa      	cmp	r2, r5
 800236c:	d865      	bhi.n	800243a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	0751      	lsls	r1, r2, #29
 8002372:	d46b      	bmi.n	800244c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	0713      	lsls	r3, r2, #28
 8002376:	d507      	bpl.n	8002388 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002378:	4a39      	ldr	r2, [pc, #228]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 800237a:	6921      	ldr	r1, [r4, #16]
 800237c:	6893      	ldr	r3, [r2, #8]
 800237e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002382:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002386:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002388:	f7ff ffaa 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 800238e:	4a35      	ldr	r2, [pc, #212]	; (8002464 <HAL_RCC_ClockConfig+0x128>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	40d8      	lsrs	r0, r3
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_RCC_ClockConfig+0x12c>)
 800239c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800239e:	4b33      	ldr	r3, [pc, #204]	; (800246c <HAL_RCC_ClockConfig+0x130>)
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	f7ff fdf9 	bl	8001f98 <HAL_InitTick>
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7ce      	b.n	8002348 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d1c6      	bne.n	8002346 <HAL_RCC_ClockConfig+0xa>
 80023b8:	e7ce      	b.n	8002358 <HAL_RCC_ClockConfig+0x1c>
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	bf1e      	ittt	ne
 80023c2:	689a      	ldrne	r2, [r3, #8]
 80023c4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80023c8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	bf42      	ittt	mi
 80023ce:	689a      	ldrmi	r2, [r3, #8]
 80023d0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80023d4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	68a0      	ldr	r0, [r4, #8]
 80023da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023de:	4302      	orrs	r2, r0
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	e7bc      	b.n	800235e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e4:	6862      	ldr	r2, [r4, #4]
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 80023e8:	2a01      	cmp	r2, #1
 80023ea:	d11c      	bne.n	8002426 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	d0a8      	beq.n	8002346 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f4:	4e1a      	ldr	r6, [pc, #104]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 80023f6:	68b3      	ldr	r3, [r6, #8]
 80023f8:	f023 0303 	bic.w	r3, r3, #3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002400:	f7ff fe12 	bl	8002028 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002408:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	68b3      	ldr	r3, [r6, #8]
 800240c:	6862      	ldr	r2, [r4, #4]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002416:	d0a4      	beq.n	8002362 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff fe06 	bl	8002028 <HAL_GetTick>
 800241c:	1bc0      	subs	r0, r0, r7
 800241e:	4540      	cmp	r0, r8
 8002420:	d9f3      	bls.n	800240a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002422:	2003      	movs	r0, #3
 8002424:	e790      	b.n	8002348 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	1e91      	subs	r1, r2, #2
 8002428:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242c:	d802      	bhi.n	8002434 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002432:	e7de      	b.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	f013 0f02 	tst.w	r3, #2
 8002438:	e7db      	b.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	b2ea      	uxtb	r2, r5
 800243c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	42ab      	cmp	r3, r5
 8002446:	f47f af7e 	bne.w	8002346 <HAL_RCC_ClockConfig+0xa>
 800244a:	e790      	b.n	800236e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800244c:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCC_ClockConfig+0x124>)
 800244e:	68e0      	ldr	r0, [r4, #12]
 8002450:	688b      	ldr	r3, [r1, #8]
 8002452:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002456:	4303      	orrs	r3, r0
 8002458:	608b      	str	r3, [r1, #8]
 800245a:	e78b      	b.n	8002374 <HAL_RCC_ClockConfig+0x38>
 800245c:	40023c00 	.word	0x40023c00
 8002460:	40023800 	.word	0x40023800
 8002464:	08007608 	.word	0x08007608
 8002468:	20000050 	.word	0x20000050
 800246c:	20000094 	.word	0x20000094

08002470 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002470:	6803      	ldr	r3, [r0, #0]
{
 8002472:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	07dd      	lsls	r5, r3, #31
{
 8002478:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	d410      	bmi.n	800249e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	0798      	lsls	r0, r3, #30
 8002480:	d45b      	bmi.n	800253a <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	071a      	lsls	r2, r3, #28
 8002486:	f100 809d 	bmi.w	80025c4 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	075b      	lsls	r3, r3, #29
 800248e:	f100 80bb 	bmi.w	8002608 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	69a2      	ldr	r2, [r4, #24]
 8002494:	2a00      	cmp	r2, #0
 8002496:	f040 811c 	bne.w	80026d2 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800249a:	2000      	movs	r0, #0
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800249e:	4ba7      	ldr	r3, [pc, #668]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	f002 020c 	and.w	r2, r2, #12
 80024a6:	2a04      	cmp	r2, #4
 80024a8:	d007      	beq.n	80024ba <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b0:	2a08      	cmp	r2, #8
 80024b2:	d10d      	bne.n	80024d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0259      	lsls	r1, r3, #9
 80024b8:	d50a      	bpl.n	80024d0 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ba:	4ba0      	ldr	r3, [pc, #640]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	039a      	lsls	r2, r3, #14
 80024c0:	d5dc      	bpl.n	800247c <HAL_RCC_OscConfig+0xc>
 80024c2:	6863      	ldr	r3, [r4, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1d9      	bne.n	800247c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
}
 80024ca:	b002      	add	sp, #8
 80024cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	6863      	ldr	r3, [r4, #4]
 80024d2:	4d9a      	ldr	r5, [pc, #616]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d111      	bne.n	80024fe <HAL_RCC_OscConfig+0x8e>
 80024da:	682b      	ldr	r3, [r5, #0]
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024e2:	f7ff fda1 	bl	8002028 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4d95      	ldr	r5, [pc, #596]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80024e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	039b      	lsls	r3, r3, #14
 80024ee:	d4c5      	bmi.n	800247c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fd9a 	bl	8002028 <HAL_GetTick>
 80024f4:	1b80      	subs	r0, r0, r6
 80024f6:	2864      	cmp	r0, #100	; 0x64
 80024f8:	d9f7      	bls.n	80024ea <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80024fa:	2003      	movs	r0, #3
 80024fc:	e7e5      	b.n	80024ca <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002502:	d104      	bne.n	800250e <HAL_RCC_OscConfig+0x9e>
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250a:	602b      	str	r3, [r5, #0]
 800250c:	e7e5      	b.n	80024da <HAL_RCC_OscConfig+0x6a>
 800250e:	682a      	ldr	r2, [r5, #0]
 8002510:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002514:	602a      	str	r2, [r5, #0]
 8002516:	682a      	ldr	r2, [r5, #0]
 8002518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800251c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1df      	bne.n	80024e2 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8002522:	f7ff fd81 	bl	8002028 <HAL_GetTick>
 8002526:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	039f      	lsls	r7, r3, #14
 800252c:	d5a6      	bpl.n	800247c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7ff fd7b 	bl	8002028 <HAL_GetTick>
 8002532:	1b80      	subs	r0, r0, r6
 8002534:	2864      	cmp	r0, #100	; 0x64
 8002536:	d9f7      	bls.n	8002528 <HAL_RCC_OscConfig+0xb8>
 8002538:	e7df      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800253a:	4b80      	ldr	r3, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	f012 0f0c 	tst.w	r2, #12
 8002542:	d007      	beq.n	8002554 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800254a:	2a08      	cmp	r2, #8
 800254c:	d111      	bne.n	8002572 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	025e      	lsls	r6, r3, #9
 8002552:	d40e      	bmi.n	8002572 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	0795      	lsls	r5, r2, #30
 800255a:	d502      	bpl.n	8002562 <HAL_RCC_OscConfig+0xf2>
 800255c:	68e2      	ldr	r2, [r4, #12]
 800255e:	2a01      	cmp	r2, #1
 8002560:	d1b2      	bne.n	80024c8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	6921      	ldr	r1, [r4, #16]
 8002566:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800256a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800256e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002570:	e787      	b.n	8002482 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002572:	68e2      	ldr	r2, [r4, #12]
 8002574:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCC_OscConfig+0x2d0>)
 8002576:	b1b2      	cbz	r2, 80025a6 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800257c:	f7ff fd54 	bl	8002028 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4d6e      	ldr	r5, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002582:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	682b      	ldr	r3, [r5, #0]
 8002586:	0798      	lsls	r0, r3, #30
 8002588:	d507      	bpl.n	800259a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	682b      	ldr	r3, [r5, #0]
 800258c:	6922      	ldr	r2, [r4, #16]
 800258e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002592:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002596:	602b      	str	r3, [r5, #0]
 8002598:	e773      	b.n	8002482 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff fd45 	bl	8002028 <HAL_GetTick>
 800259e:	1b80      	subs	r0, r0, r6
 80025a0:	2802      	cmp	r0, #2
 80025a2:	d9ef      	bls.n	8002584 <HAL_RCC_OscConfig+0x114>
 80025a4:	e7a9      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80025a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025a8:	f7ff fd3e 	bl	8002028 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ac:	4d63      	ldr	r5, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80025ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	0799      	lsls	r1, r3, #30
 80025b4:	f57f af65 	bpl.w	8002482 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff fd36 	bl	8002028 <HAL_GetTick>
 80025bc:	1b80      	subs	r0, r0, r6
 80025be:	2802      	cmp	r0, #2
 80025c0:	d9f6      	bls.n	80025b0 <HAL_RCC_OscConfig+0x140>
 80025c2:	e79a      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c4:	6962      	ldr	r2, [r4, #20]
 80025c6:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_OscConfig+0x2d4>)
 80025c8:	b17a      	cbz	r2, 80025ea <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025ce:	f7ff fd2b 	bl	8002028 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4d5a      	ldr	r5, [pc, #360]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80025d4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025d8:	079f      	lsls	r7, r3, #30
 80025da:	f53f af56 	bmi.w	800248a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025de:	f7ff fd23 	bl	8002028 <HAL_GetTick>
 80025e2:	1b80      	subs	r0, r0, r6
 80025e4:	2802      	cmp	r0, #2
 80025e6:	d9f6      	bls.n	80025d6 <HAL_RCC_OscConfig+0x166>
 80025e8:	e787      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80025ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025ec:	f7ff fd1c 	bl	8002028 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	4d52      	ldr	r5, [pc, #328]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80025f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025f6:	0798      	lsls	r0, r3, #30
 80025f8:	f57f af47 	bpl.w	800248a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff fd14 	bl	8002028 <HAL_GetTick>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	2802      	cmp	r0, #2
 8002604:	d9f6      	bls.n	80025f4 <HAL_RCC_OscConfig+0x184>
 8002606:	e778      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 800260a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002610:	d128      	bne.n	8002664 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	9201      	str	r2, [sp, #4]
 8002614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002616:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002626:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	4d47      	ldr	r5, [pc, #284]	; (8002748 <HAL_RCC_OscConfig+0x2d8>)
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	05d9      	lsls	r1, r3, #23
 800262e:	d51b      	bpl.n	8002668 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	68a3      	ldr	r3, [r4, #8]
 8002632:	4d42      	ldr	r5, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 8002634:	2b01      	cmp	r3, #1
 8002636:	d127      	bne.n	8002688 <HAL_RCC_OscConfig+0x218>
 8002638:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002640:	f7ff fcf2 	bl	8002028 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	4d3d      	ldr	r5, [pc, #244]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002646:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002648:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800264e:	079b      	lsls	r3, r3, #30
 8002650:	d539      	bpl.n	80026c6 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8002652:	2e00      	cmp	r6, #0
 8002654:	f43f af1d 	beq.w	8002492 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4a38      	ldr	r2, [pc, #224]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 800265a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	e716      	b.n	8002492 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002664:	2600      	movs	r6, #0
 8002666:	e7df      	b.n	8002628 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002670:	f7ff fcda 	bl	8002028 <HAL_GetTick>
 8002674:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	05da      	lsls	r2, r3, #23
 800267a:	d4d9      	bmi.n	8002630 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7ff fcd4 	bl	8002028 <HAL_GetTick>
 8002680:	1bc0      	subs	r0, r0, r7
 8002682:	2802      	cmp	r0, #2
 8002684:	d9f7      	bls.n	8002676 <HAL_RCC_OscConfig+0x206>
 8002686:	e738      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	2b05      	cmp	r3, #5
 800268a:	d104      	bne.n	8002696 <HAL_RCC_OscConfig+0x226>
 800268c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	672b      	str	r3, [r5, #112]	; 0x70
 8002694:	e7d0      	b.n	8002638 <HAL_RCC_OscConfig+0x1c8>
 8002696:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	672a      	str	r2, [r5, #112]	; 0x70
 800269e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80026a0:	f022 0204 	bic.w	r2, r2, #4
 80026a4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ca      	bne.n	8002640 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 80026aa:	f7ff fcbd 	bl	8002028 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80026b2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026b6:	0798      	lsls	r0, r3, #30
 80026b8:	d5cb      	bpl.n	8002652 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff fcb5 	bl	8002028 <HAL_GetTick>
 80026be:	1bc0      	subs	r0, r0, r7
 80026c0:	4540      	cmp	r0, r8
 80026c2:	d9f7      	bls.n	80026b4 <HAL_RCC_OscConfig+0x244>
 80026c4:	e719      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7ff fcaf 	bl	8002028 <HAL_GetTick>
 80026ca:	1bc0      	subs	r0, r0, r7
 80026cc:	4540      	cmp	r0, r8
 80026ce:	d9bd      	bls.n	800264c <HAL_RCC_OscConfig+0x1dc>
 80026d0:	e713      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d2:	4d1a      	ldr	r5, [pc, #104]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
 80026d4:	68ab      	ldr	r3, [r5, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b08      	cmp	r3, #8
 80026dc:	f43f aef4 	beq.w	80024c8 <HAL_RCC_OscConfig+0x58>
 80026e0:	4e1a      	ldr	r6, [pc, #104]	; (800274c <HAL_RCC_OscConfig+0x2dc>)
 80026e2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80026e6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	d138      	bne.n	800275c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80026ea:	f7ff fc9d 	bl	8002028 <HAL_GetTick>
 80026ee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	0199      	lsls	r1, r3, #6
 80026f4:	d42c      	bmi.n	8002750 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002702:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002704:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002708:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800270a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800270e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002710:	4c0a      	ldr	r4, [pc, #40]	; (800273c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002712:	0852      	lsrs	r2, r2, #1
 8002714:	3a01      	subs	r2, #1
 8002716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800271a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800271c:	2301      	movs	r3, #1
 800271e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002720:	f7ff fc82 	bl	8002028 <HAL_GetTick>
 8002724:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	019a      	lsls	r2, r3, #6
 800272a:	f53f aeb6 	bmi.w	800249a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff fc7b 	bl	8002028 <HAL_GetTick>
 8002732:	1b40      	subs	r0, r0, r5
 8002734:	2802      	cmp	r0, #2
 8002736:	d9f6      	bls.n	8002726 <HAL_RCC_OscConfig+0x2b6>
 8002738:	e6df      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	42470000 	.word	0x42470000
 8002744:	42470e80 	.word	0x42470e80
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7ff fc6a 	bl	8002028 <HAL_GetTick>
 8002754:	1bc0      	subs	r0, r0, r7
 8002756:	2802      	cmp	r0, #2
 8002758:	d9ca      	bls.n	80026f0 <HAL_RCC_OscConfig+0x280>
 800275a:	e6ce      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800275c:	f7ff fc64 	bl	8002028 <HAL_GetTick>
 8002760:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	682b      	ldr	r3, [r5, #0]
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	f57f ae98 	bpl.w	800249a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7ff fc5d 	bl	8002028 <HAL_GetTick>
 800276e:	1b00      	subs	r0, r0, r4
 8002770:	2802      	cmp	r0, #2
 8002772:	d9f6      	bls.n	8002762 <HAL_RCC_OscConfig+0x2f2>
 8002774:	e6c1      	b.n	80024fa <HAL_RCC_OscConfig+0x8a>
 8002776:	bf00      	nop

08002778 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	4604      	mov	r4, r0
 800277c:	460e      	mov	r6, r1
 800277e:	4615      	mov	r5, r2
 8002780:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002782:	6821      	ldr	r1, [r4, #0]
 8002784:	688a      	ldr	r2, [r1, #8]
 8002786:	ea36 0302 	bics.w	r3, r6, r2
 800278a:	d001      	beq.n	8002790 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800278c:	2000      	movs	r0, #0
 800278e:	e02d      	b.n	80027ec <SPI_WaitFlagStateUntilTimeout.constprop.7+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002790:	1c6b      	adds	r3, r5, #1
 8002792:	d0f7      	beq.n	8002784 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002794:	f7ff fc48 	bl	8002028 <HAL_GetTick>
 8002798:	1bc0      	subs	r0, r0, r7
 800279a:	4285      	cmp	r5, r0
 800279c:	d8f1      	bhi.n	8002782 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027a6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a8:	6862      	ldr	r2, [r4, #4]
 80027aa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80027ae:	d10a      	bne.n	80027c6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
 80027b0:	68a2      	ldr	r2, [r4, #8]
 80027b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80027b6:	d002      	beq.n	80027be <SPI_WaitFlagStateUntilTimeout.constprop.7+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80027bc:	d103      	bne.n	80027c6 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80027cc:	d107      	bne.n	80027de <SPI_WaitFlagStateUntilTimeout.constprop.7+0x66>
          SPI_RESET_CRC(hspi);
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027dc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80027de:	2301      	movs	r3, #1
 80027e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80027e4:	2300      	movs	r3, #0
 80027e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80027ea:	2003      	movs	r0, #3
}
 80027ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027ee <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027ee:	b538      	push	{r3, r4, r5, lr}
 80027f0:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f2:	6842      	ldr	r2, [r0, #4]
 80027f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80027f8:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027fa:	d11f      	bne.n	800283c <SPI_EndRxTransaction+0x4e>
 80027fc:	6882      	ldr	r2, [r0, #8]
 80027fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002802:	d002      	beq.n	800280a <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002804:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002808:	d107      	bne.n	800281a <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800280a:	6825      	ldr	r5, [r4, #0]
 800280c:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800280e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002812:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002816:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002818:	d007      	beq.n	800282a <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800281a:	460a      	mov	r2, r1
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff ffaa 	bl	8002778 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8002824:	b920      	cbnz	r0, 8002830 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
}
 8002828:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800282a:	460a      	mov	r2, r1
 800282c:	2101      	movs	r1, #1
 800282e:	e7f6      	b.n	800281e <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002832:	f043 0320 	orr.w	r3, r3, #32
 8002836:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002838:	2003      	movs	r0, #3
 800283a:	e7f5      	b.n	8002828 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800283c:	460a      	mov	r2, r1
 800283e:	2101      	movs	r1, #1
 8002840:	e7ee      	b.n	8002820 <SPI_EndRxTransaction+0x32>
	...

08002844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002846:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <SPI_EndRxTxTransaction+0x50>)
 800284a:	4e13      	ldr	r6, [pc, #76]	; (8002898 <SPI_EndRxTxTransaction+0x54>)
 800284c:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002850:	fbb5 f6f6 	udiv	r6, r5, r6
 8002854:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002858:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800285a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800285e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002860:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002862:	d10b      	bne.n	800287c <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002864:	460a      	mov	r2, r1
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	f7ff ff86 	bl	8002778 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 800286c:	b178      	cbz	r0, 800288e <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800286e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002870:	f043 0320 	orr.w	r3, r3, #32
 8002874:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002876:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002878:	b002      	add	sp, #8
 800287a:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	b133      	cbz	r3, 800288e <SPI_EndRxTxTransaction+0x4a>
      count--;
 8002880:	9b01      	ldr	r3, [sp, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	061b      	lsls	r3, r3, #24
 800288c:	d4f6      	bmi.n	800287c <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 800288e:	2000      	movs	r0, #0
 8002890:	e7f2      	b.n	8002878 <SPI_EndRxTxTransaction+0x34>
 8002892:	bf00      	nop
 8002894:	20000050 	.word	0x20000050
 8002898:	016e3600 	.word	0x016e3600

0800289c <HAL_SPI_MspInit>:
}
 800289c:	4770      	bx	lr

0800289e <HAL_SPI_Init>:
{
 800289e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80028a0:	4604      	mov	r4, r0
 80028a2:	2800      	cmp	r0, #0
 80028a4:	d036      	beq.n	8002914 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80028aa:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80028ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028b2:	b91b      	cbnz	r3, 80028bc <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 80028b4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80028b8:	f7ff fff0 	bl	800289c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80028bc:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028be:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80028c6:	680b      	ldr	r3, [r1, #0]
 80028c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028cc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028ce:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80028d2:	4303      	orrs	r3, r0
 80028d4:	68e0      	ldr	r0, [r4, #12]
 80028d6:	4303      	orrs	r3, r0
 80028d8:	6920      	ldr	r0, [r4, #16]
 80028da:	4303      	orrs	r3, r0
 80028dc:	6960      	ldr	r0, [r4, #20]
 80028de:	4303      	orrs	r3, r0
 80028e0:	69e0      	ldr	r0, [r4, #28]
 80028e2:	4303      	orrs	r3, r0
 80028e4:	6a20      	ldr	r0, [r4, #32]
 80028e6:	4303      	orrs	r3, r0
 80028e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028ea:	4303      	orrs	r3, r0
 80028ec:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80028f0:	4303      	orrs	r3, r0
 80028f2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80028f4:	0c12      	lsrs	r2, r2, #16
 80028f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f8:	f002 0204 	and.w	r2, r2, #4
 80028fc:	431a      	orrs	r2, r3
 80028fe:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002900:	69cb      	ldr	r3, [r1, #28]
 8002902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002906:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002908:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800290a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800290c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800290e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002912:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002914:	2001      	movs	r0, #1
 8002916:	e7fc      	b.n	8002912 <HAL_SPI_Init+0x74>

08002918 <HAL_SPI_MspDeInit>:
 8002918:	4770      	bx	lr

0800291a <HAL_SPI_DeInit>:
{
 800291a:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800291c:	4604      	mov	r4, r0
 800291e:	b180      	cbz	r0, 8002942 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8002920:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002922:	2302      	movs	r3, #2
 8002924:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292e:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002930:	f7ff fff2 	bl	8002918 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002934:	2000      	movs	r0, #0
 8002936:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8002938:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 800293c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8002940:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002942:	2001      	movs	r0, #1
 8002944:	e7fc      	b.n	8002940 <HAL_SPI_DeInit+0x26>

08002946 <HAL_SPI_Transmit>:
{
 8002946:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800294a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800294c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002950:	2b01      	cmp	r3, #1
{
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002958:	f000 809b 	beq.w	8002a92 <HAL_SPI_Transmit+0x14c>
 800295c:	2301      	movs	r3, #1
 800295e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002962:	f7ff fb61 	bl	8002028 <HAL_GetTick>
 8002966:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002968:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800296c:	b2c0      	uxtb	r0, r0
 800296e:	2801      	cmp	r0, #1
 8002970:	f040 808d 	bne.w	8002a8e <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8002974:	2d00      	cmp	r5, #0
 8002976:	d05d      	beq.n	8002a34 <HAL_SPI_Transmit+0xee>
 8002978:	f1b8 0f00 	cmp.w	r8, #0
 800297c:	d05a      	beq.n	8002a34 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800297e:	2303      	movs	r3, #3
 8002980:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002984:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002986:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002988:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800298a:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800298c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002990:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002992:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002994:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8002998:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800299a:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 80029a0:	bf08      	it	eq
 80029a2:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 80029a4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 80029a8:	bf04      	itt	eq
 80029aa:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80029ae:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b0:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029b2:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80029b6:	bf5e      	ittt	pl
 80029b8:	6803      	ldrpl	r3, [r0, #0]
 80029ba:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80029be:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	d13e      	bne.n	8002a46 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	b113      	cbz	r3, 80029d0 <HAL_SPI_Transmit+0x8a>
 80029ca:	f1b8 0f01 	cmp.w	r8, #1
 80029ce:	d107      	bne.n	80029e0 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80029d4:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029d6:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80029d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80029e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b9a3      	cbnz	r3, 8002a10 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e6:	463a      	mov	r2, r7
 80029e8:	4631      	mov	r1, r6
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7ff ff2a 	bl	8002844 <SPI_EndRxTxTransaction>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d149      	bne.n	8002a88 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029f4:	68a3      	ldr	r3, [r4, #8]
 80029f6:	b933      	cbnz	r3, 8002a06 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	9201      	str	r2, [sp, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002a08:	3000      	adds	r0, #0
 8002a0a:	bf18      	it	ne
 8002a0c:	2001      	movne	r0, #1
error:
 8002a0e:	e011      	b.n	8002a34 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a10:	6822      	ldr	r2, [r4, #0]
 8002a12:	6893      	ldr	r3, [r2, #8]
 8002a14:	0798      	lsls	r0, r3, #30
 8002a16:	d505      	bpl.n	8002a24 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a1a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002a1e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a20:	6323      	str	r3, [r4, #48]	; 0x30
 8002a22:	e7d9      	b.n	80029d8 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a24:	f7ff fb00 	bl	8002028 <HAL_GetTick>
 8002a28:	1bc0      	subs	r0, r0, r7
 8002a2a:	42b0      	cmp	r0, r6
 8002a2c:	d3d8      	bcc.n	80029e0 <HAL_SPI_Transmit+0x9a>
 8002a2e:	1c71      	adds	r1, r6, #1
 8002a30:	d0d6      	beq.n	80029e0 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002a40:	b002      	add	sp, #8
 8002a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a46:	b113      	cbz	r3, 8002a4e <HAL_SPI_Transmit+0x108>
 8002a48:	f1b8 0f01 	cmp.w	r8, #1
 8002a4c:	d108      	bne.n	8002a60 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a4e:	782b      	ldrb	r3, [r5, #0]
 8002a50:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a54:	3301      	adds	r3, #1
 8002a56:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002a60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0be      	beq.n	80029e6 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	0792      	lsls	r2, r2, #30
 8002a6e:	d503      	bpl.n	8002a78 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	731a      	strb	r2, [r3, #12]
 8002a76:	e7ec      	b.n	8002a52 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a78:	f7ff fad6 	bl	8002028 <HAL_GetTick>
 8002a7c:	1bc0      	subs	r0, r0, r7
 8002a7e:	42b0      	cmp	r0, r6
 8002a80:	d3ee      	bcc.n	8002a60 <HAL_SPI_Transmit+0x11a>
 8002a82:	1c73      	adds	r3, r6, #1
 8002a84:	d0ec      	beq.n	8002a60 <HAL_SPI_Transmit+0x11a>
 8002a86:	e7d4      	b.n	8002a32 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	6563      	str	r3, [r4, #84]	; 0x54
 8002a8c:	e7b2      	b.n	80029f4 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002a8e:	2002      	movs	r0, #2
 8002a90:	e7d0      	b.n	8002a34 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002a92:	2002      	movs	r0, #2
 8002a94:	e7d4      	b.n	8002a40 <HAL_SPI_Transmit+0xfa>

08002a96 <HAL_SPI_TransmitReceive>:
{
 8002a96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a9a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002a9c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002aa0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002aa2:	2b01      	cmp	r3, #1
{
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002aaa:	f000 80e2 	beq.w	8002c72 <HAL_SPI_TransmitReceive+0x1dc>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002ab4:	f7ff fab8 	bl	8002028 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002ab8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002abc:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002abe:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ac0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002ac2:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ac4:	d00a      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x46>
 8002ac6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002aca:	f040 80d0 	bne.w	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ace:	68a0      	ldr	r0, [r4, #8]
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	f040 80cc 	bne.w	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	f040 80c9 	bne.w	8002c6e <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	f000 80c4 	beq.w	8002c6a <HAL_SPI_TransmitReceive+0x1d4>
 8002ae2:	f1b9 0f00 	cmp.w	r9, #0
 8002ae6:	f000 80c0 	beq.w	8002c6a <HAL_SPI_TransmitReceive+0x1d4>
 8002aea:	2e00      	cmp	r6, #0
 8002aec:	f000 80bd 	beq.w	8002c6a <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002af0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002af4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002af8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002afa:	bf1c      	itt	ne
 8002afc:	2305      	movne	r3, #5
 8002afe:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002b06:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b0a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002b0c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002b0e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b10:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002b12:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b14:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002b16:	bf58      	it	pl
 8002b18:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b1a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002b1c:	bf58      	it	pl
 8002b1e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002b22:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002b24:	bf58      	it	pl
 8002b26:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b28:	68e2      	ldr	r2, [r4, #12]
 8002b2a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002b2e:	d158      	bne.n	8002be2 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b30:	b109      	cbz	r1, 8002b36 <HAL_SPI_TransmitReceive+0xa0>
 8002b32:	2e01      	cmp	r6, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b36:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002b3a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002b46:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b9ab      	cbnz	r3, 8002b7a <HAL_SPI_TransmitReceive+0xe4>
 8002b4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b993      	cbnz	r3, 8002b7a <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b54:	4642      	mov	r2, r8
 8002b56:	4639      	mov	r1, r7
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fe73 	bl	8002844 <SPI_EndRxTxTransaction>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	f040 8081 	bne.w	8002c66 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b64:	68a3      	ldr	r3, [r4, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d132      	bne.n	8002bd0 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	9001      	str	r0, [sp, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	9b01      	ldr	r3, [sp, #4]
 8002b78:	e02a      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	6893      	ldr	r3, [r2, #8]
 8002b7e:	0799      	lsls	r1, r3, #30
 8002b80:	d50d      	bpl.n	8002b9e <HAL_SPI_TransmitReceive+0x108>
 8002b82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b153      	cbz	r3, 8002b9e <HAL_SPI_TransmitReceive+0x108>
 8002b88:	b14d      	cbz	r5, 8002b9e <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b8c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b90:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b92:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002b9c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b9e:	6893      	ldr	r3, [r2, #8]
 8002ba0:	07db      	lsls	r3, r3, #31
 8002ba2:	d50c      	bpl.n	8002bbe <HAL_SPI_TransmitReceive+0x128>
 8002ba4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b14b      	cbz	r3, 8002bbe <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bb2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002bbc:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bbe:	f7ff fa33 	bl	8002028 <HAL_GetTick>
 8002bc2:	eba0 0008 	sub.w	r0, r0, r8
 8002bc6:	4287      	cmp	r7, r0
 8002bc8:	d8be      	bhi.n	8002b48 <HAL_SPI_TransmitReceive+0xb2>
 8002bca:	1c7e      	adds	r6, r7, #1
 8002bcc:	d0bc      	beq.n	8002b48 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002bce:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002bdc:	b003      	add	sp, #12
 8002bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be2:	b109      	cbz	r1, 8002be8 <HAL_SPI_TransmitReceive+0x152>
 8002be4:	2e01      	cmp	r6, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be8:	782a      	ldrb	r2, [r5, #0]
 8002bea:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002bf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002bfa:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b91b      	cbnz	r3, 8002c0a <HAL_SPI_TransmitReceive+0x174>
 8002c02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0a4      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c0a:	6822      	ldr	r2, [r4, #0]
 8002c0c:	6893      	ldr	r3, [r2, #8]
 8002c0e:	0798      	lsls	r0, r3, #30
 8002c10:	d50e      	bpl.n	8002c30 <HAL_SPI_TransmitReceive+0x19a>
 8002c12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b15b      	cbz	r3, 8002c30 <HAL_SPI_TransmitReceive+0x19a>
 8002c18:	b155      	cbz	r5, 8002c30 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002c20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c22:	3301      	adds	r3, #1
 8002c24:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002c26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002c2e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c30:	6822      	ldr	r2, [r4, #0]
 8002c32:	6893      	ldr	r3, [r2, #8]
 8002c34:	07d9      	lsls	r1, r3, #31
 8002c36:	d50d      	bpl.n	8002c54 <HAL_SPI_TransmitReceive+0x1be>
 8002c38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	b153      	cbz	r3, 8002c54 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c46:	3301      	adds	r3, #1
 8002c48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002c4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002c52:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c54:	f7ff f9e8 	bl	8002028 <HAL_GetTick>
 8002c58:	eba0 0008 	sub.w	r0, r0, r8
 8002c5c:	4287      	cmp	r7, r0
 8002c5e:	d8cd      	bhi.n	8002bfc <HAL_SPI_TransmitReceive+0x166>
 8002c60:	1c7b      	adds	r3, r7, #1
 8002c62:	d0cb      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x166>
 8002c64:	e7b3      	b.n	8002bce <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c66:	2320      	movs	r3, #32
 8002c68:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	e7b0      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002c6e:	2002      	movs	r0, #2
 8002c70:	e7ae      	b.n	8002bd0 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002c72:	2002      	movs	r0, #2
 8002c74:	e7b2      	b.n	8002bdc <HAL_SPI_TransmitReceive+0x146>

08002c76 <HAL_SPI_Receive>:
{
 8002c76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c7a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c7c:	6843      	ldr	r3, [r0, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002c82:	4604      	mov	r4, r0
 8002c84:	4688      	mov	r8, r1
 8002c86:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c88:	d10c      	bne.n	8002ca4 <HAL_SPI_Receive+0x2e>
 8002c8a:	6883      	ldr	r3, [r0, #8]
 8002c8c:	b953      	cbnz	r3, 8002ca4 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c94:	4613      	mov	r3, r2
 8002c96:	9500      	str	r5, [sp, #0]
 8002c98:	460a      	mov	r2, r1
 8002c9a:	f7ff fefc 	bl	8002a96 <HAL_SPI_TransmitReceive>
}
 8002c9e:	b002      	add	sp, #8
 8002ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002ca4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d079      	beq.n	8002da0 <HAL_SPI_Receive+0x12a>
 8002cac:	2301      	movs	r3, #1
 8002cae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002cb2:	f7ff f9b9 	bl	8002028 <HAL_GetTick>
 8002cb6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002cb8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002cbc:	b2c0      	uxtb	r0, r0
 8002cbe:	2801      	cmp	r0, #1
 8002cc0:	d16c      	bne.n	8002d9c <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8002cc2:	f1b8 0f00 	cmp.w	r8, #0
 8002cc6:	d057      	beq.n	8002d78 <HAL_SPI_Receive+0x102>
 8002cc8:	2f00      	cmp	r7, #0
 8002cca:	d055      	beq.n	8002d78 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd2:	68a2      	ldr	r2, [r4, #8]
  hspi->RxXferSize  = Size;
 8002cd4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cda:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002cdc:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002cde:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ce0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8002ce2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
 8002ce6:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ce8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8002cf0:	bf02      	ittt	eq
 8002cf2:	681a      	ldreq	r2, [r3, #0]
 8002cf4:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8002cf8:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002cfe:	bf5e      	ittt	pl
 8002d00:	681a      	ldrpl	r2, [r3, #0]
 8002d02:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002d06:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	b1f3      	cbz	r3, 8002d4a <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8002d0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	b1fb      	cbz	r3, 8002d52 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	07d2      	lsls	r2, r2, #31
 8002d18:	d535      	bpl.n	8002d86 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d1e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d22:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002d2c:	e7ee      	b.n	8002d0c <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	07d0      	lsls	r0, r2, #31
 8002d34:	d518      	bpl.n	8002d68 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d38:	7b1b      	ldrb	r3, [r3, #12]
 8002d3a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d3e:	3301      	adds	r3, #1
 8002d40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002d4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ed      	bne.n	8002d2e <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d52:	4632      	mov	r2, r6
 8002d54:	4629      	mov	r1, r5
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff fd49 	bl	80027ee <SPI_EndRxTransaction>
 8002d5c:	b9d8      	cbnz	r0, 8002d96 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002d60:	3000      	adds	r0, #0
 8002d62:	bf18      	it	ne
 8002d64:	2001      	movne	r0, #1
error :
 8002d66:	e007      	b.n	8002d78 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d68:	f7ff f95e 	bl	8002028 <HAL_GetTick>
 8002d6c:	1b80      	subs	r0, r0, r6
 8002d6e:	42a8      	cmp	r0, r5
 8002d70:	d3eb      	bcc.n	8002d4a <HAL_SPI_Receive+0xd4>
 8002d72:	1c69      	adds	r1, r5, #1
 8002d74:	d0e9      	beq.n	8002d4a <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8002d76:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002d84:	e78b      	b.n	8002c9e <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d86:	f7ff f94f 	bl	8002028 <HAL_GetTick>
 8002d8a:	1b80      	subs	r0, r0, r6
 8002d8c:	42a8      	cmp	r0, r5
 8002d8e:	d3bd      	bcc.n	8002d0c <HAL_SPI_Receive+0x96>
 8002d90:	1c6b      	adds	r3, r5, #1
 8002d92:	d0bb      	beq.n	8002d0c <HAL_SPI_Receive+0x96>
 8002d94:	e7ef      	b.n	8002d76 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d96:	2320      	movs	r3, #32
 8002d98:	6563      	str	r3, [r4, #84]	; 0x54
 8002d9a:	e7e0      	b.n	8002d5e <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002d9c:	2002      	movs	r0, #2
 8002d9e:	e7eb      	b.n	8002d78 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8002da0:	2002      	movs	r0, #2
 8002da2:	e77c      	b.n	8002c9e <HAL_SPI_Receive+0x28>

08002da4 <HAL_SRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsram);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */ 
}
 8002da4:	4770      	bx	lr

08002da6 <HAL_SRAM_Init>:
{ 
 8002da6:	b570      	push	{r4, r5, r6, lr}
 8002da8:	460e      	mov	r6, r1
 8002daa:	4615      	mov	r5, r2
  if(hsram == NULL)
 8002dac:	4604      	mov	r4, r0
 8002dae:	b310      	cbz	r0, 8002df6 <HAL_SRAM_Init+0x50>
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002db0:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8002db4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002db8:	b91b      	cbnz	r3, 8002dc2 <HAL_SRAM_Init+0x1c>
    hsram->Lock = HAL_UNLOCKED;
 8002dba:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    HAL_SRAM_MspInit(hsram);
 8002dbe:	f7ff fff1 	bl	8002da4 <HAL_SRAM_MspInit>
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002dc2:	f104 0108 	add.w	r1, r4, #8
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	f000 f818 	bl	8002dfc <FSMC_NORSRAM_Init>
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002dcc:	68a2      	ldr	r2, [r4, #8]
 8002dce:	6820      	ldr	r0, [r4, #0]
 8002dd0:	4631      	mov	r1, r6
 8002dd2:	f000 f851 	bl	8002e78 <FSMC_NORSRAM_Timing_Init>
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dd8:	68a2      	ldr	r2, [r4, #8]
 8002dda:	6860      	ldr	r0, [r4, #4]
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f000 f871 	bl	8002ec4 <FSMC_NORSRAM_Extended_Timing_Init>
 8002de2:	68a1      	ldr	r1, [r4, #8]
 8002de4:	6822      	ldr	r2, [r4, #0]
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002de6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 8002df2:	2000      	movs	r0, #0
}
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
 8002df8:	e7fc      	b.n	8002df4 <HAL_SRAM_Init+0x4e>
	...

08002dfc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8002dfe:	680d      	ldr	r5, [r1, #0]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8002e00:	4e1c      	ldr	r6, [pc, #112]	; (8002e74 <FSMC_NORSRAM_Init+0x78>)
  tmpr = Device->BTCR[Init->NSBank];
 8002e02:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 8002e06:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002e0a:	684a      	ldr	r2, [r1, #4]
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8002e0c:	401e      	ands	r6, r3
                     Init->MemoryType           |\
 8002e0e:	68cb      	ldr	r3, [r1, #12]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002e10:	ea4c 0202 	orr.w	r2, ip, r2
                     Init->MemoryType           |\
 8002e14:	4313      	orrs	r3, r2
                     Init->MemoryDataWidth      |\
 8002e16:	690a      	ldr	r2, [r1, #16]
 8002e18:	4313      	orrs	r3, r2
                     Init->BurstAccessMode      |\
 8002e1a:	694a      	ldr	r2, [r1, #20]
 8002e1c:	4313      	orrs	r3, r2
                     Init->WaitSignalPolarity   |\
 8002e1e:	69ca      	ldr	r2, [r1, #28]
 8002e20:	4313      	orrs	r3, r2
                     Init->WaitSignalActive     |\
 8002e22:	6a0a      	ldr	r2, [r1, #32]
 8002e24:	4313      	orrs	r3, r2
                     Init->WriteOperation       |\
 8002e26:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002e28:	4313      	orrs	r3, r2
                     Init->WaitSignal           |\
 8002e2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002e2c:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
 8002e2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                     Init->AsynchronousWait     |\
                     Init->WriteBurst           |\
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
 8002e30:	e9d1 740d 	ldrd	r7, r4, [r1, #52]	; 0x34
                     Init->ExtendedMode         |\
 8002e34:	4313      	orrs	r3, r2
                     Init->AsynchronousWait     |\
 8002e36:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002e38:	4313      	orrs	r3, r2
                     Init->ContinuousClock      |\
 8002e3a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
                     Init->WriteBurst           |\
 8002e3c:	433b      	orrs	r3, r7
                     Init->ContinuousClock      |\
 8002e3e:	4313      	orrs	r3, r2
                     Init->PageSize             |\
 8002e40:	4323      	orrs	r3, r4
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8002e42:	4333      	orrs	r3, r6
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002e44:	f1bc 0f08 	cmp.w	ip, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002e48:	bf08      	it	eq
 8002e4a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40

  Device->BTCR[Init->NSBank] = tmpr;

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8002e4e:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
  Device->BTCR[Init->NSBank] = tmpr;
 8002e52:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8002e56:	d108      	bne.n	8002e6a <FSMC_NORSRAM_Init+0x6e>
 8002e58:	b14d      	cbz	r5, 8002e6e <FSMC_NORSRAM_Init+0x72>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8002e5a:	6803      	ldr	r3, [r0, #0]
 8002e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e60:	6003      	str	r3, [r0, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8002e62:	6803      	ldr	r3, [r0, #0]
 8002e64:	431c      	orrs	r4, r3
 8002e66:	6004      	str	r4, [r0, #0]
 8002e68:	e001      	b.n	8002e6e <FSMC_NORSRAM_Init+0x72>
  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8002e6a:	2d00      	cmp	r5, #0
 8002e6c:	d1f9      	bne.n	8002e62 <FSMC_NORSRAM_Init+0x66>
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8002e6e:	2000      	movs	r0, #0
 8002e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e72:	bf00      	nop
 8002e74:	ffc00480 	.word	0xffc00480

08002e78 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002e78:	b570      	push	{r4, r5, r6, lr}
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	698e      	ldr	r6, [r1, #24]
                    ((Timing->AddressHoldTime) << 4U)          |\
                    ((Timing->DataSetupTime) << 8U)            |\
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8002e7e:	690c      	ldr	r4, [r1, #16]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002e80:	4333      	orrs	r3, r6
                    ((Timing->AddressHoldTime) << 4U)          |\
 8002e82:	684e      	ldr	r6, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002e84:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                    ((Timing->DataSetupTime) << 8U)            |\
 8002e88:	688e      	ldr	r6, [r1, #8]
 8002e8a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002e8e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002e92:	68ce      	ldr	r6, [r1, #12]
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8002e94:	6949      	ldr	r1, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 8002e96:	6855      	ldr	r5, [r2, #4]
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8002e98:	3c01      	subs	r4, #1
 8002e9a:	0524      	lsls	r4, r4, #20
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002e9c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002ea0:	4323      	orrs	r3, r4
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8002ea2:	3902      	subs	r1, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8002ea4:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002ea8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002eac:	432b      	orrs	r3, r5
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 8002eae:	6053      	str	r3, [r2, #4]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8002eb0:	6803      	ldr	r3, [r0, #0]
 8002eb2:	02db      	lsls	r3, r3, #11
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8002eb4:	bf41      	itttt	mi
 8002eb6:	6843      	ldrmi	r3, [r0, #4]
 8002eb8:	f423 0370 	bicmi.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8002ebc:	431c      	orrmi	r4, r3
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8002ebe:	6044      	strmi	r4, [r0, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}

08002ec4 <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8002ec8:	b530      	push	{r4, r5, lr}
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002eca:	d114      	bne.n	8002ef6 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8002ecc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	; (8002efc <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                      ((Timing->AddressHoldTime) << 4U)          |\
                      ((Timing->DataSetupTime) << 8U)            |\
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002ed2:	698d      	ldr	r5, [r1, #24]
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8002ed4:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002ed6:	680b      	ldr	r3, [r1, #0]
 8002ed8:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 8002eda:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002edc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 8002ee0:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8002ee2:	68c9      	ldr	r1, [r1, #12]
 8002ee4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8002eec:	4323      	orrs	r3, r4
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002eee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002ef6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002efa:	e7f8      	b.n	8002eee <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8002efc:	cff00000 	.word	0xcff00000

08002f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002f04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f06:	e003      	b.n	8002f10 <LoopCopyDataInit>

08002f08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f0e:	3104      	adds	r1, #4

08002f10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f10:	480b      	ldr	r0, [pc, #44]	; (8002f40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f18:	d3f6      	bcc.n	8002f08 <CopyDataInit>
  ldr  r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f1c:	e002      	b.n	8002f24 <LoopFillZerobss>

08002f1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002f1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f20:	f842 3b04 	str.w	r3, [r2], #4

08002f24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f28:	d3f9      	bcc.n	8002f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f2a:	f7fe fdaf 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f000 f811 	bl	8002f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f32:	f7fd fb4d 	bl	80005d0 <main>
  bx  lr    
 8002f36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f38:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002f3c:	08007af0 	.word	0x08007af0
  ldr  r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f44:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002f48:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8002f4c:	20000b00 	.word	0x20000b00

08002f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC_IRQHandler>
	...

08002f54 <__libc_init_array>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	4e0d      	ldr	r6, [pc, #52]	; (8002f8c <__libc_init_array+0x38>)
 8002f58:	4c0d      	ldr	r4, [pc, #52]	; (8002f90 <__libc_init_array+0x3c>)
 8002f5a:	1ba4      	subs	r4, r4, r6
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	2500      	movs	r5, #0
 8002f60:	42a5      	cmp	r5, r4
 8002f62:	d109      	bne.n	8002f78 <__libc_init_array+0x24>
 8002f64:	4e0b      	ldr	r6, [pc, #44]	; (8002f94 <__libc_init_array+0x40>)
 8002f66:	4c0c      	ldr	r4, [pc, #48]	; (8002f98 <__libc_init_array+0x44>)
 8002f68:	f000 fcc8 	bl	80038fc <_init>
 8002f6c:	1ba4      	subs	r4, r4, r6
 8002f6e:	10a4      	asrs	r4, r4, #2
 8002f70:	2500      	movs	r5, #0
 8002f72:	42a5      	cmp	r5, r4
 8002f74:	d105      	bne.n	8002f82 <__libc_init_array+0x2e>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f7c:	4798      	blx	r3
 8002f7e:	3501      	adds	r5, #1
 8002f80:	e7ee      	b.n	8002f60 <__libc_init_array+0xc>
 8002f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f86:	4798      	blx	r3
 8002f88:	3501      	adds	r5, #1
 8002f8a:	e7f2      	b.n	8002f72 <__libc_init_array+0x1e>
 8002f8c:	08007ae8 	.word	0x08007ae8
 8002f90:	08007ae8 	.word	0x08007ae8
 8002f94:	08007ae8 	.word	0x08007ae8
 8002f98:	08007aec 	.word	0x08007aec

08002f9c <memset>:
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <siprintf>:
 8002fac:	b40e      	push	{r1, r2, r3}
 8002fae:	b500      	push	{lr}
 8002fb0:	b09c      	sub	sp, #112	; 0x70
 8002fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fb4:	9002      	str	r0, [sp, #8]
 8002fb6:	9006      	str	r0, [sp, #24]
 8002fb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fbc:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <siprintf+0x38>)
 8002fbe:	9107      	str	r1, [sp, #28]
 8002fc0:	9104      	str	r1, [sp, #16]
 8002fc2:	4909      	ldr	r1, [pc, #36]	; (8002fe8 <siprintf+0x3c>)
 8002fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fc8:	9105      	str	r1, [sp, #20]
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	a902      	add	r1, sp, #8
 8002fd0:	f000 f9a2 	bl	8003318 <_svfiprintf_r>
 8002fd4:	9b02      	ldr	r3, [sp, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	b01c      	add	sp, #112	; 0x70
 8002fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fe0:	b003      	add	sp, #12
 8002fe2:	4770      	bx	lr
 8002fe4:	20000098 	.word	0x20000098
 8002fe8:	ffff0208 	.word	0xffff0208

08002fec <strcpy>:
 8002fec:	4603      	mov	r3, r0
 8002fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ff2:	f803 2b01 	strb.w	r2, [r3], #1
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d1f9      	bne.n	8002fee <strcpy+0x2>
 8002ffa:	4770      	bx	lr

08002ffc <strncpy>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	3901      	subs	r1, #1
 8003000:	4604      	mov	r4, r0
 8003002:	b902      	cbnz	r2, 8003006 <strncpy+0xa>
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	4623      	mov	r3, r4
 8003008:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800300c:	f803 5b01 	strb.w	r5, [r3], #1
 8003010:	1e56      	subs	r6, r2, #1
 8003012:	b92d      	cbnz	r5, 8003020 <strncpy+0x24>
 8003014:	4414      	add	r4, r2
 8003016:	42a3      	cmp	r3, r4
 8003018:	d0f4      	beq.n	8003004 <strncpy+0x8>
 800301a:	f803 5b01 	strb.w	r5, [r3], #1
 800301e:	e7fa      	b.n	8003016 <strncpy+0x1a>
 8003020:	461c      	mov	r4, r3
 8003022:	4632      	mov	r2, r6
 8003024:	e7ed      	b.n	8003002 <strncpy+0x6>

08003026 <strstr>:
 8003026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003028:	7803      	ldrb	r3, [r0, #0]
 800302a:	b17b      	cbz	r3, 800304c <strstr+0x26>
 800302c:	4604      	mov	r4, r0
 800302e:	7823      	ldrb	r3, [r4, #0]
 8003030:	4620      	mov	r0, r4
 8003032:	1c66      	adds	r6, r4, #1
 8003034:	b17b      	cbz	r3, 8003056 <strstr+0x30>
 8003036:	1e4a      	subs	r2, r1, #1
 8003038:	1e63      	subs	r3, r4, #1
 800303a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800303e:	b14d      	cbz	r5, 8003054 <strstr+0x2e>
 8003040:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003044:	42af      	cmp	r7, r5
 8003046:	4634      	mov	r4, r6
 8003048:	d0f7      	beq.n	800303a <strstr+0x14>
 800304a:	e7f0      	b.n	800302e <strstr+0x8>
 800304c:	780b      	ldrb	r3, [r1, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf18      	it	ne
 8003052:	2000      	movne	r0, #0
 8003054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003056:	4618      	mov	r0, r3
 8003058:	e7fc      	b.n	8003054 <strstr+0x2e>
	...

0800305c <strtok>:
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <strtok+0x50>)
 800305e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003062:	681d      	ldr	r5, [r3, #0]
 8003064:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003066:	4606      	mov	r6, r0
 8003068:	460f      	mov	r7, r1
 800306a:	b9b4      	cbnz	r4, 800309a <strtok+0x3e>
 800306c:	2050      	movs	r0, #80	; 0x50
 800306e:	f000 f849 	bl	8003104 <malloc>
 8003072:	65a8      	str	r0, [r5, #88]	; 0x58
 8003074:	e9c0 4400 	strd	r4, r4, [r0]
 8003078:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800307c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003080:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003084:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003088:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800308c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003090:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003094:	6184      	str	r4, [r0, #24]
 8003096:	7704      	strb	r4, [r0, #28]
 8003098:	6244      	str	r4, [r0, #36]	; 0x24
 800309a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800309c:	4639      	mov	r1, r7
 800309e:	4630      	mov	r0, r6
 80030a0:	2301      	movs	r3, #1
 80030a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030a6:	f000 b803 	b.w	80030b0 <__strtok_r>
 80030aa:	bf00      	nop
 80030ac:	20000098 	.word	0x20000098

080030b0 <__strtok_r>:
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b2:	b918      	cbnz	r0, 80030bc <__strtok_r+0xc>
 80030b4:	6810      	ldr	r0, [r2, #0]
 80030b6:	b908      	cbnz	r0, 80030bc <__strtok_r+0xc>
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ba:	4620      	mov	r0, r4
 80030bc:	4604      	mov	r4, r0
 80030be:	460f      	mov	r7, r1
 80030c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80030c4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80030c8:	b91e      	cbnz	r6, 80030d2 <__strtok_r+0x22>
 80030ca:	b96d      	cbnz	r5, 80030e8 <__strtok_r+0x38>
 80030cc:	6015      	str	r5, [r2, #0]
 80030ce:	4628      	mov	r0, r5
 80030d0:	e7f2      	b.n	80030b8 <__strtok_r+0x8>
 80030d2:	42b5      	cmp	r5, r6
 80030d4:	d1f6      	bne.n	80030c4 <__strtok_r+0x14>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ef      	bne.n	80030ba <__strtok_r+0xa>
 80030da:	6014      	str	r4, [r2, #0]
 80030dc:	7003      	strb	r3, [r0, #0]
 80030de:	e7eb      	b.n	80030b8 <__strtok_r+0x8>
 80030e0:	462b      	mov	r3, r5
 80030e2:	e00d      	b.n	8003100 <__strtok_r+0x50>
 80030e4:	b926      	cbnz	r6, 80030f0 <__strtok_r+0x40>
 80030e6:	461c      	mov	r4, r3
 80030e8:	4623      	mov	r3, r4
 80030ea:	460f      	mov	r7, r1
 80030ec:	f813 5b01 	ldrb.w	r5, [r3], #1
 80030f0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80030f4:	42b5      	cmp	r5, r6
 80030f6:	d1f5      	bne.n	80030e4 <__strtok_r+0x34>
 80030f8:	2d00      	cmp	r5, #0
 80030fa:	d0f1      	beq.n	80030e0 <__strtok_r+0x30>
 80030fc:	2100      	movs	r1, #0
 80030fe:	7021      	strb	r1, [r4, #0]
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e7d9      	b.n	80030b8 <__strtok_r+0x8>

08003104 <malloc>:
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <malloc+0xc>)
 8003106:	4601      	mov	r1, r0
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f000 b851 	b.w	80031b0 <_malloc_r>
 800310e:	bf00      	nop
 8003110:	20000098 	.word	0x20000098

08003114 <_free_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	4605      	mov	r5, r0
 8003118:	2900      	cmp	r1, #0
 800311a:	d045      	beq.n	80031a8 <_free_r+0x94>
 800311c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003120:	1f0c      	subs	r4, r1, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	bfb8      	it	lt
 8003126:	18e4      	addlt	r4, r4, r3
 8003128:	f000 fbaa 	bl	8003880 <__malloc_lock>
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <_free_r+0x98>)
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	4610      	mov	r0, r2
 8003132:	b933      	cbnz	r3, 8003142 <_free_r+0x2e>
 8003134:	6063      	str	r3, [r4, #4]
 8003136:	6014      	str	r4, [r2, #0]
 8003138:	4628      	mov	r0, r5
 800313a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800313e:	f000 bba0 	b.w	8003882 <__malloc_unlock>
 8003142:	42a3      	cmp	r3, r4
 8003144:	d90c      	bls.n	8003160 <_free_r+0x4c>
 8003146:	6821      	ldr	r1, [r4, #0]
 8003148:	1862      	adds	r2, r4, r1
 800314a:	4293      	cmp	r3, r2
 800314c:	bf04      	itt	eq
 800314e:	681a      	ldreq	r2, [r3, #0]
 8003150:	685b      	ldreq	r3, [r3, #4]
 8003152:	6063      	str	r3, [r4, #4]
 8003154:	bf04      	itt	eq
 8003156:	1852      	addeq	r2, r2, r1
 8003158:	6022      	streq	r2, [r4, #0]
 800315a:	6004      	str	r4, [r0, #0]
 800315c:	e7ec      	b.n	8003138 <_free_r+0x24>
 800315e:	4613      	mov	r3, r2
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	b10a      	cbz	r2, 8003168 <_free_r+0x54>
 8003164:	42a2      	cmp	r2, r4
 8003166:	d9fa      	bls.n	800315e <_free_r+0x4a>
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	1858      	adds	r0, r3, r1
 800316c:	42a0      	cmp	r0, r4
 800316e:	d10b      	bne.n	8003188 <_free_r+0x74>
 8003170:	6820      	ldr	r0, [r4, #0]
 8003172:	4401      	add	r1, r0
 8003174:	1858      	adds	r0, r3, r1
 8003176:	4282      	cmp	r2, r0
 8003178:	6019      	str	r1, [r3, #0]
 800317a:	d1dd      	bne.n	8003138 <_free_r+0x24>
 800317c:	6810      	ldr	r0, [r2, #0]
 800317e:	6852      	ldr	r2, [r2, #4]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	4401      	add	r1, r0
 8003184:	6019      	str	r1, [r3, #0]
 8003186:	e7d7      	b.n	8003138 <_free_r+0x24>
 8003188:	d902      	bls.n	8003190 <_free_r+0x7c>
 800318a:	230c      	movs	r3, #12
 800318c:	602b      	str	r3, [r5, #0]
 800318e:	e7d3      	b.n	8003138 <_free_r+0x24>
 8003190:	6820      	ldr	r0, [r4, #0]
 8003192:	1821      	adds	r1, r4, r0
 8003194:	428a      	cmp	r2, r1
 8003196:	bf04      	itt	eq
 8003198:	6811      	ldreq	r1, [r2, #0]
 800319a:	6852      	ldreq	r2, [r2, #4]
 800319c:	6062      	str	r2, [r4, #4]
 800319e:	bf04      	itt	eq
 80031a0:	1809      	addeq	r1, r1, r0
 80031a2:	6021      	streq	r1, [r4, #0]
 80031a4:	605c      	str	r4, [r3, #4]
 80031a6:	e7c7      	b.n	8003138 <_free_r+0x24>
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
 80031aa:	bf00      	nop
 80031ac:	20000120 	.word	0x20000120

080031b0 <_malloc_r>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	1ccd      	adds	r5, r1, #3
 80031b4:	f025 0503 	bic.w	r5, r5, #3
 80031b8:	3508      	adds	r5, #8
 80031ba:	2d0c      	cmp	r5, #12
 80031bc:	bf38      	it	cc
 80031be:	250c      	movcc	r5, #12
 80031c0:	2d00      	cmp	r5, #0
 80031c2:	4606      	mov	r6, r0
 80031c4:	db01      	blt.n	80031ca <_malloc_r+0x1a>
 80031c6:	42a9      	cmp	r1, r5
 80031c8:	d903      	bls.n	80031d2 <_malloc_r+0x22>
 80031ca:	230c      	movs	r3, #12
 80031cc:	6033      	str	r3, [r6, #0]
 80031ce:	2000      	movs	r0, #0
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	f000 fb55 	bl	8003880 <__malloc_lock>
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <_malloc_r+0xac>)
 80031d8:	6814      	ldr	r4, [r2, #0]
 80031da:	4621      	mov	r1, r4
 80031dc:	b991      	cbnz	r1, 8003204 <_malloc_r+0x54>
 80031de:	4c20      	ldr	r4, [pc, #128]	; (8003260 <_malloc_r+0xb0>)
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	b91b      	cbnz	r3, 80031ec <_malloc_r+0x3c>
 80031e4:	4630      	mov	r0, r6
 80031e6:	f000 fb17 	bl	8003818 <_sbrk_r>
 80031ea:	6020      	str	r0, [r4, #0]
 80031ec:	4629      	mov	r1, r5
 80031ee:	4630      	mov	r0, r6
 80031f0:	f000 fb12 	bl	8003818 <_sbrk_r>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d124      	bne.n	8003242 <_malloc_r+0x92>
 80031f8:	230c      	movs	r3, #12
 80031fa:	6033      	str	r3, [r6, #0]
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 fb40 	bl	8003882 <__malloc_unlock>
 8003202:	e7e4      	b.n	80031ce <_malloc_r+0x1e>
 8003204:	680b      	ldr	r3, [r1, #0]
 8003206:	1b5b      	subs	r3, r3, r5
 8003208:	d418      	bmi.n	800323c <_malloc_r+0x8c>
 800320a:	2b0b      	cmp	r3, #11
 800320c:	d90f      	bls.n	800322e <_malloc_r+0x7e>
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	50cd      	str	r5, [r1, r3]
 8003212:	18cc      	adds	r4, r1, r3
 8003214:	4630      	mov	r0, r6
 8003216:	f000 fb34 	bl	8003882 <__malloc_unlock>
 800321a:	f104 000b 	add.w	r0, r4, #11
 800321e:	1d23      	adds	r3, r4, #4
 8003220:	f020 0007 	bic.w	r0, r0, #7
 8003224:	1ac3      	subs	r3, r0, r3
 8003226:	d0d3      	beq.n	80031d0 <_malloc_r+0x20>
 8003228:	425a      	negs	r2, r3
 800322a:	50e2      	str	r2, [r4, r3]
 800322c:	e7d0      	b.n	80031d0 <_malloc_r+0x20>
 800322e:	428c      	cmp	r4, r1
 8003230:	684b      	ldr	r3, [r1, #4]
 8003232:	bf16      	itet	ne
 8003234:	6063      	strne	r3, [r4, #4]
 8003236:	6013      	streq	r3, [r2, #0]
 8003238:	460c      	movne	r4, r1
 800323a:	e7eb      	b.n	8003214 <_malloc_r+0x64>
 800323c:	460c      	mov	r4, r1
 800323e:	6849      	ldr	r1, [r1, #4]
 8003240:	e7cc      	b.n	80031dc <_malloc_r+0x2c>
 8003242:	1cc4      	adds	r4, r0, #3
 8003244:	f024 0403 	bic.w	r4, r4, #3
 8003248:	42a0      	cmp	r0, r4
 800324a:	d005      	beq.n	8003258 <_malloc_r+0xa8>
 800324c:	1a21      	subs	r1, r4, r0
 800324e:	4630      	mov	r0, r6
 8003250:	f000 fae2 	bl	8003818 <_sbrk_r>
 8003254:	3001      	adds	r0, #1
 8003256:	d0cf      	beq.n	80031f8 <_malloc_r+0x48>
 8003258:	6025      	str	r5, [r4, #0]
 800325a:	e7db      	b.n	8003214 <_malloc_r+0x64>
 800325c:	20000120 	.word	0x20000120
 8003260:	20000124 	.word	0x20000124

08003264 <__ssputs_r>:
 8003264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	688e      	ldr	r6, [r1, #8]
 800326a:	429e      	cmp	r6, r3
 800326c:	4682      	mov	sl, r0
 800326e:	460c      	mov	r4, r1
 8003270:	4690      	mov	r8, r2
 8003272:	4699      	mov	r9, r3
 8003274:	d837      	bhi.n	80032e6 <__ssputs_r+0x82>
 8003276:	898a      	ldrh	r2, [r1, #12]
 8003278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800327c:	d031      	beq.n	80032e2 <__ssputs_r+0x7e>
 800327e:	6825      	ldr	r5, [r4, #0]
 8003280:	6909      	ldr	r1, [r1, #16]
 8003282:	1a6f      	subs	r7, r5, r1
 8003284:	6965      	ldr	r5, [r4, #20]
 8003286:	2302      	movs	r3, #2
 8003288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800328c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003290:	f109 0301 	add.w	r3, r9, #1
 8003294:	443b      	add	r3, r7
 8003296:	429d      	cmp	r5, r3
 8003298:	bf38      	it	cc
 800329a:	461d      	movcc	r5, r3
 800329c:	0553      	lsls	r3, r2, #21
 800329e:	d530      	bpl.n	8003302 <__ssputs_r+0x9e>
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7ff ff85 	bl	80031b0 <_malloc_r>
 80032a6:	4606      	mov	r6, r0
 80032a8:	b950      	cbnz	r0, 80032c0 <__ssputs_r+0x5c>
 80032aa:	230c      	movs	r3, #12
 80032ac:	f8ca 3000 	str.w	r3, [sl]
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c0:	463a      	mov	r2, r7
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	f000 fab8 	bl	8003838 <memcpy>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	6165      	str	r5, [r4, #20]
 80032d8:	443e      	add	r6, r7
 80032da:	1bed      	subs	r5, r5, r7
 80032dc:	6026      	str	r6, [r4, #0]
 80032de:	60a5      	str	r5, [r4, #8]
 80032e0:	464e      	mov	r6, r9
 80032e2:	454e      	cmp	r6, r9
 80032e4:	d900      	bls.n	80032e8 <__ssputs_r+0x84>
 80032e6:	464e      	mov	r6, r9
 80032e8:	4632      	mov	r2, r6
 80032ea:	4641      	mov	r1, r8
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	f000 faae 	bl	800384e <memmove>
 80032f2:	68a3      	ldr	r3, [r4, #8]
 80032f4:	1b9b      	subs	r3, r3, r6
 80032f6:	60a3      	str	r3, [r4, #8]
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	441e      	add	r6, r3
 80032fc:	6026      	str	r6, [r4, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	e7dc      	b.n	80032bc <__ssputs_r+0x58>
 8003302:	462a      	mov	r2, r5
 8003304:	f000 fabe 	bl	8003884 <_realloc_r>
 8003308:	4606      	mov	r6, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	d1e2      	bne.n	80032d4 <__ssputs_r+0x70>
 800330e:	6921      	ldr	r1, [r4, #16]
 8003310:	4650      	mov	r0, sl
 8003312:	f7ff feff 	bl	8003114 <_free_r>
 8003316:	e7c8      	b.n	80032aa <__ssputs_r+0x46>

08003318 <_svfiprintf_r>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	461d      	mov	r5, r3
 800331e:	898b      	ldrh	r3, [r1, #12]
 8003320:	061f      	lsls	r7, r3, #24
 8003322:	b09d      	sub	sp, #116	; 0x74
 8003324:	4680      	mov	r8, r0
 8003326:	460c      	mov	r4, r1
 8003328:	4616      	mov	r6, r2
 800332a:	d50f      	bpl.n	800334c <_svfiprintf_r+0x34>
 800332c:	690b      	ldr	r3, [r1, #16]
 800332e:	b96b      	cbnz	r3, 800334c <_svfiprintf_r+0x34>
 8003330:	2140      	movs	r1, #64	; 0x40
 8003332:	f7ff ff3d 	bl	80031b0 <_malloc_r>
 8003336:	6020      	str	r0, [r4, #0]
 8003338:	6120      	str	r0, [r4, #16]
 800333a:	b928      	cbnz	r0, 8003348 <_svfiprintf_r+0x30>
 800333c:	230c      	movs	r3, #12
 800333e:	f8c8 3000 	str.w	r3, [r8]
 8003342:	f04f 30ff 	mov.w	r0, #4294967295
 8003346:	e0c8      	b.n	80034da <_svfiprintf_r+0x1c2>
 8003348:	2340      	movs	r3, #64	; 0x40
 800334a:	6163      	str	r3, [r4, #20]
 800334c:	2300      	movs	r3, #0
 800334e:	9309      	str	r3, [sp, #36]	; 0x24
 8003350:	2320      	movs	r3, #32
 8003352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003356:	2330      	movs	r3, #48	; 0x30
 8003358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800335c:	9503      	str	r5, [sp, #12]
 800335e:	f04f 0b01 	mov.w	fp, #1
 8003362:	4637      	mov	r7, r6
 8003364:	463d      	mov	r5, r7
 8003366:	f815 3b01 	ldrb.w	r3, [r5], #1
 800336a:	b10b      	cbz	r3, 8003370 <_svfiprintf_r+0x58>
 800336c:	2b25      	cmp	r3, #37	; 0x25
 800336e:	d13e      	bne.n	80033ee <_svfiprintf_r+0xd6>
 8003370:	ebb7 0a06 	subs.w	sl, r7, r6
 8003374:	d00b      	beq.n	800338e <_svfiprintf_r+0x76>
 8003376:	4653      	mov	r3, sl
 8003378:	4632      	mov	r2, r6
 800337a:	4621      	mov	r1, r4
 800337c:	4640      	mov	r0, r8
 800337e:	f7ff ff71 	bl	8003264 <__ssputs_r>
 8003382:	3001      	adds	r0, #1
 8003384:	f000 80a4 	beq.w	80034d0 <_svfiprintf_r+0x1b8>
 8003388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800338a:	4453      	add	r3, sl
 800338c:	9309      	str	r3, [sp, #36]	; 0x24
 800338e:	783b      	ldrb	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 809d 	beq.w	80034d0 <_svfiprintf_r+0x1b8>
 8003396:	2300      	movs	r3, #0
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033a0:	9304      	str	r3, [sp, #16]
 80033a2:	9307      	str	r3, [sp, #28]
 80033a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033a8:	931a      	str	r3, [sp, #104]	; 0x68
 80033aa:	462f      	mov	r7, r5
 80033ac:	2205      	movs	r2, #5
 80033ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033b2:	4850      	ldr	r0, [pc, #320]	; (80034f4 <_svfiprintf_r+0x1dc>)
 80033b4:	f7fc ff3c 	bl	8000230 <memchr>
 80033b8:	9b04      	ldr	r3, [sp, #16]
 80033ba:	b9d0      	cbnz	r0, 80033f2 <_svfiprintf_r+0xda>
 80033bc:	06d9      	lsls	r1, r3, #27
 80033be:	bf44      	itt	mi
 80033c0:	2220      	movmi	r2, #32
 80033c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033c6:	071a      	lsls	r2, r3, #28
 80033c8:	bf44      	itt	mi
 80033ca:	222b      	movmi	r2, #43	; 0x2b
 80033cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033d0:	782a      	ldrb	r2, [r5, #0]
 80033d2:	2a2a      	cmp	r2, #42	; 0x2a
 80033d4:	d015      	beq.n	8003402 <_svfiprintf_r+0xea>
 80033d6:	9a07      	ldr	r2, [sp, #28]
 80033d8:	462f      	mov	r7, r5
 80033da:	2000      	movs	r0, #0
 80033dc:	250a      	movs	r5, #10
 80033de:	4639      	mov	r1, r7
 80033e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033e4:	3b30      	subs	r3, #48	; 0x30
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d94d      	bls.n	8003486 <_svfiprintf_r+0x16e>
 80033ea:	b1b8      	cbz	r0, 800341c <_svfiprintf_r+0x104>
 80033ec:	e00f      	b.n	800340e <_svfiprintf_r+0xf6>
 80033ee:	462f      	mov	r7, r5
 80033f0:	e7b8      	b.n	8003364 <_svfiprintf_r+0x4c>
 80033f2:	4a40      	ldr	r2, [pc, #256]	; (80034f4 <_svfiprintf_r+0x1dc>)
 80033f4:	1a80      	subs	r0, r0, r2
 80033f6:	fa0b f000 	lsl.w	r0, fp, r0
 80033fa:	4318      	orrs	r0, r3
 80033fc:	9004      	str	r0, [sp, #16]
 80033fe:	463d      	mov	r5, r7
 8003400:	e7d3      	b.n	80033aa <_svfiprintf_r+0x92>
 8003402:	9a03      	ldr	r2, [sp, #12]
 8003404:	1d11      	adds	r1, r2, #4
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	9103      	str	r1, [sp, #12]
 800340a:	2a00      	cmp	r2, #0
 800340c:	db01      	blt.n	8003412 <_svfiprintf_r+0xfa>
 800340e:	9207      	str	r2, [sp, #28]
 8003410:	e004      	b.n	800341c <_svfiprintf_r+0x104>
 8003412:	4252      	negs	r2, r2
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	9207      	str	r2, [sp, #28]
 800341a:	9304      	str	r3, [sp, #16]
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	2b2e      	cmp	r3, #46	; 0x2e
 8003420:	d10c      	bne.n	800343c <_svfiprintf_r+0x124>
 8003422:	787b      	ldrb	r3, [r7, #1]
 8003424:	2b2a      	cmp	r3, #42	; 0x2a
 8003426:	d133      	bne.n	8003490 <_svfiprintf_r+0x178>
 8003428:	9b03      	ldr	r3, [sp, #12]
 800342a:	1d1a      	adds	r2, r3, #4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	9203      	str	r2, [sp, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	bfb8      	it	lt
 8003434:	f04f 33ff 	movlt.w	r3, #4294967295
 8003438:	3702      	adds	r7, #2
 800343a:	9305      	str	r3, [sp, #20]
 800343c:	4d2e      	ldr	r5, [pc, #184]	; (80034f8 <_svfiprintf_r+0x1e0>)
 800343e:	7839      	ldrb	r1, [r7, #0]
 8003440:	2203      	movs	r2, #3
 8003442:	4628      	mov	r0, r5
 8003444:	f7fc fef4 	bl	8000230 <memchr>
 8003448:	b138      	cbz	r0, 800345a <_svfiprintf_r+0x142>
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	1b40      	subs	r0, r0, r5
 800344e:	fa03 f000 	lsl.w	r0, r3, r0
 8003452:	9b04      	ldr	r3, [sp, #16]
 8003454:	4303      	orrs	r3, r0
 8003456:	3701      	adds	r7, #1
 8003458:	9304      	str	r3, [sp, #16]
 800345a:	7839      	ldrb	r1, [r7, #0]
 800345c:	4827      	ldr	r0, [pc, #156]	; (80034fc <_svfiprintf_r+0x1e4>)
 800345e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003462:	2206      	movs	r2, #6
 8003464:	1c7e      	adds	r6, r7, #1
 8003466:	f7fc fee3 	bl	8000230 <memchr>
 800346a:	2800      	cmp	r0, #0
 800346c:	d038      	beq.n	80034e0 <_svfiprintf_r+0x1c8>
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <_svfiprintf_r+0x1e8>)
 8003470:	bb13      	cbnz	r3, 80034b8 <_svfiprintf_r+0x1a0>
 8003472:	9b03      	ldr	r3, [sp, #12]
 8003474:	3307      	adds	r3, #7
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	3308      	adds	r3, #8
 800347c:	9303      	str	r3, [sp, #12]
 800347e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003480:	444b      	add	r3, r9
 8003482:	9309      	str	r3, [sp, #36]	; 0x24
 8003484:	e76d      	b.n	8003362 <_svfiprintf_r+0x4a>
 8003486:	fb05 3202 	mla	r2, r5, r2, r3
 800348a:	2001      	movs	r0, #1
 800348c:	460f      	mov	r7, r1
 800348e:	e7a6      	b.n	80033de <_svfiprintf_r+0xc6>
 8003490:	2300      	movs	r3, #0
 8003492:	3701      	adds	r7, #1
 8003494:	9305      	str	r3, [sp, #20]
 8003496:	4619      	mov	r1, r3
 8003498:	250a      	movs	r5, #10
 800349a:	4638      	mov	r0, r7
 800349c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034a0:	3a30      	subs	r2, #48	; 0x30
 80034a2:	2a09      	cmp	r2, #9
 80034a4:	d903      	bls.n	80034ae <_svfiprintf_r+0x196>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0c8      	beq.n	800343c <_svfiprintf_r+0x124>
 80034aa:	9105      	str	r1, [sp, #20]
 80034ac:	e7c6      	b.n	800343c <_svfiprintf_r+0x124>
 80034ae:	fb05 2101 	mla	r1, r5, r1, r2
 80034b2:	2301      	movs	r3, #1
 80034b4:	4607      	mov	r7, r0
 80034b6:	e7f0      	b.n	800349a <_svfiprintf_r+0x182>
 80034b8:	ab03      	add	r3, sp, #12
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4622      	mov	r2, r4
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <_svfiprintf_r+0x1ec>)
 80034c0:	a904      	add	r1, sp, #16
 80034c2:	4640      	mov	r0, r8
 80034c4:	f3af 8000 	nop.w
 80034c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034cc:	4681      	mov	r9, r0
 80034ce:	d1d6      	bne.n	800347e <_svfiprintf_r+0x166>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	065b      	lsls	r3, r3, #25
 80034d4:	f53f af35 	bmi.w	8003342 <_svfiprintf_r+0x2a>
 80034d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034da:	b01d      	add	sp, #116	; 0x74
 80034dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e0:	ab03      	add	r3, sp, #12
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4622      	mov	r2, r4
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <_svfiprintf_r+0x1ec>)
 80034e8:	a904      	add	r1, sp, #16
 80034ea:	4640      	mov	r0, r8
 80034ec:	f000 f882 	bl	80035f4 <_printf_i>
 80034f0:	e7ea      	b.n	80034c8 <_svfiprintf_r+0x1b0>
 80034f2:	bf00      	nop
 80034f4:	08007aad 	.word	0x08007aad
 80034f8:	08007ab3 	.word	0x08007ab3
 80034fc:	08007ab7 	.word	0x08007ab7
 8003500:	00000000 	.word	0x00000000
 8003504:	08003265 	.word	0x08003265

08003508 <_printf_common>:
 8003508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800350c:	4691      	mov	r9, r2
 800350e:	461f      	mov	r7, r3
 8003510:	688a      	ldr	r2, [r1, #8]
 8003512:	690b      	ldr	r3, [r1, #16]
 8003514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003518:	4293      	cmp	r3, r2
 800351a:	bfb8      	it	lt
 800351c:	4613      	movlt	r3, r2
 800351e:	f8c9 3000 	str.w	r3, [r9]
 8003522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003526:	4606      	mov	r6, r0
 8003528:	460c      	mov	r4, r1
 800352a:	b112      	cbz	r2, 8003532 <_printf_common+0x2a>
 800352c:	3301      	adds	r3, #1
 800352e:	f8c9 3000 	str.w	r3, [r9]
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	0699      	lsls	r1, r3, #26
 8003536:	bf42      	ittt	mi
 8003538:	f8d9 3000 	ldrmi.w	r3, [r9]
 800353c:	3302      	addmi	r3, #2
 800353e:	f8c9 3000 	strmi.w	r3, [r9]
 8003542:	6825      	ldr	r5, [r4, #0]
 8003544:	f015 0506 	ands.w	r5, r5, #6
 8003548:	d107      	bne.n	800355a <_printf_common+0x52>
 800354a:	f104 0a19 	add.w	sl, r4, #25
 800354e:	68e3      	ldr	r3, [r4, #12]
 8003550:	f8d9 2000 	ldr.w	r2, [r9]
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	42ab      	cmp	r3, r5
 8003558:	dc28      	bgt.n	80035ac <_printf_common+0xa4>
 800355a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	3300      	adds	r3, #0
 8003562:	bf18      	it	ne
 8003564:	2301      	movne	r3, #1
 8003566:	0692      	lsls	r2, r2, #26
 8003568:	d42d      	bmi.n	80035c6 <_printf_common+0xbe>
 800356a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800356e:	4639      	mov	r1, r7
 8003570:	4630      	mov	r0, r6
 8003572:	47c0      	blx	r8
 8003574:	3001      	adds	r0, #1
 8003576:	d020      	beq.n	80035ba <_printf_common+0xb2>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	68e5      	ldr	r5, [r4, #12]
 800357c:	f8d9 2000 	ldr.w	r2, [r9]
 8003580:	f003 0306 	and.w	r3, r3, #6
 8003584:	2b04      	cmp	r3, #4
 8003586:	bf08      	it	eq
 8003588:	1aad      	subeq	r5, r5, r2
 800358a:	68a3      	ldr	r3, [r4, #8]
 800358c:	6922      	ldr	r2, [r4, #16]
 800358e:	bf0c      	ite	eq
 8003590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003594:	2500      	movne	r5, #0
 8003596:	4293      	cmp	r3, r2
 8003598:	bfc4      	itt	gt
 800359a:	1a9b      	subgt	r3, r3, r2
 800359c:	18ed      	addgt	r5, r5, r3
 800359e:	f04f 0900 	mov.w	r9, #0
 80035a2:	341a      	adds	r4, #26
 80035a4:	454d      	cmp	r5, r9
 80035a6:	d11a      	bne.n	80035de <_printf_common+0xd6>
 80035a8:	2000      	movs	r0, #0
 80035aa:	e008      	b.n	80035be <_printf_common+0xb6>
 80035ac:	2301      	movs	r3, #1
 80035ae:	4652      	mov	r2, sl
 80035b0:	4639      	mov	r1, r7
 80035b2:	4630      	mov	r0, r6
 80035b4:	47c0      	blx	r8
 80035b6:	3001      	adds	r0, #1
 80035b8:	d103      	bne.n	80035c2 <_printf_common+0xba>
 80035ba:	f04f 30ff 	mov.w	r0, #4294967295
 80035be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c2:	3501      	adds	r5, #1
 80035c4:	e7c3      	b.n	800354e <_printf_common+0x46>
 80035c6:	18e1      	adds	r1, r4, r3
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	2030      	movs	r0, #48	; 0x30
 80035cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d0:	4422      	add	r2, r4
 80035d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035da:	3302      	adds	r3, #2
 80035dc:	e7c5      	b.n	800356a <_printf_common+0x62>
 80035de:	2301      	movs	r3, #1
 80035e0:	4622      	mov	r2, r4
 80035e2:	4639      	mov	r1, r7
 80035e4:	4630      	mov	r0, r6
 80035e6:	47c0      	blx	r8
 80035e8:	3001      	adds	r0, #1
 80035ea:	d0e6      	beq.n	80035ba <_printf_common+0xb2>
 80035ec:	f109 0901 	add.w	r9, r9, #1
 80035f0:	e7d8      	b.n	80035a4 <_printf_common+0x9c>
	...

080035f4 <_printf_i>:
 80035f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035fc:	460c      	mov	r4, r1
 80035fe:	7e09      	ldrb	r1, [r1, #24]
 8003600:	b085      	sub	sp, #20
 8003602:	296e      	cmp	r1, #110	; 0x6e
 8003604:	4617      	mov	r7, r2
 8003606:	4606      	mov	r6, r0
 8003608:	4698      	mov	r8, r3
 800360a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800360c:	f000 80b3 	beq.w	8003776 <_printf_i+0x182>
 8003610:	d822      	bhi.n	8003658 <_printf_i+0x64>
 8003612:	2963      	cmp	r1, #99	; 0x63
 8003614:	d036      	beq.n	8003684 <_printf_i+0x90>
 8003616:	d80a      	bhi.n	800362e <_printf_i+0x3a>
 8003618:	2900      	cmp	r1, #0
 800361a:	f000 80b9 	beq.w	8003790 <_printf_i+0x19c>
 800361e:	2958      	cmp	r1, #88	; 0x58
 8003620:	f000 8083 	beq.w	800372a <_printf_i+0x136>
 8003624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003628:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800362c:	e032      	b.n	8003694 <_printf_i+0xa0>
 800362e:	2964      	cmp	r1, #100	; 0x64
 8003630:	d001      	beq.n	8003636 <_printf_i+0x42>
 8003632:	2969      	cmp	r1, #105	; 0x69
 8003634:	d1f6      	bne.n	8003624 <_printf_i+0x30>
 8003636:	6820      	ldr	r0, [r4, #0]
 8003638:	6813      	ldr	r3, [r2, #0]
 800363a:	0605      	lsls	r5, r0, #24
 800363c:	f103 0104 	add.w	r1, r3, #4
 8003640:	d52a      	bpl.n	8003698 <_printf_i+0xa4>
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da03      	bge.n	8003652 <_printf_i+0x5e>
 800364a:	222d      	movs	r2, #45	; 0x2d
 800364c:	425b      	negs	r3, r3
 800364e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003652:	486f      	ldr	r0, [pc, #444]	; (8003810 <_printf_i+0x21c>)
 8003654:	220a      	movs	r2, #10
 8003656:	e039      	b.n	80036cc <_printf_i+0xd8>
 8003658:	2973      	cmp	r1, #115	; 0x73
 800365a:	f000 809d 	beq.w	8003798 <_printf_i+0x1a4>
 800365e:	d808      	bhi.n	8003672 <_printf_i+0x7e>
 8003660:	296f      	cmp	r1, #111	; 0x6f
 8003662:	d020      	beq.n	80036a6 <_printf_i+0xb2>
 8003664:	2970      	cmp	r1, #112	; 0x70
 8003666:	d1dd      	bne.n	8003624 <_printf_i+0x30>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f043 0320 	orr.w	r3, r3, #32
 800366e:	6023      	str	r3, [r4, #0]
 8003670:	e003      	b.n	800367a <_printf_i+0x86>
 8003672:	2975      	cmp	r1, #117	; 0x75
 8003674:	d017      	beq.n	80036a6 <_printf_i+0xb2>
 8003676:	2978      	cmp	r1, #120	; 0x78
 8003678:	d1d4      	bne.n	8003624 <_printf_i+0x30>
 800367a:	2378      	movs	r3, #120	; 0x78
 800367c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003680:	4864      	ldr	r0, [pc, #400]	; (8003814 <_printf_i+0x220>)
 8003682:	e055      	b.n	8003730 <_printf_i+0x13c>
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	1d19      	adds	r1, r3, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6011      	str	r1, [r2, #0]
 800368c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003694:	2301      	movs	r3, #1
 8003696:	e08c      	b.n	80037b2 <_printf_i+0x1be>
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6011      	str	r1, [r2, #0]
 800369c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036a0:	bf18      	it	ne
 80036a2:	b21b      	sxthne	r3, r3
 80036a4:	e7cf      	b.n	8003646 <_printf_i+0x52>
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	6825      	ldr	r5, [r4, #0]
 80036aa:	1d18      	adds	r0, r3, #4
 80036ac:	6010      	str	r0, [r2, #0]
 80036ae:	0628      	lsls	r0, r5, #24
 80036b0:	d501      	bpl.n	80036b6 <_printf_i+0xc2>
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	e002      	b.n	80036bc <_printf_i+0xc8>
 80036b6:	0668      	lsls	r0, r5, #25
 80036b8:	d5fb      	bpl.n	80036b2 <_printf_i+0xbe>
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	4854      	ldr	r0, [pc, #336]	; (8003810 <_printf_i+0x21c>)
 80036be:	296f      	cmp	r1, #111	; 0x6f
 80036c0:	bf14      	ite	ne
 80036c2:	220a      	movne	r2, #10
 80036c4:	2208      	moveq	r2, #8
 80036c6:	2100      	movs	r1, #0
 80036c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036cc:	6865      	ldr	r5, [r4, #4]
 80036ce:	60a5      	str	r5, [r4, #8]
 80036d0:	2d00      	cmp	r5, #0
 80036d2:	f2c0 8095 	blt.w	8003800 <_printf_i+0x20c>
 80036d6:	6821      	ldr	r1, [r4, #0]
 80036d8:	f021 0104 	bic.w	r1, r1, #4
 80036dc:	6021      	str	r1, [r4, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d13d      	bne.n	800375e <_printf_i+0x16a>
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	f040 808e 	bne.w	8003804 <_printf_i+0x210>
 80036e8:	4665      	mov	r5, ip
 80036ea:	2a08      	cmp	r2, #8
 80036ec:	d10b      	bne.n	8003706 <_printf_i+0x112>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	07db      	lsls	r3, r3, #31
 80036f2:	d508      	bpl.n	8003706 <_printf_i+0x112>
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	bfde      	ittt	le
 80036fc:	2330      	movle	r3, #48	; 0x30
 80036fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003702:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003706:	ebac 0305 	sub.w	r3, ip, r5
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	f8cd 8000 	str.w	r8, [sp]
 8003710:	463b      	mov	r3, r7
 8003712:	aa03      	add	r2, sp, #12
 8003714:	4621      	mov	r1, r4
 8003716:	4630      	mov	r0, r6
 8003718:	f7ff fef6 	bl	8003508 <_printf_common>
 800371c:	3001      	adds	r0, #1
 800371e:	d14d      	bne.n	80037bc <_printf_i+0x1c8>
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	b005      	add	sp, #20
 8003726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800372a:	4839      	ldr	r0, [pc, #228]	; (8003810 <_printf_i+0x21c>)
 800372c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	6821      	ldr	r1, [r4, #0]
 8003734:	1d1d      	adds	r5, r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6015      	str	r5, [r2, #0]
 800373a:	060a      	lsls	r2, r1, #24
 800373c:	d50b      	bpl.n	8003756 <_printf_i+0x162>
 800373e:	07ca      	lsls	r2, r1, #31
 8003740:	bf44      	itt	mi
 8003742:	f041 0120 	orrmi.w	r1, r1, #32
 8003746:	6021      	strmi	r1, [r4, #0]
 8003748:	b91b      	cbnz	r3, 8003752 <_printf_i+0x15e>
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	f022 0220 	bic.w	r2, r2, #32
 8003750:	6022      	str	r2, [r4, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	e7b7      	b.n	80036c6 <_printf_i+0xd2>
 8003756:	064d      	lsls	r5, r1, #25
 8003758:	bf48      	it	mi
 800375a:	b29b      	uxthmi	r3, r3
 800375c:	e7ef      	b.n	800373e <_printf_i+0x14a>
 800375e:	4665      	mov	r5, ip
 8003760:	fbb3 f1f2 	udiv	r1, r3, r2
 8003764:	fb02 3311 	mls	r3, r2, r1, r3
 8003768:	5cc3      	ldrb	r3, [r0, r3]
 800376a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800376e:	460b      	mov	r3, r1
 8003770:	2900      	cmp	r1, #0
 8003772:	d1f5      	bne.n	8003760 <_printf_i+0x16c>
 8003774:	e7b9      	b.n	80036ea <_printf_i+0xf6>
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	6961      	ldr	r1, [r4, #20]
 800377c:	1d18      	adds	r0, r3, #4
 800377e:	6010      	str	r0, [r2, #0]
 8003780:	0628      	lsls	r0, r5, #24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	d501      	bpl.n	800378a <_printf_i+0x196>
 8003786:	6019      	str	r1, [r3, #0]
 8003788:	e002      	b.n	8003790 <_printf_i+0x19c>
 800378a:	066a      	lsls	r2, r5, #25
 800378c:	d5fb      	bpl.n	8003786 <_printf_i+0x192>
 800378e:	8019      	strh	r1, [r3, #0]
 8003790:	2300      	movs	r3, #0
 8003792:	6123      	str	r3, [r4, #16]
 8003794:	4665      	mov	r5, ip
 8003796:	e7b9      	b.n	800370c <_printf_i+0x118>
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	1d19      	adds	r1, r3, #4
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	681d      	ldr	r5, [r3, #0]
 80037a0:	6862      	ldr	r2, [r4, #4]
 80037a2:	2100      	movs	r1, #0
 80037a4:	4628      	mov	r0, r5
 80037a6:	f7fc fd43 	bl	8000230 <memchr>
 80037aa:	b108      	cbz	r0, 80037b0 <_printf_i+0x1bc>
 80037ac:	1b40      	subs	r0, r0, r5
 80037ae:	6060      	str	r0, [r4, #4]
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	6123      	str	r3, [r4, #16]
 80037b4:	2300      	movs	r3, #0
 80037b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ba:	e7a7      	b.n	800370c <_printf_i+0x118>
 80037bc:	6923      	ldr	r3, [r4, #16]
 80037be:	462a      	mov	r2, r5
 80037c0:	4639      	mov	r1, r7
 80037c2:	4630      	mov	r0, r6
 80037c4:	47c0      	blx	r8
 80037c6:	3001      	adds	r0, #1
 80037c8:	d0aa      	beq.n	8003720 <_printf_i+0x12c>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	079b      	lsls	r3, r3, #30
 80037ce:	d413      	bmi.n	80037f8 <_printf_i+0x204>
 80037d0:	68e0      	ldr	r0, [r4, #12]
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	4298      	cmp	r0, r3
 80037d6:	bfb8      	it	lt
 80037d8:	4618      	movlt	r0, r3
 80037da:	e7a3      	b.n	8003724 <_printf_i+0x130>
 80037dc:	2301      	movs	r3, #1
 80037de:	464a      	mov	r2, r9
 80037e0:	4639      	mov	r1, r7
 80037e2:	4630      	mov	r0, r6
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d09a      	beq.n	8003720 <_printf_i+0x12c>
 80037ea:	3501      	adds	r5, #1
 80037ec:	68e3      	ldr	r3, [r4, #12]
 80037ee:	9a03      	ldr	r2, [sp, #12]
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	42ab      	cmp	r3, r5
 80037f4:	dcf2      	bgt.n	80037dc <_printf_i+0x1e8>
 80037f6:	e7eb      	b.n	80037d0 <_printf_i+0x1dc>
 80037f8:	2500      	movs	r5, #0
 80037fa:	f104 0919 	add.w	r9, r4, #25
 80037fe:	e7f5      	b.n	80037ec <_printf_i+0x1f8>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ac      	bne.n	800375e <_printf_i+0x16a>
 8003804:	7803      	ldrb	r3, [r0, #0]
 8003806:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800380a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380e:	e76c      	b.n	80036ea <_printf_i+0xf6>
 8003810:	08007abe 	.word	0x08007abe
 8003814:	08007acf 	.word	0x08007acf

08003818 <_sbrk_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4c06      	ldr	r4, [pc, #24]	; (8003834 <_sbrk_r+0x1c>)
 800381c:	2300      	movs	r3, #0
 800381e:	4605      	mov	r5, r0
 8003820:	4608      	mov	r0, r1
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	f000 f85c 	bl	80038e0 <_sbrk>
 8003828:	1c43      	adds	r3, r0, #1
 800382a:	d102      	bne.n	8003832 <_sbrk_r+0x1a>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	b103      	cbz	r3, 8003832 <_sbrk_r+0x1a>
 8003830:	602b      	str	r3, [r5, #0]
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	20000afc 	.word	0x20000afc

08003838 <memcpy>:
 8003838:	b510      	push	{r4, lr}
 800383a:	1e43      	subs	r3, r0, #1
 800383c:	440a      	add	r2, r1
 800383e:	4291      	cmp	r1, r2
 8003840:	d100      	bne.n	8003844 <memcpy+0xc>
 8003842:	bd10      	pop	{r4, pc}
 8003844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800384c:	e7f7      	b.n	800383e <memcpy+0x6>

0800384e <memmove>:
 800384e:	4288      	cmp	r0, r1
 8003850:	b510      	push	{r4, lr}
 8003852:	eb01 0302 	add.w	r3, r1, r2
 8003856:	d807      	bhi.n	8003868 <memmove+0x1a>
 8003858:	1e42      	subs	r2, r0, #1
 800385a:	4299      	cmp	r1, r3
 800385c:	d00a      	beq.n	8003874 <memmove+0x26>
 800385e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003862:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003866:	e7f8      	b.n	800385a <memmove+0xc>
 8003868:	4283      	cmp	r3, r0
 800386a:	d9f5      	bls.n	8003858 <memmove+0xa>
 800386c:	1881      	adds	r1, r0, r2
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	42d3      	cmn	r3, r2
 8003872:	d100      	bne.n	8003876 <memmove+0x28>
 8003874:	bd10      	pop	{r4, pc}
 8003876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800387a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800387e:	e7f7      	b.n	8003870 <memmove+0x22>

08003880 <__malloc_lock>:
 8003880:	4770      	bx	lr

08003882 <__malloc_unlock>:
 8003882:	4770      	bx	lr

08003884 <_realloc_r>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	4607      	mov	r7, r0
 8003888:	4614      	mov	r4, r2
 800388a:	460e      	mov	r6, r1
 800388c:	b921      	cbnz	r1, 8003898 <_realloc_r+0x14>
 800388e:	4611      	mov	r1, r2
 8003890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003894:	f7ff bc8c 	b.w	80031b0 <_malloc_r>
 8003898:	b922      	cbnz	r2, 80038a4 <_realloc_r+0x20>
 800389a:	f7ff fc3b 	bl	8003114 <_free_r>
 800389e:	4625      	mov	r5, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a4:	f000 f814 	bl	80038d0 <_malloc_usable_size_r>
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d20f      	bcs.n	80038cc <_realloc_r+0x48>
 80038ac:	4621      	mov	r1, r4
 80038ae:	4638      	mov	r0, r7
 80038b0:	f7ff fc7e 	bl	80031b0 <_malloc_r>
 80038b4:	4605      	mov	r5, r0
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d0f2      	beq.n	80038a0 <_realloc_r+0x1c>
 80038ba:	4631      	mov	r1, r6
 80038bc:	4622      	mov	r2, r4
 80038be:	f7ff ffbb 	bl	8003838 <memcpy>
 80038c2:	4631      	mov	r1, r6
 80038c4:	4638      	mov	r0, r7
 80038c6:	f7ff fc25 	bl	8003114 <_free_r>
 80038ca:	e7e9      	b.n	80038a0 <_realloc_r+0x1c>
 80038cc:	4635      	mov	r5, r6
 80038ce:	e7e7      	b.n	80038a0 <_realloc_r+0x1c>

080038d0 <_malloc_usable_size_r>:
 80038d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d4:	1f18      	subs	r0, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bfbc      	itt	lt
 80038da:	580b      	ldrlt	r3, [r1, r0]
 80038dc:	18c0      	addlt	r0, r0, r3
 80038de:	4770      	bx	lr

080038e0 <_sbrk>:
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <_sbrk+0x14>)
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	4602      	mov	r2, r0
 80038e6:	b909      	cbnz	r1, 80038ec <_sbrk+0xc>
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <_sbrk+0x18>)
 80038ea:	6019      	str	r1, [r3, #0]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	4402      	add	r2, r0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	4770      	bx	lr
 80038f4:	20000128 	.word	0x20000128
 80038f8:	20000b00 	.word	0x20000b00

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
