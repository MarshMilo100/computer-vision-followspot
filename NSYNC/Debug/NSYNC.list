
NSYNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08012c40  08012c40  00022c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012eac  08012eac  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08012eac  08012eac  00022eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012eb4  08012eb4  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012eb4  08012eb4  00022eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012ebc  08012ebc  00022ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08012ec4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006428  20000098  08012f5c  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064c0  08012f5c  000364c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000451a6  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000079ec  00000000  00000000  0007526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c58  00000000  00000000  0007cc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002970  00000000  00000000  0007f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef41  00000000  00000000  00082228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000343a8  00000000  00000000  00091169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109e44  00000000  00000000  000c5511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cf355  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000da30  00000000  00000000  001cf3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012c24 	.word	0x08012c24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	08012c24 	.word	0x08012c24

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f010 fc93 	bl	8011830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4904      	ldr	r1, [pc, #16]	; (8000f24 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8000f16:	f001 f902 	bl	800211e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8000f1a:	4603      	mov	r3, r0
					__idx, __base); }
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08012c40 	.word	0x08012c40
 8000f28:	08012bf5 	.word	0x08012bf5

08000f2c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 f947 	bl	80021c8 <_ZNSaI10CoordinateED1Ev>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f92a 	bl	80021a8 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implC1Ev>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt6vectorI10CoordinateSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffeb 	bl	8000f44 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EEC1Ev>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_UART_RxCpltCallback>:
void StartRecievePixels(void *argument);
void StartSendPixels(void *argument);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]


	if(Rx_Data[0] == '-' && Rx_Data[1] == '2')
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2d      	cmp	r3, #45	; 0x2d
 8000f86:	d13b      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x88>
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	2b32      	cmp	r3, #50	; 0x32
 8000f8e:	d137      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x88>
	{
		uint8_t byteArray1[4] = {  Rx_Data[2], Rx_Data[3], Rx_Data[4],  Rx_Data[5] };
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000fa2:	791b      	ldrb	r3, [r3, #4]
 8000fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		std::string s(reinterpret_cast<char*>(byteArray1), 4);
 8000fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f010 fbe8 	bl	801178a <_ZNSaIcEC1Ev>
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000fc2:	f107 000c 	add.w	r0, r7, #12
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	f010 fc58 	bl	801187c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8000fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f010 fbdb 	bl	801178c <_ZNSaIcED1Ev>
		int pixleMsgSize = std::stoi(s, nullptr, 0);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff8a 	bl	8000ef8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8000fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
		HAL_UART_Receive_IT(&huart6, Rx_Data, pixleMsgSize);
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <HAL_UART_RxCpltCallback+0xac>)
 8000ff0:	f008 f847 	bl	8009082 <HAL_UART_Receive_IT>
		std::string s(reinterpret_cast<char*>(byteArray1), 4);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f010 fc13 	bl	8011824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		HAL_UART_Receive_IT(&huart6, Rx_Data, pixleMsgSize);
 8000ffe:	e007      	b.n	8001010 <HAL_UART_RxCpltCallback+0x98>
	}
	else
	{
		processPixels = true;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_UART_RxCpltCallback+0xb0>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
 8001006:	2206      	movs	r2, #6
 8001008:	4905      	ldr	r1, [pc, #20]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <HAL_UART_RxCpltCallback+0xac>)
 800100c:	f008 f839 	bl	8009082 <HAL_UART_Receive_IT>
//		}
//		HAL_UART_Receive_IT(&huart6, Rx_Data, 2);
//	}

	//HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // red LED
 8001010:	2108      	movs	r1, #8
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <HAL_UART_RxCpltCallback+0xb4>)
 8001014:	f003 fd35 	bl	8004a82 <HAL_GPIO_TogglePin>

}
 8001018:	bf00      	nop
 800101a:	3730      	adds	r7, #48	; 0x30
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000448 	.word	0x20000448
 8001024:	2000035c 	.word	0x2000035c
 8001028:	200013ee 	.word	0x200013ee
 800102c:	40021000 	.word	0x40021000

08001030 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Calculates the BoundaryBox around the person based off the pixels read it
struct BoundaryBox getSinglePersonLocation( std::vector<struct Coordinate>& whitePixels)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	struct BoundaryBox personBoundaryBox;

    float widthAverage, widthStd = 0;
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
    float heightAverage, heightStd = 0;
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
    int length = whitePixels.size();
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f001 f8e3 	bl	8002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 800104c:	4603      	mov	r3, r0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c

    int widthSum = 0, heightSum = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
 8001054:	2300      	movs	r3, #0
 8001056:	643b      	str	r3, [r7, #64]	; 0x40

	for(struct Coordinate pixel : whitePixels)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
 800105c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800105e:	f001 f8e8 	bl	8002232 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 8001062:	4603      	mov	r3, r0
 8001064:	623b      	str	r3, [r7, #32]
 8001066:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001068:	f001 f8f3 	bl	8002252 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 800106c:	4603      	mov	r3, r0
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	f107 021c 	add.w	r2, r7, #28
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f001 f8fa 	bl	8002274 <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x8a>
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f91b 	bl	80022c6 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>
 8001090:	4602      	mov	r2, r0
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		widthSum += pixel.width;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010a2:	4413      	add	r3, r2
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
		heightSum += pixel.height;
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010aa:	4413      	add	r3, r2
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
	for(struct Coordinate pixel : whitePixels)
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 f8f6 	bl	80022a4 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>
 80010b8:	e7da      	b.n	8001070 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x40>
	}

    widthAverage = widthSum / length;
 80010ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010be:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    heightAverage = heightSum / length;
 80010ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	for(struct Coordinate pixel : whitePixels)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010e8:	f001 f8a3 	bl	8002232 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f2:	f001 f8ae 	bl	8002252 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 80010f6:	4603      	mov	r3, r0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	f107 020c 	add.w	r2, r7, #12
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f8b5 	bl	8002274 <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d045      	beq.n	800119c <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x16c>
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f8d6 	bl	80022c6 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>
 800111a:	4602      	mov	r2, r0
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001124:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		widthStd += (pixel.width - widthAverage) * (pixel.width - widthAverage);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001132:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001136:	ee37 7a67 	vsub.f32	s14, s14, s15
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001144:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001148:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		heightStd += (pixel.height - heightAverage) * (pixel.height - heightAverage);
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800116a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001178:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800117c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	for(struct Coordinate pixel : whitePixels)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f885 	bl	80022a4 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>
 800119a:	e7ae      	b.n	80010fa <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0xca>
	}

    widthStd = widthStd * (1 / length - 1);
 800119c:	2201      	movs	r2, #1
 800119e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    heightStd = heightStd * (1 / length - 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011be:	fb92 f3f3 	sdiv	r3, r2, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80011d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    widthStd = pow(widthStd, 0.5);
 80011d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80011da:	f7ff f985 	bl	80004e8 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8001298 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x268>
 80011e6:	ec43 2b10 	vmov	d0, r2, r3
 80011ea:	f010 fb5b 	bl	80118a4 <pow>
 80011ee:	ec53 2b10 	vmov	r2, r3, d0
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fca7 	bl	8000b48 <__aeabi_d2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    heightStd = pow(heightStd, 0.5);
 80011fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001200:	f7ff f972 	bl	80004e8 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001298 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x268>
 800120c:	ec43 2b10 	vmov	d0, r2, r3
 8001210:	f010 fb48 	bl	80118a4 <pow>
 8001214:	ec53 2b10 	vmov	r2, r3, d0
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fc94 	bl	8000b48 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48

    personBoundaryBox.widthIndex = widthAverage;
 8001224:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122c:	ee17 2a90 	vmov	r2, s15
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
    personBoundaryBox.heightIndex = heightAverage;
 8001234:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	ee17 2a90 	vmov	r2, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]
    personBoundaryBox.width = widthStd * 1.5;
 8001244:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001246:	f7ff f94f 	bl	80004e8 <__aeabi_f2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x270>)
 8001250:	f7ff f9a2 	bl	8000598 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc4c 	bl	8000af8 <__aeabi_d2iz>
 8001260:	4602      	mov	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
    personBoundaryBox.height = heightStd * 1.5;
 8001266:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001268:	f7ff f93e 	bl	80004e8 <__aeabi_f2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x270>)
 8001272:	f7ff f991 	bl	8000598 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc3b 	bl	8000af8 <__aeabi_d2iz>
 8001282:	4602      	mov	r2, r0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60da      	str	r2, [r3, #12]

    return personBoundaryBox;
 8001288:	bf00      	nop
}
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	3750      	adds	r7, #80	; 0x50
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	00000000 	.word	0x00000000
 800129c:	3fe00000 	.word	0x3fe00000
 80012a0:	3ff80000 	.word	0x3ff80000

080012a4 <_Z12sendLocation11BoundaryBox>:

// Gets the current location and sends it to the light board over UDP if it is different from the last location
struct BoundaryBox sendLocation(struct BoundaryBox previousLocation)
{
 80012a4:	b084      	sub	sp, #16
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b088      	sub	sp, #32
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80012b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = recievedCoordinates.size();
 80012b6:	4826      	ldr	r0, [pc, #152]	; (8001350 <_Z12sendLocation11BoundaryBox+0xac>)
 80012b8:	f000 ffab 	bl	8002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 80012bc:	4603      	mov	r3, r0
 80012be:	61fb      	str	r3, [r7, #28]
	BoundaryBox currentLocation = getSinglePersonLocation(recievedCoordinates);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4923      	ldr	r1, [pc, #140]	; (8001350 <_Z12sendLocation11BoundaryBox+0xac>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff feb3 	bl	8001030 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE>

	int upperLeftHeight = previousLocation.heightIndex - (previousLocation.height / 2);
 80012ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ce:	0fd9      	lsrs	r1, r3, #31
 80012d0:	440b      	add	r3, r1
 80012d2:	105b      	asrs	r3, r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
	int uperLeftWidth = previousLocation.widthIndex - (previousLocation.width / 2);
 80012da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012de:	0fd9      	lsrs	r1, r3, #31
 80012e0:	440b      	add	r3, r1
 80012e2:	105b      	asrs	r3, r3, #1
 80012e4:	425b      	negs	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]

	int lowerRightHeight = previousLocation.heightIndex + (previousLocation.height / 2);
 80012ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ee:	0fd9      	lsrs	r1, r3, #31
 80012f0:	440b      	add	r3, r1
 80012f2:	105b      	asrs	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
	int lowerRightWidth = previousLocation.widthIndex + (previousLocation.width / 2);
 80012f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fc:	0fd9      	lsrs	r1, r3, #31
 80012fe:	440b      	add	r3, r1
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]


	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	dd0e      	ble.n	800132e <_Z12sendLocation11BoundaryBox+0x8a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	429a      	cmp	r2, r3
 8001318:	da09      	bge.n	800132e <_Z12sendLocation11BoundaryBox+0x8a>
	   currentLocation.widthIndex < lowerRightWidth && currentLocation.widthIndex > uperLeftWidth))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	dd04      	ble.n	800132e <_Z12sendLocation11BoundaryBox+0x8a>
	   currentLocation.widthIndex < lowerRightWidth && currentLocation.widthIndex > uperLeftWidth))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	429a      	cmp	r2, r3
 800132c:	db07      	blt.n	800133e <_Z12sendLocation11BoundaryBox+0x9a>
	{
		// This is when we create new UDP light packets
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //Green LED
 800132e:	2201      	movs	r2, #1
 8001330:	2120      	movs	r1, #32
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <_Z12sendLocation11BoundaryBox+0xb0>)
 8001334:	f003 fb8c 	bl	8004a50 <HAL_GPIO_WritePin>
		osDelay(100);
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f00c fc25 	bl	800db88 <osDelay>
	}

	return currentLocation;
 800133e:	bf00      	nop
}
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800134a:	b004      	add	sp, #16
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200013f0 	.word	0x200013f0
 8001354:	40020800 	.word	0x40020800

08001358 <_Z22SetRecievedCoordinatesv>:


void SetRecievedCoordinates()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <= sizeof Rx_Data; i+=2)
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
	{
		if ( Rx_Data[i] == 0 &&  Rx_Data[i+1] == 0)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <_Z22SetRecievedCoordinatesv+0x4c>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d105      	bne.n	8001378 <_Z22SetRecievedCoordinatesv+0x20>
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	3301      	adds	r3, #1
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <_Z22SetRecievedCoordinatesv+0x4c>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d011      	beq.n	800139c <_Z22SetRecievedCoordinatesv+0x44>
		{
			break;
		}
		struct Coordinate temp;
		temp.height = Rx_Data[i];
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <_Z22SetRecievedCoordinatesv+0x4c>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	60bb      	str	r3, [r7, #8]
		temp.width = Rx_Data[i+1];
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <_Z22SetRecievedCoordinatesv+0x4c>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	607b      	str	r3, [r7, #4]
		recievedCoordinates.push_back(temp);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <_Z22SetRecievedCoordinatesv+0x50>)
 8001390:	f000 ffa5 	bl	80022de <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_>
	for(uint8_t i = 0; i <= sizeof Rx_Data; i+=2)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	3302      	adds	r3, #2
 8001398:	73fb      	strb	r3, [r7, #15]
	}
 800139a:	e7e2      	b.n	8001362 <_Z22SetRecievedCoordinatesv+0xa>

}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000448 	.word	0x20000448
 80013a8:	200013f0 	.word	0x200013f0

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f002 fae2 	bl	8003978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f844 	bl	8001440 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f000 fb6a 	bl	8001a90 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80013bc:	f000 f8ee 	bl	800159c <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 80013c0:	f000 f948 	bl	8001654 <_ZL11MX_DAC_Initv>
  MX_DFSDM1_Init();
 80013c4:	f000 f97a 	bl	80016bc <_ZL14MX_DFSDM1_Initv>
  MX_DFSDM2_Init();
 80013c8:	f000 f9b4 	bl	8001734 <_ZL14MX_DFSDM2_Initv>
  MX_FMPI2C1_Init();
 80013cc:	f000 fa26 	bl	800181c <_ZL15MX_FMPI2C1_Initv>
  MX_FSMC_Init();
 80013d0:	f000 fd06 	bl	8001de0 <_ZL12MX_FSMC_Initv>
  MX_I2S2_Init();
 80013d4:	f000 fa62 	bl	800189c <_ZL12MX_I2S2_Initv>
  MX_QUADSPI_Init();
 80013d8:	f000 fa94 	bl	8001904 <_ZL15MX_QUADSPI_Initv>
  MX_SDIO_SD_Init();
 80013dc:	f000 fac2 	bl	8001964 <_ZL15MX_SDIO_SD_Initv>
  MX_UART10_Init();
 80013e0:	f000 fafa 	bl	80019d8 <_ZL14MX_UART10_Initv>
  MX_USART6_UART_Init();
 80013e4:	f000 fb26 	bl	8001a34 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013e8:	f00c fabe 	bl	800d968 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <main+0x74>)
 80013ee:	f00c fbf9 	bl	800dbe4 <osMutexNew>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <main+0x78>)
 80013f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RecievePixels */
  RecievePixelsHandle = osThreadNew(StartRecievePixels, NULL, &RecievePixels_attributes);
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <main+0x7c>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <main+0x80>)
 80013fe:	f00c fb1d 	bl	800da3c <osThreadNew>
 8001402:	4603      	mov	r3, r0
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <main+0x84>)
 8001406:	6013      	str	r3, [r2, #0]

  /* creation of SendPixels */
  SendPixelsHandle = osThreadNew(StartSendPixels, NULL, &SendPixels_attributes);
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <main+0x88>)
 800140a:	2100      	movs	r1, #0
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <main+0x8c>)
 800140e:	f00c fb15 	bl	800da3c <osThreadNew>
 8001412:	4603      	mov	r3, r0
 8001414:	4a09      	ldr	r2, [pc, #36]	; (800143c <main+0x90>)
 8001416:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001418:	f00c fada 	bl	800d9d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141c:	e7fe      	b.n	800141c <main+0x70>
 800141e:	bf00      	nop
 8001420:	08012cfc 	.word	0x08012cfc
 8001424:	20000444 	.word	0x20000444
 8001428:	08012cb4 	.word	0x08012cb4
 800142c:	08001f59 	.word	0x08001f59
 8001430:	2000043c 	.word	0x2000043c
 8001434:	08012cd8 	.word	0x08012cd8
 8001438:	08001fe5 	.word	0x08001fe5
 800143c:	20000440 	.word	0x20000440

08001440 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0aa      	sub	sp, #168	; 0xa8
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800144a:	2234      	movs	r2, #52	; 0x34
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f011 fa46 	bl	80128e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2258      	movs	r2, #88	; 0x58
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f011 fa37 	bl	80128e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <_Z18SystemClock_Configv+0x154>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a46      	ldr	r2, [pc, #280]	; (8001594 <_Z18SystemClock_Configv+0x154>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <_Z18SystemClock_Configv+0x154>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <_Z18SystemClock_Configv+0x158>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a40      	ldr	r2, [pc, #256]	; (8001598 <_Z18SystemClock_Configv+0x158>)
 8001498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <_Z18SystemClock_Configv+0x158>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014aa:	2303      	movs	r3, #3
 80014ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ba:	2310      	movs	r3, #16
 80014bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80014ce:	230f      	movs	r3, #15
 80014d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80014d4:	2390      	movs	r3, #144	; 0x90
 80014d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80014e0:	2305      	movs	r3, #5
 80014e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 fb4b 	bl	8007b8c <HAL_RCC_OscConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8001506:	f000 fdc9 	bl	800209c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	230f      	movs	r3, #15
 800150c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800150e:	2300      	movs	r3, #0
 8001510:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800151e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f005 fd3f 	bl	8006fa8 <HAL_RCC_ClockConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800153a:	f000 fdaf 	bl	800209c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800153e:	f240 1371 	movw	r3, #369	; 0x171
 8001542:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001544:	2332      	movs	r3, #50	; 0x32
 8001546:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8001548:	230c      	movs	r3, #12
 800154a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001554:	2300      	movs	r3, #0
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 800155c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8001562:	2300      	movs	r3, #0
 8001564:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4618      	mov	r0, r3
 8001574:	f005 ff1a 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_Z18SystemClock_Configv+0x14c>
  {
    Error_Handler();
 8001588:	f000 fd88 	bl	800209c <Error_Handler>
  }
}
 800158c:	bf00      	nop
 800158e:	37a8      	adds	r7, #168	; 0xa8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800
 8001598:	40007000 	.word	0x40007000

0800159c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015b0:	4a26      	ldr	r2, [pc, #152]	; (800164c <_ZL12MX_ADC1_Initv+0xb0>)
 80015b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015dc:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <_ZL12MX_ADC1_Initv+0xb4>)
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015fa:	4813      	ldr	r0, [pc, #76]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 80015fc:	f002 fa22 	bl	8003a44 <HAL_ADC_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf14      	ite	ne
 8001606:	2301      	movne	r3, #1
 8001608:	2300      	moveq	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001610:	f000 fd44 	bl	800209c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001614:	230a      	movs	r3, #10
 8001616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4808      	ldr	r0, [pc, #32]	; (8001648 <_ZL12MX_ADC1_Initv+0xac>)
 8001626:	f002 fa51 	bl	8003acc <HAL_ADC_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf14      	ite	ne
 8001630:	2301      	movne	r3, #1
 8001632:	2300      	moveq	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800163a:	f000 fd2f 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000b4 	.word	0x200000b4
 800164c:	40012000 	.word	0x40012000
 8001650:	0f000001 	.word	0x0f000001

08001654 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <_ZL11MX_DAC_Initv+0x60>)
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_ZL11MX_DAC_Initv+0x64>)
 8001666:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <_ZL11MX_DAC_Initv+0x60>)
 800166a:	f002 fd3f 	bl	80040ec <HAL_DAC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 800167e:	f000 fd0d 	bl	800209c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <_ZL11MX_DAC_Initv+0x60>)
 8001692:	f002 fda1 	bl	80041d8 <HAL_DAC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 80016a6:	f000 fcf9 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000fc 	.word	0x200000fc
 80016b8:	40007400 	.word	0x40007400

080016bc <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <_ZL14MX_DFSDM1_Initv+0x74>)
 80016c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 80016fe:	2201      	movs	r2, #1
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 8001704:	2200      	movs	r2, #0
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <_ZL14MX_DFSDM1_Initv+0x70>)
 8001710:	f002 fdba 	bl	8004288 <HAL_DFSDM_ChannelInit>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <_ZL14MX_DFSDM1_Initv+0x6c>
  {
    Error_Handler();
 8001724:	f000 fcba 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000110 	.word	0x20000110
 8001730:	40016020 	.word	0x40016020

08001734 <_ZL14MX_DFSDM2_Initv>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 800173a:	4a35      	ldr	r2, [pc, #212]	; (8001810 <_ZL14MX_DFSDM2_Initv+0xdc>)
 800173c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001740:	2201      	movs	r2, #1
 8001742:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 800174c:	2202      	movs	r2, #2
 800174e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001764:	2202      	movs	r2, #2
 8001766:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001776:	2201      	movs	r2, #1
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8001786:	4821      	ldr	r0, [pc, #132]	; (800180c <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001788:	f002 fd7e 	bl	8004288 <HAL_DFSDM_ChannelInit>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <_ZL14MX_DFSDM2_Initv+0x6c>
  {
    Error_Handler();
 800179c:	f000 fc7e 	bl	800209c <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <_ZL14MX_DFSDM2_Initv+0xe4>)
 80017a4:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017de:	2201      	movs	r2, #1
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017f0:	f002 fd4a 	bl	8004288 <HAL_DFSDM_ChannelInit>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <_ZL14MX_DFSDM2_Initv+0xd4>
  {
    Error_Handler();
 8001804:	f000 fc4a 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000148 	.word	0x20000148
 8001810:	40016420 	.word	0x40016420
 8001814:	20000180 	.word	0x20000180
 8001818:	400164e0 	.word	0x400164e0

0800181c <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <_ZL15MX_FMPI2C1_Initv+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <_ZL15MX_FMPI2C1_Initv+0x7c>)
 800182a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001834:	2201      	movs	r2, #1
 8001836:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001858:	f002 fe8c 	bl	8004574 <HAL_FMPI2C_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <_ZL15MX_FMPI2C1_Initv+0x54>
  {
    Error_Handler();
 800186c:	f000 fc16 	bl	800209c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001870:	2100      	movs	r1, #0
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001874:	f002 ff0d 	bl	8004692 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZL15MX_FMPI2C1_Initv+0x70>
  {
    Error_Handler();
 8001888:	f000 fc08 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200001b8 	.word	0x200001b8
 8001894:	40006000 	.word	0x40006000
 8001898:	00303d5b 	.word	0x00303d5b

0800189c <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <_ZL12MX_I2S2_Initv+0x64>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ac:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80018c8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018d8:	2201      	movs	r2, #1
 80018da:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80018dc:	4807      	ldr	r0, [pc, #28]	; (80018fc <_ZL12MX_I2S2_Initv+0x60>)
 80018de:	f004 fddf 	bl	80064a0 <HAL_I2S_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <_ZL12MX_I2S2_Initv+0x5a>
  {
    Error_Handler();
 80018f2:	f000 fbd3 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000204 	.word	0x20000204
 8001900:	40003800 	.word	0x40003800

08001904 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <_ZL15MX_QUADSPI_Initv+0x5c>)
 800190c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 8001916:	2201      	movs	r2, #1
 8001918:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 8001922:	2201      	movs	r2, #1
 8001924:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <_ZL15MX_QUADSPI_Initv+0x58>)
 8001940:	f005 fa70 	bl	8006e24 <HAL_QSPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	bf14      	ite	ne
 800194a:	2301      	movne	r3, #1
 800194c:	2300      	moveq	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8001954:	f000 fba2 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000024c 	.word	0x2000024c
 8001960:	a0001000 	.word	0xa0001000

08001964 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <_ZL15MX_SDIO_SD_Initv+0x70>)
 800196c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001992:	480f      	ldr	r0, [pc, #60]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001994:	f006 fb3c 	bl	8008010 <HAL_SD_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 80019a8:	f000 fb78 	bl	800209c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80019ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80019b2:	f006 fd61 	bl	8008478 <HAL_SD_ConfigWideBusOperation>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80019c6:	f000 fb69 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000298 	.word	0x20000298
 80019d4:	40012c00 	.word	0x40012c00

080019d8 <_ZL14MX_UART10_Initv>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_ZL14MX_UART10_Initv+0x58>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <_ZL14MX_UART10_Initv+0x54>)
 8001a10:	f007 faea 	bl	8008fe8 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf14      	ite	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	2300      	moveq	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <_ZL14MX_UART10_Initv+0x50>
  {
    Error_Handler();
 8001a24:	f000 fb3a 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000031c 	.word	0x2000031c
 8001a30:	40011c00 	.word	0x40011c00

08001a34 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_ZL19MX_USART6_UART_Initv+0x58>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a6c:	f007 fabc 	bl	8008fe8 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf14      	ite	ne
 8001a76:	2301      	movne	r3, #1
 8001a78:	2300      	moveq	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001a80:	f000 fb0c 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000035c 	.word	0x2000035c
 8001a8c:	40011400 	.word	0x40011400

08001a90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	4bb0      	ldr	r3, [pc, #704]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4aaf      	ldr	r2, [pc, #700]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ab0:	f043 0310 	orr.w	r3, r3, #16
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	4ba9      	ldr	r3, [pc, #676]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4aa8      	ldr	r2, [pc, #672]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4ba6      	ldr	r3, [pc, #664]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	4ba2      	ldr	r3, [pc, #648]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4aa1      	ldr	r2, [pc, #644]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ae8:	f043 0320 	orr.w	r3, r3, #32
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b9f      	ldr	r3, [pc, #636]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	4b9b      	ldr	r3, [pc, #620]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a9a      	ldr	r2, [pc, #616]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a93      	ldr	r2, [pc, #588]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b91      	ldr	r3, [pc, #580]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a8c      	ldr	r2, [pc, #560]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b86      	ldr	r3, [pc, #536]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b83      	ldr	r3, [pc, #524]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a7e      	ldr	r2, [pc, #504]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2138      	movs	r1, #56	; 0x38
 8001b8a:	4879      	ldr	r0, [pc, #484]	; (8001d70 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001b8c:	f002 ff60 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2120      	movs	r1, #32
 8001b94:	4877      	ldr	r0, [pc, #476]	; (8001d74 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001b96:	f002 ff5b 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ba0:	4875      	ldr	r0, [pc, #468]	; (8001d78 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001ba2:	f002 ff55 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001bac:	4873      	ldr	r0, [pc, #460]	; (8001d7c <_ZL12MX_GPIO_Initv+0x2ec>)
 8001bae:	f002 ff4f 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001bb2:	2338      	movs	r3, #56	; 0x38
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4869      	ldr	r0, [pc, #420]	; (8001d70 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001bca:	f002 fdad 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001bce:	2340      	movs	r3, #64	; 0x40
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001bde:	2303      	movs	r3, #3
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4619      	mov	r1, r3
 8001be8:	4861      	ldr	r0, [pc, #388]	; (8001d70 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001bea:	f002 fd9d 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c00:	2302      	movs	r3, #2
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	485d      	ldr	r0, [pc, #372]	; (8001d80 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001c0c:	f002 fd8c 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001c10:	2302      	movs	r3, #2
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4854      	ldr	r0, [pc, #336]	; (8001d74 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001c24:	f002 fd80 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	4b55      	ldr	r3, [pc, #340]	; (8001d84 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <_ZL12MX_GPIO_Initv+0x2f8>)
 8001c3c:	f002 fd74 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001c40:	2320      	movs	r3, #32
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c54:	4619      	mov	r1, r3
 8001c56:	4847      	ldr	r0, [pc, #284]	; (8001d74 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001c58:	f002 fd66 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c74:	4619      	mov	r1, r3
 8001c76:	4840      	ldr	r0, [pc, #256]	; (8001d78 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001c78:	f002 fd56 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c82:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	483b      	ldr	r0, [pc, #236]	; (8001d80 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001c92:	f002 fd49 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4831      	ldr	r0, [pc, #196]	; (8001d78 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001cb4:	f002 fd38 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001cca:	2307      	movs	r3, #7
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4828      	ldr	r0, [pc, #160]	; (8001d78 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001cd6:	f002 fd27 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001cda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4821      	ldr	r0, [pc, #132]	; (8001d78 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001cf4:	f002 fd18 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001cf8:	f248 0380 	movw	r3, #32896	; 0x8080
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	481b      	ldr	r0, [pc, #108]	; (8001d7c <_ZL12MX_GPIO_Initv+0x2ec>)
 8001d0e:	f002 fd0b 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001d12:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4814      	ldr	r0, [pc, #80]	; (8001d7c <_ZL12MX_GPIO_Initv+0x2ec>)
 8001d2c:	f002 fcfc 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8001d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d42:	2301      	movs	r3, #1
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480e      	ldr	r0, [pc, #56]	; (8001d88 <_ZL12MX_GPIO_Initv+0x2f8>)
 8001d4e:	f002 fceb 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001d52:	2330      	movs	r3, #48	; 0x30
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d62:	2306      	movs	r3, #6
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	e00f      	b.n	8001d8c <_ZL12MX_GPIO_Initv+0x2fc>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	40021400 	.word	0x40021400
 8001d84:	10110000 	.word	0x10110000
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <_ZL12MX_GPIO_Initv+0x348>)
 8001d90:	f002 fcca 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001d94:	2340      	movs	r3, #64	; 0x40
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_ZL12MX_GPIO_Initv+0x34c>)
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <_ZL12MX_GPIO_Initv+0x348>)
 8001da8:	f002 fcbe 	bl	8004728 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <_ZL12MX_GPIO_Initv+0x348>)
 8001dca:	f002 fcad 	bl	8004728 <HAL_GPIO_Init>

}
 8001dce:	bf00      	nop
 8001dd0:	3738      	adds	r7, #56	; 0x38
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	10110000 	.word	0x10110000

08001de0 <_ZL12MX_FSMC_Initv>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001df8:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001dfa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001dfe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e02:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <_ZL12MX_FSMC_Initv+0x170>)
 8001e04:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e24:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e36:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e42:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e48:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e60:	230f      	movs	r3, #15
 8001e62:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e64:	230f      	movs	r3, #15
 8001e66:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e68:	23ff      	movs	r3, #255	; 0xff
 8001e6a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e70:	2310      	movs	r3, #16
 8001e72:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e74:	2311      	movs	r3, #17
 8001e76:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4832      	ldr	r0, [pc, #200]	; (8001f4c <_ZL12MX_FSMC_Initv+0x16c>)
 8001e84:	f006 fe2e 	bl	8008ae4 <HAL_SRAM_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <_ZL12MX_FSMC_Initv+0xbc>
  {
    Error_Handler( );
 8001e98:	f000 f900 	bl	800209c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001e9e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ea2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <_ZL12MX_FSMC_Initv+0x170>)
 8001ea8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001eaa:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ed6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001f06:	230f      	movs	r3, #15
 8001f08:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001f0e:	23ff      	movs	r3, #255	; 0xff
 8001f10:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001f12:	230f      	movs	r3, #15
 8001f14:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001f16:	2310      	movs	r3, #16
 8001f18:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001f1a:	2311      	movs	r3, #17
 8001f1c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	480a      	ldr	r0, [pc, #40]	; (8001f54 <_ZL12MX_FSMC_Initv+0x174>)
 8001f2a:	f006 fddb 	bl	8008ae4 <HAL_SRAM_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <_ZL12MX_FSMC_Initv+0x162>
  {
    Error_Handler( );
 8001f3e:	f000 f8ad 	bl	800209c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001f42:	bf00      	nop
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000039c 	.word	0x2000039c
 8001f50:	a0000104 	.word	0xa0000104
 8001f54:	200003ec 	.word	0x200003ec

08001f58 <_Z18StartRecievePixelsPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRecievePixels */
void StartRecievePixels(void *argument)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001f60:	f00f f8fc 	bl	801115c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  //configCHECK_FOR_STACK_OVERFLOW = 1; (now this is set in FreeRTOS.h)

  HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
 8001f64:	2206      	movs	r2, #6
 8001f66:	4919      	ldr	r1, [pc, #100]	; (8001fcc <_Z18StartRecievePixelsPv+0x74>)
 8001f68:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <_Z18StartRecievePixelsPv+0x78>)
 8001f6a:	f007 f88a 	bl	8009082 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	if (processPixels)
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <_Z18StartRecievePixelsPv+0x7c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d025      	beq.n	8001fc2 <_Z18StartRecievePixelsPv+0x6a>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); // Red LED
 8001f76:	2201      	movs	r2, #1
 8001f78:	2108      	movs	r1, #8
 8001f7a:	4817      	ldr	r0, [pc, #92]	; (8001fd8 <_Z18StartRecievePixelsPv+0x80>)
 8001f7c:	f002 fd68 	bl	8004a50 <HAL_GPIO_WritePin>
		// this mutex is to lock the recievedCoordinates list
		// this is where it is written to
		osStatus_t status = osMutexAcquire(myMutex01Handle, osWaitForever);
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <_Z18StartRecievePixelsPv+0x84>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00b fec5 	bl	800dd18 <osMutexAcquire>
 8001f8e:	60f8      	str	r0, [r7, #12]
		SetRecievedCoordinates();
 8001f90:	f7ff f9e2 	bl	8001358 <_Z22SetRecievedCoordinatesv>
		osDelay(100);
 8001f94:	2064      	movs	r0, #100	; 0x64
 8001f96:	f00b fdf7 	bl	800db88 <osDelay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); // Red LED
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2108      	movs	r1, #8
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <_Z18StartRecievePixelsPv+0x80>)
 8001fa0:	f002 fd56 	bl	8004a50 <HAL_GPIO_WritePin>
		status = osMutexRelease(myMutex01Handle);
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <_Z18StartRecievePixelsPv+0x84>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00b ff13 	bl	800ddd4 <osMutexRelease>
 8001fae:	60f8      	str	r0, [r7, #12]
		if (status != osOK){
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <_Z18StartRecievePixelsPv+0x64>
			// fail! oh no
		}
		else
		{
			sendCoordinate = true;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <_Z18StartRecievePixelsPv+0x88>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
		}
		processPixels = false;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <_Z18StartRecievePixelsPv+0x7c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	}
	osDelay(100);
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f00b fde0 	bl	800db88 <osDelay>
//	  status = osMutexRelease(myMutex01Handle);
//	  if (status != osOK){
//		  // fail! oh no
//	  }
//	  osDelay(200);
  }
 8001fc8:	e7d1      	b.n	8001f6e <_Z18StartRecievePixelsPv+0x16>
 8001fca:	bf00      	nop
 8001fcc:	20000448 	.word	0x20000448
 8001fd0:	2000035c 	.word	0x2000035c
 8001fd4:	200013ee 	.word	0x200013ee
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	20000444 	.word	0x20000444
 8001fe0:	200013ef 	.word	0x200013ef

08001fe4 <_Z15StartSendPixelsPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendPixels */
void StartSendPixels(void *argument)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b08f      	sub	sp, #60	; 0x3c
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartSendPixels */
  BoundaryBox previousLocation = BoundaryBox();	 // get a default boundary box to start
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
  previousLocation.width = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  previousLocation.widthIndex = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  previousLocation.height = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  previousLocation.heightIndex = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	  if(sendCoordinate)
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <_Z15StartSendPixelsPv+0x84>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d026      	beq.n	8002060 <_Z15StartSendPixelsPv+0x7c>
	  {
		  // this mutex is to lock the recievedCoordinates list
		  // this is where it is written to
		  osStatus_t status = osMutexAcquire(myMutex01Handle, osWaitForever);
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <_Z15StartSendPixelsPv+0x88>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 31ff 	mov.w	r1, #4294967295
 800201a:	4618      	mov	r0, r3
 800201c:	f00b fe7c 	bl	800dd18 <osMutexAcquire>
 8002020:	62f8      	str	r0, [r7, #44]	; 0x2c
		  previousLocation = sendLocation(previousLocation);
 8002022:	4638      	mov	r0, r7
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202e:	f7ff f939 	bl	80012a4 <_Z12sendLocation11BoundaryBox>
 8002032:	f107 041c 	add.w	r4, r7, #28
 8002036:	463b      	mov	r3, r7
 8002038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  recievedCoordinates.clear();
 800203e:	480c      	ldr	r0, [pc, #48]	; (8002070 <_Z15StartSendPixelsPv+0x8c>)
 8002040:	f000 f973 	bl	800232a <_ZNSt6vectorI10CoordinateSaIS0_EE5clearEv>
		  sendCoordinate = false;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_Z15StartSendPixelsPv+0x84>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Green LED
 800204a:	2200      	movs	r2, #0
 800204c:	2120      	movs	r1, #32
 800204e:	4809      	ldr	r0, [pc, #36]	; (8002074 <_Z15StartSendPixelsPv+0x90>)
 8002050:	f002 fcfe 	bl	8004a50 <HAL_GPIO_WritePin>
		  status = osMutexRelease(myMutex01Handle);
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <_Z15StartSendPixelsPv+0x88>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f00b febb 	bl	800ddd4 <osMutexRelease>
 800205e:	62f8      	str	r0, [r7, #44]	; 0x2c
//	  {
//		  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5); // Green LED
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Green LED
//	  }

	  osDelay(200);
 8002060:	20c8      	movs	r0, #200	; 0xc8
 8002062:	f00b fd91 	bl	800db88 <osDelay>
  }
 8002066:	e7d0      	b.n	800200a <_Z15StartSendPixelsPv+0x26>
 8002068:	200013ef 	.word	0x200013ef
 800206c:	20000444 	.word	0x20000444
 8002070:	200013f0 	.word	0x200013f0
 8002074:	40020800 	.word	0x40020800

08002078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800208a:	f001 fc97 	bl	80039bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40001000 	.word	0x40001000

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	f010 fbb3 	bl	801281c <__errno>
 80020b6:	4603      	mov	r3, r0
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f010 fbad 	bl	801281c <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	f010 fb9f 	bl	801281c <__errno>
 80020de:	4603      	mov	r3, r0
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 80020f0:	f010 fb94 	bl	801281c <__errno>
 80020f4:	4602      	mov	r2, r0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002110:	2300      	movs	r3, #0
	  }
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800211e:	b590      	push	{r4, r7, lr}
 8002120:	b08b      	sub	sp, #44	; 0x2c
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ffba 	bl	80020aa <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002136:	f107 0118 	add.w	r1, r7, #24
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
 8002142:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d102      	bne.n	8002152 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 800214c:	68b8      	ldr	r0, [r7, #8]
 800214e:	f00f fb24 	bl	801179a <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002152:	f010 fb63 	bl	801281c <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800215a:	2b22      	cmp	r3, #34	; 0x22
 800215c:	d006      	beq.n	800216c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 800215e:	4621      	mov	r1, r4
 8002160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002162:	f7ff ffd0 	bl	8002106 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8002170:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8002176:	68b8      	ldr	r0, [r7, #8]
 8002178:	f00f fb15 	bl	80117a6 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	461a      	mov	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	601a      	str	r2, [r3, #0]

      return __ret;
 8002192:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff9a 	bl	80020d2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 800219e:	4623      	mov	r3, r4
    }
 80021a0:	4618      	mov	r0, r3
 80021a2:	372c      	adds	r7, #44	; 0x2c
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}

080021a8 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8c8 	bl	8002346 <_ZNSaI10CoordinateEC1Ev>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f8d0 	bl	800235e <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_ZNSaI10CoordinateED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8d8 	bl	8002386 <_ZN9__gnu_cxx13new_allocatorI10CoordinateED1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80021f8:	461a      	mov	r2, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8ce 	bl	800239c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fe92 	bl	8000f2c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implD1Ev>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	10db      	asrs	r3, r3, #3
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f8bd 	bl	80023c2 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1d1a      	adds	r2, r3, #4
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f8ac 	bl	80023c2 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8af 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002284:	4603      	mov	r3, r0
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f000 f8aa 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800228e:	4603      	mov	r3, r0
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	429c      	cmp	r4, r3
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}

080022a4 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	++_M_current;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f103 0208 	add.w	r2, r3, #8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
	return *this;
 80022b8:	687b      	ldr	r3, [r7, #4]
      }
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d00d      	beq.n	8002310 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f000 f87b 	bl	80023f8 <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f103 0208 	add.w	r2, r3, #8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800230e:	e008      	b.n	8002322 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff9e 	bl	8002252 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 8002316:	4603      	mov	r3, r0
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f895 	bl	800244c <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_ZNSt6vectorI10CoordinateSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f943 	bl	80025c4 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_>
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_ZNSaI10CoordinateEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f959 	bl	8002606 <_ZN9__gnu_cxx13new_allocatorI10CoordinateEC1Ev>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
	{ }
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_ZN9__gnu_cxx13new_allocatorI10CoordinateED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	if (__p)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f931 	bl	800261c <_ZNSt16allocator_traitsISaI10CoordinateEE10deallocateERS1_PS0_j>
      }
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f918 	bl	800263a <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f91d 	bl	8002650 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f805 	bl	8002434 <_ZNSt6vectorI10CoordinateSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800242a:	4603      	mov	r3, r0
      }
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZNSt6vectorI10CoordinateSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800243c:	2301      	movs	r3, #1
      }
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8002458:	4a59      	ldr	r2, [pc, #356]	; (80025c0 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 800245a:	2101      	movs	r1, #1
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f910 	bl	8002682 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc>
 8002462:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff fede 	bl	8002232 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 8002476:	4603      	mov	r3, r0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	f107 0214 	add.w	r2, r7, #20
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f943 	bl	8002710 <_ZN9__gnu_cxxmiIP10CoordinateSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800248a:	4603      	mov	r3, r0
 800248c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f951 	bl	800273a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj>
 8002498:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800249e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	18d5      	adds	r5, r2, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f8c6 	bl	800263a <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4629      	mov	r1, r5
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff ff9f 	bl	80023f8 <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80024be:	f7ff ffae 	bl	800241e <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d027      	beq.n	8002518 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff88 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f956 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80024de:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4621      	mov	r1, r4
 80024e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e6:	f000 f93c 	bl	8002762 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80024ea:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	3308      	adds	r3, #8
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff73 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80024fc:	4603      	mov	r3, r0
 80024fe:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f941 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002508:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800250a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	4620      	mov	r0, r4
 8002510:	f000 f927 	bl	8002762 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002514:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002516:	e026      	b.n	8002566 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff60 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002522:	4603      	mov	r3, r0
 8002524:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f92e 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800252e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4621      	mov	r1, r4
 8002534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002536:	f000 f933 	bl	80027a0 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 800253a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	3308      	adds	r3, #8
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff4b 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800254c:	4603      	mov	r3, r0
 800254e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f919 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002558:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800255a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255c:	6a39      	ldr	r1, [r7, #32]
 800255e:	4620      	mov	r0, r4
 8002560:	f000 f91e 	bl	80027a0 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002564:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002566:	f7ff ff5a 	bl	800241e <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>
 800256a:	4603      	mov	r3, r0
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f906 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	6a39      	ldr	r1, [r7, #32]
 8002584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002586:	f000 f924 	bl	80027d2 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800258a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8002596:	461a      	mov	r2, r3
 8002598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259a:	f7ff feff 	bl	800239c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	441a      	add	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	609a      	str	r2, [r3, #8]
    }
 80025b6:	bf00      	nop
 80025b8:	3730      	adds	r7, #48	; 0x30
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bdb0      	pop	{r4, r5, r7, pc}
 80025be:	bf00      	nop
 80025c0:	08012c70 	.word	0x08012c70

080025c4 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	10db      	asrs	r3, r3, #3
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f8cf 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80025ec:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80025ee:	461a      	mov	r2, r3
 80025f0:	4621      	mov	r1, r4
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f000 f8ed 	bl	80027d2 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}

08002606 <_ZN9__gnu_cxx13new_allocatorI10CoordinateEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_ZNSt16allocator_traitsISaI10CoordinateEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f8de 	bl	80027ee <_ZN9__gnu_cxx13new_allocatorI10CoordinateE10deallocateEPS1_j>
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ffec 	bl	800263a <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 8002662:	4604      	mov	r4, r0
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4619      	mov	r1, r3
 8002668:	2008      	movs	r0, #8
 800266a:	f7fe fc39 	bl	8000ee0 <_ZnwjPv>
 800266e:	4603      	mov	r3, r0
 8002670:	4622      	mov	r2, r4
 8002672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002676:	e883 0003 	stmia.w	r3, {r0, r1}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002682:	b590      	push	{r4, r7, lr}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8ba 	bl	8002808 <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 8002694:	4604      	mov	r4, r0
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff fdbb 	bl	8002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 800269c:	4603      	mov	r3, r0
 800269e:	1ae2      	subs	r2, r4, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	bf34      	ite	cc
 80026a6:	2301      	movcc	r3, #1
 80026a8:	2300      	movcs	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f00f f875 	bl	80117a0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff fdab 	bl	8002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 80026bc:	4604      	mov	r4, r0
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff fda7 	bl	8002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 80026c4:	4603      	mov	r3, r0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	f107 0208 	add.w	r2, r7, #8
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f8a9 	bl	800282a <_ZSt3maxIjERKT_S2_S2_>
 80026d8:	4603      	mov	r3, r0
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4423      	add	r3, r4
 80026de:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff fd96 	bl	8002212 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 80026e6:	4602      	mov	r2, r0
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d306      	bcc.n	80026fc <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x7a>
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f88a 	bl	8002808 <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d904      	bls.n	8002706 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x84>
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f883 	bl	8002808 <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 8002702:	4603      	mov	r3, r0
 8002704:	e000      	b.n	8002708 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002706:	697b      	ldr	r3, [r7, #20]
      }
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}

08002710 <_ZN9__gnu_cxxmiIP10CoordinateSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fe61 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002720:	4603      	mov	r3, r0
 8002722:	681c      	ldr	r4, [r3, #0]
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	f7ff fe5c 	bl	80023e2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800272a:	4603      	mov	r3, r0
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	1ae3      	subs	r3, r4, r3
 8002730:	10db      	asrs	r3, r3, #3
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj+0x1e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f87f 	bl	8002852 <_ZNSt16allocator_traitsISaI10CoordinateEE8allocateERS1_j>
 8002754:	4603      	mov	r3, r0
 8002756:	e000      	b.n	800275a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj+0x20>
 8002758:	2300      	movs	r3, #0
      }
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002762:	b590      	push	{r4, r7, lr}
 8002764:	b089      	sub	sp, #36	; 0x24
 8002766:	af02      	add	r7, sp, #8
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002770:	f88d 4000 	strb.w	r4, [sp]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f878 	bl	8002870 <_ZNSt6vectorI10CoordinateSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8002780:	4603      	mov	r3, r0
      }
 8002782:	4618      	mov	r0, r3
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}

0800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f870 	bl	8002894 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>
 80027b4:	4604      	mov	r4, r0
 80027b6:	68b8      	ldr	r0, [r7, #8]
 80027b8:	f000 f86c 	bl	8002894 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>
 80027bc:	4601      	mov	r1, r0
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4620      	mov	r0, r4
 80027c4:	f000 f875 	bl	80028b2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CoordinateES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80027c8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f877 	bl	80028d4 <_ZSt8_DestroyIP10CoordinateEvT_S2_>
    }
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_ZN9__gnu_cxx13new_allocatorI10CoordinateE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80027fa:	68b8      	ldr	r0, [r7, #8]
 80027fc:	f00e ffb2 	bl	8011764 <_ZdlPv>
      }
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f885 	bl	8002922 <_ZNKSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002818:	4603      	mov	r3, r0
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f867 	bl	80028ee <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_max_sizeERKS1_>
 8002820:	4603      	mov	r3, r0
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d201      	bcs.n	8002844 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	e000      	b.n	8002846 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002844:	687b      	ldr	r3, [r7, #4]
    }
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_ZNSt16allocator_traitsISaI10CoordinateEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800285c:	2200      	movs	r2, #0
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f869 	bl	8002938 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv>
 8002866:	4603      	mov	r3, r0
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZNSt6vectorI10CoordinateSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f875 	bl	8002974 <_ZSt12__relocate_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 800288a:	4603      	mov	r3, r0
      }
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f883 	bl	80029ae <_ZNSt13move_iteratorIP10CoordinateEC1ES1_>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CoordinateES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f881 	bl	80029cc <_ZSt18uninitialized_copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZSt8_DestroyIP10CoordinateEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f885 	bl	80029f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CoordinateEEvT_S4_>
    }
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80028f6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80028fa:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f882 	bl	8002a06 <_ZNSt16allocator_traitsISaI10CoordinateEE8max_sizeERKS1_>
 8002902:	4603      	mov	r3, r0
 8002904:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002906:	f107 0208 	add.w	r2, r7, #8
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f884 	bl	8002a1e <_ZSt3minIjERKT_S2_S2_>
 8002916:	4603      	mov	r3, r0
 8002918:	681b      	ldr	r3, [r3, #0]
      }
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_ZNKSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f87e 	bl	8002a46 <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>
 800294a:	4602      	mov	r2, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4293      	cmp	r3, r2
 8002950:	bf8c      	ite	hi
 8002952:	2301      	movhi	r3, #1
 8002954:	2300      	movls	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800295c:	f00e ff17 	bl	801178e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4618      	mov	r0, r3
 8002966:	f00e feff 	bl	8011768 <_Znwj>
 800296a:	4603      	mov	r3, r0
      }
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_ZSt12__relocate_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002974:	b5b0      	push	{r4, r5, r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f86b 	bl	8002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002988:	4604      	mov	r4, r0
 800298a:	68b8      	ldr	r0, [r7, #8]
 800298c:	f000 f867 	bl	8002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002990:	4605      	mov	r5, r0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f863 	bl	8002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002998:	4602      	mov	r2, r0
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4629      	mov	r1, r5
 800299e:	4620      	mov	r0, r4
 80029a0:	f000 f868 	bl	8002a74 <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 80029a4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bdb0      	pop	{r4, r5, r7, pc}

080029ae <_ZNSt13move_iteratorIP10CoordinateEC1ES1_>:
      move_iterator(iterator_type __i)
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_ZSt18uninitialized_copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f865 	bl	8002ab0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10CoordinateES4_EET0_T_S7_S6_>
 80029e6:	4603      	mov	r3, r0
    }
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CoordinateEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_ZNSt16allocator_traitsISaI10CoordinateEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f819 	bl	8002a46 <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d201      	bcs.n	8002a38 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	e000      	b.n	8002a3a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002a38:	687b      	ldr	r3, [r7, #4]
    }
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a4e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	10db      	asrs	r3, r3, #3
 8002a8a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	dd06      	ble.n	8002aa0 <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	461a      	mov	r2, r3
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f00f ff06 	bl	80128ac <memmove>
      return __result + __count;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
    }
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10CoordinateES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f805 	bl	8002ad0 <_ZSt4copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZSt4copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f80f 	bl	8002b00 <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	f000 f80b 	bl	8002b00 <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002aea:	4603      	mov	r3, r0
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4620      	mov	r0, r4
 8002af2:	f000 f816 	bl	8002b22 <_ZSt14__copy_move_a2ILb1EP10CoordinateS1_ET1_T0_S3_S2_>
 8002af6:	4603      	mov	r3, r0
    }
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}

08002b00 <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f82c 	bl	8002b68 <_ZNKSt13move_iteratorIP10CoordinateE4baseEv>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f834 	bl	8002b80 <_ZSt12__miter_baseIP10CoordinateET_S2_>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZSt14__copy_move_a2ILb1EP10CoordinateS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002b22:	b5b0      	push	{r4, r5, r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff95 	bl	8002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002b34:	4604      	mov	r4, r0
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f7ff ff91 	bl	8002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff8c 	bl	8002a5e <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f000 f822 	bl	8002b96 <_ZSt13__copy_move_aILb1EP10CoordinateS1_ET1_T0_S3_S2_>
 8002b52:	4602      	mov	r2, r0
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f82e 	bl	8002bba <_ZSt12__niter_wrapIP10CoordinateET_RKS2_S2_>
 8002b5e:	4603      	mov	r3, r0
    }
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bdb0      	pop	{r4, r5, r7, pc}

08002b68 <_ZNKSt13move_iteratorIP10CoordinateE4baseEv>:
      base() const
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_ZSt12__miter_baseIP10CoordinateET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <_ZSt13__copy_move_aILb1EP10CoordinateS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f811 	bl	8002bd2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_>
 8002bb0:	4603      	mov	r3, r0
    }
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <_ZSt12__niter_wrapIP10CoordinateET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	10db      	asrs	r3, r3, #3
 8002be6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f00f fe58 	bl	80128ac <memmove>
	  return __result + _Num;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
	}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_Z41__static_initialization_and_destruction_0ii>:
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d107      	bne.n	8002c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d102      	bne.n	8002c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<struct Coordinate> recievedCoordinates;
 8002c26:	4809      	ldr	r0, [pc, #36]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002c28:	f7fe f999 	bl	8000f5e <_ZNSt6vectorI10CoordinateSaIS0_EEC1Ev>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002c3e:	f000 f807 	bl	8002c50 <_ZNSt6vectorI10CoordinateSaIS0_EED1Ev>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200013f0 	.word	0x200013f0

08002c50 <_ZNSt6vectorI10CoordinateSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681c      	ldr	r4, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fd91 	bl	800278a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002c68:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff fdaf 	bl	80027d2 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
      }
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fab2 	bl	80021e0 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EED1Ev>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdb0      	pop	{r4, r5, r7, pc}

08002c86 <_GLOBAL__sub_I_hadc1>:
 8002c86:	b580      	push	{r7, lr}
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7ff ffbc 	bl	8002c0c <_Z41__static_initialization_and_destruction_0ii>
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <_GLOBAL__sub_D_hadc1>:
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7ff ffb4 	bl	8002c0c <_Z41__static_initialization_and_destruction_0ii>
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_MspInit+0x4c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	; 0x30
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <HAL_ADC_MspInit+0xe4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d15b      	bne.n	8002dd2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_ADC_MspInit+0xe8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8002d8a:	2311      	movs	r3, #17
 8002d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4811      	ldr	r0, [pc, #68]	; (8002de4 <HAL_ADC_MspInit+0xec>)
 8002d9e:	f001 fcc3 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8002da2:	2326      	movs	r3, #38	; 0x26
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da6:	2303      	movs	r3, #3
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 031c 	add.w	r3, r7, #28
 8002db2:	4619      	mov	r1, r3
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <HAL_ADC_MspInit+0xf0>)
 8002db6:	f001 fcb7 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4807      	ldr	r0, [pc, #28]	; (8002dec <HAL_ADC_MspInit+0xf4>)
 8002dce:	f001 fcab 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3730      	adds	r7, #48	; 0x30
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40012000 	.word	0x40012000
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400

08002df0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_DAC_MspInit+0x8c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d12f      	bne.n	8002e72 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_DAC_MspInit+0x90>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <HAL_DAC_MspInit+0x90>)
 8002e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <HAL_DAC_MspInit+0x90>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_DAC_MspInit+0x90>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_DAC_MspInit+0x90>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_DAC_MspInit+0x90>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <HAL_DAC_MspInit+0x94>)
 8002e5e:	f001 fc63 	bl	8004728 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2036      	movs	r0, #54	; 0x36
 8002e68:	f001 f916 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e6c:	2036      	movs	r0, #54	; 0x36
 8002e6e:	f001 f92f 	bl	80040d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40007400 	.word	0x40007400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000

08002e88 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_DFSDM_ChannelMspInit+0x40>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a76      	ldr	r2, [pc, #472]	; (8003088 <HAL_DFSDM_ChannelMspInit+0x200>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_DFSDM_ChannelMspInit+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a74      	ldr	r2, [pc, #464]	; (800308c <HAL_DFSDM_ChannelMspInit+0x204>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_DFSDM_ChannelMspInit+0x40>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a73      	ldr	r2, [pc, #460]	; (8003090 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d154      	bne.n	8002f72 <HAL_DFSDM_ChannelMspInit+0xea>
 8002ec8:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d150      	bne.n	8002f72 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee0:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	4b69      	ldr	r3, [pc, #420]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	4a68      	ldr	r2, [pc, #416]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6313      	str	r3, [r2, #48]	; 0x30
 8002efc:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	4b62      	ldr	r3, [pc, #392]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	4a61      	ldr	r2, [pc, #388]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f12:	f043 0308 	orr.w	r3, r3, #8
 8002f16:	6313      	str	r3, [r2, #48]	; 0x30
 8002f18:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002f36:	2306      	movs	r3, #6
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4856      	ldr	r0, [pc, #344]	; (800309c <HAL_DFSDM_ChannelMspInit+0x214>)
 8002f42:	f001 fbf1 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002f56:	2306      	movs	r3, #6
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	484f      	ldr	r0, [pc, #316]	; (80030a0 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002f62:	f001 fbe1 	bl	8004728 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002f66:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002f6e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8002f70:	e084      	b.n	800307c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d07f      	beq.n	800307c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a41      	ldr	r2, [pc, #260]	; (8003088 <HAL_DFSDM_ChannelMspInit+0x200>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d07a      	beq.n	800307c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a40      	ldr	r2, [pc, #256]	; (800308c <HAL_DFSDM_ChannelMspInit+0x204>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d075      	beq.n	800307c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3e      	ldr	r2, [pc, #248]	; (8003090 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d070      	beq.n	800307c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002f9a:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d16c      	bne.n	800307c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fe4:	f043 0308 	orr.w	r3, r3, #8
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_DFSDM_ChannelMspInit+0x210>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8003022:	2307      	movs	r3, #7
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8003026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302a:	4619      	mov	r1, r3
 800302c:	481b      	ldr	r0, [pc, #108]	; (800309c <HAL_DFSDM_ChannelMspInit+0x214>)
 800302e:	f001 fb7b 	bl	8004728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8003032:	2304      	movs	r3, #4
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8003042:	2303      	movs	r3, #3
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304a:	4619      	mov	r1, r3
 800304c:	4814      	ldr	r0, [pc, #80]	; (80030a0 <HAL_DFSDM_ChannelMspInit+0x218>)
 800304e:	f001 fb6b 	bl	8004728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8003062:	2306      	movs	r3, #6
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8003066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306a:	4619      	mov	r1, r3
 800306c:	480e      	ldr	r0, [pc, #56]	; (80030a8 <HAL_DFSDM_ChannelMspInit+0x220>)
 800306e:	f001 fb5b 	bl	8004728 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	3738      	adds	r7, #56	; 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40016000 	.word	0x40016000
 8003088:	40016020 	.word	0x40016020
 800308c:	40016040 	.word	0x40016040
 8003090:	40016060 	.word	0x40016060
 8003094:	200013fc 	.word	0x200013fc
 8003098:	40023800 	.word	0x40023800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	20001400 	.word	0x20001400
 80030a8:	40020400 	.word	0x40020400

080030ac <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <HAL_FMPI2C_MspInit+0x84>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d12b      	bne.n	8003126 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_FMPI2C_MspInit+0x88>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_FMPI2C_MspInit+0x88>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_FMPI2C_MspInit+0x88>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80030ea:	23c0      	movs	r3, #192	; 0xc0
 80030ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ee:	2312      	movs	r3, #18
 80030f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80030fa:	2304      	movs	r3, #4
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fe:	f107 0314 	add.w	r3, r7, #20
 8003102:	4619      	mov	r1, r3
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <HAL_FMPI2C_MspInit+0x8c>)
 8003106:	f001 fb0f 	bl	8004728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_FMPI2C_MspInit+0x88>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_FMPI2C_MspInit+0x88>)
 8003114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_FMPI2C_MspInit+0x88>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40006000 	.word	0x40006000
 8003134:	40023800 	.word	0x40023800
 8003138:	40020800 	.word	0x40020800

0800313c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_I2S_MspInit+0x15c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	f040 8097 	bne.w	800328e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	4b4d      	ldr	r3, [pc, #308]	; (800329c <HAL_I2S_MspInit+0x160>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4a4c      	ldr	r2, [pc, #304]	; (800329c <HAL_I2S_MspInit+0x160>)
 800316a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316e:	6413      	str	r3, [r2, #64]	; 0x40
 8003170:	4b4a      	ldr	r3, [pc, #296]	; (800329c <HAL_I2S_MspInit+0x160>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	4b46      	ldr	r3, [pc, #280]	; (800329c <HAL_I2S_MspInit+0x160>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	4a45      	ldr	r2, [pc, #276]	; (800329c <HAL_I2S_MspInit+0x160>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6313      	str	r3, [r2, #48]	; 0x30
 800318c:	4b43      	ldr	r3, [pc, #268]	; (800329c <HAL_I2S_MspInit+0x160>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_I2S_MspInit+0x160>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	4a3e      	ldr	r2, [pc, #248]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6313      	str	r3, [r2, #48]	; 0x30
 80031a8:	4b3c      	ldr	r3, [pc, #240]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	4b38      	ldr	r3, [pc, #224]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	4a37      	ldr	r2, [pc, #220]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6313      	str	r3, [r2, #48]	; 0x30
 80031c4:	4b35      	ldr	r3, [pc, #212]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	6313      	str	r3, [r2, #48]	; 0x30
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_I2S_MspInit+0x160>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80031ec:	2304      	movs	r3, #4
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80031fc:	2306      	movs	r3, #6
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8003200:	f107 031c 	add.w	r3, r7, #28
 8003204:	4619      	mov	r1, r3
 8003206:	4826      	ldr	r0, [pc, #152]	; (80032a0 <HAL_I2S_MspInit+0x164>)
 8003208:	f001 fa8e 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800320c:	2308      	movs	r3, #8
 800320e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800321c:	2305      	movs	r3, #5
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	481e      	ldr	r0, [pc, #120]	; (80032a0 <HAL_I2S_MspInit+0x164>)
 8003228:	f001 fa7e 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800322c:	2308      	movs	r3, #8
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800323c:	2305      	movs	r3, #5
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	4817      	ldr	r0, [pc, #92]	; (80032a4 <HAL_I2S_MspInit+0x168>)
 8003248:	f001 fa6e 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 800324c:	2308      	movs	r3, #8
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800325c:	2305      	movs	r3, #5
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	4619      	mov	r1, r3
 8003266:	4810      	ldr	r0, [pc, #64]	; (80032a8 <HAL_I2S_MspInit+0x16c>)
 8003268:	f001 fa5e 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800326c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800327e:	2305      	movs	r3, #5
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8003282:	f107 031c 	add.w	r3, r7, #28
 8003286:	4619      	mov	r1, r3
 8003288:	4808      	ldr	r0, [pc, #32]	; (80032ac <HAL_I2S_MspInit+0x170>)
 800328a:	f001 fa4d 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3730      	adds	r7, #48	; 0x30
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40003800 	.word	0x40003800
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020000 	.word	0x40020000
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40020400 	.word	0x40020400

080032b0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <HAL_QSPI_MspInit+0x178>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f040 80a6 	bne.w	8003420 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
 80032d8:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	4a53      	ldr	r2, [pc, #332]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 80032de:	f043 0302 	orr.w	r3, r3, #2
 80032e2:	6393      	str	r3, [r2, #56]	; 0x38
 80032e4:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003300:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	4a45      	ldr	r2, [pc, #276]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003316:	f043 0320 	orr.w	r3, r3, #32
 800331a:	6313      	str	r3, [r2, #48]	; 0x30
 800331c:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4a3e      	ldr	r2, [pc, #248]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	6313      	str	r3, [r2, #48]	; 0x30
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	4b38      	ldr	r3, [pc, #224]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4a37      	ldr	r2, [pc, #220]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 800334e:	f043 0308 	orr.w	r3, r3, #8
 8003352:	6313      	str	r3, [r2, #48]	; 0x30
 8003354:	4b35      	ldr	r3, [pc, #212]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	4a30      	ldr	r2, [pc, #192]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 800336a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336e:	6313      	str	r3, [r2, #48]	; 0x30
 8003370:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_QSPI_MspInit+0x17c>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800337c:	2304      	movs	r3, #4
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800338c:	2309      	movs	r3, #9
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003394:	4619      	mov	r1, r3
 8003396:	4826      	ldr	r0, [pc, #152]	; (8003430 <HAL_QSPI_MspInit+0x180>)
 8003398:	f001 f9c6 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800339c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033ae:	230a      	movs	r3, #10
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b6:	4619      	mov	r1, r3
 80033b8:	481e      	ldr	r0, [pc, #120]	; (8003434 <HAL_QSPI_MspInit+0x184>)
 80033ba:	f001 f9b5 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80033be:	2304      	movs	r3, #4
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80033ce:	2309      	movs	r3, #9
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d6:	4619      	mov	r1, r3
 80033d8:	4817      	ldr	r0, [pc, #92]	; (8003438 <HAL_QSPI_MspInit+0x188>)
 80033da:	f001 f9a5 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80033de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80033f0:	2309      	movs	r3, #9
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80033f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f8:	4619      	mov	r1, r3
 80033fa:	4810      	ldr	r0, [pc, #64]	; (800343c <HAL_QSPI_MspInit+0x18c>)
 80033fc:	f001 f994 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8003400:	2340      	movs	r3, #64	; 0x40
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003410:	230a      	movs	r3, #10
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	4809      	ldr	r0, [pc, #36]	; (8003440 <HAL_QSPI_MspInit+0x190>)
 800341c:	f001 f984 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003420:	bf00      	nop
 8003422:	3738      	adds	r7, #56	; 0x38
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	a0001000 	.word	0xa0001000
 800342c:	40023800 	.word	0x40023800
 8003430:	40021000 	.word	0x40021000
 8003434:	40021400 	.word	0x40021400
 8003438:	40020400 	.word	0x40020400
 800343c:	40020c00 	.word	0x40020c00
 8003440:	40021800 	.word	0x40021800

08003444 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_SD_MspInit+0xc0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d14a      	bne.n	80034fc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <HAL_SD_MspInit+0xc4>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <HAL_SD_MspInit+0xc4>)
 8003470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_SD_MspInit+0xc4>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_SD_MspInit+0xc4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_SD_MspInit+0xc4>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_SD_MspInit+0xc4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_SD_MspInit+0xc4>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_SD_MspInit+0xc4>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_SD_MspInit+0xc4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034ca:	230c      	movs	r3, #12
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	4619      	mov	r1, r3
 80034d4:	480d      	ldr	r0, [pc, #52]	; (800350c <HAL_SD_MspInit+0xc8>)
 80034d6:	f001 f927 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80034da:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80034de:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e8:	2303      	movs	r3, #3
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034ec:	230c      	movs	r3, #12
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4619      	mov	r1, r3
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <HAL_SD_MspInit+0xcc>)
 80034f8:	f001 f916 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80034fc:	bf00      	nop
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40023800 	.word	0x40023800
 800350c:	40020000 	.word	0x40020000
 8003510:	40020800 	.word	0x40020800

08003514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a37      	ldr	r2, [pc, #220]	; (8003610 <HAL_UART_MspInit+0xfc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12d      	bne.n	8003592 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_UART_MspInit+0x100>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	4a35      	ldr	r2, [pc, #212]	; (8003614 <HAL_UART_MspInit+0x100>)
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_UART_MspInit+0x100>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <HAL_UART_MspInit+0x100>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <HAL_UART_MspInit+0x100>)
 800355c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_UART_MspInit+0x100>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800356e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8003580:	230b      	movs	r3, #11
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	4619      	mov	r1, r3
 800358a:	4823      	ldr	r0, [pc, #140]	; (8003618 <HAL_UART_MspInit+0x104>)
 800358c:	f001 f8cc 	bl	8004728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003590:	e039      	b.n	8003606 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_UART_MspInit+0x108>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d134      	bne.n	8003606 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <HAL_UART_MspInit+0x100>)
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_UART_MspInit+0x100>)
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	6453      	str	r3, [r2, #68]	; 0x44
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_UART_MspInit+0x100>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_UART_MspInit+0x100>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <HAL_UART_MspInit+0x100>)
 80035c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c6:	6313      	str	r3, [r2, #48]	; 0x30
 80035c8:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_UART_MspInit+0x100>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80035d4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035e6:	2308      	movs	r3, #8
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4619      	mov	r1, r3
 80035f0:	4809      	ldr	r0, [pc, #36]	; (8003618 <HAL_UART_MspInit+0x104>)
 80035f2:	f001 f899 	bl	8004728 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2100      	movs	r1, #0
 80035fa:	2047      	movs	r0, #71	; 0x47
 80035fc:	f000 fd4c 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003600:	2047      	movs	r0, #71	; 0x47
 8003602:	f000 fd65 	bl	80040d0 <HAL_NVIC_EnableIRQ>
}
 8003606:	bf00      	nop
 8003608:	3730      	adds	r7, #48	; 0x30
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40011c00 	.word	0x40011c00
 8003614:	40023800 	.word	0x40023800
 8003618:	40021800 	.word	0x40021800
 800361c:	40011400 	.word	0x40011400

08003620 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_FSMC_MspInit+0xc8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d151      	bne.n	80036e0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_FSMC_MspInit+0xc8>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <HAL_FSMC_MspInit+0xcc>)
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <HAL_FSMC_MspInit+0xcc>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6393      	str	r3, [r2, #56]	; 0x38
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_FSMC_MspInit+0xcc>)
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800365e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003662:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003670:	230c      	movs	r3, #12
 8003672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	4619      	mov	r1, r3
 8003678:	481d      	ldr	r0, [pc, #116]	; (80036f0 <HAL_FSMC_MspInit+0xd0>)
 800367a:	f001 f855 	bl	8004728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 800367e:	f240 433f 	movw	r3, #1087	; 0x43f
 8003682:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368c:	2303      	movs	r3, #3
 800368e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003690:	230c      	movs	r3, #12
 8003692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4816      	ldr	r0, [pc, #88]	; (80036f4 <HAL_FSMC_MspInit+0xd4>)
 800369a:	f001 f845 	bl	8004728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 800369e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80036a2:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ac:	2303      	movs	r3, #3
 80036ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80036b0:	230c      	movs	r3, #12
 80036b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036b4:	1d3b      	adds	r3, r7, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	480f      	ldr	r0, [pc, #60]	; (80036f8 <HAL_FSMC_MspInit+0xd8>)
 80036ba:	f001 f835 	bl	8004728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80036be:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80036c2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2302      	movs	r3, #2
 80036c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036cc:	2303      	movs	r3, #3
 80036ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80036d0:	230c      	movs	r3, #12
 80036d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4808      	ldr	r0, [pc, #32]	; (80036fc <HAL_FSMC_MspInit+0xdc>)
 80036da:	f001 f825 	bl	8004728 <HAL_GPIO_Init>
 80036de:	e000      	b.n	80036e2 <HAL_FSMC_MspInit+0xc2>
    return;
 80036e0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20001404 	.word	0x20001404
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40020c00 	.word	0x40020c00

08003700 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003708:	f7ff ff8a 	bl	8003620 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003724:	2200      	movs	r2, #0
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	2036      	movs	r0, #54	; 0x36
 800372a:	f000 fcb5 	bl	8004098 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800372e:	2036      	movs	r0, #54	; 0x36
 8003730:	f000 fcce 	bl	80040d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <HAL_InitTick+0xa0>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_InitTick+0xa0>)
 800373e:	f043 0310 	orr.w	r3, r3, #16
 8003742:	6413      	str	r3, [r2, #64]	; 0x40
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_InitTick+0xa0>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003750:	f107 0210 	add.w	r2, r7, #16
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f003 fdf4 	bl	8007348 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003760:	f003 fdca 	bl	80072f8 <HAL_RCC_GetPCLK1Freq>
 8003764:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <HAL_InitTick+0xa4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	3b01      	subs	r3, #1
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <HAL_InitTick+0xa8>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <HAL_InitTick+0xac>)
 8003778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_InitTick+0xa8>)
 800377c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_InitTick+0xa8>)
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_InitTick+0xa8>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_InitTick+0xa8>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003794:	4809      	ldr	r0, [pc, #36]	; (80037bc <HAL_InitTick+0xa8>)
 8003796:	f005 f9e9 	bl	8008b6c <HAL_TIM_Base_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037a0:	4806      	ldr	r0, [pc, #24]	; (80037bc <HAL_InitTick+0xa8>)
 80037a2:	f005 fa18 	bl	8008bd6 <HAL_TIM_Base_Start_IT>
 80037a6:	4603      	mov	r3, r0
 80037a8:	e000      	b.n	80037ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3730      	adds	r7, #48	; 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	431bde83 	.word	0x431bde83
 80037bc:	20005d60 	.word	0x20005d60
 80037c0:	40001000 	.word	0x40001000

080037c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <TIM6_DAC_IRQHandler+0x20>)
 80037fe:	791b      	ldrb	r3, [r3, #4]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003806:	4804      	ldr	r0, [pc, #16]	; (8003818 <TIM6_DAC_IRQHandler+0x20>)
 8003808:	f000 fc92 	bl	8004130 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800380c:	4803      	ldr	r0, [pc, #12]	; (800381c <TIM6_DAC_IRQHandler+0x24>)
 800380e:	f005 fa06 	bl	8008c1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200000fc 	.word	0x200000fc
 800381c:	20005d60 	.word	0x20005d60

08003820 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <OTG_FS_IRQHandler+0x10>)
 8003826:	f001 fbd7 	bl	8004fd8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200061ec 	.word	0x200061ec

08003834 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <USART6_IRQHandler+0x10>)
 800383a:	f005 fc77 	bl	800912c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	2000035c 	.word	0x2000035c

08003848 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
	return 1;
 800384c:	2301      	movs	r3, #1
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <_kill>:

int _kill(int pid, int sig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003862:	f00e ffdb 	bl	801281c <__errno>
 8003866:	4603      	mov	r3, r0
 8003868:	2216      	movs	r2, #22
 800386a:	601a      	str	r2, [r3, #0]
	return -1;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_exit>:

void _exit (int status)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003880:	f04f 31ff 	mov.w	r1, #4294967295
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ffe7 	bl	8003858 <_kill>
	while (1) {}		/* Make sure we hang here */
 800388a:	e7fe      	b.n	800388a <_exit+0x12>

0800388c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <_sbrk+0x5c>)
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <_sbrk+0x60>)
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <_sbrk+0x64>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <_sbrk+0x64>)
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <_sbrk+0x68>)
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d207      	bcs.n	80038cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038bc:	f00e ffae 	bl	801281c <__errno>
 80038c0:	4603      	mov	r3, r0
 80038c2:	220c      	movs	r2, #12
 80038c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e009      	b.n	80038e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <_sbrk+0x64>)
 80038dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20050000 	.word	0x20050000
 80038ec:	00000400 	.word	0x00000400
 80038f0:	20001408 	.word	0x20001408
 80038f4:	200064c0 	.word	0x200064c0

080038f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <SystemInit+0x28>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <SystemInit+0x28>)
 8003904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <SystemInit+0x28>)
 800390e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003912:	609a      	str	r2, [r3, #8]
#endif
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800395c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003928:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800392a:	e003      	b.n	8003934 <LoopCopyDataInit>

0800392c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800392e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003930:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003932:	3104      	adds	r1, #4

08003934 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003934:	480b      	ldr	r0, [pc, #44]	; (8003964 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003938:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800393a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800393c:	d3f6      	bcc.n	800392c <CopyDataInit>
  ldr  r2, =_sbss
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003940:	e002      	b.n	8003948 <LoopFillZerobss>

08003942 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003942:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003944:	f842 3b04 	str.w	r3, [r2], #4

08003948 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800394a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800394c:	d3f9      	bcc.n	8003942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800394e:	f7ff ffd3 	bl	80038f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003952:	f00e ff69 	bl	8012828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003956:	f7fd fd29 	bl	80013ac <main>
  bx  lr    
 800395a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800395c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003960:	08012ec4 	.word	0x08012ec4
  ldr  r0, =_sdata
 8003964:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003968:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 800396c:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8003970:	200064c0 	.word	0x200064c0

08003974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <ADC_IRQHandler>
	...

08003978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <HAL_Init+0x40>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <HAL_Init+0x40>)
 8003982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <HAL_Init+0x40>)
 800398e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003994:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_Init+0x40>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <HAL_Init+0x40>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a0:	2003      	movs	r0, #3
 80039a2:	f000 fb6e 	bl	8004082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7ff feb4 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ac:	f7ff f97c 	bl	8002ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023c00 	.word	0x40023c00

080039bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_IncTick+0x20>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_IncTick+0x24>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <HAL_IncTick+0x24>)
 80039ce:	6013      	str	r3, [r2, #0]
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000008 	.word	0x20000008
 80039e0:	20005da0 	.word	0x20005da0

080039e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return uwTick;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_GetTick+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20005da0 	.word	0x20005da0

080039fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a04:	f7ff ffee 	bl	80039e4 <HAL_GetTick>
 8003a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d005      	beq.n	8003a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_Delay+0x44>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a22:	bf00      	nop
 8003a24:	f7ff ffde 	bl	80039e4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d8f7      	bhi.n	8003a24 <HAL_Delay+0x28>
  {
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000008 	.word	0x20000008

08003a44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e033      	b.n	8003ac2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff f948 	bl	8002cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a8a:	f023 0302 	bic.w	r3, r3, #2
 8003a8e:	f043 0202 	orr.w	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f94a 	bl	8003d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab2:	e001      	b.n	8003ab8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e113      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x244>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	d925      	bls.n	8003b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68d9      	ldr	r1, [r3, #12]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3b1e      	subs	r3, #30
 8003b0e:	2207      	movs	r2, #7
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43da      	mvns	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68d9      	ldr	r1, [r3, #12]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	4603      	mov	r3, r0
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4403      	add	r3, r0
 8003b36:	3b1e      	subs	r3, #30
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e022      	b.n	8003b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	4613      	mov	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	2207      	movs	r2, #7
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	400a      	ands	r2, r1
 8003b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6919      	ldr	r1, [r3, #16]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4618      	mov	r0, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4403      	add	r3, r0
 8003b80:	409a      	lsls	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d824      	bhi.n	8003bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b05      	subs	r3, #5
 8003ba4:	221f      	movs	r2, #31
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43da      	mvns	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b05      	subs	r3, #5
 8003bce:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bda:	e04c      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d824      	bhi.n	8003c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b23      	subs	r3, #35	; 0x23
 8003bf6:	221f      	movs	r2, #31
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	400a      	ands	r2, r1
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b23      	subs	r3, #35	; 0x23
 8003c20:	fa00 f203 	lsl.w	r2, r0, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c2c:	e023      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3b41      	subs	r3, #65	; 0x41
 8003c40:	221f      	movs	r2, #31
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43da      	mvns	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	3b41      	subs	r3, #65	; 0x41
 8003c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_ADC_ConfigChannel+0x250>)
 8003c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <HAL_ADC_ConfigChannel+0x254>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10f      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1d8>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b12      	cmp	r3, #18
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_ADC_ConfigChannel+0x254>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d12b      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x23a>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_ADC_ConfigChannel+0x258>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b11      	cmp	r3, #17
 8003cbe:	d122      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <HAL_ADC_ConfigChannel+0x258>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d111      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <HAL_ADC_ConfigChannel+0x25c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_ADC_ConfigChannel+0x260>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	0c9a      	lsrs	r2, r3, #18
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40012300 	.word	0x40012300
 8003d20:	40012000 	.word	0x40012000
 8003d24:	10000012 	.word	0x10000012
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	431bde83 	.word	0x431bde83

08003d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d38:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <ADC_Init+0x1f0>)
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6899      	ldr	r1, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	4a58      	ldr	r2, [pc, #352]	; (8003f24 <ADC_Init+0x1f4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6899      	ldr	r1, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	e00f      	b.n	8003e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0202 	bic.w	r2, r2, #2
 8003e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6899      	ldr	r1, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7e1b      	ldrb	r3, [r3, #24]
 8003e48:	005a      	lsls	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	3b01      	subs	r3, #1
 8003e88:	035a      	lsls	r2, r3, #13
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	e007      	b.n	8003ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	051a      	lsls	r2, r3, #20
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ee6:	025a      	lsls	r2, r3, #9
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	029a      	lsls	r2, r3, #10
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40012300 	.word	0x40012300
 8003f24:	0f000001 	.word	0x0f000001

08003f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f44:	4013      	ands	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	60d3      	str	r3, [r2, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <__NVIC_GetPriorityGrouping+0x18>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0307 	and.w	r3, r3, #7
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db0b      	blt.n	8003fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	f003 021f 	and.w	r2, r3, #31
 8003fa4:	4907      	ldr	r1, [pc, #28]	; (8003fc4 <__NVIC_EnableIRQ+0x38>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2001      	movs	r0, #1
 8003fae:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db0a      	blt.n	8003ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	490c      	ldr	r1, [pc, #48]	; (8004014 <__NVIC_SetPriority+0x4c>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	440b      	add	r3, r1
 8003fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff0:	e00a      	b.n	8004008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	; (8004018 <__NVIC_SetPriority+0x50>)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3b04      	subs	r3, #4
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	440b      	add	r3, r1
 8004006:	761a      	strb	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	; 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf28      	it	cs
 800403a:	2304      	movcs	r3, #4
 800403c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3304      	adds	r3, #4
 8004042:	2b06      	cmp	r3, #6
 8004044:	d902      	bls.n	800404c <NVIC_EncodePriority+0x30>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3b03      	subs	r3, #3
 800404a:	e000      	b.n	800404e <NVIC_EncodePriority+0x32>
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43d9      	mvns	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	4313      	orrs	r3, r2
         );
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ff4c 	bl	8003f28 <__NVIC_SetPriorityGrouping>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040aa:	f7ff ff61 	bl	8003f70 <__NVIC_GetPriorityGrouping>
 80040ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7ff ffb1 	bl	800401c <NVIC_EncodePriority>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff80 	bl	8003fc8 <__NVIC_SetPriority>
}
 80040c8:	bf00      	nop
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff54 	bl	8003f8c <__NVIC_EnableIRQ>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e014      	b.n	8004128 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	791b      	ldrb	r3, [r3, #4]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fe6e 	bl	8002df0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004146:	d118      	bne.n	800417a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2204      	movs	r2, #4
 800414c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004162:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004172:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f825 	bl	80041c4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d118      	bne.n	80041bc <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f043 0202 	orr.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80041b4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f85b 	bl	8004272 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	795b      	ldrb	r3, [r3, #5]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_DAC_ConfigChannel+0x20>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e036      	b.n	8004266 <HAL_DAC_ConfigChannel+0x8e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2202      	movs	r2, #2
 8004202:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800420c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4013      	ands	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	22c0      	movs	r2, #192	; 0xc0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	400a      	ands	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0cf      	b.n	800443a <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a69      	ldr	r2, [pc, #420]	; (8004444 <HAL_DFSDM_ChannelInit+0x1bc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_DFSDM_ChannelInit+0x3a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a67      	ldr	r2, [pc, #412]	; (8004448 <HAL_DFSDM_ChannelInit+0x1c0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_DFSDM_ChannelInit+0x3a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a66      	ldr	r2, [pc, #408]	; (800444c <HAL_DFSDM_ChannelInit+0x1c4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_DFSDM_ChannelInit+0x3a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a64      	ldr	r2, [pc, #400]	; (8004450 <HAL_DFSDM_ChannelInit+0x1c8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d106      	bne.n	80042d0 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80042c2:	4b64      	ldr	r3, [pc, #400]	; (8004454 <HAL_DFSDM_ChannelInit+0x1cc>)
 80042c4:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80042c6:	4b64      	ldr	r3, [pc, #400]	; (8004458 <HAL_DFSDM_ChannelInit+0x1d0>)
 80042c8:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80042ca:	4b5e      	ldr	r3, [pc, #376]	; (8004444 <HAL_DFSDM_ChannelInit+0x1bc>)
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e005      	b.n	80042dc <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80042d0:	4b62      	ldr	r3, [pc, #392]	; (800445c <HAL_DFSDM_ChannelInit+0x1d4>)
 80042d2:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80042d4:	4b62      	ldr	r3, [pc, #392]	; (8004460 <HAL_DFSDM_ChannelInit+0x1d8>)
 80042d6:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80042d8:	4b62      	ldr	r3, [pc, #392]	; (8004464 <HAL_DFSDM_ChannelInit+0x1dc>)
 80042da:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f8c1 	bl	8004468 <DFSDM_GetChannelFromInstance>
 80042e6:	4603      	mov	r3, r0
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0a0      	b.n	800443a <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7fe fdc5 	bl	8002e88 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d125      	bne.n	800435c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	791b      	ldrb	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d108      	bne.n	8004350 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800436a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800437a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004380:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 020f 	bic.w	r2, r2, #15
 8004398:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80043c0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 0207 	and.w	r2, r2, #7
 80043ec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004418:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f81e 	bl	8004468 <DFSDM_GetChannelFromInstance>
 800442c:	4603      	mov	r3, r0
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40016000 	.word	0x40016000
 8004448:	40016020 	.word	0x40016020
 800444c:	40016040 	.word	0x40016040
 8004450:	40016060 	.word	0x40016060
 8004454:	2000140c 	.word	0x2000140c
 8004458:	20001410 	.word	0x20001410
 800445c:	20001420 	.word	0x20001420
 8004460:	20001424 	.word	0x20001424
 8004464:	40016400 	.word	0x40016400

08004468 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a24      	ldr	r2, [pc, #144]	; (8004504 <DFSDM_GetChannelFromInstance+0x9c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <DFSDM_GetChannelFromInstance+0x18>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <DFSDM_GetChannelFromInstance+0xa0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d102      	bne.n	8004486 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e037      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <DFSDM_GetChannelFromInstance+0xa4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d003      	beq.n	8004496 <DFSDM_GetChannelFromInstance+0x2e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <DFSDM_GetChannelFromInstance+0xa8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d102      	bne.n	800449c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004496:	2301      	movs	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e02c      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <DFSDM_GetChannelFromInstance+0xac>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <DFSDM_GetChannelFromInstance+0x44>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <DFSDM_GetChannelFromInstance+0xb0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80044ac:	2302      	movs	r3, #2
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e021      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <DFSDM_GetChannelFromInstance+0xb4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <DFSDM_GetChannelFromInstance+0x5a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a18      	ldr	r2, [pc, #96]	; (8004520 <DFSDM_GetChannelFromInstance+0xb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d102      	bne.n	80044c8 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80044c2:	2303      	movs	r3, #3
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	e016      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <DFSDM_GetChannelFromInstance+0xbc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d102      	bne.n	80044d6 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80044d0:	2304      	movs	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e00f      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <DFSDM_GetChannelFromInstance+0xc0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d102      	bne.n	80044e4 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80044de:	2305      	movs	r3, #5
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e008      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a11      	ldr	r2, [pc, #68]	; (800452c <DFSDM_GetChannelFromInstance+0xc4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d102      	bne.n	80044f2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80044ec:	2306      	movs	r3, #6
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e001      	b.n	80044f6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80044f2:	2307      	movs	r3, #7
 80044f4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40016000 	.word	0x40016000
 8004508:	40016400 	.word	0x40016400
 800450c:	40016020 	.word	0x40016020
 8004510:	40016420 	.word	0x40016420
 8004514:	40016040 	.word	0x40016040
 8004518:	40016440 	.word	0x40016440
 800451c:	40016060 	.word	0x40016060
 8004520:	40016460 	.word	0x40016460
 8004524:	40016480 	.word	0x40016480
 8004528:	400164a0 	.word	0x400164a0
 800452c:	400164c0 	.word	0x400164c0

08004530 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d004      	beq.n	800454e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2280      	movs	r2, #128	; 0x80
 8004548:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e00c      	b.n	8004568 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2205      	movs	r2, #5
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e081      	b.n	800468a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fe fd86 	bl	80030ac <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	e006      	b.n	80045fc <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d104      	bne.n	800460e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800460c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800461c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004620:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004630:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	ea42 0103 	orr.w	r1, r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69d9      	ldr	r1, [r3, #28]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1a      	ldr	r2, [r3, #32]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d138      	bne.n	800471a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e032      	b.n	800471c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2224      	movs	r2, #36	; 0x24
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e000      	b.n	800471c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e165      	b.n	8004a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004744:	2201      	movs	r2, #1
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	429a      	cmp	r2, r3
 800475e:	f040 8154 	bne.w	8004a0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d00b      	beq.n	8004782 <HAL_GPIO_Init+0x5a>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d007      	beq.n	8004782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004776:	2b11      	cmp	r3, #17
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b12      	cmp	r3, #18
 8004780:	d130      	bne.n	80047e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b8:	2201      	movs	r2, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0201 	and.w	r2, r3, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	2203      	movs	r2, #3
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0xfc>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b12      	cmp	r3, #18
 8004822:	d123      	bne.n	800486c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	08da      	lsrs	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3208      	adds	r2, #8
 800482c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	220f      	movs	r2, #15
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	08da      	lsrs	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3208      	adds	r2, #8
 8004866:	69b9      	ldr	r1, [r7, #24]
 8004868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80ae 	beq.w	8004a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	4b5d      	ldr	r3, [pc, #372]	; (8004a28 <HAL_GPIO_Init+0x300>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b6:	4a5c      	ldr	r2, [pc, #368]	; (8004a28 <HAL_GPIO_Init+0x300>)
 80048b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048bc:	6453      	str	r3, [r2, #68]	; 0x44
 80048be:	4b5a      	ldr	r3, [pc, #360]	; (8004a28 <HAL_GPIO_Init+0x300>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ca:	4a58      	ldr	r2, [pc, #352]	; (8004a2c <HAL_GPIO_Init+0x304>)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4f      	ldr	r2, [pc, #316]	; (8004a30 <HAL_GPIO_Init+0x308>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d025      	beq.n	8004942 <HAL_GPIO_Init+0x21a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4e      	ldr	r2, [pc, #312]	; (8004a34 <HAL_GPIO_Init+0x30c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <HAL_GPIO_Init+0x216>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4d      	ldr	r2, [pc, #308]	; (8004a38 <HAL_GPIO_Init+0x310>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d019      	beq.n	800493a <HAL_GPIO_Init+0x212>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4c      	ldr	r2, [pc, #304]	; (8004a3c <HAL_GPIO_Init+0x314>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_GPIO_Init+0x20e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4b      	ldr	r2, [pc, #300]	; (8004a40 <HAL_GPIO_Init+0x318>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00d      	beq.n	8004932 <HAL_GPIO_Init+0x20a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4a      	ldr	r2, [pc, #296]	; (8004a44 <HAL_GPIO_Init+0x31c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_GPIO_Init+0x206>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a49      	ldr	r2, [pc, #292]	; (8004a48 <HAL_GPIO_Init+0x320>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d101      	bne.n	800492a <HAL_GPIO_Init+0x202>
 8004926:	2306      	movs	r3, #6
 8004928:	e00c      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 800492a:	2307      	movs	r3, #7
 800492c:	e00a      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 800492e:	2305      	movs	r3, #5
 8004930:	e008      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 8004932:	2304      	movs	r3, #4
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 8004936:	2303      	movs	r3, #3
 8004938:	e004      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 800493a:	2302      	movs	r3, #2
 800493c:	e002      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_GPIO_Init+0x21c>
 8004942:	2300      	movs	r3, #0
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	f002 0203 	and.w	r2, r2, #3
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	4093      	lsls	r3, r2
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004954:	4935      	ldr	r1, [pc, #212]	; (8004a2c <HAL_GPIO_Init+0x304>)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	3302      	adds	r3, #2
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004962:	4b3a      	ldr	r3, [pc, #232]	; (8004a4c <HAL_GPIO_Init+0x324>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004986:	4a31      	ldr	r2, [pc, #196]	; (8004a4c <HAL_GPIO_Init+0x324>)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800498c:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <HAL_GPIO_Init+0x324>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	43db      	mvns	r3, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b0:	4a26      	ldr	r2, [pc, #152]	; (8004a4c <HAL_GPIO_Init+0x324>)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049b6:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_GPIO_Init+0x324>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049da:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_GPIO_Init+0x324>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <HAL_GPIO_Init+0x324>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a04:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <HAL_GPIO_Init+0x324>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	f67f ae96 	bls.w	8004744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	; 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40020800 	.word	0x40020800
 8004a3c:	40020c00 	.word	0x40020c00
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40021400 	.word	0x40021400
 8004a48:	40021800 	.word	0x40021800
 8004a4c:	40013c00 	.word	0x40013c00

08004a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a60:	787b      	ldrb	r3, [r7, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a6c:	e003      	b.n	8004a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	041a      	lsls	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	619a      	str	r2, [r3, #24]
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	401a      	ands	r2, r3
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d104      	bne.n	8004aa6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	041a      	lsls	r2, r3, #16
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004aa4:	e002      	b.n	8004aac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aba:	b08f      	sub	sp, #60	; 0x3c
 8004abc:	af0a      	add	r7, sp, #40	; 0x28
 8004abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e054      	b.n	8004b74 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f00c fb8d 	bl	8011204 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2203      	movs	r2, #3
 8004aee:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f005 ff03 	bl	800a914 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	687e      	ldr	r6, [r7, #4]
 8004b16:	466d      	mov	r5, sp
 8004b18:	f106 0410 	add.w	r4, r6, #16
 8004b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b2c:	1d33      	adds	r3, r6, #4
 8004b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f005 fe7d 	bl	800a830 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 fefa 	bl	800a936 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	687e      	ldr	r6, [r7, #4]
 8004b4a:	466d      	mov	r5, sp
 8004b4c:	f106 0410 	add.w	r4, r6, #16
 8004b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b60:	1d33      	adds	r3, r6, #4
 8004b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b64:	6838      	ldr	r0, [r7, #0]
 8004b66:	f006 f80d 	bl	800ab84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b7c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b089      	sub	sp, #36	; 0x24
 8004b80:	af04      	add	r7, sp, #16
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	70fb      	strb	r3, [r7, #3]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70bb      	strb	r3, [r7, #2]
 8004b92:	4613      	mov	r3, r2
 8004b94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_HCD_HC_Init+0x28>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e07f      	b.n	8004ca4 <HAL_HCD_HC_Init+0x128>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	440b      	add	r3, r1
 8004bba:	333d      	adds	r3, #61	; 0x3d
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	440b      	add	r3, r1
 8004bce:	3338      	adds	r3, #56	; 0x38
 8004bd0:	787a      	ldrb	r2, [r7, #1]
 8004bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	3340      	adds	r3, #64	; 0x40
 8004be4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004be6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3339      	adds	r3, #57	; 0x39
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	333f      	adds	r3, #63	; 0x3f
 8004c0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004c10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	78bb      	ldrb	r3, [r7, #2]
 8004c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1a:	b2d8      	uxtb	r0, r3
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	440b      	add	r3, r1
 8004c28:	333a      	adds	r3, #58	; 0x3a
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004c2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da0a      	bge.n	8004c4c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	440b      	add	r3, r1
 8004c44:	333b      	adds	r3, #59	; 0x3b
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e009      	b.n	8004c60 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004c4c:	78fa      	ldrb	r2, [r7, #3]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	333b      	adds	r3, #59	; 0x3b
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	440b      	add	r3, r1
 8004c6e:	333c      	adds	r3, #60	; 0x3c
 8004c70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c74:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	787c      	ldrb	r4, [r7, #1]
 8004c7c:	78ba      	ldrb	r2, [r7, #2]
 8004c7e:	78f9      	ldrb	r1, [r7, #3]
 8004c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c82:	9302      	str	r3, [sp, #8]
 8004c84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4623      	mov	r3, r4
 8004c92:	f006 f8f3 	bl	800ae7c <USB_HC_Init>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd90      	pop	{r4, r7, pc}

08004cac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_HCD_HC_Halt+0x1e>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e00f      	b.n	8004cea <HAL_HCD_HC_Halt+0x3e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f006 fb2d 	bl	800b33a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	70fb      	strb	r3, [r7, #3]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70bb      	strb	r3, [r7, #2]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	440b      	add	r3, r1
 8004d1c:	333b      	adds	r3, #59	; 0x3b
 8004d1e:	78ba      	ldrb	r2, [r7, #2]
 8004d20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	333f      	adds	r3, #63	; 0x3f
 8004d32:	787a      	ldrb	r2, [r7, #1]
 8004d34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004d36:	7c3b      	ldrb	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d114      	bne.n	8004d66 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	440b      	add	r3, r1
 8004d4a:	3342      	adds	r3, #66	; 0x42
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	440b      	add	r3, r1
 8004d5e:	333d      	adds	r3, #61	; 0x3d
 8004d60:	7f3a      	ldrb	r2, [r7, #28]
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e009      	b.n	8004d7a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	440b      	add	r3, r1
 8004d74:	3342      	adds	r3, #66	; 0x42
 8004d76:	2202      	movs	r2, #2
 8004d78:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d7a:	787b      	ldrb	r3, [r7, #1]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	f200 80d6 	bhi.w	8004f2e <HAL_HCD_HC_SubmitRequest+0x23a>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004f19 	.word	0x08004f19
 8004d90:	08004e05 	.word	0x08004e05
 8004d94:	08004e8f 	.word	0x08004e8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d98:	7c3b      	ldrb	r3, [r7, #16]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	f040 80c9 	bne.w	8004f32 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004da0:	78bb      	ldrb	r3, [r7, #2]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 80c5 	bne.w	8004f32 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004da8:	8b3b      	ldrh	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	440b      	add	r3, r1
 8004dbc:	3351      	adds	r3, #81	; 0x51
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	3351      	adds	r3, #81	; 0x51
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	440b      	add	r3, r1
 8004de6:	3342      	adds	r3, #66	; 0x42
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004dec:	e0a1      	b.n	8004f32 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3342      	adds	r3, #66	; 0x42
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
      break;
 8004e02:	e096      	b.n	8004f32 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e04:	78bb      	ldrb	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d120      	bne.n	8004e4c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	440b      	add	r3, r1
 8004e18:	3351      	adds	r3, #81	; 0x51
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3342      	adds	r3, #66	; 0x42
 8004e30:	2200      	movs	r2, #0
 8004e32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004e34:	e07e      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	3342      	adds	r3, #66	; 0x42
 8004e46:	2202      	movs	r2, #2
 8004e48:	701a      	strb	r2, [r3, #0]
      break;
 8004e4a:	e073      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	440b      	add	r3, r1
 8004e5a:	3350      	adds	r3, #80	; 0x50
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	3342      	adds	r3, #66	; 0x42
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
      break;
 8004e76:	e05d      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	3342      	adds	r3, #66	; 0x42
 8004e88:	2202      	movs	r2, #2
 8004e8a:	701a      	strb	r2, [r3, #0]
      break;
 8004e8c:	e052      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e8e:	78bb      	ldrb	r3, [r7, #2]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d120      	bne.n	8004ed6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3351      	adds	r3, #81	; 0x51
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3342      	adds	r3, #66	; 0x42
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004ebe:	e039      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3342      	adds	r3, #66	; 0x42
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	701a      	strb	r2, [r3, #0]
      break;
 8004ed4:	e02e      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3350      	adds	r3, #80	; 0x50
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	3342      	adds	r3, #66	; 0x42
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
      break;
 8004f00:	e018      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	440b      	add	r3, r1
 8004f10:	3342      	adds	r3, #66	; 0x42
 8004f12:	2202      	movs	r2, #2
 8004f14:	701a      	strb	r2, [r3, #0]
      break;
 8004f16:	e00d      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f18:	78fa      	ldrb	r2, [r7, #3]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	3342      	adds	r3, #66	; 0x42
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
      break;
 8004f2c:	e002      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004f32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	440b      	add	r3, r1
 8004f42:	3344      	adds	r3, #68	; 0x44
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	8b39      	ldrh	r1, [r7, #24]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4403      	add	r3, r0
 8004f58:	3348      	adds	r3, #72	; 0x48
 8004f5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	335c      	adds	r3, #92	; 0x5c
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	334c      	adds	r3, #76	; 0x4c
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	440b      	add	r3, r1
 8004f92:	3339      	adds	r3, #57	; 0x39
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	335d      	adds	r3, #93	; 0x5d
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	3338      	adds	r3, #56	; 0x38
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	18d1      	adds	r1, r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f006 f862 	bl	800b090 <USB_HC_StartXfer>
 8004fcc:	4603      	mov	r3, r0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop

08004fd8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f005 fd85 	bl	800aafe <USB_GetMode>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	f040 80ef 	bne.w	80051da <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4618      	mov	r0, r3
 8005002:	f005 fd69 	bl	800aad8 <USB_ReadInterrupts>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80e5 	beq.w	80051d8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f005 fd60 	bl	800aad8 <USB_ReadInterrupts>
 8005018:	4603      	mov	r3, r0
 800501a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005022:	d104      	bne.n	800502e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800502c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f005 fd50 	bl	800aad8 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005042:	d104      	bne.n	800504e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800504c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f005 fd40 	bl	800aad8 <USB_ReadInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800505e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005062:	d104      	bne.n	800506e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800506c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f005 fd30 	bl	800aad8 <USB_ReadInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d103      	bne.n	800508a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f005 fd22 	bl	800aad8 <USB_ReadInterrupts>
 8005094:	4603      	mov	r3, r0
 8005096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509e:	d115      	bne.n	80050cc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80050a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f00c f920 	bl	8011300 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f005 fe12 	bl	800acf0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f005 fd01 	bl	800aad8 <USB_ReadInterrupts>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e0:	d102      	bne.n	80050e8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f001 f968 	bl	80063b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f005 fcf3 	bl	800aad8 <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d106      	bne.n	800510a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f00c f8e3 	bl	80112c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2208      	movs	r2, #8
 8005108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f005 fce2 	bl	800aad8 <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511e:	d138      	bne.n	8005192 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f006 f8f7 	bl	800b318 <USB_HC_ReadInterrupt>
 800512a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e025      	b.n	800517e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515c:	d106      	bne.n	800516c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8cf 	bl	8005308 <HCD_HC_IN_IRQHandler>
 800516a:	e005      	b.n	8005178 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fcfd 	bl	8005b72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	d3d4      	bcc.n	8005132 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f005 fc9e 	bl	800aad8 <USB_ReadInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d101      	bne.n	80051aa <HAL_HCD_IRQHandler+0x1d2>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_HCD_IRQHandler+0x1d4>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d014      	beq.n	80051da <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0210 	bic.w	r2, r2, #16
 80051be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 f84b 	bl	800625c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0210 	orr.w	r2, r2, #16
 80051d4:	619a      	str	r2, [r3, #24]
 80051d6:	e000      	b.n	80051da <HAL_HCD_IRQHandler+0x202>
      return;
 80051d8:	bf00      	nop
    }
  }
}
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_HCD_Start+0x16>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e013      	b.n	800521e <HAL_HCD_Start+0x3e>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f005 fb75 	bl	800a8f2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f005 fdd2 	bl	800adb8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_HCD_Stop+0x16>
 8005238:	2302      	movs	r3, #2
 800523a:	e00d      	b.n	8005258 <HAL_HCD_Stop+0x32>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f006 f9b1 	bl	800b5b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f005 fd79 	bl	800ad64 <USB_ResetPort>
 8005272:	4603      	mov	r3, r0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	335c      	adds	r3, #92	; 0x5c
 8005298:	781b      	ldrb	r3, [r3, #0]
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	334c      	adds	r3, #76	; 0x4c
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f005 fdbb 	bl	800ae58 <USB_GetCurrentFrame>
 80052e2:	4603      	mov	r3, r0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f005 fd96 	bl	800ae2a <USB_GetHostSpeed>
 80052fe:	4603      	mov	r3, r0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b04      	cmp	r3, #4
 8005336:	d119      	bne.n	800536c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	461a      	mov	r2, r3
 8005346:	2304      	movs	r3, #4
 8005348:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	440a      	add	r2, r1
 8005360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	60d3      	str	r3, [r2, #12]
 800536a:	e0ce      	b.n	800550a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005382:	d12c      	bne.n	80053de <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	461a      	mov	r2, r3
 8005392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005396:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	335d      	adds	r3, #93	; 0x5d
 80053a8:	2207      	movs	r2, #7
 80053aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c6:	f043 0302 	orr.w	r3, r3, #2
 80053ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f005 ffaf 	bl	800b33a <USB_HC_Halt>
 80053dc:	e095      	b.n	800550a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d109      	bne.n	8005408 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005400:	461a      	mov	r2, r3
 8005402:	2320      	movs	r3, #32
 8005404:	6093      	str	r3, [r2, #8]
 8005406:	e080      	b.n	800550a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b08      	cmp	r3, #8
 800541c:	d134      	bne.n	8005488 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	440a      	add	r2, r1
 8005434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	440b      	add	r3, r1
 800544c:	335d      	adds	r3, #93	; 0x5d
 800544e:	2205      	movs	r2, #5
 8005450:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4413      	add	r3, r2
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	461a      	mov	r2, r3
 8005460:	2310      	movs	r3, #16
 8005462:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	2308      	movs	r3, #8
 8005474:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f005 ff5a 	bl	800b33a <USB_HC_Halt>
 8005486:	e040      	b.n	800550a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d134      	bne.n	800550a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ba:	f043 0302 	orr.w	r3, r3, #2
 80054be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f005 ff35 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	461a      	mov	r2, r3
 80054de:	2310      	movs	r3, #16
 80054e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	335d      	adds	r3, #93	; 0x5d
 80054f2:	2208      	movs	r2, #8
 80054f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005508:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005520:	d122      	bne.n	8005568 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	440a      	add	r2, r1
 8005538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f005 fef4 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4413      	add	r3, r2
 800555a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555e:	461a      	mov	r2, r3
 8005560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005564:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005566:	e300      	b.n	8005b6a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	f040 80fd 	bne.w	800577a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01b      	beq.n	80055c0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	440b      	add	r3, r1
 8005596:	3348      	adds	r3, #72	; 0x48
 8005598:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0159      	lsls	r1, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	440b      	add	r3, r1
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80055ac:	1ad1      	subs	r1, r2, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4403      	add	r3, r0
 80055bc:	334c      	adds	r3, #76	; 0x4c
 80055be:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	440b      	add	r3, r1
 80055ce:	335d      	adds	r3, #93	; 0x5d
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	440b      	add	r3, r1
 80055e2:	3358      	adds	r3, #88	; 0x58
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f4:	461a      	mov	r2, r3
 80055f6:	2301      	movs	r3, #1
 80055f8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	440b      	add	r3, r1
 8005608:	333f      	adds	r3, #63	; 0x3f
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	440b      	add	r3, r1
 800561e:	333f      	adds	r3, #63	; 0x3f
 8005620:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005622:	2b02      	cmp	r3, #2
 8005624:	d121      	bne.n	800566a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	440a      	add	r2, r1
 800563c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f005 fe72 	bl	800b33a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	461a      	mov	r2, r3
 8005664:	2310      	movs	r3, #16
 8005666:	6093      	str	r3, [r2, #8]
 8005668:	e070      	b.n	800574c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	440b      	add	r3, r1
 8005678:	333f      	adds	r3, #63	; 0x3f
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d12a      	bne.n	80056d6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800569e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	440b      	add	r3, r1
 80056ae:	335c      	adds	r3, #92	; 0x5c
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	b2d8      	uxtb	r0, r3
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	440b      	add	r3, r1
 80056c6:	335c      	adds	r3, #92	; 0x5c
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	4601      	mov	r1, r0
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f00b fe24 	bl	801131c <HAL_HCD_HC_NotifyURBChange_Callback>
 80056d4:	e03a      	b.n	800574c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	440b      	add	r3, r1
 80056e4:	333f      	adds	r3, #63	; 0x3f
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d12f      	bne.n	800574c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	440b      	add	r3, r1
 80056fa:	335c      	adds	r3, #92	; 0x5c
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	440b      	add	r3, r1
 800570e:	3350      	adds	r3, #80	; 0x50
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	f083 0301 	eor.w	r3, r3, #1
 8005716:	b2d8      	uxtb	r0, r3
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	440b      	add	r3, r1
 8005726:	3350      	adds	r3, #80	; 0x50
 8005728:	4602      	mov	r2, r0
 800572a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	b2d8      	uxtb	r0, r3
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	440b      	add	r3, r1
 800573e:	335c      	adds	r3, #92	; 0x5c
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	4601      	mov	r1, r0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f00b fde8 	bl	801131c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	3350      	adds	r3, #80	; 0x50
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f083 0301 	eor.w	r3, r3, #1
 8005762:	b2d8      	uxtb	r0, r3
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	3350      	adds	r3, #80	; 0x50
 8005774:	4602      	mov	r2, r0
 8005776:	701a      	strb	r2, [r3, #0]
}
 8005778:	e1f7      	b.n	8005b6a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b02      	cmp	r3, #2
 800578e:	f040 811a 	bne.w	80059c6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ac:	f023 0302 	bic.w	r3, r3, #2
 80057b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	335d      	adds	r3, #93	; 0x5d
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d10a      	bne.n	80057de <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	440b      	add	r3, r1
 80057d6:	335c      	adds	r3, #92	; 0x5c
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e0d9      	b.n	8005992 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	440b      	add	r3, r1
 80057ec:	335d      	adds	r3, #93	; 0x5d
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d10a      	bne.n	800580a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	335c      	adds	r3, #92	; 0x5c
 8005804:	2205      	movs	r2, #5
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e0c3      	b.n	8005992 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	335d      	adds	r3, #93	; 0x5d
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b06      	cmp	r3, #6
 800581e:	d00a      	beq.n	8005836 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	335d      	adds	r3, #93	; 0x5d
 8005830:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005832:	2b08      	cmp	r3, #8
 8005834:	d156      	bne.n	80058e4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	3358      	adds	r3, #88	; 0x58
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	1c59      	adds	r1, r3, #1
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4403      	add	r3, r0
 8005858:	3358      	adds	r3, #88	; 0x58
 800585a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	3358      	adds	r3, #88	; 0x58
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d914      	bls.n	800589c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	440b      	add	r3, r1
 8005880:	3358      	adds	r3, #88	; 0x58
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	335c      	adds	r3, #92	; 0x5c
 8005896:	2204      	movs	r2, #4
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e009      	b.n	80058b0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	440b      	add	r3, r1
 80058aa:	335c      	adds	r3, #92	; 0x5c
 80058ac:	2202      	movs	r2, #2
 80058ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	461a      	mov	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	e056      	b.n	8005992 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	335d      	adds	r3, #93	; 0x5d
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d123      	bne.n	8005942 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	440b      	add	r3, r1
 8005908:	335c      	adds	r3, #92	; 0x5c
 800590a:	2202      	movs	r2, #2
 800590c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005924:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800592c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e027      	b.n	8005992 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	440b      	add	r3, r1
 8005950:	335d      	adds	r3, #93	; 0x5d
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b07      	cmp	r3, #7
 8005956:	d11c      	bne.n	8005992 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	3358      	adds	r3, #88	; 0x58
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4403      	add	r3, r0
 800597a:	3358      	adds	r3, #88	; 0x58
 800597c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	440b      	add	r3, r1
 800598c:	335c      	adds	r3, #92	; 0x5c
 800598e:	2204      	movs	r2, #4
 8005990:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	461a      	mov	r2, r3
 80059a0:	2302      	movs	r3, #2
 80059a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	b2d8      	uxtb	r0, r3
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	335c      	adds	r3, #92	; 0x5c
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	4601      	mov	r1, r0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f00b fcac 	bl	801131c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059c4:	e0d1      	b.n	8005b6a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d13e      	bne.n	8005a5a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f6:	f043 0302 	orr.w	r3, r3, #2
 80059fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	440b      	add	r3, r1
 8005a0a:	3358      	adds	r3, #88	; 0x58
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4403      	add	r3, r0
 8005a1e:	3358      	adds	r3, #88	; 0x58
 8005a20:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	335d      	adds	r3, #93	; 0x5d
 8005a32:	2206      	movs	r2, #6
 8005a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f005 fc7a 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	461a      	mov	r2, r3
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	6093      	str	r3, [r2, #8]
}
 8005a58:	e087      	b.n	8005b6a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b10      	cmp	r3, #16
 8005a6e:	d17c      	bne.n	8005b6a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	333f      	adds	r3, #63	; 0x3f
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d122      	bne.n	8005acc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	3358      	adds	r3, #88	; 0x58
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab4:	f043 0302 	orr.w	r3, r3, #2
 8005ab8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f005 fc38 	bl	800b33a <USB_HC_Halt>
 8005aca:	e045      	b.n	8005b58 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	440b      	add	r3, r1
 8005ada:	333f      	adds	r3, #63	; 0x3f
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	333f      	adds	r3, #63	; 0x3f
 8005af2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d12f      	bne.n	8005b58 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	440b      	add	r3, r1
 8005b06:	3358      	adds	r3, #88	; 0x58
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d121      	bne.n	8005b58 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	335d      	adds	r3, #93	; 0x5d
 8005b24:	2203      	movs	r2, #3
 8005b26:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	4611      	mov	r1, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f005 fbf1 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b64:	461a      	mov	r2, r3
 8005b66:	2310      	movs	r3, #16
 8005b68:	6093      	str	r3, [r2, #8]
}
 8005b6a:	bf00      	nop
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d119      	bne.n	8005bd6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bce:	f043 0302 	orr.w	r3, r3, #2
 8005bd2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005bd4:	e33e      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d141      	bne.n	8005c70 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	440b      	add	r3, r1
 8005c0c:	333d      	adds	r3, #61	; 0x3d
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	f040 831f 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	333d      	adds	r3, #61	; 0x3d
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	335c      	adds	r3, #92	; 0x5c
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c58:	f043 0302 	orr.w	r3, r3, #2
 8005c5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f005 fb66 	bl	800b33a <USB_HC_Halt>
}
 8005c6e:	e2f1      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d13f      	bne.n	8005d06 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	440b      	add	r3, r1
 8005c94:	335d      	adds	r3, #93	; 0x5d
 8005c96:	2204      	movs	r2, #4
 8005c98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	440b      	add	r3, r1
 8005ca8:	333d      	adds	r3, #61	; 0x3d
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	440b      	add	r3, r1
 8005cbc:	3358      	adds	r3, #88	; 0x58
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f005 fb24 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2340      	movs	r3, #64	; 0x40
 8005d02:	6093      	str	r3, [r2, #8]
}
 8005d04:	e2a6      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d122      	bne.n	8005d64 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d38:	f043 0302 	orr.w	r3, r3, #2
 8005d3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f005 faf6 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d60:	6093      	str	r3, [r2, #8]
}
 8005d62:	e277      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d135      	bne.n	8005de6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	3358      	adds	r3, #88	; 0x58
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f005 fabe 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2301      	movs	r3, #1
 8005dce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	335d      	adds	r3, #93	; 0x5d
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
}
 8005de4:	e236      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d12b      	bne.n	8005e54 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f005 fa7e 	bl	800b33a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	440b      	add	r3, r1
 8005e4c:	335d      	adds	r3, #93	; 0x5d
 8005e4e:	2205      	movs	r2, #5
 8005e50:	701a      	strb	r2, [r3, #0]
}
 8005e52:	e1ff      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d155      	bne.n	8005f16 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	440b      	add	r3, r1
 8005e78:	3358      	adds	r3, #88	; 0x58
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	335d      	adds	r3, #93	; 0x5d
 8005e8e:	2203      	movs	r2, #3
 8005e90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	333d      	adds	r3, #61	; 0x3d
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d114      	bne.n	8005ed2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	440b      	add	r3, r1
 8005eb6:	333c      	adds	r3, #60	; 0x3c
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	440b      	add	r3, r1
 8005ecc:	333d      	adds	r3, #61	; 0x3d
 8005ece:	2201      	movs	r2, #1
 8005ed0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f005 fa1c 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2310      	movs	r3, #16
 8005f12:	6093      	str	r3, [r2, #8]
}
 8005f14:	e19e      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d12b      	bne.n	8005f84 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f46:	f043 0302 	orr.w	r3, r3, #2
 8005f4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f005 f9ef 	bl	800b33a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	440b      	add	r3, r1
 8005f6a:	335d      	adds	r3, #93	; 0x5d
 8005f6c:	2206      	movs	r2, #6
 8005f6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	6093      	str	r3, [r2, #8]
}
 8005f82:	e167      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9a:	d135      	bne.n	8006008 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb6:	f043 0302 	orr.w	r3, r3, #2
 8005fba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f005 f9b7 	bl	800b33a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2310      	movs	r3, #16
 8005fdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	461a      	mov	r2, r3
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	440b      	add	r3, r1
 8006000:	335d      	adds	r3, #93	; 0x5d
 8006002:	2208      	movs	r2, #8
 8006004:	701a      	strb	r2, [r3, #0]
}
 8006006:	e125      	b.n	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	f040 811a 	bne.w	8006254 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	440a      	add	r2, r1
 8006036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603a:	f023 0302 	bic.w	r3, r3, #2
 800603e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	335d      	adds	r3, #93	; 0x5d
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d137      	bne.n	80060c6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	440b      	add	r3, r1
 8006064:	335c      	adds	r3, #92	; 0x5c
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	440b      	add	r3, r1
 8006078:	333f      	adds	r3, #63	; 0x3f
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d00b      	beq.n	8006098 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	333f      	adds	r3, #63	; 0x3f
 8006090:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006092:	2b03      	cmp	r3, #3
 8006094:	f040 80c5 	bne.w	8006222 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	3351      	adds	r3, #81	; 0x51
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f083 0301 	eor.w	r3, r3, #1
 80060ae:	b2d8      	uxtb	r0, r3
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	3351      	adds	r3, #81	; 0x51
 80060c0:	4602      	mov	r2, r0
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e0ad      	b.n	8006222 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	440b      	add	r3, r1
 80060d4:	335d      	adds	r3, #93	; 0x5d
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d10a      	bne.n	80060f2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	335c      	adds	r3, #92	; 0x5c
 80060ec:	2202      	movs	r2, #2
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	e097      	b.n	8006222 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	335d      	adds	r3, #93	; 0x5d
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d10a      	bne.n	800611e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	440b      	add	r3, r1
 8006116:	335c      	adds	r3, #92	; 0x5c
 8006118:	2202      	movs	r2, #2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e081      	b.n	8006222 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	440b      	add	r3, r1
 800612c:	335d      	adds	r3, #93	; 0x5d
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b05      	cmp	r3, #5
 8006132:	d10a      	bne.n	800614a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	440b      	add	r3, r1
 8006142:	335c      	adds	r3, #92	; 0x5c
 8006144:	2205      	movs	r2, #5
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e06b      	b.n	8006222 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	440b      	add	r3, r1
 8006158:	335d      	adds	r3, #93	; 0x5d
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b06      	cmp	r3, #6
 800615e:	d00a      	beq.n	8006176 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	440b      	add	r3, r1
 800616e:	335d      	adds	r3, #93	; 0x5d
 8006170:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006172:	2b08      	cmp	r3, #8
 8006174:	d155      	bne.n	8006222 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	3358      	adds	r3, #88	; 0x58
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4403      	add	r3, r0
 8006198:	3358      	adds	r3, #88	; 0x58
 800619a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	440b      	add	r3, r1
 80061aa:	3358      	adds	r3, #88	; 0x58
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d914      	bls.n	80061dc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	440b      	add	r3, r1
 80061c0:	3358      	adds	r3, #88	; 0x58
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	440b      	add	r3, r1
 80061d4:	335c      	adds	r3, #92	; 0x5c
 80061d6:	2204      	movs	r2, #4
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e009      	b.n	80061f0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	440b      	add	r3, r1
 80061ea:	335c      	adds	r3, #92	; 0x5c
 80061ec:	2202      	movs	r2, #2
 80061ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006206:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800620e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	461a      	mov	r2, r3
 8006230:	2302      	movs	r3, #2
 8006232:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	b2d8      	uxtb	r0, r3
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	440b      	add	r3, r1
 8006246:	335c      	adds	r3, #92	; 0x5c
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	4601      	mov	r1, r0
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f00b f864 	bl	801131c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	0c5b      	lsrs	r3, r3, #17
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006290:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d004      	beq.n	80062a2 <HCD_RXQLVL_IRQHandler+0x46>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b05      	cmp	r3, #5
 800629c:	f000 8082 	beq.w	80063a4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062a0:	e083      	b.n	80063aa <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d07f      	beq.n	80063a8 <HCD_RXQLVL_IRQHandler+0x14c>
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	440b      	add	r3, r1
 80062b6:	3344      	adds	r3, #68	; 0x44
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d074      	beq.n	80063a8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	440b      	add	r3, r1
 80062d0:	3344      	adds	r3, #68	; 0x44
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	b292      	uxth	r2, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	f004 fbd4 	bl	800aa86 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	440b      	add	r3, r1
 80062ec:	3344      	adds	r3, #68	; 0x44
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	18d1      	adds	r1, r2, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4403      	add	r3, r0
 8006302:	3344      	adds	r3, #68	; 0x44
 8006304:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	440b      	add	r3, r1
 8006314:	334c      	adds	r3, #76	; 0x4c
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	18d1      	adds	r1, r2, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	4403      	add	r3, r0
 800632a:	334c      	adds	r3, #76	; 0x4c
 800632c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <HCD_RXQLVL_IRQHandler+0x158>)
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d031      	beq.n	80063a8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800635a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006362:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006370:	461a      	mov	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	440b      	add	r3, r1
 8006384:	3350      	adds	r3, #80	; 0x50
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f083 0301 	eor.w	r3, r3, #1
 800638c:	b2d8      	uxtb	r0, r3
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	440b      	add	r3, r1
 800639c:	3350      	adds	r3, #80	; 0x50
 800639e:	4602      	mov	r2, r0
 80063a0:	701a      	strb	r2, [r3, #0]
      break;
 80063a2:	e001      	b.n	80063a8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80063a4:	bf00      	nop
 80063a6:	e000      	b.n	80063aa <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80063a8:	bf00      	nop
  }
}
 80063aa:	bf00      	nop
 80063ac:	3728      	adds	r7, #40	; 0x28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	1ff80000 	.word	0x1ff80000

080063b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d10b      	bne.n	8006408 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d102      	bne.n	8006400 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f00a ff72 	bl	80112e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f043 0302 	orr.w	r3, r3, #2
 8006406:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b08      	cmp	r3, #8
 8006410:	d132      	bne.n	8006478 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f043 0308 	orr.w	r3, r3, #8
 8006418:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b04      	cmp	r3, #4
 8006422:	d126      	bne.n	8006472 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d113      	bne.n	8006454 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006436:	d106      	bne.n	8006446 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2102      	movs	r1, #2
 800643e:	4618      	mov	r0, r3
 8006440:	f004 fc56 	bl	800acf0 <USB_InitFSLSPClkSel>
 8006444:	e011      	b.n	800646a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f004 fc4f 	bl	800acf0 <USB_InitFSLSPClkSel>
 8006452:	e00a      	b.n	800646a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d106      	bne.n	800646a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006462:	461a      	mov	r2, r3
 8006464:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006468:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f00a ff68 	bl	8011340 <HAL_HCD_PortEnabled_Callback>
 8006470:	e002      	b.n	8006478 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f00a ff72 	bl	801135c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b20      	cmp	r3, #32
 8006480:	d103      	bne.n	800648a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f043 0320 	orr.w	r3, r3, #32
 8006488:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006490:	461a      	mov	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6013      	str	r3, [r2, #0]
}
 8006496:	bf00      	nop
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e154      	b.n	800675c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a98      	ldr	r2, [pc, #608]	; (800672c <HAL_I2S_Init+0x28c>)
 80064ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fc fe35 	bl	800313c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064e8:	f023 030f 	bic.w	r3, r3, #15
 80064ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2202      	movs	r2, #2
 80064f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d06f      	beq.n	80065de <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006506:	2310      	movs	r3, #16
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e001      	b.n	8006510 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800650c:	2320      	movs	r3, #32
 800650e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b20      	cmp	r3, #32
 8006516:	d802      	bhi.n	800651e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a83      	ldr	r2, [pc, #524]	; (8006730 <HAL_I2S_Init+0x290>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_I2S_Init+0x92>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a81      	ldr	r2, [pc, #516]	; (8006734 <HAL_I2S_Init+0x294>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d104      	bne.n	800653c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006532:	2001      	movs	r0, #1
 8006534:	f001 f9c6 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	e003      	b.n	8006544 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800653c:	2002      	movs	r0, #2
 800653e:	f001 f9c1 	bl	80078c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006542:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654c:	d125      	bne.n	800659a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d010      	beq.n	8006578 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	3305      	adds	r3, #5
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e01f      	b.n	80065b8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	3305      	adds	r3, #5
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e00e      	b.n	80065b8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	fbb2 f2f3 	udiv	r2, r2, r3
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	3305      	adds	r3, #5
 80065b6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4a5f      	ldr	r2, [pc, #380]	; (8006738 <HAL_I2S_Init+0x298>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	085b      	lsrs	r3, r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	e003      	b.n	80065e6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80065de:	2302      	movs	r3, #2
 80065e0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d902      	bls.n	80065f2 <HAL_I2S_Init+0x152>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2bff      	cmp	r3, #255	; 0xff
 80065f0:	d907      	bls.n	8006602 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f6:	f043 0210 	orr.w	r2, r3, #16
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0ac      	b.n	800675c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	ea42 0103 	orr.w	r1, r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	430a      	orrs	r2, r1
 8006614:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006620:	f023 030f 	bic.w	r3, r3, #15
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6851      	ldr	r1, [r2, #4]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6892      	ldr	r2, [r2, #8]
 800662c:	4311      	orrs	r1, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68d2      	ldr	r2, [r2, #12]
 8006632:	4311      	orrs	r1, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6992      	ldr	r2, [r2, #24]
 8006638:	430a      	orrs	r2, r1
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006644:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b30      	cmp	r3, #48	; 0x30
 800664c:	d003      	beq.n	8006656 <HAL_I2S_Init+0x1b6>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2bb0      	cmp	r3, #176	; 0xb0
 8006654:	d107      	bne.n	8006666 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006664:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d16e      	bne.n	800674c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a32      	ldr	r2, [pc, #200]	; (800673c <HAL_I2S_Init+0x29c>)
 8006672:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2d      	ldr	r2, [pc, #180]	; (8006730 <HAL_I2S_Init+0x290>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_I2S_Init+0x1e2>
 800667e:	4b30      	ldr	r3, [pc, #192]	; (8006740 <HAL_I2S_Init+0x2a0>)
 8006680:	e001      	b.n	8006686 <HAL_I2S_Init+0x1e6>
 8006682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6812      	ldr	r2, [r2, #0]
 800668c:	4928      	ldr	r1, [pc, #160]	; (8006730 <HAL_I2S_Init+0x290>)
 800668e:	428a      	cmp	r2, r1
 8006690:	d101      	bne.n	8006696 <HAL_I2S_Init+0x1f6>
 8006692:	4a2b      	ldr	r2, [pc, #172]	; (8006740 <HAL_I2S_Init+0x2a0>)
 8006694:	e001      	b.n	800669a <HAL_I2S_Init+0x1fa>
 8006696:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800669a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800669e:	f023 030f 	bic.w	r3, r3, #15
 80066a2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a21      	ldr	r2, [pc, #132]	; (8006730 <HAL_I2S_Init+0x290>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d101      	bne.n	80066b2 <HAL_I2S_Init+0x212>
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <HAL_I2S_Init+0x2a0>)
 80066b0:	e001      	b.n	80066b6 <HAL_I2S_Init+0x216>
 80066b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b6:	2202      	movs	r2, #2
 80066b8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1c      	ldr	r2, [pc, #112]	; (8006730 <HAL_I2S_Init+0x290>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d101      	bne.n	80066c8 <HAL_I2S_Init+0x228>
 80066c4:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <HAL_I2S_Init+0x2a0>)
 80066c6:	e001      	b.n	80066cc <HAL_I2S_Init+0x22c>
 80066c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d8:	d003      	beq.n	80066e2 <HAL_I2S_Init+0x242>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80066e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	e001      	b.n	80066ee <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	b299      	uxth	r1, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006704:	4303      	orrs	r3, r0
 8006706:	b29b      	uxth	r3, r3
 8006708:	430b      	orrs	r3, r1
 800670a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800670c:	4313      	orrs	r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	897b      	ldrh	r3, [r7, #10]
 8006712:	4313      	orrs	r3, r2
 8006714:	b29b      	uxth	r3, r3
 8006716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800671a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a03      	ldr	r2, [pc, #12]	; (8006730 <HAL_I2S_Init+0x290>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10e      	bne.n	8006744 <HAL_I2S_Init+0x2a4>
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_I2S_Init+0x2a0>)
 8006728:	e00e      	b.n	8006748 <HAL_I2S_Init+0x2a8>
 800672a:	bf00      	nop
 800672c:	0800685b 	.word	0x0800685b
 8006730:	40003800 	.word	0x40003800
 8006734:	40003c00 	.word	0x40003c00
 8006738:	cccccccd 	.word	0xcccccccd
 800673c:	08006971 	.word	0x08006971
 8006740:	40003400 	.word	0x40003400
 8006744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006748:	897a      	ldrh	r2, [r7, #10]
 800674a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	881a      	ldrh	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c9a      	adds	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10e      	bne.n	80067f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ffb8 	bl	8006764 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	b292      	uxth	r2, r2
 8006810:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	1c9a      	adds	r2, r3, #2
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10e      	bne.n	8006852 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006842:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff93 	bl	8006778 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b04      	cmp	r3, #4
 8006874:	d13a      	bne.n	80068ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d109      	bne.n	8006894 <I2S_IRQHandler+0x3a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d102      	bne.n	8006894 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff ffb4 	bl	80067fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d126      	bne.n	80068ec <I2S_IRQHandler+0x92>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d11f      	bne.n	80068ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	f043 0202 	orr.w	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff ff50 	bl	800678c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d136      	bne.n	8006966 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d109      	bne.n	8006916 <I2S_IRQHandler+0xbc>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690c:	2b80      	cmp	r3, #128	; 0x80
 800690e:	d102      	bne.n	8006916 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff ff45 	bl	80067a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b08      	cmp	r3, #8
 800691e:	d122      	bne.n	8006966 <I2S_IRQHandler+0x10c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b20      	cmp	r3, #32
 800692c:	d11b      	bne.n	8006966 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800693c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006958:	f043 0204 	orr.w	r2, r3, #4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff13 	bl	800678c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006966:	bf00      	nop
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4aa2      	ldr	r2, [pc, #648]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d101      	bne.n	800698e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800698a:	4ba2      	ldr	r3, [pc, #648]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800698c:	e001      	b.n	8006992 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800698e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a9b      	ldr	r2, [pc, #620]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d101      	bne.n	80069ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80069a8:	4b9a      	ldr	r3, [pc, #616]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069aa:	e001      	b.n	80069b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80069ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069bc:	d004      	beq.n	80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 8099 	bne.w	8006afa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d107      	bne.n	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f925 	bl	8006c2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9c8 	bl	8006d8c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d13a      	bne.n	8006a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d035      	beq.n	8006a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7e      	ldr	r2, [pc, #504]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006a1a:	4b7e      	ldr	r3, [pc, #504]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a1c:	e001      	b.n	8006a22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4979      	ldr	r1, [pc, #484]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a2a:	428b      	cmp	r3, r1
 8006a2c:	d101      	bne.n	8006a32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006a2e:	4b79      	ldr	r3, [pc, #484]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a30:	e001      	b.n	8006a36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f043 0202 	orr.w	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff fe88 	bl	800678c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	f040 80be 	bne.w	8006c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80b8 	beq.w	8006c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a59      	ldr	r2, [pc, #356]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d101      	bne.n	8006ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006aae:	4b59      	ldr	r3, [pc, #356]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ab0:	e001      	b.n	8006ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4954      	ldr	r1, [pc, #336]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006abe:	428b      	cmp	r3, r1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006ac2:	4b54      	ldr	r3, [pc, #336]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ac4:	e001      	b.n	8006aca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ace:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aea:	f043 0204 	orr.w	r2, r3, #4
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fe4a 	bl	800678c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006af8:	e084      	b.n	8006c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d107      	bne.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8be 	bl	8006c90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8fd 	bl	8006d28 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b40      	cmp	r3, #64	; 0x40
 8006b36:	d12f      	bne.n	8006b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02a      	beq.n	8006b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b50:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2e      	ldr	r2, [pc, #184]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b5e:	e001      	b.n	8006b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4929      	ldr	r1, [pc, #164]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	d101      	bne.n	8006b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006b70:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b72:	e001      	b.n	8006b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	f043 0202 	orr.w	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff fdfa 	bl	800678c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d131      	bne.n	8006c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02c      	beq.n	8006c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d101      	bne.n	8006bba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006bb6:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bb8:	e001      	b.n	8006bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4912      	ldr	r1, [pc, #72]	; (8006c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bc6:	428b      	cmp	r3, r1
 8006bc8:	d101      	bne.n	8006bce <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bcc:	e001      	b.n	8006bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006be6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	f043 0204 	orr.w	r2, r3, #4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fdc5 	bl	800678c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c02:	e000      	b.n	8006c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c04:	bf00      	nop
}
 8006c06:	bf00      	nop
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40003800 	.word	0x40003800
 8006c14:	40003400 	.word	0x40003400

08006c18 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	1c99      	adds	r1, r3, #2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6251      	str	r1, [r2, #36]	; 0x24
 8006c3e:	881a      	ldrh	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d113      	bne.n	8006c86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d106      	bne.n	8006c86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ffc9 	bl	8006c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	1c99      	adds	r1, r3, #2
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6251      	str	r1, [r2, #36]	; 0x24
 8006ca2:	8819      	ldrh	r1, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <I2SEx_TxISR_I2SExt+0x90>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <I2SEx_TxISR_I2SExt+0x22>
 8006cae:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <I2SEx_TxISR_I2SExt+0x94>)
 8006cb0:	e001      	b.n	8006cb6 <I2SEx_TxISR_I2SExt+0x26>
 8006cb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d121      	bne.n	8006d16 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a12      	ldr	r2, [pc, #72]	; (8006d20 <I2SEx_TxISR_I2SExt+0x90>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d101      	bne.n	8006ce0 <I2SEx_TxISR_I2SExt+0x50>
 8006cdc:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <I2SEx_TxISR_I2SExt+0x94>)
 8006cde:	e001      	b.n	8006ce4 <I2SEx_TxISR_I2SExt+0x54>
 8006ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	490d      	ldr	r1, [pc, #52]	; (8006d20 <I2SEx_TxISR_I2SExt+0x90>)
 8006cec:	428b      	cmp	r3, r1
 8006cee:	d101      	bne.n	8006cf4 <I2SEx_TxISR_I2SExt+0x64>
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <I2SEx_TxISR_I2SExt+0x94>)
 8006cf2:	e001      	b.n	8006cf8 <I2SEx_TxISR_I2SExt+0x68>
 8006cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cfc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff ff81 	bl	8006c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40003800 	.word	0x40003800
 8006d24:	40003400 	.word	0x40003400

08006d28 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68d8      	ldr	r0, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	1c99      	adds	r1, r3, #2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006d40:	b282      	uxth	r2, r0
 8006d42:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d113      	bne.n	8006d84 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d6a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff ff4a 	bl	8006c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <I2SEx_RxISR_I2SExt+0x90>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d101      	bne.n	8006da2 <I2SEx_RxISR_I2SExt+0x16>
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <I2SEx_RxISR_I2SExt+0x94>)
 8006da0:	e001      	b.n	8006da6 <I2SEx_RxISR_I2SExt+0x1a>
 8006da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006da6:	68d8      	ldr	r0, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	1c99      	adds	r1, r3, #2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006db2:	b282      	uxth	r2, r0
 8006db4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d121      	bne.n	8006e12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a12      	ldr	r2, [pc, #72]	; (8006e1c <I2SEx_RxISR_I2SExt+0x90>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d101      	bne.n	8006ddc <I2SEx_RxISR_I2SExt+0x50>
 8006dd8:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <I2SEx_RxISR_I2SExt+0x94>)
 8006dda:	e001      	b.n	8006de0 <I2SEx_RxISR_I2SExt+0x54>
 8006ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	490d      	ldr	r1, [pc, #52]	; (8006e1c <I2SEx_RxISR_I2SExt+0x90>)
 8006de8:	428b      	cmp	r3, r1
 8006dea:	d101      	bne.n	8006df0 <I2SEx_RxISR_I2SExt+0x64>
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <I2SEx_RxISR_I2SExt+0x94>)
 8006dee:	e001      	b.n	8006df4 <I2SEx_RxISR_I2SExt+0x68>
 8006df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006df4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006df8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d106      	bne.n	8006e12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ff03 	bl	8006c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	40003800 	.word	0x40003800
 8006e20:	40003400 	.word	0x40003400

08006e24 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e2c:	f7fc fdda 	bl	80039e4 <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e069      	b.n	8006f10 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fc fa2d 	bl	80032b0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e56:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f85e 	bl	8006f1c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	021a      	lsls	r2, r3, #8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2120      	movs	r1, #32
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f856 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d137      	bne.n	8006f06 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ea0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6852      	ldr	r2, [r2, #4]
 8006ea8:	0611      	lsls	r1, r2, #24
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68d2      	ldr	r2, [r2, #12]
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	69d2      	ldr	r2, [r2, #28]
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6a12      	ldr	r2, [r2, #32]
 8006eba:	4311      	orrs	r1, r2
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <HAL_QSPI_Init+0xf4>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6912      	ldr	r2, [r2, #16]
 8006ed2:	0411      	lsls	r1, r2, #16
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6952      	ldr	r2, [r2, #20]
 8006ed8:	4311      	orrs	r1, r2
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6992      	ldr	r2, [r2, #24]
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	ffe0f8fe 	.word	0xffe0f8fe

08006f1c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f48:	e01a      	b.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d016      	beq.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7fc fd47 	bl	80039e4 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2204      	movs	r2, #4
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	f043 0201 	orr.w	r2, r3, #1
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e00e      	b.n	8006f9e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d1d6      	bne.n	8006f4a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0cc      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fbc:	4b68      	ldr	r3, [pc, #416]	; (8007160 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d90c      	bls.n	8006fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fca:	4b65      	ldr	r3, [pc, #404]	; (8007160 <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd2:	4b63      	ldr	r3, [pc, #396]	; (8007160 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e0b8      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d020      	beq.n	8007032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ffc:	4b59      	ldr	r3, [pc, #356]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	4a58      	ldr	r2, [pc, #352]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007014:	4b53      	ldr	r3, [pc, #332]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4a52      	ldr	r2, [pc, #328]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800701e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007020:	4b50      	ldr	r3, [pc, #320]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	494d      	ldr	r1, [pc, #308]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	4313      	orrs	r3, r2
 8007030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d044      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007046:	4b47      	ldr	r3, [pc, #284]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d119      	bne.n	8007086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e07f      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d003      	beq.n	8007066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007062:	2b03      	cmp	r3, #3
 8007064:	d107      	bne.n	8007076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007066:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e06f      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007076:	4b3b      	ldr	r3, [pc, #236]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e067      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007086:	4b37      	ldr	r3, [pc, #220]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f023 0203 	bic.w	r2, r3, #3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	4934      	ldr	r1, [pc, #208]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	4313      	orrs	r3, r2
 8007096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007098:	f7fc fca4 	bl	80039e4 <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709e:	e00a      	b.n	80070b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a0:	f7fc fca0 	bl	80039e4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e04f      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b6:	4b2b      	ldr	r3, [pc, #172]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 020c 	and.w	r2, r3, #12
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d1eb      	bne.n	80070a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <HAL_RCC_ClockConfig+0x1b8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d20c      	bcs.n	80070f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d6:	4b22      	ldr	r3, [pc, #136]	; (8007160 <HAL_RCC_ClockConfig+0x1b8>)
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070de:	4b20      	ldr	r3, [pc, #128]	; (8007160 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d001      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e032      	b.n	8007156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070fc:	4b19      	ldr	r3, [pc, #100]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	4916      	ldr	r1, [pc, #88]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	4313      	orrs	r3, r2
 800710c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800711a:	4b12      	ldr	r3, [pc, #72]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	490e      	ldr	r1, [pc, #56]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800712e:	f000 f821 	bl	8007174 <HAL_RCC_GetSysClockFreq>
 8007132:	4602      	mov	r2, r0
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	490a      	ldr	r1, [pc, #40]	; (8007168 <HAL_RCC_ClockConfig+0x1c0>)
 8007140:	5ccb      	ldrb	r3, [r1, r3]
 8007142:	fa22 f303 	lsr.w	r3, r2, r3
 8007146:	4a09      	ldr	r2, [pc, #36]	; (800716c <HAL_RCC_ClockConfig+0x1c4>)
 8007148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <HAL_RCC_ClockConfig+0x1c8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f7fc fae0 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40023c00 	.word	0x40023c00
 8007164:	40023800 	.word	0x40023800
 8007168:	08012d0c 	.word	0x08012d0c
 800716c:	20000000 	.word	0x20000000
 8007170:	20000004 	.word	0x20000004

08007174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007174:	b5b0      	push	{r4, r5, r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800717a:	2100      	movs	r1, #0
 800717c:	6079      	str	r1, [r7, #4]
 800717e:	2100      	movs	r1, #0
 8007180:	60f9      	str	r1, [r7, #12]
 8007182:	2100      	movs	r1, #0
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007186:	2100      	movs	r1, #0
 8007188:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800718a:	4952      	ldr	r1, [pc, #328]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800718c:	6889      	ldr	r1, [r1, #8]
 800718e:	f001 010c 	and.w	r1, r1, #12
 8007192:	2908      	cmp	r1, #8
 8007194:	d00d      	beq.n	80071b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8007196:	2908      	cmp	r1, #8
 8007198:	f200 8094 	bhi.w	80072c4 <HAL_RCC_GetSysClockFreq+0x150>
 800719c:	2900      	cmp	r1, #0
 800719e:	d002      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0x32>
 80071a0:	2904      	cmp	r1, #4
 80071a2:	d003      	beq.n	80071ac <HAL_RCC_GetSysClockFreq+0x38>
 80071a4:	e08e      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071a6:	4b4c      	ldr	r3, [pc, #304]	; (80072d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80071a8:	60bb      	str	r3, [r7, #8]
       break;
 80071aa:	e08e      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ac:	4b4b      	ldr	r3, [pc, #300]	; (80072dc <HAL_RCC_GetSysClockFreq+0x168>)
 80071ae:	60bb      	str	r3, [r7, #8]
      break;
 80071b0:	e08b      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071b2:	4948      	ldr	r1, [pc, #288]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80071b4:	6849      	ldr	r1, [r1, #4]
 80071b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80071ba:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071bc:	4945      	ldr	r1, [pc, #276]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80071be:	6849      	ldr	r1, [r1, #4]
 80071c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d024      	beq.n	8007212 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071c8:	4942      	ldr	r1, [pc, #264]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80071ca:	6849      	ldr	r1, [r1, #4]
 80071cc:	0989      	lsrs	r1, r1, #6
 80071ce:	4608      	mov	r0, r1
 80071d0:	f04f 0100 	mov.w	r1, #0
 80071d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80071d8:	f04f 0500 	mov.w	r5, #0
 80071dc:	ea00 0204 	and.w	r2, r0, r4
 80071e0:	ea01 0305 	and.w	r3, r1, r5
 80071e4:	493d      	ldr	r1, [pc, #244]	; (80072dc <HAL_RCC_GetSysClockFreq+0x168>)
 80071e6:	fb01 f003 	mul.w	r0, r1, r3
 80071ea:	2100      	movs	r1, #0
 80071ec:	fb01 f102 	mul.w	r1, r1, r2
 80071f0:	1844      	adds	r4, r0, r1
 80071f2:	493a      	ldr	r1, [pc, #232]	; (80072dc <HAL_RCC_GetSysClockFreq+0x168>)
 80071f4:	fba2 0101 	umull	r0, r1, r2, r1
 80071f8:	1863      	adds	r3, r4, r1
 80071fa:	4619      	mov	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	461a      	mov	r2, r3
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	f7f9 fcf0 	bl	8000be8 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4613      	mov	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e04a      	b.n	80072a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007212:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	461a      	mov	r2, r3
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007222:	f04f 0100 	mov.w	r1, #0
 8007226:	ea02 0400 	and.w	r4, r2, r0
 800722a:	ea03 0501 	and.w	r5, r3, r1
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	014b      	lsls	r3, r1, #5
 800723c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007240:	0142      	lsls	r2, r0, #5
 8007242:	4610      	mov	r0, r2
 8007244:	4619      	mov	r1, r3
 8007246:	1b00      	subs	r0, r0, r4
 8007248:	eb61 0105 	sbc.w	r1, r1, r5
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	018b      	lsls	r3, r1, #6
 8007256:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800725a:	0182      	lsls	r2, r0, #6
 800725c:	1a12      	subs	r2, r2, r0
 800725e:	eb63 0301 	sbc.w	r3, r3, r1
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f04f 0100 	mov.w	r1, #0
 800726a:	00d9      	lsls	r1, r3, #3
 800726c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007270:	00d0      	lsls	r0, r2, #3
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	1912      	adds	r2, r2, r4
 8007278:	eb45 0303 	adc.w	r3, r5, r3
 800727c:	f04f 0000 	mov.w	r0, #0
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	0299      	lsls	r1, r3, #10
 8007286:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800728a:	0290      	lsls	r0, r2, #10
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4610      	mov	r0, r2
 8007292:	4619      	mov	r1, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	461a      	mov	r2, r3
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	f7f9 fca4 	bl	8000be8 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4613      	mov	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	3301      	adds	r3, #1
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c0:	60bb      	str	r3, [r7, #8]
      break;
 80072c2:	e002      	b.n	80072ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80072c6:	60bb      	str	r3, [r7, #8]
      break;
 80072c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ca:	68bb      	ldr	r3, [r7, #8]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bdb0      	pop	{r4, r5, r7, pc}
 80072d4:	40023800 	.word	0x40023800
 80072d8:	00f42400 	.word	0x00f42400
 80072dc:	017d7840 	.word	0x017d7840

080072e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072e4:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072e6:	681b      	ldr	r3, [r3, #0]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000000 	.word	0x20000000

080072f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072fc:	f7ff fff0 	bl	80072e0 <HAL_RCC_GetHCLKFreq>
 8007300:	4602      	mov	r2, r0
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	0a9b      	lsrs	r3, r3, #10
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	4903      	ldr	r1, [pc, #12]	; (800731c <HAL_RCC_GetPCLK1Freq+0x24>)
 800730e:	5ccb      	ldrb	r3, [r1, r3]
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40023800 	.word	0x40023800
 800731c:	08012d1c 	.word	0x08012d1c

08007320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007324:	f7ff ffdc 	bl	80072e0 <HAL_RCC_GetHCLKFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	4b05      	ldr	r3, [pc, #20]	; (8007340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	0b5b      	lsrs	r3, r3, #13
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	4903      	ldr	r1, [pc, #12]	; (8007344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800733c:	4618      	mov	r0, r3
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40023800 	.word	0x40023800
 8007344:	08012d1c 	.word	0x08012d1c

08007348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	220f      	movs	r2, #15
 8007356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007358:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <HAL_RCC_GetClockConfig+0x5c>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 0203 	and.w	r2, r3, #3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <HAL_RCC_GetClockConfig+0x5c>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	08db      	lsrs	r3, r3, #3
 8007382:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <HAL_RCC_GetClockConfig+0x60>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 020f 	and.w	r2, r3, #15
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40023c00 	.word	0x40023c00

080073ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80073d0:	4b7a      	ldr	r3, [pc, #488]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	4977      	ldr	r1, [pc, #476]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d010      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80073fe:	4b6f      	ldr	r3, [pc, #444]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007404:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	496b      	ldr	r1, [pc, #428]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d022      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 800742c:	4b63      	ldr	r3, [pc, #396]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800742e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	4960      	ldr	r1, [pc, #384]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800744a:	2301      	movs	r3, #1
 800744c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007456:	d10c      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007458:	4b58      	ldr	r3, [pc, #352]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800745a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800745e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	3b01      	subs	r3, #1
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	4954      	ldr	r1, [pc, #336]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d022      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800747e:	4b4f      	ldr	r3, [pc, #316]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007484:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	494b      	ldr	r1, [pc, #300]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800749c:	2301      	movs	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80074aa:	4b44      	ldr	r3, [pc, #272]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	021b      	lsls	r3, r3, #8
 80074bc:	493f      	ldr	r1, [pc, #252]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 808a 	beq.w	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	4b39      	ldr	r3, [pc, #228]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	4a38      	ldr	r2, [pc, #224]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e0:	6413      	str	r3, [r2, #64]	; 0x40
 80074e2:	4b36      	ldr	r3, [pc, #216]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80074ee:	4b34      	ldr	r3, [pc, #208]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a33      	ldr	r2, [pc, #204]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80074f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074fa:	f7fc fa73 	bl	80039e4 <HAL_GetTick>
 80074fe:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007500:	e008      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007502:	f7fc fa6f 	bl	80039e4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e1d1      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007514:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0f0      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007520:	4b26      	ldr	r3, [pc, #152]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007528:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d02f      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	429a      	cmp	r2, r3
 800753c:	d028      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800753e:	4b1f      	ldr	r3, [pc, #124]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007546:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007548:	4b1e      	ldr	r3, [pc, #120]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007554:	4a19      	ldr	r2, [pc, #100]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d114      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007566:	f7fc fa3d 	bl	80039e4 <HAL_GetTick>
 800756a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800756c:	e00a      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800756e:	f7fc fa39 	bl	80039e4 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	f241 3288 	movw	r2, #5000	; 0x1388
 800757c:	4293      	cmp	r3, r2
 800757e:	d901      	bls.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e199      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0ee      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759c:	d114      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800759e:	4b07      	ldr	r3, [pc, #28]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b2:	4902      	ldr	r1, [pc, #8]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]
 80075b8:	e00c      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80075ba:	bf00      	nop
 80075bc:	40023800 	.word	0x40023800
 80075c0:	40007000 	.word	0x40007000
 80075c4:	42470e40 	.word	0x42470e40
 80075c8:	4b89      	ldr	r3, [pc, #548]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	4a88      	ldr	r2, [pc, #544]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80075d2:	6093      	str	r3, [r2, #8]
 80075d4:	4b86      	ldr	r3, [pc, #536]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e0:	4983      	ldr	r1, [pc, #524]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80075f8:	4b7e      	ldr	r3, [pc, #504]	; (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80075fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007608:	4b79      	ldr	r3, [pc, #484]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800760a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800760e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	4976      	ldr	r1, [pc, #472]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d011      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800762a:	4b71      	ldr	r3, [pc, #452]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800762c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007630:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	496d      	ldr	r1, [pc, #436]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007648:	d101      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800764a:	2301      	movs	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800765a:	4b65      	ldr	r3, [pc, #404]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800765c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007660:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	4961      	ldr	r1, [pc, #388]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d004      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	f040 80c6 	bne.w	800780c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007680:	4b5d      	ldr	r3, [pc, #372]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007686:	f7fc f9ad 	bl	80039e4 <HAL_GetTick>
 800768a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800768c:	e008      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800768e:	f7fc f9a9 	bl	80039e4 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e10b      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076a0:	4b53      	ldr	r3, [pc, #332]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f0      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80076ac:	4a53      	ldr	r2, [pc, #332]	; (80077fc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d023      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d019      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f0:	d00e      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d019      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d115      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770e:	d110      	bne.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	019b      	lsls	r3, r3, #6
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	4931      	ldr	r1, [pc, #196]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800774e:	2b00      	cmp	r3, #0
 8007750:	d026      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d122      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800775a:	4b25      	ldr	r3, [pc, #148]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800775c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007760:	0e1b      	lsrs	r3, r3, #24
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	431a      	orrs	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	061b      	lsls	r3, r3, #24
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	071b      	lsls	r3, r3, #28
 8007780:	491b      	ldr	r1, [pc, #108]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007788:	4b19      	ldr	r3, [pc, #100]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800778a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800778e:	f023 021f 	bic.w	r2, r3, #31
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	3b01      	subs	r3, #1
 8007798:	4915      	ldr	r1, [pc, #84]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d010      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	019b      	lsls	r3, r3, #6
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	061b      	lsls	r3, r3, #24
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	071b      	lsls	r3, r3, #28
 80077c6:	490a      	ldr	r1, [pc, #40]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077ce:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077d4:	f7fc f906 	bl	80039e4 <HAL_GetTick>
 80077d8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077da:	e011      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077dc:	f7fc f902 	bl	80039e4 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d90a      	bls.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e064      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80077ee:	bf00      	nop
 80077f0:	40023800 	.word	0x40023800
 80077f4:	424711e0 	.word	0x424711e0
 80077f8:	42470068 	.word	0x42470068
 80077fc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007800:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0e7      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007818:	4b29      	ldr	r3, [pc, #164]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800781a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800781e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007826:	4926      	ldr	r1, [pc, #152]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800783a:	4b21      	ldr	r3, [pc, #132]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800783c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007840:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	491d      	ldr	r1, [pc, #116]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800785e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007862:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	4915      	ldr	r1, [pc, #84]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007884:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	490c      	ldr	r1, [pc, #48]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	4904      	ldr	r1, [pc, #16]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40023800 	.word	0x40023800

080078c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d004      	beq.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	f000 80a1 	beq.w	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80078ea:	e13f      	b.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80078ec:	4ba3      	ldr	r3, [pc, #652]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80078fe:	f000 8084 	beq.w	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007908:	f200 808c 	bhi.w	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007912:	d04f      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800791a:	f200 8083 	bhi.w	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d006      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800792a:	d17b      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800792c:	4b94      	ldr	r3, [pc, #592]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800792e:	617b      	str	r3, [r7, #20]
          break;
 8007930:	e07b      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007932:	4b92      	ldr	r3, [pc, #584]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007940:	d109      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007942:	4b8e      	ldr	r3, [pc, #568]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800794c:	4a8c      	ldr	r2, [pc, #560]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	e019      	b.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007956:	4b89      	ldr	r3, [pc, #548]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007962:	d109      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007964:	4b85      	ldr	r3, [pc, #532]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800796e:	4a85      	ldr	r2, [pc, #532]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007970:	fbb2 f3f3 	udiv	r3, r2, r3
 8007974:	613b      	str	r3, [r7, #16]
 8007976:	e008      	b.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007978:	4b80      	ldr	r3, [pc, #512]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007982:	4a81      	ldr	r2, [pc, #516]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800798a:	4b7c      	ldr	r3, [pc, #496]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007990:	099b      	lsrs	r3, r3, #6
 8007992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	fb02 f303 	mul.w	r3, r2, r3
 800799c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800799e:	4b77      	ldr	r3, [pc, #476]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a4:	0f1b      	lsrs	r3, r3, #28
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	617b      	str	r3, [r7, #20]
          break;
 80079b2:	e03a      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80079b4:	4b71      	ldr	r3, [pc, #452]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c0:	d108      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079c2:	4b6e      	ldr	r3, [pc, #440]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ca:	4a6e      	ldr	r2, [pc, #440]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e007      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80079d4:	4b69      	ldr	r3, [pc, #420]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079dc:	4a6a      	ldr	r2, [pc, #424]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80079de:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80079e4:	4b65      	ldr	r3, [pc, #404]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	099b      	lsrs	r3, r3, #6
 80079ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80079f6:	4b61      	ldr	r3, [pc, #388]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	0f1b      	lsrs	r3, r3, #28
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a06:	617b      	str	r3, [r7, #20]
          break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a0a:	4b5c      	ldr	r3, [pc, #368]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a16:	d102      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8007a18:	4b5a      	ldr	r3, [pc, #360]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a1a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007a1c:	e005      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8007a1e:	4b5a      	ldr	r3, [pc, #360]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a20:	617b      	str	r3, [r7, #20]
          break;
 8007a22:	e002      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
          break;
 8007a28:	bf00      	nop
        }
      }
      break;
 8007a2a:	e09f      	b.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007a2c:	4b53      	ldr	r3, [pc, #332]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a32:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007a3e:	f000 8084 	beq.w	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007a48:	f200 808c 	bhi.w	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a52:	d04f      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a5a:	f200 8083 	bhi.w	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d006      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a6a:	d17b      	bne.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a6c:	4b44      	ldr	r3, [pc, #272]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a6e:	617b      	str	r3, [r7, #20]
          break;
 8007a70:	e07b      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007a72:	4b42      	ldr	r3, [pc, #264]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a80:	d109      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a82:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a8c:	4a3c      	ldr	r2, [pc, #240]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e019      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a96:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa2:	d109      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007aa4:	4b35      	ldr	r3, [pc, #212]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aae:	4a35      	ldr	r2, [pc, #212]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	e008      	b.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007ab8:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac2:	4a31      	ldr	r2, [pc, #196]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac8:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad0:	099b      	lsrs	r3, r3, #6
 8007ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	fb02 f303 	mul.w	r3, r2, r3
 8007adc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae4:	0f1b      	lsrs	r3, r3, #28
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af0:	617b      	str	r3, [r7, #20]
          break;
 8007af2:	e03a      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007af4:	4b21      	ldr	r3, [pc, #132]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b00:	d108      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b02:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	e007      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b1c:	4a1a      	ldr	r2, [pc, #104]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b22:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	099b      	lsrs	r3, r3, #6
 8007b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	fb02 f303 	mul.w	r3, r2, r3
 8007b34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007b36:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	0f1b      	lsrs	r3, r3, #28
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	617b      	str	r3, [r7, #20]
          break;
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b56:	d102      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b5a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007b5c:	e005      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b60:	617b      	str	r3, [r7, #20]
          break;
 8007b62:	e002      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	617b      	str	r3, [r7, #20]
          break;
 8007b68:	bf00      	nop
        }
      }
      break;
 8007b6a:	bf00      	nop
    }
  }
  return frequency;
 8007b6c:	697b      	ldr	r3, [r7, #20]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40023800 	.word	0x40023800
 8007b80:	00bb8000 	.word	0x00bb8000
 8007b84:	017d7840 	.word	0x017d7840
 8007b88:	00f42400 	.word	0x00f42400

08007b8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d075      	beq.n	8007c90 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007ba4:	4ba2      	ldr	r3, [pc, #648]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 030c 	and.w	r3, r3, #12
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d00c      	beq.n	8007bca <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bb0:	4b9f      	ldr	r3, [pc, #636]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d112      	bne.n	8007be2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bbc:	4b9c      	ldr	r3, [pc, #624]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc8:	d10b      	bne.n	8007be2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bca:	4b99      	ldr	r3, [pc, #612]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d05b      	beq.n	8007c8e <HAL_RCC_OscConfig+0x102>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d157      	bne.n	8007c8e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e20b      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bea:	d106      	bne.n	8007bfa <HAL_RCC_OscConfig+0x6e>
 8007bec:	4b90      	ldr	r3, [pc, #576]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a8f      	ldr	r2, [pc, #572]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e01d      	b.n	8007c36 <HAL_RCC_OscConfig+0xaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c02:	d10c      	bne.n	8007c1e <HAL_RCC_OscConfig+0x92>
 8007c04:	4b8a      	ldr	r3, [pc, #552]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a89      	ldr	r2, [pc, #548]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	4b87      	ldr	r3, [pc, #540]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a86      	ldr	r2, [pc, #536]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e00b      	b.n	8007c36 <HAL_RCC_OscConfig+0xaa>
 8007c1e:	4b84      	ldr	r3, [pc, #528]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a83      	ldr	r2, [pc, #524]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	4b81      	ldr	r3, [pc, #516]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a80      	ldr	r2, [pc, #512]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d013      	beq.n	8007c66 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3e:	f7fb fed1 	bl	80039e4 <HAL_GetTick>
 8007c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c44:	e008      	b.n	8007c58 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c46:	f7fb fecd 	bl	80039e4 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b64      	cmp	r3, #100	; 0x64
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e1d0      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c58:	4b75      	ldr	r3, [pc, #468]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f0      	beq.n	8007c46 <HAL_RCC_OscConfig+0xba>
 8007c64:	e014      	b.n	8007c90 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c66:	f7fb febd 	bl	80039e4 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c6e:	f7fb feb9 	bl	80039e4 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b64      	cmp	r3, #100	; 0x64
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e1bc      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c80:	4b6b      	ldr	r3, [pc, #428]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1f0      	bne.n	8007c6e <HAL_RCC_OscConfig+0xe2>
 8007c8c:	e000      	b.n	8007c90 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d063      	beq.n	8007d64 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c9c:	4b64      	ldr	r3, [pc, #400]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 030c 	and.w	r3, r3, #12
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ca8:	4b61      	ldr	r3, [pc, #388]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d11c      	bne.n	8007cee <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cb4:	4b5e      	ldr	r3, [pc, #376]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d116      	bne.n	8007cee <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cc0:	4b5b      	ldr	r3, [pc, #364]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x14c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e190      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd8:	4b55      	ldr	r3, [pc, #340]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4952      	ldr	r1, [pc, #328]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cec:	e03a      	b.n	8007d64 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cf6:	4b4f      	ldr	r3, [pc, #316]	; (8007e34 <HAL_RCC_OscConfig+0x2a8>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fb fe72 	bl	80039e4 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d04:	f7fb fe6e 	bl	80039e4 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e171      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d16:	4b46      	ldr	r3, [pc, #280]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d22:	4b43      	ldr	r3, [pc, #268]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	493f      	ldr	r1, [pc, #252]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	600b      	str	r3, [r1, #0]
 8007d36:	e015      	b.n	8007d64 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d38:	4b3e      	ldr	r3, [pc, #248]	; (8007e34 <HAL_RCC_OscConfig+0x2a8>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3e:	f7fb fe51 	bl	80039e4 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d46:	f7fb fe4d 	bl	80039e4 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e150      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d58:	4b35      	ldr	r3, [pc, #212]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f0      	bne.n	8007d46 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d030      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d016      	beq.n	8007da6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d78:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <HAL_RCC_OscConfig+0x2ac>)
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d7e:	f7fb fe31 	bl	80039e4 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d86:	f7fb fe2d 	bl	80039e4 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e130      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d98:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCC_OscConfig+0x1fa>
 8007da4:	e015      	b.n	8007dd2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <HAL_RCC_OscConfig+0x2ac>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dac:	f7fb fe1a 	bl	80039e4 <HAL_GetTick>
 8007db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007db4:	f7fb fe16 	bl	80039e4 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e119      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 809f 	beq.w	8007f1e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007de4:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10f      	bne.n	8007e10 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	4a0d      	ldr	r2, [pc, #52]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_RCC_OscConfig+0x2a4>)
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e10:	4b0a      	ldr	r3, [pc, #40]	; (8007e3c <HAL_RCC_OscConfig+0x2b0>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d120      	bne.n	8007e5e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <HAL_RCC_OscConfig+0x2b0>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a06      	ldr	r2, [pc, #24]	; (8007e3c <HAL_RCC_OscConfig+0x2b0>)
 8007e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e28:	f7fb fddc 	bl	80039e4 <HAL_GetTick>
 8007e2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e2e:	e010      	b.n	8007e52 <HAL_RCC_OscConfig+0x2c6>
 8007e30:	40023800 	.word	0x40023800
 8007e34:	42470000 	.word	0x42470000
 8007e38:	42470e80 	.word	0x42470e80
 8007e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e40:	f7fb fdd0 	bl	80039e4 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e0d3      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e52:	4b6c      	ldr	r3, [pc, #432]	; (8008004 <HAL_RCC_OscConfig+0x478>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d106      	bne.n	8007e74 <HAL_RCC_OscConfig+0x2e8>
 8007e66:	4b68      	ldr	r3, [pc, #416]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	4a67      	ldr	r2, [pc, #412]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e6c:	f043 0301 	orr.w	r3, r3, #1
 8007e70:	6713      	str	r3, [r2, #112]	; 0x70
 8007e72:	e01c      	b.n	8007eae <HAL_RCC_OscConfig+0x322>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d10c      	bne.n	8007e96 <HAL_RCC_OscConfig+0x30a>
 8007e7c:	4b62      	ldr	r3, [pc, #392]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e80:	4a61      	ldr	r2, [pc, #388]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e82:	f043 0304 	orr.w	r3, r3, #4
 8007e86:	6713      	str	r3, [r2, #112]	; 0x70
 8007e88:	4b5f      	ldr	r3, [pc, #380]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8c:	4a5e      	ldr	r2, [pc, #376]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	6713      	str	r3, [r2, #112]	; 0x70
 8007e94:	e00b      	b.n	8007eae <HAL_RCC_OscConfig+0x322>
 8007e96:	4b5c      	ldr	r3, [pc, #368]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9a:	4a5b      	ldr	r2, [pc, #364]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea2:	4b59      	ldr	r3, [pc, #356]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	4a58      	ldr	r2, [pc, #352]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007ea8:	f023 0304 	bic.w	r3, r3, #4
 8007eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d015      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb6:	f7fb fd95 	bl	80039e4 <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ebc:	e00a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ebe:	f7fb fd91 	bl	80039e4 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e092      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed4:	4b4c      	ldr	r3, [pc, #304]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0ee      	beq.n	8007ebe <HAL_RCC_OscConfig+0x332>
 8007ee0:	e014      	b.n	8007f0c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee2:	f7fb fd7f 	bl	80039e4 <HAL_GetTick>
 8007ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ee8:	e00a      	b.n	8007f00 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eea:	f7fb fd7b 	bl	80039e4 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d901      	bls.n	8007f00 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e07c      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f00:	4b41      	ldr	r3, [pc, #260]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1ee      	bne.n	8007eea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d105      	bne.n	8007f1e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f12:	4b3d      	ldr	r3, [pc, #244]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	4a3c      	ldr	r2, [pc, #240]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d068      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f26:	4b38      	ldr	r3, [pc, #224]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 030c 	and.w	r3, r3, #12
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d060      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d145      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f3a:	4b34      	ldr	r3, [pc, #208]	; (800800c <HAL_RCC_OscConfig+0x480>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f40:	f7fb fd50 	bl	80039e4 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f46:	e008      	b.n	8007f5a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f48:	f7fb fd4c 	bl	80039e4 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e04f      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f5a:	4b2b      	ldr	r3, [pc, #172]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f0      	bne.n	8007f48 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69da      	ldr	r2, [r3, #28]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	019b      	lsls	r3, r3, #6
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	085b      	lsrs	r3, r3, #1
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	041b      	lsls	r3, r3, #16
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	061b      	lsls	r3, r3, #24
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f90:	071b      	lsls	r3, r3, #28
 8007f92:	491d      	ldr	r1, [pc, #116]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f98:	4b1c      	ldr	r3, [pc, #112]	; (800800c <HAL_RCC_OscConfig+0x480>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9e:	f7fb fd21 	bl	80039e4 <HAL_GetTick>
 8007fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fa4:	e008      	b.n	8007fb8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fa6:	f7fb fd1d 	bl	80039e4 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d901      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e020      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fb8:	4b13      	ldr	r3, [pc, #76]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0f0      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x41a>
 8007fc4:	e018      	b.n	8007ff8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fc6:	4b11      	ldr	r3, [pc, #68]	; (800800c <HAL_RCC_OscConfig+0x480>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fcc:	f7fb fd0a 	bl	80039e4 <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fb fd06 	bl	80039e4 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e009      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fe6:	4b08      	ldr	r3, [pc, #32]	; (8008008 <HAL_RCC_OscConfig+0x47c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x448>
 8007ff2:	e001      	b.n	8007ff8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40007000 	.word	0x40007000
 8008008:	40023800 	.word	0x40023800
 800800c:	42470060 	.word	0x42470060

08008010 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e022      	b.n	8008068 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d105      	bne.n	800803a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fb fa05 	bl	8003444 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2203      	movs	r2, #3
 800803e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f814 	bl	8008070 <HAL_SD_InitCard>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e00a      	b.n	8008068 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008070:	b5b0      	push	{r4, r5, r7, lr}
 8008072:	b08e      	sub	sp, #56	; 0x38
 8008074:	af04      	add	r7, sp, #16
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008078:	2300      	movs	r3, #0
 800807a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008080:	2300      	movs	r3, #0
 8008082:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800808c:	2376      	movs	r3, #118	; 0x76
 800808e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681d      	ldr	r5, [r3, #0]
 8008094:	466c      	mov	r4, sp
 8008096:	f107 0314 	add.w	r3, r7, #20
 800809a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800809e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080a2:	f107 0308 	add.w	r3, r7, #8
 80080a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080a8:	4628      	mov	r0, r5
 80080aa:	f001 ff39 	bl	8009f20 <SDIO_Init>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80080b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e031      	b.n	8008124 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80080c0:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_SD_InitCard+0xbc>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 ff60 	bl	8009f90 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80080d0:	4b16      	ldr	r3, [pc, #88]	; (800812c <HAL_SD_InitCard+0xbc>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fb16 	bl	8008708 <SD_PowerON>
 80080dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e013      	b.n	8008124 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fa37 	bl	8008570 <SD_InitCard>
 8008102:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3728      	adds	r7, #40	; 0x28
 8008128:	46bd      	mov	sp, r7
 800812a:	bdb0      	pop	{r4, r5, r7, pc}
 800812c:	422580a0 	.word	0x422580a0

08008130 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813e:	0f9b      	lsrs	r3, r3, #30
 8008140:	b2da      	uxtb	r2, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814a:	0e9b      	lsrs	r3, r3, #26
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	b2da      	uxtb	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800815c:	0e1b      	lsrs	r3, r3, #24
 800815e:	b2db      	uxtb	r3, r3
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	b2da      	uxtb	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816e:	0c1b      	lsrs	r3, r3, #16
 8008170:	b2da      	uxtb	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008190:	0d1b      	lsrs	r3, r3, #20
 8008192:	b29a      	uxth	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ae:	0bdb      	lsrs	r3, r3, #15
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081c0:	0b9b      	lsrs	r3, r3, #14
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d2:	0b5b      	lsrs	r3, r3, #13
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e4:	0b1b      	lsrs	r3, r3, #12
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2200      	movs	r2, #0
 80081f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d163      	bne.n	80082c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008204:	009a      	lsls	r2, r3, #2
 8008206:	f640 73fc 	movw	r3, #4092	; 0xffc
 800820a:	4013      	ands	r3, r2
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008210:	0f92      	lsrs	r2, r2, #30
 8008212:	431a      	orrs	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821c:	0edb      	lsrs	r3, r3, #27
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822e:	0e1b      	lsrs	r3, r3, #24
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008240:	0d5b      	lsrs	r3, r3, #21
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	b2da      	uxtb	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008252:	0c9b      	lsrs	r3, r3, #18
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	b2da      	uxtb	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008264:	0bdb      	lsrs	r3, r3, #15
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	7e1b      	ldrb	r3, [r3, #24]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	3302      	adds	r3, #2
 8008288:	2201      	movs	r2, #1
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008292:	fb02 f203 	mul.w	r2, r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	7a1b      	ldrb	r3, [r3, #8]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2201      	movs	r2, #1
 80082a6:	409a      	lsls	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80082b4:	0a52      	lsrs	r2, r2, #9
 80082b6:	fb02 f203 	mul.w	r2, r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c4:	661a      	str	r2, [r3, #96]	; 0x60
 80082c6:	e031      	b.n	800832c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d11d      	bne.n	800830c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082de:	0c1b      	lsrs	r3, r3, #16
 80082e0:	431a      	orrs	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	3301      	adds	r3, #1
 80082ec:	029a      	lsls	r2, r3, #10
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008300:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	661a      	str	r2, [r3, #96]	; 0x60
 800830a:	e00f      	b.n	800832c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a58      	ldr	r2, [pc, #352]	; (8008474 <HAL_SD_GetCardCSD+0x344>)
 8008312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e09d      	b.n	8008468 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008330:	0b9b      	lsrs	r3, r3, #14
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	b2da      	uxtb	r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008342:	09db      	lsrs	r3, r3, #7
 8008344:	b2db      	uxtb	r3, r3
 8008346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834a:	b2da      	uxtb	r2, r3
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835a:	b2da      	uxtb	r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	0fdb      	lsrs	r3, r3, #31
 8008366:	b2da      	uxtb	r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008370:	0f5b      	lsrs	r3, r3, #29
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	b2da      	uxtb	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008382:	0e9b      	lsrs	r3, r3, #26
 8008384:	b2db      	uxtb	r3, r3
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	b2da      	uxtb	r2, r3
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008394:	0d9b      	lsrs	r3, r3, #22
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	b2da      	uxtb	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	0d5b      	lsrs	r3, r3, #21
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	0c1b      	lsrs	r3, r3, #16
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	0bdb      	lsrs	r3, r3, #15
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	0b9b      	lsrs	r3, r3, #14
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	0b5b      	lsrs	r3, r3, #13
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	0b1b      	lsrs	r3, r3, #12
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	b2da      	uxtb	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	0a9b      	lsrs	r3, r3, #10
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	b2da      	uxtb	r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	0a1b      	lsrs	r3, r3, #8
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f003 0303 	and.w	r3, r3, #3
 8008442:	b2da      	uxtb	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008456:	b2da      	uxtb	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	004005ff 	.word	0x004005ff

08008478 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008478:	b5b0      	push	{r4, r5, r7, lr}
 800847a:	b08e      	sub	sp, #56	; 0x38
 800847c:	af04      	add	r7, sp, #16
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2203      	movs	r2, #3
 8008486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848e:	2b03      	cmp	r3, #3
 8008490:	d02e      	beq.n	80084f0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008498:	d106      	bne.n	80084a8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38
 80084a6:	e029      	b.n	80084fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ae:	d10a      	bne.n	80084c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f9b7 	bl	8008824 <SD_WideBus_Enable>
 80084b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
 80084c4:	e01a      	b.n	80084fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9f4 	bl	80088ba <SD_WideBus_Disable>
 80084d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	639a      	str	r2, [r3, #56]	; 0x38
 80084e0:	e00c      	b.n	80084fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
 80084ee:	e005      	b.n	80084fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a18      	ldr	r2, [pc, #96]	; (800856c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e024      	b.n	8008562 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681d      	ldr	r5, [r3, #0]
 800853e:	466c      	mov	r4, sp
 8008540:	f107 0318 	add.w	r3, r7, #24
 8008544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800854c:	f107 030c 	add.w	r3, r7, #12
 8008550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008552:	4628      	mov	r0, r5
 8008554:	f001 fce4 	bl	8009f20 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3728      	adds	r7, #40	; 0x28
 8008566:	46bd      	mov	sp, r7
 8008568:	bdb0      	pop	{r4, r5, r7, pc}
 800856a:	bf00      	nop
 800856c:	004005ff 	.word	0x004005ff

08008570 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008570:	b5b0      	push	{r4, r5, r7, lr}
 8008572:	b094      	sub	sp, #80	; 0x50
 8008574:	af04      	add	r7, sp, #16
 8008576:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008578:	2301      	movs	r3, #1
 800857a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fd14 	bl	8009fae <SDIO_GetPowerState>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800858c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008590:	e0b6      	b.n	8008700 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	2b03      	cmp	r3, #3
 8008598:	d02f      	beq.n	80085fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fe93 	bl	800a2ca <SDMMC_CmdSendCID>
 80085a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80085ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ae:	e0a7      	b.n	8008700 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2100      	movs	r1, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 fd3e 	bl	800a038 <SDIO_GetResponse>
 80085bc:	4602      	mov	r2, r0
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2104      	movs	r1, #4
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 fd35 	bl	800a038 <SDIO_GetResponse>
 80085ce:	4602      	mov	r2, r0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2108      	movs	r1, #8
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 fd2c 	bl	800a038 <SDIO_GetResponse>
 80085e0:	4602      	mov	r2, r0
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	210c      	movs	r1, #12
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 fd23 	bl	800a038 <SDIO_GetResponse>
 80085f2:	4602      	mov	r2, r0
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d00d      	beq.n	800861e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f107 020e 	add.w	r2, r7, #14
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f001 fe99 	bl	800a344 <SDMMC_CmdSetRelAdd>
 8008612:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <SD_InitCard+0xae>
    {
      return errorstate;
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	e070      	b.n	8008700 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008622:	2b03      	cmp	r3, #3
 8008624:	d036      	beq.n	8008694 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008626:	89fb      	ldrh	r3, [r7, #14]
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f001 fe63 	bl	800a306 <SDMMC_CmdSendCSD>
 8008640:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864a:	e059      	b.n	8008700 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2100      	movs	r1, #0
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fcf0 	bl	800a038 <SDIO_GetResponse>
 8008658:	4602      	mov	r2, r0
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2104      	movs	r1, #4
 8008664:	4618      	mov	r0, r3
 8008666:	f001 fce7 	bl	800a038 <SDIO_GetResponse>
 800866a:	4602      	mov	r2, r0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2108      	movs	r1, #8
 8008676:	4618      	mov	r0, r3
 8008678:	f001 fcde 	bl	800a038 <SDIO_GetResponse>
 800867c:	4602      	mov	r2, r0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	210c      	movs	r1, #12
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fcd5 	bl	800a038 <SDIO_GetResponse>
 800868e:	4602      	mov	r2, r0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2104      	movs	r1, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fccc 	bl	800a038 <SDIO_GetResponse>
 80086a0:	4603      	mov	r3, r0
 80086a2:	0d1a      	lsrs	r2, r3, #20
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80086a8:	f107 0310 	add.w	r3, r7, #16
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7ff fd3e 	bl	8008130 <HAL_SD_GetCardCSD>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086be:	e01f      	b.n	8008700 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	461a      	mov	r2, r3
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	4608      	mov	r0, r1
 80086d2:	f001 fd12 	bl	800a0fa <SDMMC_CmdSelDesel>
 80086d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <SD_InitCard+0x172>
  {
    return errorstate;
 80086de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e0:	e00e      	b.n	8008700 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681d      	ldr	r5, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	466c      	mov	r4, sp
 80086ea:	f103 0210 	add.w	r2, r3, #16
 80086ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80086f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086f4:	3304      	adds	r3, #4
 80086f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086f8:	4628      	mov	r0, r5
 80086fa:	f001 fc11 	bl	8009f20 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3740      	adds	r7, #64	; 0x40
 8008704:	46bd      	mov	sp, r7
 8008706:	bdb0      	pop	{r4, r5, r7, pc}

08008708 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	2300      	movs	r3, #0
 800871a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f001 fd0d 	bl	800a140 <SDMMC_CmdGoIdleState>
 8008726:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <SD_PowerON+0x2a>
  {
    return errorstate;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	e072      	b.n	8008818 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f001 fd20 	bl	800a17c <SDMMC_CmdOperCond>
 800873c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00d      	beq.n	8008760 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fcf6 	bl	800a140 <SDMMC_CmdGoIdleState>
 8008754:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <SD_PowerON+0x5e>
    {
      return errorstate;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	e05b      	b.n	8008818 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876a:	2b01      	cmp	r3, #1
 800876c:	d137      	bne.n	80087de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f001 fd20 	bl	800a1ba <SDMMC_CmdAppCommand>
 800877a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d02d      	beq.n	80087de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008782:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008786:	e047      	b.n	8008818 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fd13 	bl	800a1ba <SDMMC_CmdAppCommand>
 8008794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e03b      	b.n	8008818 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	491e      	ldr	r1, [pc, #120]	; (8008820 <SD_PowerON+0x118>)
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fd29 	bl	800a1fe <SDMMC_CmdAppOperCommand>
 80087ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087b8:	e02e      	b.n	8008818 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2100      	movs	r1, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 fc39 	bl	800a038 <SDIO_GetResponse>
 80087c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	0fdb      	lsrs	r3, r3, #31
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <SD_PowerON+0xcc>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e000      	b.n	80087d6 <SD_PowerON+0xce>
 80087d4:	2300      	movs	r3, #0
 80087d6:	613b      	str	r3, [r7, #16]

    count++;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3301      	adds	r3, #1
 80087dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d802      	bhi.n	80087ee <SD_PowerON+0xe6>
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0cc      	beq.n	8008788 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d902      	bls.n	80087fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087fc:	e00c      	b.n	8008818 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	645a      	str	r2, [r3, #68]	; 0x44
 800880e:	e002      	b.n	8008816 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	c1100000 	.word	0xc1100000

08008824 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fbfc 	bl	800a038 <SDIO_GetResponse>
 8008840:	4603      	mov	r3, r0
 8008842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800884a:	d102      	bne.n	8008852 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800884c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008850:	e02f      	b.n	80088b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008852:	f107 030c 	add.w	r3, r7, #12
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f879 	bl	8008950 <SD_FindSCR>
 800885e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	e023      	b.n	80088b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d01c      	beq.n	80088ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f001 fc9a 	bl	800a1ba <SDMMC_CmdAppCommand>
 8008886:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	e00f      	b.n	80088b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2102      	movs	r1, #2
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fcd3 	bl	800a244 <SDMMC_CmdBusWidth>
 800889e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	e003      	b.n	80088b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e001      	b.n	80088b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 fbb1 	bl	800a038 <SDIO_GetResponse>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088e0:	d102      	bne.n	80088e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088e6:	e02f      	b.n	8008948 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f82e 	bl	8008950 <SD_FindSCR>
 80088f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	e023      	b.n	8008948 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d01c      	beq.n	8008944 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f001 fc4f 	bl	800a1ba <SDMMC_CmdAppCommand>
 800891c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	e00f      	b.n	8008948 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f001 fc88 	bl	800a244 <SDMMC_CmdBusWidth>
 8008934:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	e003      	b.n	8008948 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008940:	2300      	movs	r3, #0
 8008942:	e001      	b.n	8008948 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008944:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b08f      	sub	sp, #60	; 0x3c
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800895a:	f7fb f843 	bl	80039e4 <HAL_GetTick>
 800895e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008964:	2300      	movs	r3, #0
 8008966:	60bb      	str	r3, [r7, #8]
 8008968:	2300      	movs	r3, #0
 800896a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2108      	movs	r1, #8
 8008976:	4618      	mov	r0, r3
 8008978:	f001 fb9d 	bl	800a0b6 <SDMMC_CmdBlockLength>
 800897c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	e0a9      	b.n	8008adc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008990:	041b      	lsls	r3, r3, #16
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f001 fc10 	bl	800a1ba <SDMMC_CmdAppCommand>
 800899a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	e09a      	b.n	8008adc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089a6:	f04f 33ff 	mov.w	r3, #4294967295
 80089aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80089ac:	2308      	movs	r3, #8
 80089ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80089b0:	2330      	movs	r3, #48	; 0x30
 80089b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80089b4:	2302      	movs	r3, #2
 80089b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80089bc:	2301      	movs	r3, #1
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f107 0210 	add.w	r2, r7, #16
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fb47 	bl	800a05e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 fc57 	bl	800a288 <SDMMC_CmdSendSCR>
 80089da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d022      	beq.n	8008a28 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	e07a      	b.n	8008adc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00e      	beq.n	8008a12 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6819      	ldr	r1, [r3, #0]
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	f107 0208 	add.w	r2, r7, #8
 8008a00:	18d4      	adds	r4, r2, r3
 8008a02:	4608      	mov	r0, r1
 8008a04:	f001 fab7 	bl	8009f76 <SDIO_ReadFIFO>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	6023      	str	r3, [r4, #0]
      index++;
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	3301      	adds	r3, #1
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a12:	f7fa ffe7 	bl	80039e4 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d102      	bne.n	8008a28 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a26:	e059      	b.n	8008adc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a2e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0d6      	beq.n	80089e6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3e:	f003 0308 	and.w	r3, r3, #8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a4e:	2308      	movs	r3, #8
 8008a50:	e044      	b.n	8008adc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2202      	movs	r2, #2
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e037      	b.n	8008adc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d005      	beq.n	8008a86 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a82:	2320      	movs	r3, #32
 8008a84:	e02a      	b.n	8008adc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a8e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	061a      	lsls	r2, r3, #24
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aa6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	0e1b      	lsrs	r3, r3, #24
 8008aac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	601a      	str	r2, [r3, #0]
    scr++;
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	061a      	lsls	r2, r3, #24
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ac4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	0a1b      	lsrs	r3, r3, #8
 8008aca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ace:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	0e1b      	lsrs	r3, r3, #24
 8008ad4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	373c      	adds	r7, #60	; 0x3c
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd90      	pop	{r4, r7, pc}

08008ae4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e034      	b.n	8008b64 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f7fa fdf6 	bl	8003700 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f001 f8fa 	bl	8009d18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	f001 f962 	bl	8009df8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6858      	ldr	r0, [r3, #4]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	f001 f9ad 	bl	8009ea0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	6892      	ldr	r2, [r2, #8]
 8008b4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	6892      	ldr	r2, [r2, #8]
 8008b5a:	f041 0101 	orr.w	r1, r1, #1
 8008b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e01d      	b.n	8008bba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f815 	bl	8008bc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f000 f968 	bl	8008e80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0201 	orr.w	r2, r2, #1
 8008bec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b06      	cmp	r3, #6
 8008bfe:	d007      	beq.n	8008c10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0201 	orr.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d122      	bne.n	8008c7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d11b      	bne.n	8008c7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f06f 0202 	mvn.w	r2, #2
 8008c4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f8ee 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008c66:	e005      	b.n	8008c74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f8e0 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f8f1 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d122      	bne.n	8008cce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d11b      	bne.n	8008cce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f06f 0204 	mvn.w	r2, #4
 8008c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8c4 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008cba:	e005      	b.n	8008cc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8b6 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f8c7 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d122      	bne.n	8008d22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	d11b      	bne.n	8008d22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f06f 0208 	mvn.w	r2, #8
 8008cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f89a 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008d0e:	e005      	b.n	8008d1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f88c 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f89d 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d122      	bne.n	8008d76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b10      	cmp	r3, #16
 8008d3c:	d11b      	bne.n	8008d76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f06f 0210 	mvn.w	r2, #16
 8008d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2208      	movs	r2, #8
 8008d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f870 	bl	8008e42 <HAL_TIM_IC_CaptureCallback>
 8008d62:	e005      	b.n	8008d70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f862 	bl	8008e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f873 	bl	8008e56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d10e      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d107      	bne.n	8008da2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f06f 0201 	mvn.w	r2, #1
 8008d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7f9 f96b 	bl	8002078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dac:	2b80      	cmp	r3, #128	; 0x80
 8008dae:	d10e      	bne.n	8008dce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dba:	2b80      	cmp	r3, #128	; 0x80
 8008dbc:	d107      	bne.n	8008dce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f903 	bl	8008fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd8:	2b40      	cmp	r3, #64	; 0x40
 8008dda:	d10e      	bne.n	8008dfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de6:	2b40      	cmp	r3, #64	; 0x40
 8008de8:	d107      	bne.n	8008dfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f838 	bl	8008e6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	d10e      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d107      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f06f 0220 	mvn.w	r2, #32
 8008e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8cd 	bl	8008fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b083      	sub	sp, #12
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
	...

08008e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a40      	ldr	r2, [pc, #256]	; (8008f94 <TIM_Base_SetConfig+0x114>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9e:	d00f      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a3d      	ldr	r2, [pc, #244]	; (8008f98 <TIM_Base_SetConfig+0x118>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00b      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a3c      	ldr	r2, [pc, #240]	; (8008f9c <TIM_Base_SetConfig+0x11c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a3b      	ldr	r2, [pc, #236]	; (8008fa0 <TIM_Base_SetConfig+0x120>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_Base_SetConfig+0x40>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a3a      	ldr	r2, [pc, #232]	; (8008fa4 <TIM_Base_SetConfig+0x124>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d108      	bne.n	8008ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a2f      	ldr	r2, [pc, #188]	; (8008f94 <TIM_Base_SetConfig+0x114>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d02b      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee0:	d027      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a2c      	ldr	r2, [pc, #176]	; (8008f98 <TIM_Base_SetConfig+0x118>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d023      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a2b      	ldr	r2, [pc, #172]	; (8008f9c <TIM_Base_SetConfig+0x11c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d01f      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a2a      	ldr	r2, [pc, #168]	; (8008fa0 <TIM_Base_SetConfig+0x120>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d01b      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a29      	ldr	r2, [pc, #164]	; (8008fa4 <TIM_Base_SetConfig+0x124>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d017      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a28      	ldr	r2, [pc, #160]	; (8008fa8 <TIM_Base_SetConfig+0x128>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d013      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a27      	ldr	r2, [pc, #156]	; (8008fac <TIM_Base_SetConfig+0x12c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d00f      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <TIM_Base_SetConfig+0x130>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00b      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a25      	ldr	r2, [pc, #148]	; (8008fb4 <TIM_Base_SetConfig+0x134>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a24      	ldr	r2, [pc, #144]	; (8008fb8 <TIM_Base_SetConfig+0x138>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d003      	beq.n	8008f32 <TIM_Base_SetConfig+0xb2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a23      	ldr	r2, [pc, #140]	; (8008fbc <TIM_Base_SetConfig+0x13c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d108      	bne.n	8008f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <TIM_Base_SetConfig+0x114>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_Base_SetConfig+0xf8>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a0c      	ldr	r2, [pc, #48]	; (8008fa4 <TIM_Base_SetConfig+0x124>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d103      	bne.n	8008f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	691a      	ldr	r2, [r3, #16]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	615a      	str	r2, [r3, #20]
}
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40000400 	.word	0x40000400
 8008f9c:	40000800 	.word	0x40000800
 8008fa0:	40000c00 	.word	0x40000c00
 8008fa4:	40010400 	.word	0x40010400
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	40014400 	.word	0x40014400
 8008fb0:	40014800 	.word	0x40014800
 8008fb4:	40001800 	.word	0x40001800
 8008fb8:	40001c00 	.word	0x40001c00
 8008fbc:	40002000 	.word	0x40002000

08008fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e03f      	b.n	800907a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fa fa80 	bl	8003514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2224      	movs	r2, #36	; 0x24
 8009018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800902a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fab3 	bl	8009598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	695a      	ldr	r2, [r3, #20]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009082:	b480      	push	{r7}
 8009084:	b085      	sub	sp, #20
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	4613      	mov	r3, r2
 800908e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b20      	cmp	r3, #32
 800909a:	d140      	bne.n	800911e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <HAL_UART_Receive_IT+0x26>
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e039      	b.n	8009120 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_UART_Receive_IT+0x38>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e032      	b.n	8009120 <HAL_UART_Receive_IT+0x9e>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	88fa      	ldrh	r2, [r7, #6]
 80090cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2222      	movs	r2, #34	; 0x22
 80090de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090f8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	695a      	ldr	r2, [r3, #20]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0201 	orr.w	r2, r2, #1
 8009108:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0220 	orr.w	r2, r2, #32
 8009118:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e000      	b.n	8009120 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800911e:	2302      	movs	r3, #2
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800914c:	2300      	movs	r3, #0
 800914e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10d      	bne.n	800917e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <HAL_UART_IRQHandler+0x52>
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f98c 	bl	8009494 <UART_Receive_IT>
      return;
 800917c:	e0d0      	b.n	8009320 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80b0 	beq.w	80092e6 <HAL_UART_IRQHandler+0x1ba>
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d105      	bne.n	800919c <HAL_UART_IRQHandler+0x70>
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80a5 	beq.w	80092e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <HAL_UART_IRQHandler+0x90>
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b4:	f043 0201 	orr.w	r2, r3, #1
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <HAL_UART_IRQHandler+0xb0>
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d4:	f043 0202 	orr.w	r2, r3, #2
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <HAL_UART_IRQHandler+0xd0>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f4:	f043 0204 	orr.w	r2, r3, #4
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0308 	and.w	r3, r3, #8
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00f      	beq.n	8009226 <HAL_UART_IRQHandler+0xfa>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d104      	bne.n	800921a <HAL_UART_IRQHandler+0xee>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d005      	beq.n	8009226 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	f043 0208 	orr.w	r2, r3, #8
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d077      	beq.n	800931e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <HAL_UART_IRQHandler+0x11c>
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f926 	bl	8009494 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009252:	2b40      	cmp	r3, #64	; 0x40
 8009254:	bf0c      	ite	eq
 8009256:	2301      	moveq	r3, #1
 8009258:	2300      	movne	r3, #0
 800925a:	b2db      	uxtb	r3, r3
 800925c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009262:	f003 0308 	and.w	r3, r3, #8
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <HAL_UART_IRQHandler+0x144>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d031      	beq.n	80092d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f86f 	bl	8009354 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	d123      	bne.n	80092cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009292:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009298:	2b00      	cmp	r3, #0
 800929a:	d013      	beq.n	80092c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a0:	4a21      	ldr	r2, [pc, #132]	; (8009328 <HAL_UART_IRQHandler+0x1fc>)
 80092a2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fb f941 	bl	8004530 <HAL_DMA_Abort_IT>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d016      	beq.n	80092e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80092be:	4610      	mov	r0, r2
 80092c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c2:	e00e      	b.n	80092e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f83b 	bl	8009340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ca:	e00a      	b.n	80092e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f837 	bl	8009340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d2:	e006      	b.n	80092e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f833 	bl	8009340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80092e0:	e01d      	b.n	800931e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e2:	bf00      	nop
    return;
 80092e4:	e01b      	b.n	800931e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d008      	beq.n	8009302 <HAL_UART_IRQHandler+0x1d6>
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f85c 	bl	80093b8 <UART_Transmit_IT>
    return;
 8009300:	e00e      	b.n	8009320 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d009      	beq.n	8009320 <HAL_UART_IRQHandler+0x1f4>
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d004      	beq.n	8009320 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f8a4 	bl	8009464 <UART_EndTransmit_IT>
    return;
 800931c:	e000      	b.n	8009320 <HAL_UART_IRQHandler+0x1f4>
    return;
 800931e:	bf00      	nop
  }
}
 8009320:	3720      	adds	r7, #32
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	08009391 	.word	0x08009391

0800932c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800936a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695a      	ldr	r2, [r3, #20]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0201 	bic.w	r2, r2, #1
 800937a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff ffc8 	bl	8009340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b21      	cmp	r3, #33	; 0x21
 80093ca:	d144      	bne.n	8009456 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d4:	d11a      	bne.n	800940c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	1c9a      	adds	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	621a      	str	r2, [r3, #32]
 80093fe:	e00e      	b.n	800941e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	621a      	str	r2, [r3, #32]
 800940a:	e008      	b.n	800941e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	1c59      	adds	r1, r3, #1
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6211      	str	r1, [r2, #32]
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009422:	b29b      	uxth	r3, r3
 8009424:	3b01      	subs	r3, #1
 8009426:	b29b      	uxth	r3, r3
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4619      	mov	r1, r3
 800942c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10f      	bne.n	8009452 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009440:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009450:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	e000      	b.n	8009458 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009456:	2302      	movs	r3, #2
  }
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800947a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff ff51 	bl	800932c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b22      	cmp	r3, #34	; 0x22
 80094a6:	d171      	bne.n	800958c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b0:	d123      	bne.n	80094fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10e      	bne.n	80094de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	1c9a      	adds	r2, r3, #2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
 80094dc:	e029      	b.n	8009532 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	629a      	str	r2, [r3, #40]	; 0x28
 80094f8:	e01b      	b.n	8009532 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6858      	ldr	r0, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950c:	1c59      	adds	r1, r3, #1
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6291      	str	r1, [r2, #40]	; 0x28
 8009512:	b2c2      	uxtb	r2, r0
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	e00c      	b.n	8009532 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	1c58      	adds	r0, r3, #1
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	6288      	str	r0, [r1, #40]	; 0x28
 800952a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009536:	b29b      	uxth	r3, r3
 8009538:	3b01      	subs	r3, #1
 800953a:	b29b      	uxth	r3, r3
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	4619      	mov	r1, r3
 8009540:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009542:	2b00      	cmp	r3, #0
 8009544:	d120      	bne.n	8009588 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0220 	bic.w	r2, r2, #32
 8009554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009564:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695a      	ldr	r2, [r3, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7f7 fcfa 	bl	8000f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	e002      	b.n	800958e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e000      	b.n	800958e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800958c:	2302      	movs	r3, #2
  }
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	b0bd      	sub	sp, #244	; 0xf4
 800959e:	af00      	add	r7, sp, #0
 80095a0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b4:	68d9      	ldr	r1, [r3, #12]
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	ea40 0301 	orr.w	r3, r0, r1
 80095c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	431a      	orrs	r2, r3
 80095d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	4313      	orrs	r3, r2
 80095e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80095e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80095f0:	f021 010c 	bic.w	r1, r1, #12
 80095f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095fe:	430b      	orrs	r3, r1
 8009600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800960e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009612:	6999      	ldr	r1, [r3, #24]
 8009614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	ea40 0301 	orr.w	r3, r0, r1
 800961e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800962a:	f040 81b6 	bne.w	800999a <UART_SetConfig+0x402>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	4b70      	ldr	r3, [pc, #448]	; (80097f8 <UART_SetConfig+0x260>)
 8009636:	429a      	cmp	r2, r3
 8009638:	d012      	beq.n	8009660 <UART_SetConfig+0xc8>
 800963a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4b6e      	ldr	r3, [pc, #440]	; (80097fc <UART_SetConfig+0x264>)
 8009642:	429a      	cmp	r2, r3
 8009644:	d00c      	beq.n	8009660 <UART_SetConfig+0xc8>
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	4b6c      	ldr	r3, [pc, #432]	; (8009800 <UART_SetConfig+0x268>)
 800964e:	429a      	cmp	r2, r3
 8009650:	d006      	beq.n	8009660 <UART_SetConfig+0xc8>
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	4b6a      	ldr	r3, [pc, #424]	; (8009804 <UART_SetConfig+0x26c>)
 800965a:	429a      	cmp	r2, r3
 800965c:	f040 80d6 	bne.w	800980c <UART_SetConfig+0x274>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009660:	f7fd fe5e 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 8009664:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009668:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800966c:	461c      	mov	r4, r3
 800966e:	f04f 0500 	mov.w	r5, #0
 8009672:	4622      	mov	r2, r4
 8009674:	462b      	mov	r3, r5
 8009676:	1891      	adds	r1, r2, r2
 8009678:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800967c:	415b      	adcs	r3, r3
 800967e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009682:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009686:	1912      	adds	r2, r2, r4
 8009688:	eb45 0303 	adc.w	r3, r5, r3
 800968c:	f04f 0000 	mov.w	r0, #0
 8009690:	f04f 0100 	mov.w	r1, #0
 8009694:	00d9      	lsls	r1, r3, #3
 8009696:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800969a:	00d0      	lsls	r0, r2, #3
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	1911      	adds	r1, r2, r4
 80096a2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80096a6:	416b      	adcs	r3, r5
 80096a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f04f 0300 	mov.w	r3, #0
 80096b8:	1891      	adds	r1, r2, r2
 80096ba:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80096be:	415b      	adcs	r3, r3
 80096c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80096c8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80096cc:	f7f7 fa8c 	bl	8000be8 <__aeabi_uldivmod>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4b4c      	ldr	r3, [pc, #304]	; (8009808 <UART_SetConfig+0x270>)
 80096d6:	fba3 2302 	umull	r2, r3, r3, r2
 80096da:	095b      	lsrs	r3, r3, #5
 80096dc:	011e      	lsls	r6, r3, #4
 80096de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096e2:	461c      	mov	r4, r3
 80096e4:	f04f 0500 	mov.w	r5, #0
 80096e8:	4622      	mov	r2, r4
 80096ea:	462b      	mov	r3, r5
 80096ec:	1891      	adds	r1, r2, r2
 80096ee:	67b9      	str	r1, [r7, #120]	; 0x78
 80096f0:	415b      	adcs	r3, r3
 80096f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80096f8:	1912      	adds	r2, r2, r4
 80096fa:	eb45 0303 	adc.w	r3, r5, r3
 80096fe:	f04f 0000 	mov.w	r0, #0
 8009702:	f04f 0100 	mov.w	r1, #0
 8009706:	00d9      	lsls	r1, r3, #3
 8009708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800970c:	00d0      	lsls	r0, r2, #3
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	1911      	adds	r1, r2, r4
 8009714:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009718:	416b      	adcs	r3, r5
 800971a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800971e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	461a      	mov	r2, r3
 8009726:	f04f 0300 	mov.w	r3, #0
 800972a:	1891      	adds	r1, r2, r2
 800972c:	6739      	str	r1, [r7, #112]	; 0x70
 800972e:	415b      	adcs	r3, r3
 8009730:	677b      	str	r3, [r7, #116]	; 0x74
 8009732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009736:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800973a:	f7f7 fa55 	bl	8000be8 <__aeabi_uldivmod>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4b31      	ldr	r3, [pc, #196]	; (8009808 <UART_SetConfig+0x270>)
 8009744:	fba3 1302 	umull	r1, r3, r3, r2
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	2164      	movs	r1, #100	; 0x64
 800974c:	fb01 f303 	mul.w	r3, r1, r3
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	00db      	lsls	r3, r3, #3
 8009754:	3332      	adds	r3, #50	; 0x32
 8009756:	4a2c      	ldr	r2, [pc, #176]	; (8009808 <UART_SetConfig+0x270>)
 8009758:	fba2 2303 	umull	r2, r3, r2, r3
 800975c:	095b      	lsrs	r3, r3, #5
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009764:	441e      	add	r6, r3
 8009766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800976a:	4618      	mov	r0, r3
 800976c:	f04f 0100 	mov.w	r1, #0
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	1894      	adds	r4, r2, r2
 8009776:	66bc      	str	r4, [r7, #104]	; 0x68
 8009778:	415b      	adcs	r3, r3
 800977a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800977c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009780:	1812      	adds	r2, r2, r0
 8009782:	eb41 0303 	adc.w	r3, r1, r3
 8009786:	f04f 0400 	mov.w	r4, #0
 800978a:	f04f 0500 	mov.w	r5, #0
 800978e:	00dd      	lsls	r5, r3, #3
 8009790:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009794:	00d4      	lsls	r4, r2, #3
 8009796:	4622      	mov	r2, r4
 8009798:	462b      	mov	r3, r5
 800979a:	1814      	adds	r4, r2, r0
 800979c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80097a0:	414b      	adcs	r3, r1
 80097a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	461a      	mov	r2, r3
 80097ae:	f04f 0300 	mov.w	r3, #0
 80097b2:	1891      	adds	r1, r2, r2
 80097b4:	6639      	str	r1, [r7, #96]	; 0x60
 80097b6:	415b      	adcs	r3, r3
 80097b8:	667b      	str	r3, [r7, #100]	; 0x64
 80097ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80097be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80097c2:	f7f7 fa11 	bl	8000be8 <__aeabi_uldivmod>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <UART_SetConfig+0x270>)
 80097cc:	fba3 1302 	umull	r1, r3, r3, r2
 80097d0:	095b      	lsrs	r3, r3, #5
 80097d2:	2164      	movs	r1, #100	; 0x64
 80097d4:	fb01 f303 	mul.w	r3, r1, r3
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	3332      	adds	r3, #50	; 0x32
 80097de:	4a0a      	ldr	r2, [pc, #40]	; (8009808 <UART_SetConfig+0x270>)
 80097e0:	fba2 2303 	umull	r2, r3, r2, r3
 80097e4:	095b      	lsrs	r3, r3, #5
 80097e6:	f003 0207 	and.w	r2, r3, #7
 80097ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4432      	add	r2, r6
 80097f2:	609a      	str	r2, [r3, #8]
 80097f4:	e288      	b.n	8009d08 <UART_SetConfig+0x770>
 80097f6:	bf00      	nop
 80097f8:	40011000 	.word	0x40011000
 80097fc:	40011400 	.word	0x40011400
 8009800:	40011800 	.word	0x40011800
 8009804:	40011c00 	.word	0x40011c00
 8009808:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800980c:	f7fd fd74 	bl	80072f8 <HAL_RCC_GetPCLK1Freq>
 8009810:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009818:	461c      	mov	r4, r3
 800981a:	f04f 0500 	mov.w	r5, #0
 800981e:	4622      	mov	r2, r4
 8009820:	462b      	mov	r3, r5
 8009822:	1891      	adds	r1, r2, r2
 8009824:	65b9      	str	r1, [r7, #88]	; 0x58
 8009826:	415b      	adcs	r3, r3
 8009828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800982a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800982e:	1912      	adds	r2, r2, r4
 8009830:	eb45 0303 	adc.w	r3, r5, r3
 8009834:	f04f 0000 	mov.w	r0, #0
 8009838:	f04f 0100 	mov.w	r1, #0
 800983c:	00d9      	lsls	r1, r3, #3
 800983e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009842:	00d0      	lsls	r0, r2, #3
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	1911      	adds	r1, r2, r4
 800984a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800984e:	416b      	adcs	r3, r5
 8009850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	461a      	mov	r2, r3
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	1891      	adds	r1, r2, r2
 8009862:	6539      	str	r1, [r7, #80]	; 0x50
 8009864:	415b      	adcs	r3, r3
 8009866:	657b      	str	r3, [r7, #84]	; 0x54
 8009868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800986c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009870:	f7f7 f9ba 	bl	8000be8 <__aeabi_uldivmod>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4bb9      	ldr	r3, [pc, #740]	; (8009b60 <UART_SetConfig+0x5c8>)
 800987a:	fba3 2302 	umull	r2, r3, r3, r2
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	011e      	lsls	r6, r3, #4
 8009882:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009886:	461c      	mov	r4, r3
 8009888:	f04f 0500 	mov.w	r5, #0
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	1891      	adds	r1, r2, r2
 8009892:	64b9      	str	r1, [r7, #72]	; 0x48
 8009894:	415b      	adcs	r3, r3
 8009896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800989c:	1912      	adds	r2, r2, r4
 800989e:	eb45 0303 	adc.w	r3, r5, r3
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f04f 0100 	mov.w	r1, #0
 80098aa:	00d9      	lsls	r1, r3, #3
 80098ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098b0:	00d0      	lsls	r0, r2, #3
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	1911      	adds	r1, r2, r4
 80098b8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80098bc:	416b      	adcs	r3, r5
 80098be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80098c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	461a      	mov	r2, r3
 80098ca:	f04f 0300 	mov.w	r3, #0
 80098ce:	1891      	adds	r1, r2, r2
 80098d0:	6439      	str	r1, [r7, #64]	; 0x40
 80098d2:	415b      	adcs	r3, r3
 80098d4:	647b      	str	r3, [r7, #68]	; 0x44
 80098d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80098da:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80098de:	f7f7 f983 	bl	8000be8 <__aeabi_uldivmod>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4b9e      	ldr	r3, [pc, #632]	; (8009b60 <UART_SetConfig+0x5c8>)
 80098e8:	fba3 1302 	umull	r1, r3, r3, r2
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	2164      	movs	r1, #100	; 0x64
 80098f0:	fb01 f303 	mul.w	r3, r1, r3
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	3332      	adds	r3, #50	; 0x32
 80098fa:	4a99      	ldr	r2, [pc, #612]	; (8009b60 <UART_SetConfig+0x5c8>)
 80098fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009908:	441e      	add	r6, r3
 800990a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800990e:	4618      	mov	r0, r3
 8009910:	f04f 0100 	mov.w	r1, #0
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	1894      	adds	r4, r2, r2
 800991a:	63bc      	str	r4, [r7, #56]	; 0x38
 800991c:	415b      	adcs	r3, r3
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009924:	1812      	adds	r2, r2, r0
 8009926:	eb41 0303 	adc.w	r3, r1, r3
 800992a:	f04f 0400 	mov.w	r4, #0
 800992e:	f04f 0500 	mov.w	r5, #0
 8009932:	00dd      	lsls	r5, r3, #3
 8009934:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009938:	00d4      	lsls	r4, r2, #3
 800993a:	4622      	mov	r2, r4
 800993c:	462b      	mov	r3, r5
 800993e:	1814      	adds	r4, r2, r0
 8009940:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009944:	414b      	adcs	r3, r1
 8009946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800994a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	461a      	mov	r2, r3
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	1891      	adds	r1, r2, r2
 8009958:	6339      	str	r1, [r7, #48]	; 0x30
 800995a:	415b      	adcs	r3, r3
 800995c:	637b      	str	r3, [r7, #52]	; 0x34
 800995e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009966:	f7f7 f93f 	bl	8000be8 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4b7c      	ldr	r3, [pc, #496]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009970:	fba3 1302 	umull	r1, r3, r3, r2
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	2164      	movs	r1, #100	; 0x64
 8009978:	fb01 f303 	mul.w	r3, r1, r3
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	3332      	adds	r3, #50	; 0x32
 8009982:	4a77      	ldr	r2, [pc, #476]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009984:	fba2 2303 	umull	r2, r3, r2, r3
 8009988:	095b      	lsrs	r3, r3, #5
 800998a:	f003 0207 	and.w	r2, r3, #7
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4432      	add	r2, r6
 8009996:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009998:	e1b6      	b.n	8009d08 <UART_SetConfig+0x770>
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800999a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	4b70      	ldr	r3, [pc, #448]	; (8009b64 <UART_SetConfig+0x5cc>)
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d012      	beq.n	80099cc <UART_SetConfig+0x434>
 80099a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	4b6e      	ldr	r3, [pc, #440]	; (8009b68 <UART_SetConfig+0x5d0>)
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d00c      	beq.n	80099cc <UART_SetConfig+0x434>
 80099b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	4b6c      	ldr	r3, [pc, #432]	; (8009b6c <UART_SetConfig+0x5d4>)
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d006      	beq.n	80099cc <UART_SetConfig+0x434>
 80099be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4b6a      	ldr	r3, [pc, #424]	; (8009b70 <UART_SetConfig+0x5d8>)
 80099c6:	429a      	cmp	r2, r3
 80099c8:	f040 80d4 	bne.w	8009b74 <UART_SetConfig+0x5dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80099cc:	f7fd fca8 	bl	8007320 <HAL_RCC_GetPCLK2Freq>
 80099d0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099d8:	461c      	mov	r4, r3
 80099da:	f04f 0500 	mov.w	r5, #0
 80099de:	4622      	mov	r2, r4
 80099e0:	462b      	mov	r3, r5
 80099e2:	1891      	adds	r1, r2, r2
 80099e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80099e6:	415b      	adcs	r3, r3
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099ee:	1912      	adds	r2, r2, r4
 80099f0:	eb45 0303 	adc.w	r3, r5, r3
 80099f4:	f04f 0000 	mov.w	r0, #0
 80099f8:	f04f 0100 	mov.w	r1, #0
 80099fc:	00d9      	lsls	r1, r3, #3
 80099fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a02:	00d0      	lsls	r0, r2, #3
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	eb12 0a04 	adds.w	sl, r2, r4
 8009a0c:	eb43 0b05 	adc.w	fp, r3, r5
 8009a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f04f 0100 	mov.w	r1, #0
 8009a1c:	f04f 0200 	mov.w	r2, #0
 8009a20:	f04f 0300 	mov.w	r3, #0
 8009a24:	008b      	lsls	r3, r1, #2
 8009a26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a2a:	0082      	lsls	r2, r0, #2
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	4659      	mov	r1, fp
 8009a30:	f7f7 f8da 	bl	8000be8 <__aeabi_uldivmod>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4b49      	ldr	r3, [pc, #292]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a3e:	095b      	lsrs	r3, r3, #5
 8009a40:	011e      	lsls	r6, r3, #4
 8009a42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a46:	4618      	mov	r0, r3
 8009a48:	f04f 0100 	mov.w	r1, #0
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	1894      	adds	r4, r2, r2
 8009a52:	623c      	str	r4, [r7, #32]
 8009a54:	415b      	adcs	r3, r3
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
 8009a58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a5c:	1812      	adds	r2, r2, r0
 8009a5e:	eb41 0303 	adc.w	r3, r1, r3
 8009a62:	f04f 0400 	mov.w	r4, #0
 8009a66:	f04f 0500 	mov.w	r5, #0
 8009a6a:	00dd      	lsls	r5, r3, #3
 8009a6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a70:	00d4      	lsls	r4, r2, #3
 8009a72:	4622      	mov	r2, r4
 8009a74:	462b      	mov	r3, r5
 8009a76:	1814      	adds	r4, r2, r0
 8009a78:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009a7c:	414b      	adcs	r3, r1
 8009a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f04f 0100 	mov.w	r1, #0
 8009a8e:	f04f 0200 	mov.w	r2, #0
 8009a92:	f04f 0300 	mov.w	r3, #0
 8009a96:	008b      	lsls	r3, r1, #2
 8009a98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a9c:	0082      	lsls	r2, r0, #2
 8009a9e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009aa2:	f7f7 f8a1 	bl	8000be8 <__aeabi_uldivmod>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009aac:	fba3 1302 	umull	r1, r3, r3, r2
 8009ab0:	095b      	lsrs	r3, r3, #5
 8009ab2:	2164      	movs	r1, #100	; 0x64
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	011b      	lsls	r3, r3, #4
 8009abc:	3332      	adds	r3, #50	; 0x32
 8009abe:	4a28      	ldr	r2, [pc, #160]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac4:	095b      	lsrs	r3, r3, #5
 8009ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aca:	441e      	add	r6, r3
 8009acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f04f 0100 	mov.w	r1, #0
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	1894      	adds	r4, r2, r2
 8009adc:	61bc      	str	r4, [r7, #24]
 8009ade:	415b      	adcs	r3, r3
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ae6:	1812      	adds	r2, r2, r0
 8009ae8:	eb41 0303 	adc.w	r3, r1, r3
 8009aec:	f04f 0400 	mov.w	r4, #0
 8009af0:	f04f 0500 	mov.w	r5, #0
 8009af4:	00dd      	lsls	r5, r3, #3
 8009af6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009afa:	00d4      	lsls	r4, r2, #3
 8009afc:	4622      	mov	r2, r4
 8009afe:	462b      	mov	r3, r5
 8009b00:	1814      	adds	r4, r2, r0
 8009b02:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009b06:	414b      	adcs	r3, r1
 8009b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f04f 0100 	mov.w	r1, #0
 8009b18:	f04f 0200 	mov.w	r2, #0
 8009b1c:	f04f 0300 	mov.w	r3, #0
 8009b20:	008b      	lsls	r3, r1, #2
 8009b22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b26:	0082      	lsls	r2, r0, #2
 8009b28:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009b2c:	f7f7 f85c 	bl	8000be8 <__aeabi_uldivmod>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009b36:	fba3 1302 	umull	r1, r3, r3, r2
 8009b3a:	095b      	lsrs	r3, r3, #5
 8009b3c:	2164      	movs	r1, #100	; 0x64
 8009b3e:	fb01 f303 	mul.w	r3, r1, r3
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	3332      	adds	r3, #50	; 0x32
 8009b48:	4a05      	ldr	r2, [pc, #20]	; (8009b60 <UART_SetConfig+0x5c8>)
 8009b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4e:	095b      	lsrs	r3, r3, #5
 8009b50:	f003 020f 	and.w	r2, r3, #15
 8009b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4432      	add	r2, r6
 8009b5c:	609a      	str	r2, [r3, #8]
 8009b5e:	e0d3      	b.n	8009d08 <UART_SetConfig+0x770>
 8009b60:	51eb851f 	.word	0x51eb851f
 8009b64:	40011000 	.word	0x40011000
 8009b68:	40011400 	.word	0x40011400
 8009b6c:	40011800 	.word	0x40011800
 8009b70:	40011c00 	.word	0x40011c00
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b74:	f7fd fbc0 	bl	80072f8 <HAL_RCC_GetPCLK1Freq>
 8009b78:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b80:	461c      	mov	r4, r3
 8009b82:	f04f 0500 	mov.w	r5, #0
 8009b86:	4622      	mov	r2, r4
 8009b88:	462b      	mov	r3, r5
 8009b8a:	1891      	adds	r1, r2, r2
 8009b8c:	6139      	str	r1, [r7, #16]
 8009b8e:	415b      	adcs	r3, r3
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009b96:	1912      	adds	r2, r2, r4
 8009b98:	eb45 0303 	adc.w	r3, r5, r3
 8009b9c:	f04f 0000 	mov.w	r0, #0
 8009ba0:	f04f 0100 	mov.w	r1, #0
 8009ba4:	00d9      	lsls	r1, r3, #3
 8009ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009baa:	00d0      	lsls	r0, r2, #3
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	eb12 0804 	adds.w	r8, r2, r4
 8009bb4:	eb43 0905 	adc.w	r9, r3, r5
 8009bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f04f 0100 	mov.w	r1, #0
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	008b      	lsls	r3, r1, #2
 8009bce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009bd2:	0082      	lsls	r2, r0, #2
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f7 f806 	bl	8000be8 <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4b4c      	ldr	r3, [pc, #304]	; (8009d14 <UART_SetConfig+0x77c>)
 8009be2:	fba3 2302 	umull	r2, r3, r3, r2
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	011e      	lsls	r6, r3, #4
 8009bea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f04f 0100 	mov.w	r1, #0
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	1894      	adds	r4, r2, r2
 8009bfa:	60bc      	str	r4, [r7, #8]
 8009bfc:	415b      	adcs	r3, r3
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c04:	1812      	adds	r2, r2, r0
 8009c06:	eb41 0303 	adc.w	r3, r1, r3
 8009c0a:	f04f 0400 	mov.w	r4, #0
 8009c0e:	f04f 0500 	mov.w	r5, #0
 8009c12:	00dd      	lsls	r5, r3, #3
 8009c14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c18:	00d4      	lsls	r4, r2, #3
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	1814      	adds	r4, r2, r0
 8009c20:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009c24:	414b      	adcs	r3, r1
 8009c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f04f 0100 	mov.w	r1, #0
 8009c36:	f04f 0200 	mov.w	r2, #0
 8009c3a:	f04f 0300 	mov.w	r3, #0
 8009c3e:	008b      	lsls	r3, r1, #2
 8009c40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c44:	0082      	lsls	r2, r0, #2
 8009c46:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c4a:	f7f6 ffcd 	bl	8000be8 <__aeabi_uldivmod>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4b30      	ldr	r3, [pc, #192]	; (8009d14 <UART_SetConfig+0x77c>)
 8009c54:	fba3 1302 	umull	r1, r3, r3, r2
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	2164      	movs	r1, #100	; 0x64
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	3332      	adds	r3, #50	; 0x32
 8009c66:	4a2b      	ldr	r2, [pc, #172]	; (8009d14 <UART_SetConfig+0x77c>)
 8009c68:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6c:	095b      	lsrs	r3, r3, #5
 8009c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c72:	441e      	add	r6, r3
 8009c74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f04f 0100 	mov.w	r1, #0
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	1894      	adds	r4, r2, r2
 8009c84:	603c      	str	r4, [r7, #0]
 8009c86:	415b      	adcs	r3, r3
 8009c88:	607b      	str	r3, [r7, #4]
 8009c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c8e:	1812      	adds	r2, r2, r0
 8009c90:	eb41 0303 	adc.w	r3, r1, r3
 8009c94:	f04f 0400 	mov.w	r4, #0
 8009c98:	f04f 0500 	mov.w	r5, #0
 8009c9c:	00dd      	lsls	r5, r3, #3
 8009c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ca2:	00d4      	lsls	r4, r2, #3
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	1814      	adds	r4, r2, r0
 8009caa:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009cae:	414b      	adcs	r3, r1
 8009cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f04f 0100 	mov.w	r1, #0
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	008b      	lsls	r3, r1, #2
 8009cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009cce:	0082      	lsls	r2, r0, #2
 8009cd0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009cd4:	f7f6 ff88 	bl	8000be8 <__aeabi_uldivmod>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <UART_SetConfig+0x77c>)
 8009cde:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	2164      	movs	r1, #100	; 0x64
 8009ce6:	fb01 f303 	mul.w	r3, r1, r3
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	3332      	adds	r3, #50	; 0x32
 8009cf0:	4a08      	ldr	r2, [pc, #32]	; (8009d14 <UART_SetConfig+0x77c>)
 8009cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	f003 020f 	and.w	r2, r3, #15
 8009cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4432      	add	r2, r6
 8009d04:	609a      	str	r2, [r3, #8]
}
 8009d06:	e7ff      	b.n	8009d08 <UART_SetConfig+0x770>
 8009d08:	bf00      	nop
 8009d0a:	37f4      	adds	r7, #244	; 0xf4
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d12:	bf00      	nop
 8009d14:	51eb851f 	.word	0x51eb851f

08009d18 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d30:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4b2f      	ldr	r3, [pc, #188]	; (8009df4 <FSMC_NORSRAM_Init+0xdc>)
 8009d36:	4013      	ands	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009d42:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009d48:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009d4e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009d54:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8009d5a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009d60:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009d66:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009d6c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009d72:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8009d78:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8009d7e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8009d84:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8009d8a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	2b08      	cmp	r3, #8
 8009d98:	d103      	bne.n	8009da2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009db6:	d10a      	bne.n	8009dce <FSMC_NORSRAM_Init+0xb6>
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d006      	beq.n	8009dce <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d006      	beq.n	8009de4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	ffc00480 	.word	0xffc00480

08009df8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e12:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e1a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e26:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009e2e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009e36:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009e40:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	3b02      	subs	r3, #2
 8009e48:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009e4a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e50:	4313      	orrs	r3, r2
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6979      	ldr	r1, [r7, #20]
 8009e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e70:	d10e      	bne.n	8009e90 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e7a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	051b      	lsls	r3, r3, #20
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
	...

08009ea0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eb8:	d122      	bne.n	8009f00 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009ed6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009ede:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009ee6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009eec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6979      	ldr	r1, [r7, #20]
 8009efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009efe:	e005      	b.n	8009f0c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	cff00000 	.word	0xcff00000

08009f20 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009f20:	b084      	sub	sp, #16
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	f107 001c 	add.w	r0, r7, #28
 8009f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009f36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009f38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009f3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009f3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009f42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009f46:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009f4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009f5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	b004      	add	sp, #16
 8009f74:	4770      	bx	lr

08009f76 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2203      	movs	r2, #3
 8009f9c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009f9e:	2002      	movs	r0, #2
 8009fa0:	f7f9 fd2c 	bl	80039fc <HAL_Delay>
  
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0303 	and.w	r3, r3, #3
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fe8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009fee:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009ff4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a004:	f023 030f 	bic.w	r3, r3, #15
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	b2db      	uxtb	r3, r3
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3314      	adds	r3, #20
 800a046:	461a      	mov	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	4413      	add	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
}  
 800a052:	4618      	mov	r0, r3
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a05e:	b480      	push	{r7}
 800a060:	b085      	sub	sp, #20
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a084:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a08a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a090:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0

}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b088      	sub	sp, #32
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff ff74 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a0e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e6:	2110      	movs	r1, #16
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f975 	bl	800a3d8 <SDMMC_GetCmdResp1>
 800a0ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b08a      	sub	sp, #40	; 0x28
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a10a:	2307      	movs	r3, #7
 800a10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a10e:	2340      	movs	r3, #64	; 0x40
 800a110:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a112:	2300      	movs	r3, #0
 800a114:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a11a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11c:	f107 0310 	add.w	r3, r7, #16
 800a120:	4619      	mov	r1, r3
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff ff51 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a128:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12c:	2107      	movs	r1, #7
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 f952 	bl	800a3d8 <SDMMC_GetCmdResp1>
 800a134:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3728      	adds	r7, #40	; 0x28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a15e:	f107 0308 	add.w	r3, r7, #8
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff ff30 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f90c 	bl	800a388 <SDMMC_GetCmdError>
 800a170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a172:	69fb      	ldr	r3, [r7, #28]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a184:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a18a:	2308      	movs	r3, #8
 800a18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a18e:	2340      	movs	r3, #64	; 0x40
 800a190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a19a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a19c:	f107 0308 	add.w	r3, r7, #8
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff ff11 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 faf5 	bl	800a798 <SDMMC_GetCmdResp7>
 800a1ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b088      	sub	sp, #32
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a1c8:	2337      	movs	r3, #55	; 0x37
 800a1ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff fef2 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a1e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ea:	2137      	movs	r1, #55	; 0x37
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f8f3 	bl	800a3d8 <SDMMC_GetCmdResp1>
 800a1f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3720      	adds	r7, #32
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a20e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a214:	2329      	movs	r3, #41	; 0x29
 800a216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a218:	2340      	movs	r3, #64	; 0x40
 800a21a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a21c:	2300      	movs	r3, #0
 800a21e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a226:	f107 0308 	add.w	r3, r7, #8
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff fecc 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fa02 	bl	800a63c <SDMMC_GetCmdResp3>
 800a238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a23a:	69fb      	ldr	r3, [r7, #28]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a252:	2306      	movs	r3, #6
 800a254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a256:	2340      	movs	r3, #64	; 0x40
 800a258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a25a:	2300      	movs	r3, #0
 800a25c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a264:	f107 0308 	add.w	r3, r7, #8
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff fead 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a270:	f241 3288 	movw	r2, #5000	; 0x1388
 800a274:	2106      	movs	r1, #6
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f8ae 	bl	800a3d8 <SDMMC_GetCmdResp1>
 800a27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27e:	69fb      	ldr	r3, [r7, #28]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a294:	2333      	movs	r3, #51	; 0x33
 800a296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a298:	2340      	movs	r3, #64	; 0x40
 800a29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a29c:	2300      	movs	r3, #0
 800a29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2a6:	f107 0308 	add.w	r3, r7, #8
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff fe8c 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a2b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b6:	2133      	movs	r1, #51	; 0x33
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f88d 	bl	800a3d8 <SDMMC_GetCmdResp1>
 800a2be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3720      	adds	r7, #32
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b088      	sub	sp, #32
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2da:	23c0      	movs	r3, #192	; 0xc0
 800a2dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff fe6b 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f95b 	bl	800a5b0 <SDMMC_GetCmdResp2>
 800a2fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3720      	adds	r7, #32
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b088      	sub	sp, #32
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a314:	2309      	movs	r3, #9
 800a316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a318:	23c0      	movs	r3, #192	; 0xc0
 800a31a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a31c:	2300      	movs	r3, #0
 800a31e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a324:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a326:	f107 0308 	add.w	r3, r7, #8
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff fe4c 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f93c 	bl	800a5b0 <SDMMC_GetCmdResp2>
 800a338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a33a:	69fb      	ldr	r3, [r7, #28]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a352:	2303      	movs	r3, #3
 800a354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a356:	2340      	movs	r3, #64	; 0x40
 800a358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a35e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a362:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a364:	f107 0308 	add.w	r3, r7, #8
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fe2d 	bl	8009fca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	2103      	movs	r1, #3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f99b 	bl	800a6b0 <SDMMC_GetCmdResp6>
 800a37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a37c:	69fb      	ldr	r3, [r7, #28]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3720      	adds	r7, #32
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a388:	b490      	push	{r4, r7}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a390:	4b0f      	ldr	r3, [pc, #60]	; (800a3d0 <SDMMC_GetCmdError+0x48>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a0f      	ldr	r2, [pc, #60]	; (800a3d4 <SDMMC_GetCmdError+0x4c>)
 800a396:	fba2 2303 	umull	r2, r3, r2, r3
 800a39a:	0a5b      	lsrs	r3, r3, #9
 800a39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	1e5c      	subs	r4, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3b0:	e009      	b.n	800a3c6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0f2      	beq.n	800a3a4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	22c5      	movs	r2, #197	; 0xc5
 800a3c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc90      	pop	{r4, r7}
 800a3ce:	4770      	bx	lr
 800a3d0:	20000000 	.word	0x20000000
 800a3d4:	10624dd3 	.word	0x10624dd3

0800a3d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b087      	sub	sp, #28
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a3e6:	4b6f      	ldr	r3, [pc, #444]	; (800a5a4 <SDMMC_GetCmdResp1+0x1cc>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a6f      	ldr	r2, [pc, #444]	; (800a5a8 <SDMMC_GetCmdResp1+0x1d0>)
 800a3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f0:	0a5b      	lsrs	r3, r3, #9
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	1e5c      	subs	r4, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a404:	e0c9      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0f0      	beq.n	800a3f8 <SDMMC_GetCmdResp1+0x20>
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1eb      	bne.n	800a3f8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d004      	beq.n	800a436 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2204      	movs	r2, #4
 800a430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a432:	2304      	movs	r3, #4
 800a434:	e0b1      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a448:	2301      	movs	r3, #1
 800a44a:	e0a6      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	22c5      	movs	r2, #197	; 0xc5
 800a450:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7ff fde3 	bl	800a01e <SDIO_GetCommandResponse>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	7afb      	ldrb	r3, [r7, #11]
 800a45e:	4293      	cmp	r3, r2
 800a460:	d001      	beq.n	800a466 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a462:	2301      	movs	r3, #1
 800a464:	e099      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a466:	2100      	movs	r1, #0
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fde5 	bl	800a038 <SDIO_GetResponse>
 800a46e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	4b4e      	ldr	r3, [pc, #312]	; (800a5ac <SDMMC_GetCmdResp1+0x1d4>)
 800a474:	4013      	ands	r3, r2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e08d      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	da02      	bge.n	800a48a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a488:	e087      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a494:	2340      	movs	r3, #64	; 0x40
 800a496:	e080      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a4a2:	2380      	movs	r3, #128	; 0x80
 800a4a4:	e079      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a4b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4b4:	e071      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4c4:	e069      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4d4:	e061      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4e4:	e059      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4f4:	e051      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a504:	e049      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a514:	e041      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a524:	e039      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a534:	e031      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a544:	e029      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a554:	e021      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a564:	e019      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a574:	e011      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a584:	e009      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f003 0308 	and.w	r3, r3, #8
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a590:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a594:	e001      	b.n	800a59a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd90      	pop	{r4, r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20000000 	.word	0x20000000
 800a5a8:	10624dd3 	.word	0x10624dd3
 800a5ac:	fdffe008 	.word	0xfdffe008

0800a5b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a5b0:	b490      	push	{r4, r7}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5b8:	4b1e      	ldr	r3, [pc, #120]	; (800a634 <SDMMC_GetCmdResp2+0x84>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a1e      	ldr	r2, [pc, #120]	; (800a638 <SDMMC_GetCmdResp2+0x88>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	0a5b      	lsrs	r3, r3, #9
 800a5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	1e5c      	subs	r4, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5d8:	e026      	b.n	800a628 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0f0      	beq.n	800a5cc <SDMMC_GetCmdResp2+0x1c>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1eb      	bne.n	800a5cc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2204      	movs	r2, #4
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a606:	2304      	movs	r3, #4
 800a608:	e00e      	b.n	800a628 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e003      	b.n	800a628 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	22c5      	movs	r2, #197	; 0xc5
 800a624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bc90      	pop	{r4, r7}
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	20000000 	.word	0x20000000
 800a638:	10624dd3 	.word	0x10624dd3

0800a63c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a63c:	b490      	push	{r4, r7}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a644:	4b18      	ldr	r3, [pc, #96]	; (800a6a8 <SDMMC_GetCmdResp3+0x6c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a18      	ldr	r2, [pc, #96]	; (800a6ac <SDMMC_GetCmdResp3+0x70>)
 800a64a:	fba2 2303 	umull	r2, r3, r2, r3
 800a64e:	0a5b      	lsrs	r3, r3, #9
 800a650:	f241 3288 	movw	r2, #5000	; 0x1388
 800a654:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a658:	4623      	mov	r3, r4
 800a65a:	1e5c      	subs	r4, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d102      	bne.n	800a666 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a660:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a664:	e01b      	b.n	800a69e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0f0      	beq.n	800a658 <SDMMC_GetCmdResp3+0x1c>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1eb      	bne.n	800a658 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d004      	beq.n	800a696 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2204      	movs	r2, #4
 800a690:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a692:	2304      	movs	r3, #4
 800a694:	e003      	b.n	800a69e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	22c5      	movs	r2, #197	; 0xc5
 800a69a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bc90      	pop	{r4, r7}
 800a6a6:	4770      	bx	lr
 800a6a8:	20000000 	.word	0x20000000
 800a6ac:	10624dd3 	.word	0x10624dd3

0800a6b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6be:	4b34      	ldr	r3, [pc, #208]	; (800a790 <SDMMC_GetCmdResp6+0xe0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a34      	ldr	r2, [pc, #208]	; (800a794 <SDMMC_GetCmdResp6+0xe4>)
 800a6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c8:	0a5b      	lsrs	r3, r3, #9
 800a6ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	1e5c      	subs	r4, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6de:	e052      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0f0      	beq.n	800a6d2 <SDMMC_GetCmdResp6+0x22>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1eb      	bne.n	800a6d2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	f003 0304 	and.w	r3, r3, #4
 800a702:	2b00      	cmp	r3, #0
 800a704:	d004      	beq.n	800a710 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2204      	movs	r2, #4
 800a70a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a70c:	2304      	movs	r3, #4
 800a70e:	e03a      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2201      	movs	r2, #1
 800a720:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a722:	2301      	movs	r3, #1
 800a724:	e02f      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fc79 	bl	800a01e <SDIO_GetCommandResponse>
 800a72c:	4603      	mov	r3, r0
 800a72e:	461a      	mov	r2, r3
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	4293      	cmp	r3, r2
 800a734:	d001      	beq.n	800a73a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a736:	2301      	movs	r3, #1
 800a738:	e025      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	22c5      	movs	r2, #197	; 0xc5
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a740:	2100      	movs	r1, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7ff fc78 	bl	800a038 <SDIO_GetResponse>
 800a748:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	0c1b      	lsrs	r3, r3, #16
 800a758:	b29a      	uxth	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a75e:	2300      	movs	r3, #0
 800a760:	e011      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a76c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a770:	e009      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a77c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a780:	e001      	b.n	800a786 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a786:	4618      	mov	r0, r3
 800a788:	371c      	adds	r7, #28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd90      	pop	{r4, r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000000 	.word	0x20000000
 800a794:	10624dd3 	.word	0x10624dd3

0800a798 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a798:	b490      	push	{r4, r7}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7a0:	4b21      	ldr	r3, [pc, #132]	; (800a828 <SDMMC_GetCmdResp7+0x90>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a21      	ldr	r2, [pc, #132]	; (800a82c <SDMMC_GetCmdResp7+0x94>)
 800a7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7aa:	0a5b      	lsrs	r3, r3, #9
 800a7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	1e5c      	subs	r4, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7c0:	e02c      	b.n	800a81c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <SDMMC_GetCmdResp7+0x1c>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1eb      	bne.n	800a7b4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d004      	beq.n	800a7f2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2204      	movs	r2, #4
 800a7ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7ee:	2304      	movs	r3, #4
 800a7f0:	e014      	b.n	800a81c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a804:	2301      	movs	r3, #1
 800a806:	e009      	b.n	800a81c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2240      	movs	r2, #64	; 0x40
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a81a:	2300      	movs	r3, #0
  
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bc90      	pop	{r4, r7}
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	20000000 	.word	0x20000000
 800a82c:	10624dd3 	.word	0x10624dd3

0800a830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a830:	b084      	sub	sp, #16
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	f107 001c 	add.w	r0, r7, #28
 800a83e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	2b01      	cmp	r3, #1
 800a846:	d122      	bne.n	800a88e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a872:	2b01      	cmp	r3, #1
 800a874:	d105      	bne.n	800a882 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f94a 	bl	800ab1c <USB_CoreReset>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]
 800a88c:	e01a      	b.n	800a8c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f93e 	bl	800ab1c <USB_CoreReset>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d106      	bne.n	800a8b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	639a      	str	r2, [r3, #56]	; 0x38
 800a8b6:	e005      	b.n	800a8c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10b      	bne.n	800a8e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f043 0206 	orr.w	r2, r3, #6
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f043 0220 	orr.w	r2, r3, #32
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8ee:	b004      	add	sp, #16
 800a8f0:	4770      	bx	lr

0800a8f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f043 0201 	orr.w	r2, r3, #1
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f023 0201 	bic.w	r2, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d106      	bne.n	800a962 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60da      	str	r2, [r3, #12]
 800a960:	e00b      	b.n	800a97a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a962:	78fb      	ldrb	r3, [r7, #3]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d106      	bne.n	800a976 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	60da      	str	r2, [r3, #12]
 800a974:	e001      	b.n	800a97a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e003      	b.n	800a982 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a97a:	2032      	movs	r0, #50	; 0x32
 800a97c:	f7f9 f83e 	bl	80039fc <HAL_Delay>

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	019b      	lsls	r3, r3, #6
 800a99e:	f043 0220 	orr.w	r2, r3, #32
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <USB_FlushTxFifo+0x48>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d901      	bls.n	800a9b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e006      	b.n	800a9c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f003 0320 	and.w	r3, r3, #32
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	d0f0      	beq.n	800a9a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	00030d40 	.word	0x00030d40

0800a9d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2210      	movs	r2, #16
 800a9e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4a09      	ldr	r2, [pc, #36]	; (800aa18 <USB_FlushRxFifo+0x40>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d901      	bls.n	800a9fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e006      	b.n	800aa0a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f003 0310 	and.w	r3, r3, #16
 800aa04:	2b10      	cmp	r3, #16
 800aa06:	d0f0      	beq.n	800a9ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	00030d40 	.word	0x00030d40

0800aa1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b089      	sub	sp, #36	; 0x24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4611      	mov	r1, r2
 800aa28:	461a      	mov	r2, r3
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	71fb      	strb	r3, [r7, #7]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800aa3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d11a      	bne.n	800aa78 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aa42:	88bb      	ldrh	r3, [r7, #4]
 800aa44:	3303      	adds	r3, #3
 800aa46:	089b      	lsrs	r3, r3, #2
 800aa48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	e00f      	b.n	800aa70 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	031a      	lsls	r2, r3, #12
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	3304      	adds	r3, #4
 800aa68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d3eb      	bcc.n	800aa50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3724      	adds	r7, #36	; 0x24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b089      	sub	sp, #36	; 0x24
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	4613      	mov	r3, r2
 800aa92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800aa9c:	88fb      	ldrh	r3, [r7, #6]
 800aa9e:	3303      	adds	r3, #3
 800aaa0:	089b      	lsrs	r3, r3, #2
 800aaa2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61bb      	str	r3, [r7, #24]
 800aaa8:	e00b      	b.n	800aac2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	601a      	str	r2, [r3, #0]
    pDest++;
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	3304      	adds	r3, #4
 800aaba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	3301      	adds	r3, #1
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d3ef      	bcc.n	800aaaa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aaca:	69fb      	ldr	r3, [r7, #28]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3724      	adds	r7, #36	; 0x24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4013      	ands	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	f003 0301 	and.w	r3, r3, #1
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
	...

0800ab1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4a13      	ldr	r2, [pc, #76]	; (800ab80 <USB_CoreReset+0x64>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d901      	bls.n	800ab3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e01b      	b.n	800ab72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	daf2      	bge.n	800ab28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f043 0201 	orr.w	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <USB_CoreReset+0x64>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e006      	b.n	800ab72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d0f0      	beq.n	800ab52 <USB_CoreReset+0x36>

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	00030d40 	.word	0x00030d40

0800ab84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab84:	b084      	sub	sp, #16
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	f107 001c 	add.w	r0, r7, #28
 800ab92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aba0:	461a      	mov	r2, r3
 800aba2:	2300      	movs	r3, #0
 800aba4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d018      	beq.n	800abfc <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d10a      	bne.n	800abe6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abde:	f043 0304 	orr.w	r3, r3, #4
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	e014      	b.n	800ac10 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abf4:	f023 0304 	bic.w	r3, r3, #4
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	e009      	b.n	800ac10 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac0a:	f023 0304 	bic.w	r3, r3, #4
 800ac0e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ac10:	2110      	movs	r1, #16
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff feba 	bl	800a98c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7ff fedd 	bl	800a9d8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e015      	b.n	800ac50 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac30:	461a      	mov	r2, r3
 800ac32:	f04f 33ff 	mov.w	r3, #4294967295
 800ac36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac44:	461a      	mov	r2, r3
 800ac46:	2300      	movs	r3, #0
 800ac48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d3e5      	bcc.n	800ac24 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ac58:	2101      	movs	r1, #1
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 f8ac 	bl	800adb8 <USB_DriveVbus>

  HAL_Delay(200U);
 800ac60:	20c8      	movs	r0, #200	; 0xc8
 800ac62:	f7f8 fecb 	bl	80039fc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac72:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac86:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a14      	ldr	r2, [pc, #80]	; (800acdc <USB_HostInit+0x158>)
 800ac8c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a13      	ldr	r2, [pc, #76]	; (800ace0 <USB_HostInit+0x15c>)
 800ac92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ac96:	e009      	b.n	800acac <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2280      	movs	r2, #128	; 0x80
 800ac9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <USB_HostInit+0x160>)
 800aca2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a10      	ldr	r2, [pc, #64]	; (800ace8 <USB_HostInit+0x164>)
 800aca8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d105      	bne.n	800acbe <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	f043 0210 	orr.w	r2, r3, #16
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	4b0a      	ldr	r3, [pc, #40]	; (800acec <USB_HostInit+0x168>)
 800acc4:	4313      	orrs	r3, r2
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acd6:	b004      	add	sp, #16
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	01000200 	.word	0x01000200
 800ace0:	00e00300 	.word	0x00e00300
 800ace4:	00600080 	.word	0x00600080
 800ace8:	004000e0 	.word	0x004000e0
 800acec:	a3200008 	.word	0xa3200008

0800acf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d107      	bne.n	800ad42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad38:	461a      	mov	r2, r3
 800ad3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ad3e:	6053      	str	r3, [r2, #4]
 800ad40:	e009      	b.n	800ad56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d106      	bne.n	800ad56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ad84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ad94:	2064      	movs	r0, #100	; 0x64
 800ad96:	f7f8 fe31 	bl	80039fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ada2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ada6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ada8:	200a      	movs	r0, #10
 800adaa:	f7f8 fe27 	bl	80039fc <HAL_Delay>

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800addc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <USB_DriveVbus+0x44>
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d106      	bne.n	800adfc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800adf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adfa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae06:	d109      	bne.n	800ae1c <USB_DriveVbus+0x64>
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ae16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	0c5b      	lsrs	r3, r3, #17
 800ae48:	f003 0303 	and.w	r3, r3, #3
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	b29b      	uxth	r3, r3
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3714      	adds	r7, #20
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
	...

0800ae7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b087      	sub	sp, #28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	4608      	mov	r0, r1
 800ae86:	4611      	mov	r1, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	70fb      	strb	r3, [r7, #3]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	70bb      	strb	r3, [r7, #2]
 800ae92:	4613      	mov	r3, r2
 800ae94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeaa:	461a      	mov	r2, r3
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aeb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d87e      	bhi.n	800afb8 <USB_HC_Init+0x13c>
 800aeba:	a201      	add	r2, pc, #4	; (adr r2, 800aec0 <USB_HC_Init+0x44>)
 800aebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec0:	0800aed1 	.word	0x0800aed1
 800aec4:	0800af7b 	.word	0x0800af7b
 800aec8:	0800aed1 	.word	0x0800aed1
 800aecc:	0800af3d 	.word	0x0800af3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aedc:	461a      	mov	r2, r3
 800aede:	f240 439d 	movw	r3, #1181	; 0x49d
 800aee2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aee4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da10      	bge.n	800af0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aeec:	78fb      	ldrb	r3, [r7, #3]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	440a      	add	r2, r1
 800af02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af0a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800af0c:	e057      	b.n	800afbe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af16:	2b00      	cmp	r3, #0
 800af18:	d051      	beq.n	800afbe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800af1a:	78fb      	ldrb	r3, [r7, #3]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	4413      	add	r3, r2
 800af22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	78fa      	ldrb	r2, [r7, #3]
 800af2a:	0151      	lsls	r1, r2, #5
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	440a      	add	r2, r1
 800af30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800af38:	60d3      	str	r3, [r2, #12]
      break;
 800af3a:	e040      	b.n	800afbe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af3c:	78fb      	ldrb	r3, [r7, #3]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4413      	add	r3, r2
 800af44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af48:	461a      	mov	r2, r3
 800af4a:	f240 639d 	movw	r3, #1693	; 0x69d
 800af4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af54:	2b00      	cmp	r3, #0
 800af56:	da34      	bge.n	800afc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	78fa      	ldrb	r2, [r7, #3]
 800af68:	0151      	lsls	r1, r2, #5
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	440a      	add	r2, r1
 800af6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af76:	60d3      	str	r3, [r2, #12]
      }

      break;
 800af78:	e023      	b.n	800afc2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4413      	add	r3, r2
 800af82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af86:	461a      	mov	r2, r3
 800af88:	f240 2325 	movw	r3, #549	; 0x225
 800af8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af92:	2b00      	cmp	r3, #0
 800af94:	da17      	bge.n	800afc6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	015a      	lsls	r2, r3, #5
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	0151      	lsls	r1, r2, #5
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	440a      	add	r2, r1
 800afac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800afb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800afb6:	e006      	b.n	800afc6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	75fb      	strb	r3, [r7, #23]
      break;
 800afbc:	e004      	b.n	800afc8 <USB_HC_Init+0x14c>
      break;
 800afbe:	bf00      	nop
 800afc0:	e002      	b.n	800afc8 <USB_HC_Init+0x14c>
      break;
 800afc2:	bf00      	nop
 800afc4:	e000      	b.n	800afc8 <USB_HC_Init+0x14c>
      break;
 800afc6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	f003 030f 	and.w	r3, r3, #15
 800afd6:	2101      	movs	r1, #1
 800afd8:	fa01 f303 	lsl.w	r3, r1, r3
 800afdc:	68b9      	ldr	r1, [r7, #8]
 800afde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800afe2:	4313      	orrs	r3, r2
 800afe4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800aff2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da03      	bge.n	800b002 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800affa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800affe:	613b      	str	r3, [r7, #16]
 800b000:	e001      	b.n	800b006 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d103      	bne.n	800b016 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b00e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	e001      	b.n	800b01a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b01a:	787b      	ldrb	r3, [r7, #1]
 800b01c:	059b      	lsls	r3, r3, #22
 800b01e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b022:	78bb      	ldrb	r3, [r7, #2]
 800b024:	02db      	lsls	r3, r3, #11
 800b026:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b02a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b02c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b030:	049b      	lsls	r3, r3, #18
 800b032:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b036:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b03a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b03e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	0159      	lsls	r1, r3, #5
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	440b      	add	r3, r1
 800b04c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b050:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b056:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b058:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d10f      	bne.n	800b080 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	4413      	add	r3, r2
 800b068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	78fa      	ldrb	r2, [r7, #3]
 800b070:	0151      	lsls	r1, r2, #5
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	440a      	add	r2, r1
 800b076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b07a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b07e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b080:	7dfb      	ldrb	r3, [r7, #23]
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop

0800b090 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08c      	sub	sp, #48	; 0x30
 800b094:	af02      	add	r7, sp, #8
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	785b      	ldrb	r3, [r3, #1]
 800b0a6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d028      	beq.n	800b10c <USB_HC_StartXfer+0x7c>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	791b      	ldrb	r3, [r3, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d124      	bne.n	800b10c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10b      	bne.n	800b0e0 <USB_HC_StartXfer+0x50>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	795b      	ldrb	r3, [r3, #5]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d107      	bne.n	800b0e0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 fa2e 	bl	800b538 <USB_DoPing>
      return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e113      	b.n	800b308 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d112      	bne.n	800b10c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	69fa      	ldr	r2, [r7, #28]
 800b0f6:	0151      	lsls	r1, r2, #5
 800b0f8:	6a3a      	ldr	r2, [r7, #32]
 800b0fa:	440a      	add	r2, r1
 800b0fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b100:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b104:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2200      	movs	r2, #0
 800b10a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d018      	beq.n	800b146 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	8912      	ldrh	r2, [r2, #8]
 800b11c:	4413      	add	r3, r2
 800b11e:	3b01      	subs	r3, #1
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	8912      	ldrh	r2, [r2, #8]
 800b124:	fbb3 f3f2 	udiv	r3, r3, r2
 800b128:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b12a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b12c:	8b7b      	ldrh	r3, [r7, #26]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d90b      	bls.n	800b14a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b132:	8b7b      	ldrh	r3, [r7, #26]
 800b134:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	8912      	ldrh	r2, [r2, #8]
 800b13c:	fb02 f203 	mul.w	r2, r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	611a      	str	r2, [r3, #16]
 800b144:	e001      	b.n	800b14a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b146:	2301      	movs	r3, #1
 800b148:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	78db      	ldrb	r3, [r3, #3]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d006      	beq.n	800b160 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	8912      	ldrh	r2, [r2, #8]
 800b158:	fb02 f203 	mul.w	r2, r2, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b16a:	04d9      	lsls	r1, r3, #19
 800b16c:	4b68      	ldr	r3, [pc, #416]	; (800b310 <USB_HC_StartXfer+0x280>)
 800b16e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b170:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	7a9b      	ldrb	r3, [r3, #10]
 800b176:	075b      	lsls	r3, r3, #29
 800b178:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b17c:	69f9      	ldr	r1, [r7, #28]
 800b17e:	0148      	lsls	r0, r1, #5
 800b180:	6a39      	ldr	r1, [r7, #32]
 800b182:	4401      	add	r1, r0
 800b184:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b188:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b18a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d009      	beq.n	800b1a6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	68d9      	ldr	r1, [r3, #12]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a2:	460a      	mov	r2, r1
 800b1a4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	bf0c      	ite	eq
 800b1b6:	2301      	moveq	r3, #1
 800b1b8:	2300      	movne	r3, #0
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69fa      	ldr	r2, [r7, #28]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	6a3a      	ldr	r2, [r7, #32]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1dc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	7e7b      	ldrb	r3, [r7, #25]
 800b1ee:	075b      	lsls	r3, r3, #29
 800b1f0:	69f9      	ldr	r1, [r7, #28]
 800b1f2:	0148      	lsls	r0, r1, #5
 800b1f4:	6a39      	ldr	r1, [r7, #32]
 800b1f6:	4401      	add	r1, r0
 800b1f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	4413      	add	r3, r2
 800b208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a41      	ldr	r2, [pc, #260]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b210:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b212:	4b40      	ldr	r3, [pc, #256]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b21a:	4a3e      	ldr	r2, [pc, #248]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b21c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	78db      	ldrb	r3, [r3, #3]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b226:	4b3b      	ldr	r3, [pc, #236]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b22e:	4a39      	ldr	r2, [pc, #228]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	e005      	b.n	800b240 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b234:	4b37      	ldr	r3, [pc, #220]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b23c:	4a35      	ldr	r2, [pc, #212]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b23e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b240:	4b34      	ldr	r3, [pc, #208]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b248:	4a32      	ldr	r2, [pc, #200]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b24a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	4413      	add	r3, r2
 800b254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b258:	461a      	mov	r2, r3
 800b25a:	4b2e      	ldr	r3, [pc, #184]	; (800b314 <USB_HC_StartXfer+0x284>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	e04e      	b.n	800b308 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	78db      	ldrb	r3, [r3, #3]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d149      	bne.n	800b306 <USB_HC_StartXfer+0x276>
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d045      	beq.n	800b306 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	79db      	ldrb	r3, [r3, #7]
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d830      	bhi.n	800b2e4 <USB_HC_StartXfer+0x254>
 800b282:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <USB_HC_StartXfer+0x1f8>)
 800b284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b288:	0800b299 	.word	0x0800b299
 800b28c:	0800b2bd 	.word	0x0800b2bd
 800b290:	0800b299 	.word	0x0800b299
 800b294:	0800b2bd 	.word	0x0800b2bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	3303      	adds	r3, #3
 800b29e:	089b      	lsrs	r3, r3, #2
 800b2a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b2a2:	8afa      	ldrh	r2, [r7, #22]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d91c      	bls.n	800b2e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	f043 0220 	orr.w	r2, r3, #32
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800b2ba:	e015      	b.n	800b2e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	3303      	adds	r3, #3
 800b2c2:	089b      	lsrs	r3, r3, #2
 800b2c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b2c6:	8afa      	ldrh	r2, [r7, #22]
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d90a      	bls.n	800b2ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	619a      	str	r2, [r3, #24]
        }
        break;
 800b2e2:	e003      	b.n	800b2ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b2e4:	bf00      	nop
 800b2e6:	e002      	b.n	800b2ee <USB_HC_StartXfer+0x25e>
        break;
 800b2e8:	bf00      	nop
 800b2ea:	e000      	b.n	800b2ee <USB_HC_StartXfer+0x25e>
        break;
 800b2ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	68d9      	ldr	r1, [r3, #12]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	785a      	ldrb	r2, [r3, #1]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	9000      	str	r0, [sp, #0]
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff fb8b 	bl	800aa1c <USB_WritePacket>
  }

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3728      	adds	r7, #40	; 0x28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	1ff80000 	.word	0x1ff80000
 800b314:	20001444 	.word	0x20001444

0800b318 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	b29b      	uxth	r3, r3
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b087      	sub	sp, #28
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	460b      	mov	r3, r1
 800b344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	0c9b      	lsrs	r3, r3, #18
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <USB_HC_Halt+0x3a>
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d16c      	bne.n	800b44e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	0151      	lsls	r1, r2, #5
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	440a      	add	r2, r1
 800b38a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b38e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b392:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d143      	bne.n	800b428 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	0151      	lsls	r1, r2, #5
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	440a      	add	r2, r1
 800b3b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	0151      	lsls	r1, r2, #5
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3fe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	3301      	adds	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b40c:	d81d      	bhi.n	800b44a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	4413      	add	r3, r2
 800b416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b424:	d0ec      	beq.n	800b400 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b426:	e080      	b.n	800b52a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	015a      	lsls	r2, r3, #5
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	0151      	lsls	r1, r2, #5
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	440a      	add	r2, r1
 800b43e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b446:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b448:	e06f      	b.n	800b52a <USB_HC_Halt+0x1f0>
          break;
 800b44a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b44c:	e06d      	b.n	800b52a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	4413      	add	r3, r2
 800b456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	0151      	lsls	r1, r2, #5
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	440a      	add	r2, r1
 800b464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b46c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d143      	bne.n	800b506 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	4413      	add	r3, r2
 800b486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	0151      	lsls	r1, r2, #5
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	440a      	add	r2, r1
 800b494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b49c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	0151      	lsls	r1, r2, #5
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	440a      	add	r2, r1
 800b4b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	0151      	lsls	r1, r2, #5
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	440a      	add	r2, r1
 800b4d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4dc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4ea:	d81d      	bhi.n	800b528 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b502:	d0ec      	beq.n	800b4de <USB_HC_Halt+0x1a4>
 800b504:	e011      	b.n	800b52a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	0151      	lsls	r1, r2, #5
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	440a      	add	r2, r1
 800b51c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	e000      	b.n	800b52a <USB_HC_Halt+0x1f0>
          break;
 800b528:	bf00      	nop
    }
  }

  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	371c      	adds	r7, #28
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b54c:	2301      	movs	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	04da      	lsls	r2, r3, #19
 800b554:	4b15      	ldr	r3, [pc, #84]	; (800b5ac <USB_DoPing+0x74>)
 800b556:	4013      	ands	r3, r2
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	0151      	lsls	r1, r2, #5
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	440a      	add	r2, r1
 800b560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b568:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	4413      	add	r3, r2
 800b572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b580:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b588:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	015a      	lsls	r2, r3, #5
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	4413      	add	r3, r2
 800b592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b596:	461a      	mov	r2, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	1ff80000 	.word	0x1ff80000

0800b5b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7ff f9a7 	bl	800a914 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b5c6:	2110      	movs	r1, #16
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff f9df 	bl	800a98c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff fa02 	bl	800a9d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	e01f      	b.n	800b61a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b600:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b60e:	461a      	mov	r2, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	3301      	adds	r3, #1
 800b618:	613b      	str	r3, [r7, #16]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	2b0f      	cmp	r3, #15
 800b61e:	d9dc      	bls.n	800b5da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b620:	2300      	movs	r3, #0
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	e034      	b.n	800b690 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b63c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b644:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b64c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b65a:	461a      	mov	r2, r3
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	3301      	adds	r3, #1
 800b664:	617b      	str	r3, [r7, #20]
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b66c:	d80c      	bhi.n	800b688 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4413      	add	r3, r2
 800b676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b684:	d0ec      	beq.n	800b660 <USB_StopHost+0xb0>
 800b686:	e000      	b.n	800b68a <USB_StopHost+0xda>
        break;
 800b688:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	3301      	adds	r3, #1
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b0f      	cmp	r3, #15
 800b694:	d9c7      	bls.n	800b626 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b69c:	461a      	mov	r2, r3
 800b69e:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7ff f920 	bl	800a8f2 <USB_EnableGlobalInt>

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b6bc:	b590      	push	{r4, r7, lr}
 800b6be:	b089      	sub	sp, #36	; 0x24
 800b6c0:	af04      	add	r7, sp, #16
 800b6c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fcb2 	bl	800c034 <USBH_FindInterface>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
 800b6d6:	2bff      	cmp	r3, #255	; 0xff
 800b6d8:	d002      	beq.n	800b6e0 <USBH_CDC_InterfaceInit+0x24>
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d901      	bls.n	800b6e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e13d      	b.n	800b960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fc87 	bl	800bffc <USBH_SelectInterface>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e131      	b.n	800b960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b702:	2050      	movs	r0, #80	; 0x50
 800b704:	f007 f8b4 	bl	8012870 <malloc>
 800b708:	4603      	mov	r3, r0
 800b70a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b712:	69db      	ldr	r3, [r3, #28]
 800b714:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d101      	bne.n	800b720 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b71c:	2302      	movs	r3, #2
 800b71e:	e11f      	b.n	800b960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b720:	2250      	movs	r2, #80	; 0x50
 800b722:	2100      	movs	r1, #0
 800b724:	68b8      	ldr	r0, [r7, #8]
 800b726:	f007 f8db 	bl	80128e0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	211a      	movs	r1, #26
 800b730:	fb01 f303 	mul.w	r3, r1, r3
 800b734:	4413      	add	r3, r2
 800b736:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b25b      	sxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	da15      	bge.n	800b76e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b742:	7bfb      	ldrb	r3, [r7, #15]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	211a      	movs	r1, #26
 800b748:	fb01 f303 	mul.w	r3, r1, r3
 800b74c:	4413      	add	r3, r2
 800b74e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	211a      	movs	r1, #26
 800b75e:	fb01 f303 	mul.w	r3, r1, r3
 800b762:	4413      	add	r3, r2
 800b764:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b768:	881a      	ldrh	r2, [r3, #0]
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	785b      	ldrb	r3, [r3, #1]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f002 f88c 	bl	800d892 <USBH_AllocPipe>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	7819      	ldrb	r1, [r3, #0]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	7858      	ldrb	r0, [r3, #1]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	8952      	ldrh	r2, [r2, #10]
 800b79a:	9202      	str	r2, [sp, #8]
 800b79c:	2203      	movs	r2, #3
 800b79e:	9201      	str	r2, [sp, #4]
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	4623      	mov	r3, r4
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f002 f844 	bl	800d834 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f005 ff4f 	bl	8011658 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2200      	movs	r2, #0
 800b7be:	210a      	movs	r1, #10
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fc37 	bl	800c034 <USBH_FindInterface>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	2bff      	cmp	r3, #255	; 0xff
 800b7ce:	d002      	beq.n	800b7d6 <USBH_CDC_InterfaceInit+0x11a>
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d901      	bls.n	800b7da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e0c2      	b.n	800b960 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	211a      	movs	r1, #26
 800b7e0:	fb01 f303 	mul.w	r3, r1, r3
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	b25b      	sxtb	r3, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da16      	bge.n	800b820 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	211a      	movs	r1, #26
 800b7f8:	fb01 f303 	mul.w	r3, r1, r3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b802:	781a      	ldrb	r2, [r3, #0]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	211a      	movs	r1, #26
 800b80e:	fb01 f303 	mul.w	r3, r1, r3
 800b812:	4413      	add	r3, r2
 800b814:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b818:	881a      	ldrh	r2, [r3, #0]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	835a      	strh	r2, [r3, #26]
 800b81e:	e015      	b.n	800b84c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b820:	7bfb      	ldrb	r3, [r7, #15]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	211a      	movs	r1, #26
 800b826:	fb01 f303 	mul.w	r3, r1, r3
 800b82a:	4413      	add	r3, r2
 800b82c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b830:	781a      	ldrb	r2, [r3, #0]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	211a      	movs	r1, #26
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	4413      	add	r3, r2
 800b842:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b846:	881a      	ldrh	r2, [r3, #0]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	211a      	movs	r1, #26
 800b852:	fb01 f303 	mul.w	r3, r1, r3
 800b856:	4413      	add	r3, r2
 800b858:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	b25b      	sxtb	r3, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	da16      	bge.n	800b892 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	211a      	movs	r1, #26
 800b86a:	fb01 f303 	mul.w	r3, r1, r3
 800b86e:	4413      	add	r3, r2
 800b870:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b874:	781a      	ldrb	r2, [r3, #0]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	211a      	movs	r1, #26
 800b880:	fb01 f303 	mul.w	r3, r1, r3
 800b884:	4413      	add	r3, r2
 800b886:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b88a:	881a      	ldrh	r2, [r3, #0]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	835a      	strh	r2, [r3, #26]
 800b890:	e015      	b.n	800b8be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b892:	7bfb      	ldrb	r3, [r7, #15]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	211a      	movs	r1, #26
 800b898:	fb01 f303 	mul.w	r3, r1, r3
 800b89c:	4413      	add	r3, r2
 800b89e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b8a2:	781a      	ldrb	r2, [r3, #0]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	211a      	movs	r1, #26
 800b8ae:	fb01 f303 	mul.w	r3, r1, r3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b8b8:	881a      	ldrh	r2, [r3, #0]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	7b9b      	ldrb	r3, [r3, #14]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 ffe4 	bl	800d892 <USBH_AllocPipe>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	7bdb      	ldrb	r3, [r3, #15]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 ffda 	bl	800d892 <USBH_AllocPipe>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	7b59      	ldrb	r1, [r3, #13]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	7b98      	ldrb	r0, [r3, #14]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	8b12      	ldrh	r2, [r2, #24]
 800b8fe:	9202      	str	r2, [sp, #8]
 800b900:	2202      	movs	r2, #2
 800b902:	9201      	str	r2, [sp, #4]
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	4623      	mov	r3, r4
 800b908:	4602      	mov	r2, r0
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 ff92 	bl	800d834 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	7b19      	ldrb	r1, [r3, #12]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	7bd8      	ldrb	r0, [r3, #15]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	8b52      	ldrh	r2, [r2, #26]
 800b928:	9202      	str	r2, [sp, #8]
 800b92a:	2202      	movs	r2, #2
 800b92c:	9201      	str	r2, [sp, #4]
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	4623      	mov	r3, r4
 800b932:	4602      	mov	r2, r0
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f001 ff7d 	bl	800d834 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	7b5b      	ldrb	r3, [r3, #13]
 800b946:	2200      	movs	r2, #0
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f005 fe84 	bl	8011658 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	7b1b      	ldrb	r3, [r3, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f005 fe7d 	bl	8011658 <USBH_LL_SetToggle>

  return USBH_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	bd90      	pop	{r4, r7, pc}

0800b968 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00e      	beq.n	800b9a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 ff72 	bl	800d872 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 ff9d 	bl	800d8d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	7b1b      	ldrb	r3, [r3, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00e      	beq.n	800b9c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	7b1b      	ldrb	r3, [r3, #12]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f001 ff5f 	bl	800d872 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	7b1b      	ldrb	r3, [r3, #12]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f001 ff8a 	bl	800d8d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	7b5b      	ldrb	r3, [r3, #13]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00e      	beq.n	800b9ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	7b5b      	ldrb	r3, [r3, #13]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f001 ff4c 	bl	800d872 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	7b5b      	ldrb	r3, [r3, #13]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 ff77 	bl	800d8d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00b      	beq.n	800ba10 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f006 ff3d 	bl	8012880 <free>
    phost->pActiveClass->pData = 0U;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	3340      	adds	r3, #64	; 0x40
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8b1 	bl	800bb9a <GetLineCoding>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ba3c:	7afb      	ldrb	r3, [r7, #11]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d105      	bne.n	800ba4e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba48:	2102      	movs	r1, #2
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ba4e:	7afb      	ldrb	r3, [r7, #11]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba60:	2301      	movs	r3, #1
 800ba62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba6e:	69db      	ldr	r3, [r3, #28]
 800ba70:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ba78:	2b04      	cmp	r3, #4
 800ba7a:	d877      	bhi.n	800bb6c <USBH_CDC_Process+0x114>
 800ba7c:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <USBH_CDC_Process+0x2c>)
 800ba7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba82:	bf00      	nop
 800ba84:	0800ba99 	.word	0x0800ba99
 800ba88:	0800ba9f 	.word	0x0800ba9f
 800ba8c:	0800bacf 	.word	0x0800bacf
 800ba90:	0800bb43 	.word	0x0800bb43
 800ba94:	0800bb51 	.word	0x0800bb51
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba9c:	e06d      	b.n	800bb7a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f897 	bl	800bbd8 <SetLineCoding>
 800baaa:	4603      	mov	r3, r0
 800baac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d104      	bne.n	800babe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800babc:	e058      	b.n	800bb70 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800babe:	7bbb      	ldrb	r3, [r7, #14]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d055      	beq.n	800bb70 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2204      	movs	r2, #4
 800bac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bacc:	e050      	b.n	800bb70 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	3340      	adds	r3, #64	; 0x40
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f860 	bl	800bb9a <GetLineCoding>
 800bada:	4603      	mov	r3, r0
 800badc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d126      	bne.n	800bb32 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baf6:	791b      	ldrb	r3, [r3, #4]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d13b      	bne.n	800bb74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb06:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d133      	bne.n	800bb74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb16:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d12b      	bne.n	800bb74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb24:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d124      	bne.n	800bb74 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f982 	bl	800be34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bb30:	e020      	b.n	800bb74 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d01d      	beq.n	800bb74 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2204      	movs	r2, #4
 800bb3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bb40:	e018      	b.n	800bb74 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f867 	bl	800bc16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f8f6 	bl	800bd3a <CDC_ProcessReception>
      break;
 800bb4e:	e014      	b.n	800bb7a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800bb50:	2100      	movs	r1, #0
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 f94d 	bl	800cdf2 <USBH_ClrFeature>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10a      	bne.n	800bb78 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800bb6a:	e005      	b.n	800bb78 <USBH_CDC_Process+0x120>

    default:
      break;
 800bb6c:	bf00      	nop
 800bb6e:	e004      	b.n	800bb7a <USBH_CDC_Process+0x122>
      break;
 800bb70:	bf00      	nop
 800bb72:	e002      	b.n	800bb7a <USBH_CDC_Process+0x122>
      break;
 800bb74:	bf00      	nop
 800bb76:	e000      	b.n	800bb7a <USBH_CDC_Process+0x122>
      break;
 800bb78:	bf00      	nop

  }

  return status;
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	22a1      	movs	r2, #161	; 0xa1
 800bba8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2221      	movs	r2, #33	; 0x21
 800bbae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2207      	movs	r2, #7
 800bbc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2207      	movs	r2, #7
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 faf2 	bl	800d1b2 <USBH_CtlReq>
 800bbce:	4603      	mov	r3, r0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2221      	movs	r2, #33	; 0x21
 800bbe6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2220      	movs	r2, #32
 800bbec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2207      	movs	r2, #7
 800bbfe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2207      	movs	r2, #7
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fad3 	bl	800d1b2 <USBH_CtlReq>
 800bc0c:	4603      	mov	r3, r0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b086      	sub	sp, #24
 800bc1a:	af02      	add	r7, sp, #8
 800bc1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d002      	beq.n	800bc3c <CDC_ProcessTransmission+0x26>
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d023      	beq.n	800bc82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800bc3a:	e07a      	b.n	800bd32 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	8b12      	ldrh	r2, [r2, #24]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d90b      	bls.n	800bc60 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	69d9      	ldr	r1, [r3, #28]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	8b1a      	ldrh	r2, [r3, #24]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	7b5b      	ldrb	r3, [r3, #13]
 800bc54:	2001      	movs	r0, #1
 800bc56:	9000      	str	r0, [sp, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fda8 	bl	800d7ae <USBH_BulkSendData>
 800bc5e:	e00b      	b.n	800bc78 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	7b5b      	ldrb	r3, [r3, #13]
 800bc6e:	2001      	movs	r0, #1
 800bc70:	9000      	str	r0, [sp, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 fd9b 	bl	800d7ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bc80:	e057      	b.n	800bd32 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	7b5b      	ldrb	r3, [r3, #13]
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f005 fcbb 	bl	8011604 <USBH_LL_GetURBState>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bc92:	7afb      	ldrb	r3, [r7, #11]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d136      	bne.n	800bd06 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	8b12      	ldrh	r2, [r2, #24]
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d90e      	bls.n	800bcc2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	8b12      	ldrh	r2, [r2, #24]
 800bcac:	1a9a      	subs	r2, r3, r2
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	8b12      	ldrh	r2, [r2, #24]
 800bcba:	441a      	add	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	61da      	str	r2, [r3, #28]
 800bcc0:	e002      	b.n	800bcc8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d004      	beq.n	800bcda <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800bcd8:	e006      	b.n	800bce8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f892 	bl	800be0c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2204      	movs	r2, #4
 800bcec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f002 f93e 	bl	800df80 <osMessageQueuePut>
      break;
 800bd04:	e014      	b.n	800bd30 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800bd06:	7afb      	ldrb	r3, [r7, #11]
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d111      	bne.n	800bd30 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2204      	movs	r2, #4
 800bd18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd28:	2300      	movs	r3, #0
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f002 f928 	bl	800df80 <osMessageQueuePut>
      break;
 800bd30:	bf00      	nop
  }
}
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b086      	sub	sp, #24
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d002      	beq.n	800bd60 <CDC_ProcessReception+0x26>
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d00e      	beq.n	800bd7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bd5e:	e051      	b.n	800be04 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	6a19      	ldr	r1, [r3, #32]
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	8b5a      	ldrh	r2, [r3, #26]
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	7b1b      	ldrb	r3, [r3, #12]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 fd43 	bl	800d7f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2204      	movs	r2, #4
 800bd76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bd7a:	e043      	b.n	800be04 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	7b1b      	ldrb	r3, [r3, #12]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f005 fc3e 	bl	8011604 <USBH_LL_GetURBState>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bd8c:	7cfb      	ldrb	r3, [r7, #19]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d137      	bne.n	800be02 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	7b1b      	ldrb	r3, [r3, #12]
 800bd96:	4619      	mov	r1, r3
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f005 fba1 	bl	80114e0 <USBH_LL_GetLastXferSize>
 800bd9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d016      	beq.n	800bdd8 <CDC_ProcessReception+0x9e>
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	8b5b      	ldrh	r3, [r3, #26]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d910      	bls.n	800bdd8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	1ad2      	subs	r2, r2, r3
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	6a1a      	ldr	r2, [r3, #32]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	441a      	add	r2, r3
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2203      	movs	r2, #3
 800bdd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800bdd6:	e006      	b.n	800bde6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f81d 	bl	800be20 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2204      	movs	r2, #4
 800bdea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f002 f8bf 	bl	800df80 <osMessageQueuePut>
      break;
 800be02:	bf00      	nop
  }
}
 800be04:	bf00      	nop
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	4613      	mov	r3, r2
 800be54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800be5c:	2302      	movs	r3, #2
 800be5e:	e044      	b.n	800beea <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	79fa      	ldrb	r2, [r7, #7]
 800be64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f000 f841 	bl	800bf00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800beac:	2200      	movs	r2, #0
 800beae:	2104      	movs	r1, #4
 800beb0:	2010      	movs	r0, #16
 800beb2:	f001 ffdf 	bl	800de74 <osMessageQueueNew>
 800beb6:	4602      	mov	r2, r0
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800bebe:	4b0d      	ldr	r3, [pc, #52]	; (800bef4 <USBH_Init+0xac>)
 800bec0:	4a0d      	ldr	r2, [pc, #52]	; (800bef8 <USBH_Init+0xb0>)
 800bec2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800bec4:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <USBH_Init+0xac>)
 800bec6:	2280      	movs	r2, #128	; 0x80
 800bec8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800beca:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <USBH_Init+0xac>)
 800becc:	2218      	movs	r2, #24
 800bece:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800bed0:	4a08      	ldr	r2, [pc, #32]	; (800bef4 <USBH_Init+0xac>)
 800bed2:	68f9      	ldr	r1, [r7, #12]
 800bed4:	4809      	ldr	r0, [pc, #36]	; (800befc <USBH_Init+0xb4>)
 800bed6:	f001 fdb1 	bl	800da3c <osThreadNew>
 800beda:	4602      	mov	r2, r0
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	f005 fa48 	bl	8011378 <USBH_LL_Init>

  return USBH_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20005da4 	.word	0x20005da4
 800bef8:	08012c90 	.word	0x08012c90
 800befc:	0800cb69 	.word	0x0800cb69

0800bf00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60fb      	str	r3, [r7, #12]
 800bf10:	e009      	b.n	800bf26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	33e0      	adds	r3, #224	; 0xe0
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	3301      	adds	r3, #1
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b0e      	cmp	r3, #14
 800bf2a:	d9f2      	bls.n	800bf12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e009      	b.n	800bf46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	4413      	add	r3, r2
 800bf38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3301      	adds	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4c:	d3f1      	bcc.n	800bf32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2240      	movs	r2, #64	; 0x40
 800bf72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d016      	beq.n	800bfea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10e      	bne.n	800bfe4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bfcc:	1c59      	adds	r1, r3, #1
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	33de      	adds	r3, #222	; 0xde
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73fb      	strb	r3, [r7, #15]
 800bfe2:	e004      	b.n	800bfee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	73fb      	strb	r3, [r7, #15]
 800bfe8:	e001      	b.n	800bfee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bfea:	2302      	movs	r3, #2
 800bfec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c012:	78fa      	ldrb	r2, [r7, #3]
 800c014:	429a      	cmp	r2, r3
 800c016:	d204      	bcs.n	800c022 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	78fa      	ldrb	r2, [r7, #3]
 800c01c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c020:	e001      	b.n	800c026 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c022:	2302      	movs	r3, #2
 800c024:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c026:	7bfb      	ldrb	r3, [r7, #15]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c034:	b480      	push	{r7}
 800c036:	b087      	sub	sp, #28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	4608      	mov	r0, r1
 800c03e:	4611      	mov	r1, r2
 800c040:	461a      	mov	r2, r3
 800c042:	4603      	mov	r3, r0
 800c044:	70fb      	strb	r3, [r7, #3]
 800c046:	460b      	mov	r3, r1
 800c048:	70bb      	strb	r3, [r7, #2]
 800c04a:	4613      	mov	r3, r2
 800c04c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c052:	2300      	movs	r3, #0
 800c054:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c05c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c05e:	e025      	b.n	800c0ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	221a      	movs	r2, #26
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	3308      	adds	r3, #8
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	3302      	adds	r3, #2
 800c070:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	795b      	ldrb	r3, [r3, #5]
 800c076:	78fa      	ldrb	r2, [r7, #3]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d002      	beq.n	800c082 <USBH_FindInterface+0x4e>
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	2bff      	cmp	r3, #255	; 0xff
 800c080:	d111      	bne.n	800c0a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c086:	78ba      	ldrb	r2, [r7, #2]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d002      	beq.n	800c092 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c08c:	78bb      	ldrb	r3, [r7, #2]
 800c08e:	2bff      	cmp	r3, #255	; 0xff
 800c090:	d109      	bne.n	800c0a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c096:	787a      	ldrb	r2, [r7, #1]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d002      	beq.n	800c0a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c09c:	787b      	ldrb	r3, [r7, #1]
 800c09e:	2bff      	cmp	r3, #255	; 0xff
 800c0a0:	d101      	bne.n	800c0a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	e006      	b.n	800c0b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d9d6      	bls.n	800c060 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c0b2:	23ff      	movs	r3, #255	; 0xff
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	371c      	adds	r7, #28
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f005 f991 	bl	80113f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f005 faaa 	bl	801162a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b088      	sub	sp, #32
 800c0e4:	af04      	add	r7, sp, #16
 800c0e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d102      	bne.n	800c102 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2203      	movs	r2, #3
 800c100:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b2db      	uxtb	r3, r3
 800c108:	2b0b      	cmp	r3, #11
 800c10a:	f200 823c 	bhi.w	800c586 <USBH_Process+0x4a6>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <USBH_Process+0x34>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c145 	.word	0x0800c145
 800c118:	0800c193 	.word	0x0800c193
 800c11c:	0800c217 	.word	0x0800c217
 800c120:	0800c505 	.word	0x0800c505
 800c124:	0800c587 	.word	0x0800c587
 800c128:	0800c2d7 	.word	0x0800c2d7
 800c12c:	0800c48f 	.word	0x0800c48f
 800c130:	0800c329 	.word	0x0800c329
 800c134:	0800c365 	.word	0x0800c365
 800c138:	0800c39f 	.word	0x0800c39f
 800c13c:	0800c3e7 	.word	0x0800c3e7
 800c140:	0800c4ed 	.word	0x0800c4ed
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 821c 	beq.w	800c58a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c158:	20c8      	movs	r0, #200	; 0xc8
 800c15a:	f005 fab0 	bl	80116be <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f005 f9a3 	bl	80114aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c188:	2300      	movs	r3, #0
 800c18a:	2200      	movs	r2, #0
 800c18c:	f001 fef8 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c190:	e1fb      	b.n	800c58a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d107      	bne.n	800c1ac <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	701a      	strb	r2, [r3, #0]
 800c1aa:	e025      	b.n	800c1f8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1b6:	d914      	bls.n	800c1e2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c1be:	3301      	adds	r3, #1
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d903      	bls.n	800c1da <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	220d      	movs	r2, #13
 800c1d6:	701a      	strb	r2, [r3, #0]
 800c1d8:	e00e      	b.n	800c1f8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
 800c1e0:	e00a      	b.n	800c1f8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c1e8:	f103 020a 	add.w	r2, r3, #10
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c1f2:	200a      	movs	r0, #10
 800c1f4:	f005 fa63 	bl	80116be <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c20c:	2300      	movs	r3, #0
 800c20e:	2200      	movs	r2, #0
 800c210:	f001 feb6 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c214:	e1c0      	b.n	800c598 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c226:	2104      	movs	r1, #4
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c22c:	2064      	movs	r0, #100	; 0x64
 800c22e:	f005 fa46 	bl	80116be <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f005 f912 	bl	801145c <USBH_LL_GetSpeed>
 800c238:	4603      	mov	r3, r0
 800c23a:	461a      	mov	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2205      	movs	r2, #5
 800c246:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c248:	2100      	movs	r1, #0
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f001 fb21 	bl	800d892 <USBH_AllocPipe>
 800c250:	4603      	mov	r3, r0
 800c252:	461a      	mov	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c258:	2180      	movs	r1, #128	; 0x80
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 fb19 	bl	800d892 <USBH_AllocPipe>
 800c260:	4603      	mov	r3, r0
 800c262:	461a      	mov	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7919      	ldrb	r1, [r3, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c27c:	b292      	uxth	r2, r2
 800c27e:	9202      	str	r2, [sp, #8]
 800c280:	2200      	movs	r2, #0
 800c282:	9201      	str	r2, [sp, #4]
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	4603      	mov	r3, r0
 800c288:	2280      	movs	r2, #128	; 0x80
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f001 fad2 	bl	800d834 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7959      	ldrb	r1, [r3, #5]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2a4:	b292      	uxth	r2, r2
 800c2a6:	9202      	str	r2, [sp, #8]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	9201      	str	r2, [sp, #4]
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f001 fabe 	bl	800d834 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f001 fe56 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c2d4:	e160      	b.n	800c598 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f964 	bl	800c5a4 <USBH_HandleEnum>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f040 8152 	bne.w	800c58e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d103      	bne.n	800c304 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2208      	movs	r2, #8
 800c300:	701a      	strb	r2, [r3, #0]
 800c302:	e002      	b.n	800c30a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2207      	movs	r2, #7
 800c308:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2205      	movs	r2, #5
 800c30e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c31e:	2300      	movs	r3, #0
 800c320:	2200      	movs	r2, #0
 800c322:	f001 fe2d 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c326:	e132      	b.n	800c58e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 812f 	beq.w	800c592 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c33a:	2101      	movs	r1, #1
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2208      	movs	r2, #8
 800c344:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2205      	movs	r2, #5
 800c34a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c35a:	2300      	movs	r3, #0
 800c35c:	2200      	movs	r2, #0
 800c35e:	f001 fe0f 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c362:	e116      	b.n	800c592 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fcf8 	bl	800cd64 <USBH_SetCfg>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d102      	bne.n	800c380 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2209      	movs	r2, #9
 800c37e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c394:	2300      	movs	r3, #0
 800c396:	2200      	movs	r2, #0
 800c398:	f001 fdf2 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c39c:	e0fc      	b.n	800c598 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c3a4:	f003 0320 	and.w	r3, r3, #32
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fcfb 	bl	800cdaa <USBH_SetFeature>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d106      	bne.n	800c3c8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	220a      	movs	r2, #10
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	e002      	b.n	800c3c8 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	220a      	movs	r2, #10
 800c3c6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3dc:	2300      	movs	r3, #0
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f001 fdce 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c3e4:	e0d8      	b.n	800c598 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d03f      	beq.n	800c470 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
 800c3fc:	e016      	b.n	800c42c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c3fe:	7bfa      	ldrb	r2, [r7, #15]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	32de      	adds	r2, #222	; 0xde
 800c404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c408:	791a      	ldrb	r2, [r3, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c410:	429a      	cmp	r2, r3
 800c412:	d108      	bne.n	800c426 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c414:	7bfa      	ldrb	r2, [r7, #15]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	32de      	adds	r2, #222	; 0xde
 800c41a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c424:	e005      	b.n	800c432 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	3301      	adds	r3, #1
 800c42a:	73fb      	strb	r3, [r7, #15]
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0e5      	beq.n	800c3fe <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d016      	beq.n	800c46a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	4798      	blx	r3
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2206      	movs	r2, #6
 800c452:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c45a:	2103      	movs	r1, #3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	4798      	blx	r3
 800c460:	e006      	b.n	800c470 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	220d      	movs	r2, #13
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	e002      	b.n	800c470 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	220d      	movs	r2, #13
 800c46e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2205      	movs	r2, #5
 800c474:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c484:	2300      	movs	r3, #0
 800c486:	2200      	movs	r2, #0
 800c488:	f001 fd7a 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c48c:	e084      	b.n	800c598 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c494:	2b00      	cmp	r3, #0
 800c496:	d017      	beq.n	800c4c8 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	4798      	blx	r3
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d103      	bne.n	800c4b8 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	220b      	movs	r2, #11
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	e00a      	b.n	800c4ce <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800c4b8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d106      	bne.n	800c4ce <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	220d      	movs	r2, #13
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	e002      	b.n	800c4ce <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	220d      	movs	r2, #13
 800c4cc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2205      	movs	r2, #5
 800c4d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f001 fd4b 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c4ea:	e055      	b.n	800c598 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d04f      	beq.n	800c596 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	4798      	blx	r3
      }
      break;
 800c502:	e048      	b.n	800c596 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff fcf7 	bl	800bf00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d009      	beq.n	800c530 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c540:	2105      	movs	r1, #5
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d107      	bne.n	800c562 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7ff fdb0 	bl	800c0c0 <USBH_Start>
 800c560:	e002      	b.n	800c568 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f004 ff44 	bl	80113f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c57c:	2300      	movs	r3, #0
 800c57e:	2200      	movs	r2, #0
 800c580:	f001 fcfe 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      break;
 800c584:	e008      	b.n	800c598 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c586:	bf00      	nop
 800c588:	e006      	b.n	800c598 <USBH_Process+0x4b8>
      break;
 800c58a:	bf00      	nop
 800c58c:	e004      	b.n	800c598 <USBH_Process+0x4b8>
      break;
 800c58e:	bf00      	nop
 800c590:	e002      	b.n	800c598 <USBH_Process+0x4b8>
    break;
 800c592:	bf00      	nop
 800c594:	e000      	b.n	800c598 <USBH_Process+0x4b8>
      break;
 800c596:	bf00      	nop
  }
  return USBH_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop

0800c5a4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	785b      	ldrb	r3, [r3, #1]
 800c5b8:	2b07      	cmp	r3, #7
 800c5ba:	f200 8208 	bhi.w	800c9ce <USBH_HandleEnum+0x42a>
 800c5be:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <USBH_HandleEnum+0x20>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c5e5 	.word	0x0800c5e5
 800c5c8:	0800c6a3 	.word	0x0800c6a3
 800c5cc:	0800c70d 	.word	0x0800c70d
 800c5d0:	0800c79b 	.word	0x0800c79b
 800c5d4:	0800c805 	.word	0x0800c805
 800c5d8:	0800c875 	.word	0x0800c875
 800c5dc:	0800c911 	.word	0x0800c911
 800c5e0:	0800c98f 	.word	0x0800c98f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c5e4:	2108      	movs	r1, #8
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 faec 	bl	800cbc4 <USBH_Get_DevDesc>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d130      	bne.n	800c658 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	7919      	ldrb	r1, [r3, #4]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c61a:	b292      	uxth	r2, r2
 800c61c:	9202      	str	r2, [sp, #8]
 800c61e:	2200      	movs	r2, #0
 800c620:	9201      	str	r2, [sp, #4]
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	4603      	mov	r3, r0
 800c626:	2280      	movs	r2, #128	; 0x80
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f001 f903 	bl	800d834 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	7959      	ldrb	r1, [r3, #5]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c642:	b292      	uxth	r2, r2
 800c644:	9202      	str	r2, [sp, #8]
 800c646:	2200      	movs	r2, #0
 800c648:	9201      	str	r2, [sp, #4]
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	4603      	mov	r3, r0
 800c64e:	2200      	movs	r2, #0
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f001 f8ef 	bl	800d834 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c656:	e1bc      	b.n	800c9d2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c658:	7bbb      	ldrb	r3, [r7, #14]
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	f040 81b9 	bne.w	800c9d2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c666:	3301      	adds	r3, #1
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c676:	2b03      	cmp	r3, #3
 800c678:	d903      	bls.n	800c682 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	220d      	movs	r2, #13
 800c67e:	701a      	strb	r2, [r3, #0]
      break;
 800c680:	e1a7      	b.n	800c9d2 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	795b      	ldrb	r3, [r3, #5]
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f001 f923 	bl	800d8d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	791b      	ldrb	r3, [r3, #4]
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f001 f91d 	bl	800d8d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	701a      	strb	r2, [r3, #0]
      break;
 800c6a0:	e197      	b.n	800c9d2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c6a2:	2112      	movs	r1, #18
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fa8d 	bl	800cbc4 <USBH_Get_DevDesc>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d103      	bne.n	800c6bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c6ba:	e18c      	b.n	800c9d6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	2b03      	cmp	r3, #3
 800c6c0:	f040 8189 	bne.w	800c9d6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d903      	bls.n	800c6e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	220d      	movs	r2, #13
 800c6e2:	701a      	strb	r2, [r3, #0]
      break;
 800c6e4:	e177      	b.n	800c9d6 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	795b      	ldrb	r3, [r3, #5]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f001 f8f1 	bl	800d8d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	791b      	ldrb	r3, [r3, #4]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f8eb 	bl	800d8d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	701a      	strb	r2, [r3, #0]
      break;
 800c70a:	e164      	b.n	800c9d6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c70c:	2101      	movs	r1, #1
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fb04 	bl	800cd1c <USBH_SetAddress>
 800c714:	4603      	mov	r3, r0
 800c716:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d132      	bne.n	800c784 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c71e:	2002      	movs	r0, #2
 800c720:	f004 ffcd 	bl	80116be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2201      	movs	r2, #1
 800c728:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2203      	movs	r2, #3
 800c730:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7919      	ldrb	r1, [r3, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c746:	b292      	uxth	r2, r2
 800c748:	9202      	str	r2, [sp, #8]
 800c74a:	2200      	movs	r2, #0
 800c74c:	9201      	str	r2, [sp, #4]
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	4603      	mov	r3, r0
 800c752:	2280      	movs	r2, #128	; 0x80
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 f86d 	bl	800d834 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	7959      	ldrb	r1, [r3, #5]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c76e:	b292      	uxth	r2, r2
 800c770:	9202      	str	r2, [sp, #8]
 800c772:	2200      	movs	r2, #0
 800c774:	9201      	str	r2, [sp, #4]
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	4603      	mov	r3, r0
 800c77a:	2200      	movs	r2, #0
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 f859 	bl	800d834 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c782:	e12a      	b.n	800c9da <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c784:	7bbb      	ldrb	r3, [r7, #14]
 800c786:	2b03      	cmp	r3, #3
 800c788:	f040 8127 	bne.w	800c9da <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	220d      	movs	r2, #13
 800c790:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	705a      	strb	r2, [r3, #1]
      break;
 800c798:	e11f      	b.n	800c9da <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c79a:	2109      	movs	r1, #9
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fa39 	bl	800cc14 <USBH_Get_CfgDesc>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7a6:	7bbb      	ldrb	r3, [r7, #14]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2204      	movs	r2, #4
 800c7b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7b2:	e114      	b.n	800c9de <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	f040 8111 	bne.w	800c9de <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d903      	bls.n	800c7de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	220d      	movs	r2, #13
 800c7da:	701a      	strb	r2, [r3, #0]
      break;
 800c7dc:	e0ff      	b.n	800c9de <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	795b      	ldrb	r3, [r3, #5]
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f001 f875 	bl	800d8d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	791b      	ldrb	r3, [r3, #4]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f001 f86f 	bl	800d8d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
      break;
 800c802:	e0ec      	b.n	800c9de <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fa01 	bl	800cc14 <USBH_Get_CfgDesc>
 800c812:	4603      	mov	r3, r0
 800c814:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c816:	7bbb      	ldrb	r3, [r7, #14]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d103      	bne.n	800c824 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2205      	movs	r2, #5
 800c820:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c822:	e0de      	b.n	800c9e2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	2b03      	cmp	r3, #3
 800c828:	f040 80db 	bne.w	800c9e2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c832:	3301      	adds	r3, #1
 800c834:	b2da      	uxtb	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c842:	2b03      	cmp	r3, #3
 800c844:	d903      	bls.n	800c84e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	220d      	movs	r2, #13
 800c84a:	701a      	strb	r2, [r3, #0]
      break;
 800c84c:	e0c9      	b.n	800c9e2 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	795b      	ldrb	r3, [r3, #5]
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f001 f83d 	bl	800d8d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	791b      	ldrb	r3, [r3, #4]
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f001 f837 	bl	800d8d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	701a      	strb	r2, [r3, #0]
      break;
 800c872:	e0b6      	b.n	800c9e2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d036      	beq.n	800c8ec <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c88a:	23ff      	movs	r3, #255	; 0xff
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f9e5 	bl	800cc5c <USBH_Get_StringDesc>
 800c892:	4603      	mov	r3, r0
 800c894:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c896:	7bbb      	ldrb	r3, [r7, #14]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d111      	bne.n	800c8c0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2206      	movs	r2, #6
 800c8a0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2205      	movs	r2, #5
 800c8a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	f001 fb61 	bl	800df80 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c8be:	e092      	b.n	800c9e6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8c0:	7bbb      	ldrb	r3, [r7, #14]
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	f040 808f 	bne.w	800c9e6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2206      	movs	r2, #6
 800c8cc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2205      	movs	r2, #5
 800c8d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f001 fb4b 	bl	800df80 <osMessageQueuePut>
      break;
 800c8ea:	e07c      	b.n	800c9e6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2206      	movs	r2, #6
 800c8f0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2205      	movs	r2, #5
 800c8f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c906:	2300      	movs	r3, #0
 800c908:	2200      	movs	r2, #0
 800c90a:	f001 fb39 	bl	800df80 <osMessageQueuePut>
      break;
 800c90e:	e06a      	b.n	800c9e6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c916:	2b00      	cmp	r3, #0
 800c918:	d027      	beq.n	800c96a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c926:	23ff      	movs	r3, #255	; 0xff
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f997 	bl	800cc5c <USBH_Get_StringDesc>
 800c92e:	4603      	mov	r3, r0
 800c930:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d103      	bne.n	800c940 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2207      	movs	r2, #7
 800c93c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c93e:	e054      	b.n	800c9ea <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c940:	7bbb      	ldrb	r3, [r7, #14]
 800c942:	2b03      	cmp	r3, #3
 800c944:	d151      	bne.n	800c9ea <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2207      	movs	r2, #7
 800c94a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2205      	movs	r2, #5
 800c950:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c960:	2300      	movs	r3, #0
 800c962:	2200      	movs	r2, #0
 800c964:	f001 fb0c 	bl	800df80 <osMessageQueuePut>
      break;
 800c968:	e03f      	b.n	800c9ea <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2207      	movs	r2, #7
 800c96e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2205      	movs	r2, #5
 800c974:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c984:	2300      	movs	r3, #0
 800c986:	2200      	movs	r2, #0
 800c988:	f001 fafa 	bl	800df80 <osMessageQueuePut>
      break;
 800c98c:	e02d      	b.n	800c9ea <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c994:	2b00      	cmp	r3, #0
 800c996:	d017      	beq.n	800c9c8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c9a4:	23ff      	movs	r3, #255	; 0xff
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 f958 	bl	800cc5c <USBH_Get_StringDesc>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d102      	bne.n	800c9bc <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c9ba:	e018      	b.n	800c9ee <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d115      	bne.n	800c9ee <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c6:	e012      	b.n	800c9ee <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800c9cc:	e00f      	b.n	800c9ee <USBH_HandleEnum+0x44a>

    default:
      break;
 800c9ce:	bf00      	nop
 800c9d0:	e00e      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9d2:	bf00      	nop
 800c9d4:	e00c      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9d6:	bf00      	nop
 800c9d8:	e00a      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9da:	bf00      	nop
 800c9dc:	e008      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9de:	bf00      	nop
 800c9e0:	e006      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9e2:	bf00      	nop
 800c9e4:	e004      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9e6:	bf00      	nop
 800c9e8:	e002      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9ea:	bf00      	nop
 800c9ec:	e000      	b.n	800c9f0 <USBH_HandleEnum+0x44c>
      break;
 800c9ee:	bf00      	nop
  }
  return Status;
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop

0800c9fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f804 	bl	800ca3e <USBH_HandleSof>
}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b0b      	cmp	r3, #11
 800ca4e:	d10a      	bne.n	800ca66 <USBH_HandleSof+0x28>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d005      	beq.n	800ca66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	4798      	blx	r3
  }
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca92:	2300      	movs	r3, #0
 800ca94:	2200      	movs	r2, #0
 800ca96:	f001 fa73 	bl	800df80 <osMessageQueuePut>
#endif
#endif

  return;
 800ca9a:	bf00      	nop
}
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cab2:	bf00      	nop
}
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800caf2:	2300      	movs	r3, #0
 800caf4:	2200      	movs	r2, #0
 800caf6:	f001 fa43 	bl	800df80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f004 fc7e 	bl	8011426 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	791b      	ldrb	r3, [r3, #4]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fecf 	bl	800d8d4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	795b      	ldrb	r3, [r3, #5]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fec9 	bl	800d8d4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb56:	2300      	movs	r3, #0
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f001 fa11 	bl	800df80 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb80:	2200      	movs	r2, #0
 800cb82:	f001 fa71 	bl	800e068 <osMessageQueueGet>
 800cb86:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1f0      	bne.n	800cb70 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7ff faa6 	bl	800c0e0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cb94:	e7ec      	b.n	800cb70 <USBH_Process_OS+0x8>

0800cb96 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f001 f9e3 	bl	800df80 <osMessageQueuePut>
#endif

  return USBH_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af02      	add	r7, sp, #8
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	4613      	mov	r3, r2
 800cbde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f864 	bl	800ccb2 <USBH_GetDescriptor>
 800cbea:	4603      	mov	r3, r0
 800cbec:	73fb      	strb	r3, [r7, #15]
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cc00:	78fa      	ldrb	r2, [r7, #3]
 800cc02:	b292      	uxth	r2, r2
 800cc04:	4619      	mov	r1, r3
 800cc06:	f000 f918 	bl	800ce3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af02      	add	r7, sp, #8
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	331c      	adds	r3, #28
 800cc24:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cc26:	887b      	ldrh	r3, [r7, #2]
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc30:	2100      	movs	r1, #0
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f83d 	bl	800ccb2 <USBH_GetDescriptor>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	72fb      	strb	r3, [r7, #11]
 800cc3c:	7afb      	ldrb	r3, [r7, #11]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d107      	bne.n	800cc52 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cc48:	887a      	ldrh	r2, [r7, #2]
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f000 f964 	bl	800cf1a <USBH_ParseCfgDesc>
  }

  return status;
 800cc52:	7afb      	ldrb	r3, [r7, #11]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b088      	sub	sp, #32
 800cc60:	af02      	add	r7, sp, #8
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	607a      	str	r2, [r7, #4]
 800cc66:	461a      	mov	r2, r3
 800cc68:	460b      	mov	r3, r1
 800cc6a:	72fb      	strb	r3, [r7, #11]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cc70:	7afb      	ldrb	r3, [r7, #11]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cc78:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cc80:	893b      	ldrh	r3, [r7, #8]
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	460b      	mov	r3, r1
 800cc86:	2100      	movs	r1, #0
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 f812 	bl	800ccb2 <USBH_GetDescriptor>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75fb      	strb	r3, [r7, #23]
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d107      	bne.n	800cca8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cc9e:	893a      	ldrh	r2, [r7, #8]
 800cca0:	6879      	ldr	r1, [r7, #4]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 fa37 	bl	800d116 <USBH_ParseStringDesc>
  }

  return status;
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	607b      	str	r3, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	72fb      	strb	r3, [r7, #11]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	789b      	ldrb	r3, [r3, #2]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d11c      	bne.n	800cd06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cccc:	7afb      	ldrb	r3, [r7, #11]
 800ccce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2206      	movs	r2, #6
 800ccdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	893a      	ldrh	r2, [r7, #8]
 800cce2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cce4:	893b      	ldrh	r3, [r7, #8]
 800cce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ccea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccee:	d104      	bne.n	800ccfa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f240 4209 	movw	r2, #1033	; 0x409
 800ccf6:	829a      	strh	r2, [r3, #20]
 800ccf8:	e002      	b.n	800cd00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	8b3a      	ldrh	r2, [r7, #24]
 800cd04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cd06:	8b3b      	ldrh	r3, [r7, #24]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 fa50 	bl	800d1b2 <USBH_CtlReq>
 800cd12:	4603      	mov	r3, r0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	460b      	mov	r3, r1
 800cd26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	789b      	ldrb	r3, [r3, #2]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d10f      	bne.n	800cd50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2205      	movs	r2, #5
 800cd3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cd3c:	78fb      	ldrb	r3, [r7, #3]
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cd50:	2200      	movs	r2, #0
 800cd52:	2100      	movs	r1, #0
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fa2c 	bl	800d1b2 <USBH_CtlReq>
 800cd5a:	4603      	mov	r3, r0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	789b      	ldrb	r3, [r3, #2]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d10e      	bne.n	800cd96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2209      	movs	r2, #9
 800cd82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	887a      	ldrh	r2, [r7, #2]
 800cd88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cd96:	2200      	movs	r2, #0
 800cd98:	2100      	movs	r1, #0
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fa09 	bl	800d1b2 <USBH_CtlReq>
 800cda0:	4603      	mov	r3, r0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b082      	sub	sp, #8
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d10f      	bne.n	800cdde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2203      	movs	r2, #3
 800cdc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cdca:	78fb      	ldrb	r3, [r7, #3]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cdde:	2200      	movs	r2, #0
 800cde0:	2100      	movs	r1, #0
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f9e5 	bl	800d1b2 <USBH_CtlReq>
 800cde8:	4603      	mov	r3, r0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b082      	sub	sp, #8
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	789b      	ldrb	r3, [r3, #2]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d10f      	bne.n	800ce26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ce18:	78fb      	ldrb	r3, [r7, #3]
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ce26:	2200      	movs	r2, #0
 800ce28:	2100      	movs	r1, #0
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f9c1 	bl	800d1b2 <USBH_CtlReq>
 800ce30:	4603      	mov	r3, r0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b085      	sub	sp, #20
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	4613      	mov	r3, r2
 800ce46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	781a      	ldrb	r2, [r3, #0]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	785a      	ldrb	r2, [r3, #1]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	3303      	adds	r3, #3
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	021b      	lsls	r3, r3, #8
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	791a      	ldrb	r2, [r3, #4]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	795a      	ldrb	r2, [r3, #5]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	799a      	ldrb	r2, [r3, #6]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	79da      	ldrb	r2, [r3, #7]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ce94:	88fb      	ldrh	r3, [r7, #6]
 800ce96:	2b08      	cmp	r3, #8
 800ce98:	d939      	bls.n	800cf0e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	3309      	adds	r3, #9
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	330a      	adds	r3, #10
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	330b      	adds	r3, #11
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	021b      	lsls	r3, r3, #8
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	4313      	orrs	r3, r2
 800cecc:	b29a      	uxth	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	330c      	adds	r3, #12
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	330d      	adds	r3, #13
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	021b      	lsls	r3, r3, #8
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	7b9a      	ldrb	r2, [r3, #14]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	7bda      	ldrb	r2, [r3, #15]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	7c1a      	ldrb	r2, [r3, #16]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	7c5a      	ldrb	r2, [r3, #17]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	745a      	strb	r2, [r3, #17]
  }
}
 800cf0e:	bf00      	nop
 800cf10:	3714      	adds	r7, #20
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b08a      	sub	sp, #40	; 0x28
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	60f8      	str	r0, [r7, #12]
 800cf22:	60b9      	str	r1, [r7, #8]
 800cf24:	4613      	mov	r3, r2
 800cf26:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cf32:	2300      	movs	r3, #0
 800cf34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	781a      	ldrb	r2, [r3, #0]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	785a      	ldrb	r2, [r3, #1]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	3302      	adds	r3, #2
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	3303      	adds	r3, #3
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	021b      	lsls	r3, r3, #8
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	4313      	orrs	r3, r2
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	791a      	ldrb	r2, [r3, #4]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	795a      	ldrb	r2, [r3, #5]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	799a      	ldrb	r2, [r3, #6]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	79da      	ldrb	r2, [r3, #7]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	7a1a      	ldrb	r2, [r3, #8]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cf90:	88fb      	ldrh	r3, [r7, #6]
 800cf92:	2b09      	cmp	r3, #9
 800cf94:	d95f      	bls.n	800d056 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cf96:	2309      	movs	r3, #9
 800cf98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cf9e:	e051      	b.n	800d044 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cfa0:	f107 0316 	add.w	r3, r7, #22
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfa8:	f000 f8e8 	bl	800d17c <USBH_GetNextDesc>
 800cfac:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	785b      	ldrb	r3, [r3, #1]
 800cfb2:	2b04      	cmp	r3, #4
 800cfb4:	d146      	bne.n	800d044 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cfb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfba:	221a      	movs	r2, #26
 800cfbc:	fb02 f303 	mul.w	r3, r2, r3
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	3302      	adds	r3, #2
 800cfc8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cfca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfcc:	69f8      	ldr	r0, [r7, #28]
 800cfce:	f000 f846 	bl	800d05e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cfdc:	e022      	b.n	800d024 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cfde:	f107 0316 	add.w	r3, r7, #22
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfe6:	f000 f8c9 	bl	800d17c <USBH_GetNextDesc>
 800cfea:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	785b      	ldrb	r3, [r3, #1]
 800cff0:	2b05      	cmp	r3, #5
 800cff2:	d117      	bne.n	800d024 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cff8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cffc:	3201      	adds	r2, #1
 800cffe:	00d2      	lsls	r2, r2, #3
 800d000:	211a      	movs	r1, #26
 800d002:	fb01 f303 	mul.w	r3, r1, r3
 800d006:	4413      	add	r3, r2
 800d008:	3308      	adds	r3, #8
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	4413      	add	r3, r2
 800d00e:	3304      	adds	r3, #4
 800d010:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d014:	69b8      	ldr	r0, [r7, #24]
 800d016:	f000 f851 	bl	800d0bc <USBH_ParseEPDesc>
            ep_ix++;
 800d01a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d01e:	3301      	adds	r3, #1
 800d020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	791b      	ldrb	r3, [r3, #4]
 800d028:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d204      	bcs.n	800d03a <USBH_ParseCfgDesc+0x120>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	885a      	ldrh	r2, [r3, #2]
 800d034:	8afb      	ldrh	r3, [r7, #22]
 800d036:	429a      	cmp	r2, r3
 800d038:	d8d1      	bhi.n	800cfde <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d03a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d03e:	3301      	adds	r3, #1
 800d040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d804      	bhi.n	800d056 <USBH_ParseCfgDesc+0x13c>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	885a      	ldrh	r2, [r3, #2]
 800d050:	8afb      	ldrh	r3, [r7, #22]
 800d052:	429a      	cmp	r2, r3
 800d054:	d8a4      	bhi.n	800cfa0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d056:	bf00      	nop
 800d058:	3728      	adds	r7, #40	; 0x28
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d05e:	b480      	push	{r7}
 800d060:	b083      	sub	sp, #12
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
 800d066:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781a      	ldrb	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	785a      	ldrb	r2, [r3, #1]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	789a      	ldrb	r2, [r3, #2]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	78da      	ldrb	r2, [r3, #3]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	791a      	ldrb	r2, [r3, #4]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	795a      	ldrb	r2, [r3, #5]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	799a      	ldrb	r2, [r3, #6]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	79da      	ldrb	r2, [r3, #7]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	7a1a      	ldrb	r2, [r3, #8]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	721a      	strb	r2, [r3, #8]
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b083      	sub	sp, #12
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	781a      	ldrb	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	785a      	ldrb	r2, [r3, #1]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	789a      	ldrb	r2, [r3, #2]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	78da      	ldrb	r2, [r3, #3]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	3305      	adds	r3, #5
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	021b      	lsls	r3, r3, #8
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	799a      	ldrb	r2, [r3, #6]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	719a      	strb	r2, [r3, #6]
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d116:	b480      	push	{r7}
 800d118:	b087      	sub	sp, #28
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	60f8      	str	r0, [r7, #12]
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	4613      	mov	r3, r2
 800d122:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3301      	adds	r3, #1
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d120      	bne.n	800d170 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	1e9a      	subs	r2, r3, #2
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	4293      	cmp	r3, r2
 800d138:	bf28      	it	cs
 800d13a:	4613      	movcs	r3, r2
 800d13c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3302      	adds	r3, #2
 800d142:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d144:	2300      	movs	r3, #0
 800d146:	82fb      	strh	r3, [r7, #22]
 800d148:	e00b      	b.n	800d162 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d14a:	8afb      	ldrh	r3, [r7, #22]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	781a      	ldrb	r2, [r3, #0]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	3301      	adds	r3, #1
 800d15a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d15c:	8afb      	ldrh	r3, [r7, #22]
 800d15e:	3302      	adds	r3, #2
 800d160:	82fb      	strh	r3, [r7, #22]
 800d162:	8afa      	ldrh	r2, [r7, #22]
 800d164:	8abb      	ldrh	r3, [r7, #20]
 800d166:	429a      	cmp	r2, r3
 800d168:	d3ef      	bcc.n	800d14a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]
  }
}
 800d170:	bf00      	nop
 800d172:	371c      	adds	r7, #28
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	881a      	ldrh	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	4413      	add	r3, r2
 800d192:	b29a      	uxth	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b086      	sub	sp, #24
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	789b      	ldrb	r3, [r3, #2]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d002      	beq.n	800d1d2 <USBH_CtlReq+0x20>
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d01d      	beq.n	800d20c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d1d0:	e043      	b.n	800d25a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	68ba      	ldr	r2, [r7, #8]
 800d1d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	88fa      	ldrh	r2, [r7, #6]
 800d1dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2203      	movs	r2, #3
 800d1f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d202:	2300      	movs	r3, #0
 800d204:	2200      	movs	r2, #0
 800d206:	f000 febb 	bl	800df80 <osMessageQueuePut>
      break;
 800d20a:	e026      	b.n	800d25a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f000 f829 	bl	800d264 <USBH_HandleControl>
 800d212:	4603      	mov	r3, r0
 800d214:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <USBH_CtlReq+0x70>
 800d21c:	7dfb      	ldrb	r3, [r7, #23]
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d106      	bne.n	800d230 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2201      	movs	r2, #1
 800d226:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	761a      	strb	r2, [r3, #24]
 800d22e:	e005      	b.n	800d23c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d230:	7dfb      	ldrb	r3, [r7, #23]
 800d232:	2b02      	cmp	r3, #2
 800d234:	d102      	bne.n	800d23c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2201      	movs	r2, #1
 800d23a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2203      	movs	r2, #3
 800d240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d250:	2300      	movs	r3, #0
 800d252:	2200      	movs	r2, #0
 800d254:	f000 fe94 	bl	800df80 <osMessageQueuePut>
      break;
 800d258:	bf00      	nop
  }
  return status;
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af02      	add	r7, sp, #8
 800d26a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d26c:	2301      	movs	r3, #1
 800d26e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d270:	2300      	movs	r3, #0
 800d272:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7e1b      	ldrb	r3, [r3, #24]
 800d278:	3b01      	subs	r3, #1
 800d27a:	2b0a      	cmp	r3, #10
 800d27c:	f200 8229 	bhi.w	800d6d2 <USBH_HandleControl+0x46e>
 800d280:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <USBH_HandleControl+0x24>)
 800d282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d286:	bf00      	nop
 800d288:	0800d2b5 	.word	0x0800d2b5
 800d28c:	0800d2cf 	.word	0x0800d2cf
 800d290:	0800d371 	.word	0x0800d371
 800d294:	0800d397 	.word	0x0800d397
 800d298:	0800d423 	.word	0x0800d423
 800d29c:	0800d44d 	.word	0x0800d44d
 800d2a0:	0800d50f 	.word	0x0800d50f
 800d2a4:	0800d531 	.word	0x0800d531
 800d2a8:	0800d5c3 	.word	0x0800d5c3
 800d2ac:	0800d5e9 	.word	0x0800d5e9
 800d2b0:	0800d67b 	.word	0x0800d67b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f103 0110 	add.w	r1, r3, #16
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	795b      	ldrb	r3, [r3, #5]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fa17 	bl	800d6f4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	761a      	strb	r2, [r3, #24]
      break;
 800d2cc:	e20c      	b.n	800d6e8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	795b      	ldrb	r3, [r3, #5]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f004 f995 	bl	8011604 <USBH_LL_GetURBState>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d2de:	7bbb      	ldrb	r3, [r7, #14]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d12c      	bne.n	800d33e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	7c1b      	ldrb	r3, [r3, #16]
 800d2e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	8adb      	ldrh	r3, [r3, #22]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00a      	beq.n	800d30c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d2f6:	7b7b      	ldrb	r3, [r7, #13]
 800d2f8:	2b80      	cmp	r3, #128	; 0x80
 800d2fa:	d103      	bne.n	800d304 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2203      	movs	r2, #3
 800d300:	761a      	strb	r2, [r3, #24]
 800d302:	e00d      	b.n	800d320 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2205      	movs	r2, #5
 800d308:	761a      	strb	r2, [r3, #24]
 800d30a:	e009      	b.n	800d320 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d30c:	7b7b      	ldrb	r3, [r7, #13]
 800d30e:	2b80      	cmp	r3, #128	; 0x80
 800d310:	d103      	bne.n	800d31a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2209      	movs	r2, #9
 800d316:	761a      	strb	r2, [r3, #24]
 800d318:	e002      	b.n	800d320 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2207      	movs	r2, #7
 800d31e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2203      	movs	r2, #3
 800d324:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d334:	2300      	movs	r3, #0
 800d336:	2200      	movs	r2, #0
 800d338:	f000 fe22 	bl	800df80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d33c:	e1cb      	b.n	800d6d6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
 800d340:	2b04      	cmp	r3, #4
 800d342:	d003      	beq.n	800d34c <USBH_HandleControl+0xe8>
 800d344:	7bbb      	ldrb	r3, [r7, #14]
 800d346:	2b02      	cmp	r3, #2
 800d348:	f040 81c5 	bne.w	800d6d6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	220b      	movs	r2, #11
 800d350:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2203      	movs	r2, #3
 800d356:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d366:	2300      	movs	r3, #0
 800d368:	2200      	movs	r2, #0
 800d36a:	f000 fe09 	bl	800df80 <osMessageQueuePut>
      break;
 800d36e:	e1b2      	b.n	800d6d6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6899      	ldr	r1, [r3, #8]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	899a      	ldrh	r2, [r3, #12]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	791b      	ldrb	r3, [r3, #4]
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f9f2 	bl	800d772 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2204      	movs	r2, #4
 800d392:	761a      	strb	r2, [r3, #24]
      break;
 800d394:	e1a8      	b.n	800d6e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	791b      	ldrb	r3, [r3, #4]
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f004 f931 	bl	8011604 <USBH_LL_GetURBState>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d3a6:	7bbb      	ldrb	r3, [r7, #14]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d110      	bne.n	800d3ce <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2209      	movs	r2, #9
 800d3b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2203      	movs	r2, #3
 800d3b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f000 fdd9 	bl	800df80 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d3ce:	7bbb      	ldrb	r3, [r7, #14]
 800d3d0:	2b05      	cmp	r3, #5
 800d3d2:	d110      	bne.n	800d3f6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2203      	movs	r2, #3
 800d3dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f000 fdc6 	bl	800df80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d3f4:	e171      	b.n	800d6da <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d3f6:	7bbb      	ldrb	r3, [r7, #14]
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	f040 816e 	bne.w	800d6da <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	220b      	movs	r2, #11
 800d402:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2203      	movs	r2, #3
 800d408:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d418:	2300      	movs	r3, #0
 800d41a:	2200      	movs	r2, #0
 800d41c:	f000 fdb0 	bl	800df80 <osMessageQueuePut>
      break;
 800d420:	e15b      	b.n	800d6da <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6899      	ldr	r1, [r3, #8]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	899a      	ldrh	r2, [r3, #12]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	795b      	ldrb	r3, [r3, #5]
 800d42e:	2001      	movs	r0, #1
 800d430:	9000      	str	r0, [sp, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f978 	bl	800d728 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d43e:	b29a      	uxth	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2206      	movs	r2, #6
 800d448:	761a      	strb	r2, [r3, #24]
      break;
 800d44a:	e14d      	b.n	800d6e8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	795b      	ldrb	r3, [r3, #5]
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f004 f8d6 	bl	8011604 <USBH_LL_GetURBState>
 800d458:	4603      	mov	r3, r0
 800d45a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d111      	bne.n	800d486 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2207      	movs	r2, #7
 800d466:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2203      	movs	r2, #3
 800d46c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d47c:	2300      	movs	r3, #0
 800d47e:	2200      	movs	r2, #0
 800d480:	f000 fd7e 	bl	800df80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d484:	e12b      	b.n	800d6de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d486:	7bbb      	ldrb	r3, [r7, #14]
 800d488:	2b05      	cmp	r3, #5
 800d48a:	d113      	bne.n	800d4b4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	220c      	movs	r2, #12
 800d490:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d492:	2303      	movs	r3, #3
 800d494:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2203      	movs	r2, #3
 800d49a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f000 fd67 	bl	800df80 <osMessageQueuePut>
      break;
 800d4b2:	e114      	b.n	800d6de <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d4b4:	7bbb      	ldrb	r3, [r7, #14]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d111      	bne.n	800d4de <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2205      	movs	r2, #5
 800d4be:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2203      	movs	r2, #3
 800d4c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f000 fd52 	bl	800df80 <osMessageQueuePut>
      break;
 800d4dc:	e0ff      	b.n	800d6de <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
 800d4e0:	2b04      	cmp	r3, #4
 800d4e2:	f040 80fc 	bne.w	800d6de <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	220b      	movs	r2, #11
 800d4ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2203      	movs	r2, #3
 800d4f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d504:	2300      	movs	r3, #0
 800d506:	2200      	movs	r2, #0
 800d508:	f000 fd3a 	bl	800df80 <osMessageQueuePut>
      break;
 800d50c:	e0e7      	b.n	800d6de <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	791b      	ldrb	r3, [r3, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	2100      	movs	r1, #0
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f92b 	bl	800d772 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d522:	b29a      	uxth	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2208      	movs	r2, #8
 800d52c:	761a      	strb	r2, [r3, #24]

      break;
 800d52e:	e0db      	b.n	800d6e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	791b      	ldrb	r3, [r3, #4]
 800d534:	4619      	mov	r1, r3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f004 f864 	bl	8011604 <USBH_LL_GetURBState>
 800d53c:	4603      	mov	r3, r0
 800d53e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d540:	7bbb      	ldrb	r3, [r7, #14]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d113      	bne.n	800d56e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	220d      	movs	r2, #13
 800d54a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2203      	movs	r2, #3
 800d554:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d564:	2300      	movs	r3, #0
 800d566:	2200      	movs	r2, #0
 800d568:	f000 fd0a 	bl	800df80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d56c:	e0b9      	b.n	800d6e2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b04      	cmp	r3, #4
 800d572:	d111      	bne.n	800d598 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	220b      	movs	r2, #11
 800d578:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2203      	movs	r2, #3
 800d57e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d58e:	2300      	movs	r3, #0
 800d590:	2200      	movs	r2, #0
 800d592:	f000 fcf5 	bl	800df80 <osMessageQueuePut>
      break;
 800d596:	e0a4      	b.n	800d6e2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d598:	7bbb      	ldrb	r3, [r7, #14]
 800d59a:	2b05      	cmp	r3, #5
 800d59c:	f040 80a1 	bne.w	800d6e2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2203      	movs	r2, #3
 800d5a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f000 fce0 	bl	800df80 <osMessageQueuePut>
      break;
 800d5c0:	e08f      	b.n	800d6e2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	795b      	ldrb	r3, [r3, #5]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	9200      	str	r2, [sp, #0]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f8aa 	bl	800d728 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	220a      	movs	r2, #10
 800d5e4:	761a      	strb	r2, [r3, #24]
      break;
 800d5e6:	e07f      	b.n	800d6e8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	795b      	ldrb	r3, [r3, #5]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f004 f808 	bl	8011604 <USBH_LL_GetURBState>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d113      	bne.n	800d626 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	220d      	movs	r2, #13
 800d606:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2203      	movs	r2, #3
 800d60c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d61c:	2300      	movs	r3, #0
 800d61e:	2200      	movs	r2, #0
 800d620:	f000 fcae 	bl	800df80 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d624:	e05f      	b.n	800d6e6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d626:	7bbb      	ldrb	r3, [r7, #14]
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d111      	bne.n	800d650 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2209      	movs	r2, #9
 800d630:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2203      	movs	r2, #3
 800d636:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d646:	2300      	movs	r3, #0
 800d648:	2200      	movs	r2, #0
 800d64a:	f000 fc99 	bl	800df80 <osMessageQueuePut>
      break;
 800d64e:	e04a      	b.n	800d6e6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	2b04      	cmp	r3, #4
 800d654:	d147      	bne.n	800d6e6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	220b      	movs	r2, #11
 800d65a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2203      	movs	r2, #3
 800d660:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d670:	2300      	movs	r3, #0
 800d672:	2200      	movs	r2, #0
 800d674:	f000 fc84 	bl	800df80 <osMessageQueuePut>
      break;
 800d678:	e035      	b.n	800d6e6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7e5b      	ldrb	r3, [r3, #25]
 800d67e:	3301      	adds	r3, #1
 800d680:	b2da      	uxtb	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	765a      	strb	r2, [r3, #25]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	7e5b      	ldrb	r3, [r3, #25]
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	d806      	bhi.n	800d69c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d69a:	e025      	b.n	800d6e8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d6a2:	2106      	movs	r1, #6
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	795b      	ldrb	r3, [r3, #5]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f90d 	bl	800d8d4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	791b      	ldrb	r3, [r3, #4]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f907 	bl	800d8d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d6d0:	e00a      	b.n	800d6e8 <USBH_HandleControl+0x484>

    default:
      break;
 800d6d2:	bf00      	nop
 800d6d4:	e008      	b.n	800d6e8 <USBH_HandleControl+0x484>
      break;
 800d6d6:	bf00      	nop
 800d6d8:	e006      	b.n	800d6e8 <USBH_HandleControl+0x484>
      break;
 800d6da:	bf00      	nop
 800d6dc:	e004      	b.n	800d6e8 <USBH_HandleControl+0x484>
      break;
 800d6de:	bf00      	nop
 800d6e0:	e002      	b.n	800d6e8 <USBH_HandleControl+0x484>
      break;
 800d6e2:	bf00      	nop
 800d6e4:	e000      	b.n	800d6e8 <USBH_HandleControl+0x484>
      break;
 800d6e6:	bf00      	nop
  }

  return status;
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop

0800d6f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af04      	add	r7, sp, #16
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	4613      	mov	r3, r2
 800d700:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d702:	79f9      	ldrb	r1, [r7, #7]
 800d704:	2300      	movs	r3, #0
 800d706:	9303      	str	r3, [sp, #12]
 800d708:	2308      	movs	r3, #8
 800d70a:	9302      	str	r3, [sp, #8]
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	2300      	movs	r3, #0
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	2300      	movs	r3, #0
 800d716:	2200      	movs	r2, #0
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f003 ff42 	bl	80115a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af04      	add	r7, sp, #16
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	4611      	mov	r1, r2
 800d734:	461a      	mov	r2, r3
 800d736:	460b      	mov	r3, r1
 800d738:	80fb      	strh	r3, [r7, #6]
 800d73a:	4613      	mov	r3, r2
 800d73c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d748:	2300      	movs	r3, #0
 800d74a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d74c:	7979      	ldrb	r1, [r7, #5]
 800d74e:	7e3b      	ldrb	r3, [r7, #24]
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	88fb      	ldrh	r3, [r7, #6]
 800d754:	9302      	str	r3, [sp, #8]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	2301      	movs	r3, #1
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	2300      	movs	r3, #0
 800d760:	2200      	movs	r2, #0
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f003 ff1d 	bl	80115a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b088      	sub	sp, #32
 800d776:	af04      	add	r7, sp, #16
 800d778:	60f8      	str	r0, [r7, #12]
 800d77a:	60b9      	str	r1, [r7, #8]
 800d77c:	4611      	mov	r1, r2
 800d77e:	461a      	mov	r2, r3
 800d780:	460b      	mov	r3, r1
 800d782:	80fb      	strh	r3, [r7, #6]
 800d784:	4613      	mov	r3, r2
 800d786:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d788:	7979      	ldrb	r1, [r7, #5]
 800d78a:	2300      	movs	r3, #0
 800d78c:	9303      	str	r3, [sp, #12]
 800d78e:	88fb      	ldrh	r3, [r7, #6]
 800d790:	9302      	str	r3, [sp, #8]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	2301      	movs	r3, #1
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	2300      	movs	r3, #0
 800d79c:	2201      	movs	r2, #1
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f003 feff 	bl	80115a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d7a4:	2300      	movs	r3, #0

}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b088      	sub	sp, #32
 800d7b2:	af04      	add	r7, sp, #16
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	460b      	mov	r3, r1
 800d7be:	80fb      	strh	r3, [r7, #6]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d7d2:	7979      	ldrb	r1, [r7, #5]
 800d7d4:	7e3b      	ldrb	r3, [r7, #24]
 800d7d6:	9303      	str	r3, [sp, #12]
 800d7d8:	88fb      	ldrh	r3, [r7, #6]
 800d7da:	9302      	str	r3, [sp, #8]
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f003 feda 	bl	80115a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b088      	sub	sp, #32
 800d7fc:	af04      	add	r7, sp, #16
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	4611      	mov	r1, r2
 800d804:	461a      	mov	r2, r3
 800d806:	460b      	mov	r3, r1
 800d808:	80fb      	strh	r3, [r7, #6]
 800d80a:	4613      	mov	r3, r2
 800d80c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d80e:	7979      	ldrb	r1, [r7, #5]
 800d810:	2300      	movs	r3, #0
 800d812:	9303      	str	r3, [sp, #12]
 800d814:	88fb      	ldrh	r3, [r7, #6]
 800d816:	9302      	str	r3, [sp, #8]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	2301      	movs	r3, #1
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	2302      	movs	r3, #2
 800d822:	2201      	movs	r2, #1
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f003 febc 	bl	80115a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af04      	add	r7, sp, #16
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	4608      	mov	r0, r1
 800d83e:	4611      	mov	r1, r2
 800d840:	461a      	mov	r2, r3
 800d842:	4603      	mov	r3, r0
 800d844:	70fb      	strb	r3, [r7, #3]
 800d846:	460b      	mov	r3, r1
 800d848:	70bb      	strb	r3, [r7, #2]
 800d84a:	4613      	mov	r3, r2
 800d84c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d84e:	7878      	ldrb	r0, [r7, #1]
 800d850:	78ba      	ldrb	r2, [r7, #2]
 800d852:	78f9      	ldrb	r1, [r7, #3]
 800d854:	8b3b      	ldrh	r3, [r7, #24]
 800d856:	9302      	str	r3, [sp, #8]
 800d858:	7d3b      	ldrb	r3, [r7, #20]
 800d85a:	9301      	str	r3, [sp, #4]
 800d85c:	7c3b      	ldrb	r3, [r7, #16]
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	4603      	mov	r3, r0
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f003 fe4f 	bl	8011506 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	460b      	mov	r3, r1
 800d87c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d87e:	78fb      	ldrb	r3, [r7, #3]
 800d880:	4619      	mov	r1, r3
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f003 fe6e 	bl	8011564 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f836 	bl	800d910 <USBH_GetFreePipe>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d8a8:	89fb      	ldrh	r3, [r7, #14]
 800d8aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d00a      	beq.n	800d8c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d8b2:	78fa      	ldrb	r2, [r7, #3]
 800d8b4:	89fb      	ldrh	r3, [r7, #14]
 800d8b6:	f003 030f 	and.w	r3, r3, #15
 800d8ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d8be:	6879      	ldr	r1, [r7, #4]
 800d8c0:	33e0      	adds	r3, #224	; 0xe0
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	440b      	add	r3, r1
 800d8c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d8c8:	89fb      	ldrh	r3, [r7, #14]
 800d8ca:	b2db      	uxtb	r3, r3
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3710      	adds	r7, #16
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	2b0a      	cmp	r3, #10
 800d8e4:	d80d      	bhi.n	800d902 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d8e6:	78fb      	ldrb	r3, [r7, #3]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	33e0      	adds	r3, #224	; 0xe0
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	33e0      	adds	r3, #224	; 0xe0
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	440b      	add	r3, r1
 800d900:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d918:	2300      	movs	r3, #0
 800d91a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d91c:	2300      	movs	r3, #0
 800d91e:	73fb      	strb	r3, [r7, #15]
 800d920:	e00f      	b.n	800d942 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d922:	7bfb      	ldrb	r3, [r7, #15]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	33e0      	adds	r3, #224	; 0xe0
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d932:	2b00      	cmp	r3, #0
 800d934:	d102      	bne.n	800d93c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	b29b      	uxth	r3, r3
 800d93a:	e007      	b.n	800d94c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	3301      	adds	r3, #1
 800d940:	73fb      	strb	r3, [r7, #15]
 800d942:	7bfb      	ldrb	r3, [r7, #15]
 800d944:	2b0a      	cmp	r3, #10
 800d946:	d9ec      	bls.n	800d922 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d948:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d958:	b480      	push	{r7}
 800d95a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d95c:	bf00      	nop
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
	...

0800d968 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d96e:	f3ef 8305 	mrs	r3, IPSR
 800d972:	60bb      	str	r3, [r7, #8]
  return(result);
 800d974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10f      	bne.n	800d99a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d97a:	f3ef 8310 	mrs	r3, PRIMASK
 800d97e:	607b      	str	r3, [r7, #4]
  return(result);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d986:	f3ef 8311 	mrs	r3, BASEPRI
 800d98a:	603b      	str	r3, [r7, #0]
  return(result);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <osKernelInitialize+0x3a>
 800d992:	4b0e      	ldr	r3, [pc, #56]	; (800d9cc <osKernelInitialize+0x64>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d103      	bne.n	800d9a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d99a:	f06f 0305 	mvn.w	r3, #5
 800d99e:	60fb      	str	r3, [r7, #12]
 800d9a0:	e00c      	b.n	800d9bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	; (800d9cc <osKernelInitialize+0x64>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d105      	bne.n	800d9b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d9aa:	4b08      	ldr	r3, [pc, #32]	; (800d9cc <osKernelInitialize+0x64>)
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e002      	b.n	800d9bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	20001448 	.word	0x20001448

0800d9d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9d6:	f3ef 8305 	mrs	r3, IPSR
 800d9da:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10f      	bne.n	800da02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800d9e6:	607b      	str	r3, [r7, #4]
  return(result);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d105      	bne.n	800d9fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9ee:	f3ef 8311 	mrs	r3, BASEPRI
 800d9f2:	603b      	str	r3, [r7, #0]
  return(result);
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <osKernelStart+0x3a>
 800d9fa:	4b0f      	ldr	r3, [pc, #60]	; (800da38 <osKernelStart+0x68>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d103      	bne.n	800da0a <osKernelStart+0x3a>
    stat = osErrorISR;
 800da02:	f06f 0305 	mvn.w	r3, #5
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	e010      	b.n	800da2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da0a:	4b0b      	ldr	r3, [pc, #44]	; (800da38 <osKernelStart+0x68>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d109      	bne.n	800da26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da12:	f7ff ffa1 	bl	800d958 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da16:	4b08      	ldr	r3, [pc, #32]	; (800da38 <osKernelStart+0x68>)
 800da18:	2202      	movs	r2, #2
 800da1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da1c:	f001 fde2 	bl	800f5e4 <vTaskStartScheduler>
      stat = osOK;
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	e002      	b.n	800da2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800da26:	f04f 33ff 	mov.w	r3, #4294967295
 800da2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da2c:	68fb      	ldr	r3, [r7, #12]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	20001448 	.word	0x20001448

0800da3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b090      	sub	sp, #64	; 0x40
 800da40:	af04      	add	r7, sp, #16
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da48:	2300      	movs	r3, #0
 800da4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da4c:	f3ef 8305 	mrs	r3, IPSR
 800da50:	61fb      	str	r3, [r7, #28]
  return(result);
 800da52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800da54:	2b00      	cmp	r3, #0
 800da56:	f040 808f 	bne.w	800db78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da5a:	f3ef 8310 	mrs	r3, PRIMASK
 800da5e:	61bb      	str	r3, [r7, #24]
  return(result);
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d105      	bne.n	800da72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da66:	f3ef 8311 	mrs	r3, BASEPRI
 800da6a:	617b      	str	r3, [r7, #20]
  return(result);
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d003      	beq.n	800da7a <osThreadNew+0x3e>
 800da72:	4b44      	ldr	r3, [pc, #272]	; (800db84 <osThreadNew+0x148>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d07e      	beq.n	800db78 <osThreadNew+0x13c>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d07b      	beq.n	800db78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800da80:	2380      	movs	r3, #128	; 0x80
 800da82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800da84:	2318      	movs	r3, #24
 800da86:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800da88:	2300      	movs	r3, #0
 800da8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800da8c:	f04f 33ff 	mov.w	r3, #4294967295
 800da90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d045      	beq.n	800db24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <osThreadNew+0x6a>
        name = attr->name;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d008      	beq.n	800dacc <osThreadNew+0x90>
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	2b38      	cmp	r3, #56	; 0x38
 800dabe:	d805      	bhi.n	800dacc <osThreadNew+0x90>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <osThreadNew+0x94>
        return (NULL);
 800dacc:	2300      	movs	r3, #0
 800dace:	e054      	b.n	800db7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	695b      	ldr	r3, [r3, #20]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d003      	beq.n	800dae0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	695b      	ldr	r3, [r3, #20]
 800dadc:	089b      	lsrs	r3, r3, #2
 800dade:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00e      	beq.n	800db06 <osThreadNew+0xca>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68db      	ldr	r3, [r3, #12]
 800daec:	2b5b      	cmp	r3, #91	; 0x5b
 800daee:	d90a      	bls.n	800db06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d006      	beq.n	800db06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	695b      	ldr	r3, [r3, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <osThreadNew+0xca>
        mem = 1;
 800db00:	2301      	movs	r3, #1
 800db02:	623b      	str	r3, [r7, #32]
 800db04:	e010      	b.n	800db28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10c      	bne.n	800db28 <osThreadNew+0xec>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d108      	bne.n	800db28 <osThreadNew+0xec>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d104      	bne.n	800db28 <osThreadNew+0xec>
          mem = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	623b      	str	r3, [r7, #32]
 800db22:	e001      	b.n	800db28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800db28:	6a3b      	ldr	r3, [r7, #32]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d110      	bne.n	800db50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db36:	9202      	str	r2, [sp, #8]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f001 fb77 	bl	800f238 <xTaskCreateStatic>
 800db4a:	4603      	mov	r3, r0
 800db4c:	613b      	str	r3, [r7, #16]
 800db4e:	e013      	b.n	800db78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800db50:	6a3b      	ldr	r3, [r7, #32]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d110      	bne.n	800db78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db58:	b29a      	uxth	r2, r3
 800db5a:	f107 0310 	add.w	r3, r7, #16
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f001 fbc2 	bl	800f2f2 <xTaskCreate>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b01      	cmp	r3, #1
 800db72:	d001      	beq.n	800db78 <osThreadNew+0x13c>
          hTask = NULL;
 800db74:	2300      	movs	r3, #0
 800db76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800db78:	693b      	ldr	r3, [r7, #16]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3730      	adds	r7, #48	; 0x30
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	20001448 	.word	0x20001448

0800db88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db90:	f3ef 8305 	mrs	r3, IPSR
 800db94:	613b      	str	r3, [r7, #16]
  return(result);
 800db96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10f      	bne.n	800dbbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db9c:	f3ef 8310 	mrs	r3, PRIMASK
 800dba0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d105      	bne.n	800dbb4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dba8:	f3ef 8311 	mrs	r3, BASEPRI
 800dbac:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d007      	beq.n	800dbc4 <osDelay+0x3c>
 800dbb4:	4b0a      	ldr	r3, [pc, #40]	; (800dbe0 <osDelay+0x58>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d103      	bne.n	800dbc4 <osDelay+0x3c>
    stat = osErrorISR;
 800dbbc:	f06f 0305 	mvn.w	r3, #5
 800dbc0:	617b      	str	r3, [r7, #20]
 800dbc2:	e007      	b.n	800dbd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d002      	beq.n	800dbd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f001 fcd4 	bl	800f57c <vTaskDelay>
    }
  }

  return (stat);
 800dbd4:	697b      	ldr	r3, [r7, #20]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20001448 	.word	0x20001448

0800dbe4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08a      	sub	sp, #40	; 0x28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dbec:	2300      	movs	r3, #0
 800dbee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf0:	f3ef 8305 	mrs	r3, IPSR
 800dbf4:	613b      	str	r3, [r7, #16]
  return(result);
 800dbf6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f040 8085 	bne.w	800dd08 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbfe:	f3ef 8310 	mrs	r3, PRIMASK
 800dc02:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d105      	bne.n	800dc16 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc0a:	f3ef 8311 	mrs	r3, BASEPRI
 800dc0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d003      	beq.n	800dc1e <osMutexNew+0x3a>
 800dc16:	4b3f      	ldr	r3, [pc, #252]	; (800dd14 <osMutexNew+0x130>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d074      	beq.n	800dd08 <osMutexNew+0x124>
    if (attr != NULL) {
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d003      	beq.n	800dc2c <osMutexNew+0x48>
      type = attr->attr_bits;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	623b      	str	r3, [r7, #32]
 800dc2a:	e001      	b.n	800dc30 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dc30:	6a3b      	ldr	r3, [r7, #32]
 800dc32:	f003 0301 	and.w	r3, r3, #1
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d002      	beq.n	800dc40 <osMutexNew+0x5c>
      rmtx = 1U;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	e001      	b.n	800dc44 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	f003 0308 	and.w	r3, r3, #8
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d15c      	bne.n	800dd08 <osMutexNew+0x124>
      mem = -1;
 800dc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc52:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d015      	beq.n	800dc86 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <osMutexNew+0x8c>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	2b4f      	cmp	r3, #79	; 0x4f
 800dc68:	d902      	bls.n	800dc70 <osMutexNew+0x8c>
          mem = 1;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	61bb      	str	r3, [r7, #24]
 800dc6e:	e00c      	b.n	800dc8a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d108      	bne.n	800dc8a <osMutexNew+0xa6>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d104      	bne.n	800dc8a <osMutexNew+0xa6>
            mem = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	61bb      	str	r3, [r7, #24]
 800dc84:	e001      	b.n	800dc8a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d112      	bne.n	800dcb6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d007      	beq.n	800dca6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	2004      	movs	r0, #4
 800dc9e:	f000 fcbe 	bl	800e61e <xQueueCreateMutexStatic>
 800dca2:	6278      	str	r0, [r7, #36]	; 0x24
 800dca4:	e016      	b.n	800dcd4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	2001      	movs	r0, #1
 800dcae:	f000 fcb6 	bl	800e61e <xQueueCreateMutexStatic>
 800dcb2:	6278      	str	r0, [r7, #36]	; 0x24
 800dcb4:	e00e      	b.n	800dcd4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10b      	bne.n	800dcd4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d004      	beq.n	800dccc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800dcc2:	2004      	movs	r0, #4
 800dcc4:	f000 fc93 	bl	800e5ee <xQueueCreateMutex>
 800dcc8:	6278      	str	r0, [r7, #36]	; 0x24
 800dcca:	e003      	b.n	800dcd4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800dccc:	2001      	movs	r0, #1
 800dcce:	f000 fc8e 	bl	800e5ee <xQueueCreateMutex>
 800dcd2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00c      	beq.n	800dcf4 <osMutexNew+0x110>
        if (attr != NULL) {
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <osMutexNew+0x104>
          name = attr->name;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	617b      	str	r3, [r7, #20]
 800dce6:	e001      	b.n	800dcec <osMutexNew+0x108>
        } else {
          name = NULL;
 800dce8:	2300      	movs	r3, #0
 800dcea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800dcec:	6979      	ldr	r1, [r7, #20]
 800dcee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcf0:	f001 fa44 	bl	800f17c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d006      	beq.n	800dd08 <osMutexNew+0x124>
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	f043 0301 	orr.w	r3, r3, #1
 800dd06:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3728      	adds	r7, #40	; 0x28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20001448 	.word	0x20001448

0800dd18 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f023 0301 	bic.w	r3, r3, #1
 800dd28:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f003 0301 	and.w	r3, r3, #1
 800dd30:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd36:	f3ef 8305 	mrs	r3, IPSR
 800dd3a:	613b      	str	r3, [r7, #16]
  return(result);
 800dd3c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10f      	bne.n	800dd62 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd42:	f3ef 8310 	mrs	r3, PRIMASK
 800dd46:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d105      	bne.n	800dd5a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd4e:	f3ef 8311 	mrs	r3, BASEPRI
 800dd52:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d007      	beq.n	800dd6a <osMutexAcquire+0x52>
 800dd5a:	4b1d      	ldr	r3, [pc, #116]	; (800ddd0 <osMutexAcquire+0xb8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d103      	bne.n	800dd6a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800dd62:	f06f 0305 	mvn.w	r3, #5
 800dd66:	61fb      	str	r3, [r7, #28]
 800dd68:	e02c      	b.n	800ddc4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d103      	bne.n	800dd78 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800dd70:	f06f 0303 	mvn.w	r3, #3
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	e025      	b.n	800ddc4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d011      	beq.n	800dda2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800dd7e:	6839      	ldr	r1, [r7, #0]
 800dd80:	69b8      	ldr	r0, [r7, #24]
 800dd82:	f000 fc9b 	bl	800e6bc <xQueueTakeMutexRecursive>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d01b      	beq.n	800ddc4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d003      	beq.n	800dd9a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800dd92:	f06f 0301 	mvn.w	r3, #1
 800dd96:	61fb      	str	r3, [r7, #28]
 800dd98:	e014      	b.n	800ddc4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800dd9a:	f06f 0302 	mvn.w	r3, #2
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	e010      	b.n	800ddc4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	69b8      	ldr	r0, [r7, #24]
 800dda6:	f000 ff35 	bl	800ec14 <xQueueSemaphoreTake>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d009      	beq.n	800ddc4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ddb6:	f06f 0301 	mvn.w	r3, #1
 800ddba:	61fb      	str	r3, [r7, #28]
 800ddbc:	e002      	b.n	800ddc4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ddbe:	f06f 0302 	mvn.w	r3, #2
 800ddc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3720      	adds	r7, #32
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	20001448 	.word	0x20001448

0800ddd4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b088      	sub	sp, #32
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f023 0301 	bic.w	r3, r3, #1
 800dde2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f003 0301 	and.w	r3, r3, #1
 800ddea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddf0:	f3ef 8305 	mrs	r3, IPSR
 800ddf4:	613b      	str	r3, [r7, #16]
  return(result);
 800ddf6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10f      	bne.n	800de1c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddfc:	f3ef 8310 	mrs	r3, PRIMASK
 800de00:	60fb      	str	r3, [r7, #12]
  return(result);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d105      	bne.n	800de14 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de08:	f3ef 8311 	mrs	r3, BASEPRI
 800de0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <osMutexRelease+0x50>
 800de14:	4b16      	ldr	r3, [pc, #88]	; (800de70 <osMutexRelease+0x9c>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b02      	cmp	r3, #2
 800de1a:	d103      	bne.n	800de24 <osMutexRelease+0x50>
    stat = osErrorISR;
 800de1c:	f06f 0305 	mvn.w	r3, #5
 800de20:	61fb      	str	r3, [r7, #28]
 800de22:	e01f      	b.n	800de64 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d103      	bne.n	800de32 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800de2a:	f06f 0303 	mvn.w	r3, #3
 800de2e:	61fb      	str	r3, [r7, #28]
 800de30:	e018      	b.n	800de64 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d009      	beq.n	800de4c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800de38:	69b8      	ldr	r0, [r7, #24]
 800de3a:	f000 fc0b 	bl	800e654 <xQueueGiveMutexRecursive>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b01      	cmp	r3, #1
 800de42:	d00f      	beq.n	800de64 <osMutexRelease+0x90>
        stat = osErrorResource;
 800de44:	f06f 0302 	mvn.w	r3, #2
 800de48:	61fb      	str	r3, [r7, #28]
 800de4a:	e00b      	b.n	800de64 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800de4c:	2300      	movs	r3, #0
 800de4e:	2200      	movs	r2, #0
 800de50:	2100      	movs	r1, #0
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f000 fc68 	bl	800e728 <xQueueGenericSend>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d002      	beq.n	800de64 <osMutexRelease+0x90>
        stat = osErrorResource;
 800de5e:	f06f 0302 	mvn.w	r3, #2
 800de62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800de64:	69fb      	ldr	r3, [r7, #28]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3720      	adds	r7, #32
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20001448 	.word	0x20001448

0800de74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800de74:	b580      	push	{r7, lr}
 800de76:	b08c      	sub	sp, #48	; 0x30
 800de78:	af02      	add	r7, sp, #8
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800de80:	2300      	movs	r3, #0
 800de82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de84:	f3ef 8305 	mrs	r3, IPSR
 800de88:	61bb      	str	r3, [r7, #24]
  return(result);
 800de8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d16f      	bne.n	800df70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de90:	f3ef 8310 	mrs	r3, PRIMASK
 800de94:	617b      	str	r3, [r7, #20]
  return(result);
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d105      	bne.n	800dea8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de9c:	f3ef 8311 	mrs	r3, BASEPRI
 800dea0:	613b      	str	r3, [r7, #16]
  return(result);
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d003      	beq.n	800deb0 <osMessageQueueNew+0x3c>
 800dea8:	4b34      	ldr	r3, [pc, #208]	; (800df7c <osMessageQueueNew+0x108>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2b02      	cmp	r3, #2
 800deae:	d05f      	beq.n	800df70 <osMessageQueueNew+0xfc>
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d05c      	beq.n	800df70 <osMessageQueueNew+0xfc>
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d059      	beq.n	800df70 <osMessageQueueNew+0xfc>
    mem = -1;
 800debc:	f04f 33ff 	mov.w	r3, #4294967295
 800dec0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d029      	beq.n	800df1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d012      	beq.n	800def6 <osMessageQueueNew+0x82>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	2b4f      	cmp	r3, #79	; 0x4f
 800ded6:	d90e      	bls.n	800def6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00a      	beq.n	800def6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	695a      	ldr	r2, [r3, #20]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	68b9      	ldr	r1, [r7, #8]
 800dee8:	fb01 f303 	mul.w	r3, r1, r3
 800deec:	429a      	cmp	r2, r3
 800deee:	d302      	bcc.n	800def6 <osMessageQueueNew+0x82>
        mem = 1;
 800def0:	2301      	movs	r3, #1
 800def2:	623b      	str	r3, [r7, #32]
 800def4:	e014      	b.n	800df20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d110      	bne.n	800df20 <osMessageQueueNew+0xac>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10c      	bne.n	800df20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d108      	bne.n	800df20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	695b      	ldr	r3, [r3, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d104      	bne.n	800df20 <osMessageQueueNew+0xac>
          mem = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	623b      	str	r3, [r7, #32]
 800df1a:	e001      	b.n	800df20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d10b      	bne.n	800df3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691a      	ldr	r2, [r3, #16]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	2100      	movs	r1, #0
 800df30:	9100      	str	r1, [sp, #0]
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f000 fa65 	bl	800e404 <xQueueGenericCreateStatic>
 800df3a:	6278      	str	r0, [r7, #36]	; 0x24
 800df3c:	e008      	b.n	800df50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800df3e:	6a3b      	ldr	r3, [r7, #32]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d105      	bne.n	800df50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800df44:	2200      	movs	r2, #0
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 fad3 	bl	800e4f4 <xQueueGenericCreate>
 800df4e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00c      	beq.n	800df70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d003      	beq.n	800df64 <osMessageQueueNew+0xf0>
        name = attr->name;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	61fb      	str	r3, [r7, #28]
 800df62:	e001      	b.n	800df68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800df68:	69f9      	ldr	r1, [r7, #28]
 800df6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df6c:	f001 f906 	bl	800f17c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df72:	4618      	mov	r0, r3
 800df74:	3728      	adds	r7, #40	; 0x28
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20001448 	.word	0x20001448

0800df80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800df80:	b580      	push	{r7, lr}
 800df82:	b08a      	sub	sp, #40	; 0x28
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	4613      	mov	r3, r2
 800df8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800df94:	2300      	movs	r3, #0
 800df96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df98:	f3ef 8305 	mrs	r3, IPSR
 800df9c:	61fb      	str	r3, [r7, #28]
  return(result);
 800df9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10f      	bne.n	800dfc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfa4:	f3ef 8310 	mrs	r3, PRIMASK
 800dfa8:	61bb      	str	r3, [r7, #24]
  return(result);
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d105      	bne.n	800dfbc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfb0:	f3ef 8311 	mrs	r3, BASEPRI
 800dfb4:	617b      	str	r3, [r7, #20]
  return(result);
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d02c      	beq.n	800e016 <osMessageQueuePut+0x96>
 800dfbc:	4b28      	ldr	r3, [pc, #160]	; (800e060 <osMessageQueuePut+0xe0>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d128      	bne.n	800e016 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfc4:	6a3b      	ldr	r3, [r7, #32]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <osMessageQueuePut+0x56>
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d002      	beq.n	800dfd6 <osMessageQueuePut+0x56>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d003      	beq.n	800dfde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dfd6:	f06f 0303 	mvn.w	r3, #3
 800dfda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dfdc:	e039      	b.n	800e052 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dfe2:	f107 0210 	add.w	r2, r7, #16
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	6a38      	ldr	r0, [r7, #32]
 800dfec:	f000 fc9a 	bl	800e924 <xQueueGenericSendFromISR>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d003      	beq.n	800dffe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dff6:	f06f 0302 	mvn.w	r3, #2
 800dffa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dffc:	e029      	b.n	800e052 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d026      	beq.n	800e052 <osMessageQueuePut+0xd2>
 800e004:	4b17      	ldr	r3, [pc, #92]	; (800e064 <osMessageQueuePut+0xe4>)
 800e006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e014:	e01d      	b.n	800e052 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d002      	beq.n	800e022 <osMessageQueuePut+0xa2>
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d103      	bne.n	800e02a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e022:	f06f 0303 	mvn.w	r3, #3
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
 800e028:	e014      	b.n	800e054 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e02a:	2300      	movs	r3, #0
 800e02c:	683a      	ldr	r2, [r7, #0]
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	6a38      	ldr	r0, [r7, #32]
 800e032:	f000 fb79 	bl	800e728 <xQueueGenericSend>
 800e036:	4603      	mov	r3, r0
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d00b      	beq.n	800e054 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e042:	f06f 0301 	mvn.w	r3, #1
 800e046:	627b      	str	r3, [r7, #36]	; 0x24
 800e048:	e004      	b.n	800e054 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e04a:	f06f 0302 	mvn.w	r3, #2
 800e04e:	627b      	str	r3, [r7, #36]	; 0x24
 800e050:	e000      	b.n	800e054 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e052:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e056:	4618      	mov	r0, r3
 800e058:	3728      	adds	r7, #40	; 0x28
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20001448 	.word	0x20001448
 800e064:	e000ed04 	.word	0xe000ed04

0800e068 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08a      	sub	sp, #40	; 0x28
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e07e:	f3ef 8305 	mrs	r3, IPSR
 800e082:	61fb      	str	r3, [r7, #28]
  return(result);
 800e084:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10f      	bne.n	800e0aa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e08a:	f3ef 8310 	mrs	r3, PRIMASK
 800e08e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d105      	bne.n	800e0a2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e096:	f3ef 8311 	mrs	r3, BASEPRI
 800e09a:	617b      	str	r3, [r7, #20]
  return(result);
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d02c      	beq.n	800e0fc <osMessageQueueGet+0x94>
 800e0a2:	4b28      	ldr	r3, [pc, #160]	; (800e144 <osMessageQueueGet+0xdc>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d128      	bne.n	800e0fc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d005      	beq.n	800e0bc <osMessageQueueGet+0x54>
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d002      	beq.n	800e0bc <osMessageQueueGet+0x54>
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d003      	beq.n	800e0c4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e0bc:	f06f 0303 	mvn.w	r3, #3
 800e0c0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0c2:	e038      	b.n	800e136 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e0c8:	f107 0310 	add.w	r3, r7, #16
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	68b9      	ldr	r1, [r7, #8]
 800e0d0:	6a38      	ldr	r0, [r7, #32]
 800e0d2:	f000 feab 	bl	800ee2c <xQueueReceiveFromISR>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d003      	beq.n	800e0e4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e0dc:	f06f 0302 	mvn.w	r3, #2
 800e0e0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0e2:	e028      	b.n	800e136 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d025      	beq.n	800e136 <osMessageQueueGet+0xce>
 800e0ea:	4b17      	ldr	r3, [pc, #92]	; (800e148 <osMessageQueueGet+0xe0>)
 800e0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0f0:	601a      	str	r2, [r3, #0]
 800e0f2:	f3bf 8f4f 	dsb	sy
 800e0f6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0fa:	e01c      	b.n	800e136 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <osMessageQueueGet+0xa0>
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d103      	bne.n	800e110 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e108:	f06f 0303 	mvn.w	r3, #3
 800e10c:	627b      	str	r3, [r7, #36]	; 0x24
 800e10e:	e013      	b.n	800e138 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	68b9      	ldr	r1, [r7, #8]
 800e114:	6a38      	ldr	r0, [r7, #32]
 800e116:	f000 fc9d 	bl	800ea54 <xQueueReceive>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d00b      	beq.n	800e138 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e126:	f06f 0301 	mvn.w	r3, #1
 800e12a:	627b      	str	r3, [r7, #36]	; 0x24
 800e12c:	e004      	b.n	800e138 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e12e:	f06f 0302 	mvn.w	r3, #2
 800e132:	627b      	str	r3, [r7, #36]	; 0x24
 800e134:	e000      	b.n	800e138 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e136:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3728      	adds	r7, #40	; 0x28
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20001448 	.word	0x20001448
 800e148:	e000ed04 	.word	0xe000ed04

0800e14c <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 800e156:	bf00      	nop
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
	...

0800e164 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	4a07      	ldr	r2, [pc, #28]	; (800e190 <vApplicationGetIdleTaskMemory+0x2c>)
 800e174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	4a06      	ldr	r2, [pc, #24]	; (800e194 <vApplicationGetIdleTaskMemory+0x30>)
 800e17a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2280      	movs	r2, #128	; 0x80
 800e180:	601a      	str	r2, [r3, #0]
}
 800e182:	bf00      	nop
 800e184:	3714      	adds	r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop
 800e190:	2000144c 	.word	0x2000144c
 800e194:	200014a8 	.word	0x200014a8

0800e198 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e198:	b480      	push	{r7}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4a07      	ldr	r2, [pc, #28]	; (800e1c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e1a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	4a06      	ldr	r2, [pc, #24]	; (800e1c8 <vApplicationGetTimerTaskMemory+0x30>)
 800e1ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1b6:	601a      	str	r2, [r3, #0]
}
 800e1b8:	bf00      	nop
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	200016a8 	.word	0x200016a8
 800e1c8:	20001704 	.word	0x20001704

0800e1cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f103 0208 	add.w	r2, r3, #8
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f103 0208 	add.w	r2, r3, #8
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f103 0208 	add.w	r2, r3, #8
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e21a:	bf00      	nop
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e226:	b480      	push	{r7}
 800e228:	b085      	sub	sp, #20
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	1c5a      	adds	r2, r3, #1
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	601a      	str	r2, [r3, #0]
}
 800e262:	bf00      	nop
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e26e:	b480      	push	{r7}
 800e270:	b085      	sub	sp, #20
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e284:	d103      	bne.n	800e28e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	60fb      	str	r3, [r7, #12]
 800e28c:	e00c      	b.n	800e2a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	3308      	adds	r3, #8
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	e002      	b.n	800e29c <vListInsert+0x2e>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d2f6      	bcs.n	800e296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	685a      	ldr	r2, [r3, #4]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	683a      	ldr	r2, [r7, #0]
 800e2c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	601a      	str	r2, [r3, #0]
}
 800e2d4:	bf00      	nop
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	6892      	ldr	r2, [r2, #8]
 800e2f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	6852      	ldr	r2, [r2, #4]
 800e300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d103      	bne.n	800e314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	689a      	ldr	r2, [r3, #8]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2200      	movs	r2, #0
 800e318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	1e5a      	subs	r2, r3, #1
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e35e:	f002 fc01 	bl	8010b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36a:	68f9      	ldr	r1, [r7, #12]
 800e36c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e36e:	fb01 f303 	mul.w	r3, r1, r3
 800e372:	441a      	add	r2, r3
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e38e:	3b01      	subs	r3, #1
 800e390:	68f9      	ldr	r1, [r7, #12]
 800e392:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e394:	fb01 f303 	mul.w	r3, r1, r3
 800e398:	441a      	add	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	22ff      	movs	r2, #255	; 0xff
 800e3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	22ff      	movs	r2, #255	; 0xff
 800e3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d114      	bne.n	800e3de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d01a      	beq.n	800e3f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	3310      	adds	r3, #16
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f001 fba7 	bl	800fb14 <xTaskRemoveFromEventList>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d012      	beq.n	800e3f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e3cc:	4b0c      	ldr	r3, [pc, #48]	; (800e400 <xQueueGenericReset+0xcc>)
 800e3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	e009      	b.n	800e3f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3310      	adds	r3, #16
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fef2 	bl	800e1cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3324      	adds	r3, #36	; 0x24
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff feed 	bl	800e1cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e3f2:	f002 fbe7 	bl	8010bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e3f6:	2301      	movs	r3, #1
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	e000ed04 	.word	0xe000ed04

0800e404 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08e      	sub	sp, #56	; 0x38
 800e408:	af02      	add	r7, sp, #8
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10a      	bne.n	800e42e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10a      	bne.n	800e44a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d002      	beq.n	800e456 <xQueueGenericCreateStatic+0x52>
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <xQueueGenericCreateStatic+0x56>
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <xQueueGenericCreateStatic+0x58>
 800e45a:	2300      	movs	r3, #0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10a      	bne.n	800e476 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	623b      	str	r3, [r7, #32]
}
 800e472:	bf00      	nop
 800e474:	e7fe      	b.n	800e474 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d102      	bne.n	800e482 <xQueueGenericCreateStatic+0x7e>
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d101      	bne.n	800e486 <xQueueGenericCreateStatic+0x82>
 800e482:	2301      	movs	r3, #1
 800e484:	e000      	b.n	800e488 <xQueueGenericCreateStatic+0x84>
 800e486:	2300      	movs	r3, #0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10a      	bne.n	800e4a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	61fb      	str	r3, [r7, #28]
}
 800e49e:	bf00      	nop
 800e4a0:	e7fe      	b.n	800e4a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e4a2:	2350      	movs	r3, #80	; 0x50
 800e4a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	2b50      	cmp	r3, #80	; 0x50
 800e4aa:	d00a      	beq.n	800e4c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	61bb      	str	r3, [r7, #24]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e4c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00d      	beq.n	800e4ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	68b9      	ldr	r1, [r7, #8]
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 f845 	bl	800e574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3730      	adds	r7, #48	; 0x30
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b08a      	sub	sp, #40	; 0x28
 800e4f8:	af02      	add	r7, sp, #8
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	4613      	mov	r3, r2
 800e500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10a      	bne.n	800e51e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	613b      	str	r3, [r7, #16]
}
 800e51a:	bf00      	nop
 800e51c:	e7fe      	b.n	800e51c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d102      	bne.n	800e52a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e524:	2300      	movs	r3, #0
 800e526:	61fb      	str	r3, [r7, #28]
 800e528:	e004      	b.n	800e534 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	fb02 f303 	mul.w	r3, r2, r3
 800e532:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	3350      	adds	r3, #80	; 0x50
 800e538:	4618      	mov	r0, r3
 800e53a:	f002 fc35 	bl	8010da8 <pvPortMalloc>
 800e53e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d011      	beq.n	800e56a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	3350      	adds	r3, #80	; 0x50
 800e54e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	2200      	movs	r2, #0
 800e554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e558:	79fa      	ldrb	r2, [r7, #7]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	4613      	mov	r3, r2
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	68b9      	ldr	r1, [r7, #8]
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 f805 	bl	800e574 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e56a:	69bb      	ldr	r3, [r7, #24]
	}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3720      	adds	r7, #32
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
 800e580:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d103      	bne.n	800e590 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	69ba      	ldr	r2, [r7, #24]
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	e002      	b.n	800e596 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	69b8      	ldr	r0, [r7, #24]
 800e5a6:	f7ff fec5 	bl	800e334 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	78fa      	ldrb	r2, [r7, #3]
 800e5ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5b2:	bf00      	nop
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b082      	sub	sp, #8
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00e      	beq.n	800e5e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e5da:	2300      	movs	r3, #0
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2100      	movs	r1, #0
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f8a1 	bl	800e728 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e5e6:	bf00      	nop
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b086      	sub	sp, #24
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	461a      	mov	r2, r3
 800e604:	6939      	ldr	r1, [r7, #16]
 800e606:	6978      	ldr	r0, [r7, #20]
 800e608:	f7ff ff74 	bl	800e4f4 <xQueueGenericCreate>
 800e60c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f7ff ffd3 	bl	800e5ba <prvInitialiseMutex>

		return xNewQueue;
 800e614:	68fb      	ldr	r3, [r7, #12]
	}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b088      	sub	sp, #32
 800e622:	af02      	add	r7, sp, #8
 800e624:	4603      	mov	r3, r0
 800e626:	6039      	str	r1, [r7, #0]
 800e628:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e62a:	2301      	movs	r3, #1
 800e62c:	617b      	str	r3, [r7, #20]
 800e62e:	2300      	movs	r3, #0
 800e630:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2200      	movs	r2, #0
 800e63a:	6939      	ldr	r1, [r7, #16]
 800e63c:	6978      	ldr	r0, [r7, #20]
 800e63e:	f7ff fee1 	bl	800e404 <xQueueGenericCreateStatic>
 800e642:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff ffb8 	bl	800e5ba <prvInitialiseMutex>

		return xNewQueue;
 800e64a:	68fb      	ldr	r3, [r7, #12]
	}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3718      	adds	r7, #24
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e654:	b590      	push	{r4, r7, lr}
 800e656:	b087      	sub	sp, #28
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10a      	bne.n	800e67c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	60fb      	str	r3, [r7, #12]
}
 800e678:	bf00      	nop
 800e67a:	e7fe      	b.n	800e67a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	689c      	ldr	r4, [r3, #8]
 800e680:	f001 fc06 	bl	800fe90 <xTaskGetCurrentTaskHandle>
 800e684:	4603      	mov	r3, r0
 800e686:	429c      	cmp	r4, r3
 800e688:	d111      	bne.n	800e6ae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	1e5a      	subs	r2, r3, #1
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d105      	bne.n	800e6a8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e69c:	2300      	movs	r3, #0
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	6938      	ldr	r0, [r7, #16]
 800e6a4:	f000 f840 	bl	800e728 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	617b      	str	r3, [r7, #20]
 800e6ac:	e001      	b.n	800e6b2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e6b2:	697b      	ldr	r3, [r7, #20]
	}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	371c      	adds	r7, #28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd90      	pop	{r4, r7, pc}

0800e6bc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e6bc:	b590      	push	{r4, r7, lr}
 800e6be:	b087      	sub	sp, #28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d10a      	bne.n	800e6e6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	60fb      	str	r3, [r7, #12]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	689c      	ldr	r4, [r3, #8]
 800e6ea:	f001 fbd1 	bl	800fe90 <xTaskGetCurrentTaskHandle>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	429c      	cmp	r4, r3
 800e6f2:	d107      	bne.n	800e704 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e6fe:	2301      	movs	r3, #1
 800e700:	617b      	str	r3, [r7, #20]
 800e702:	e00c      	b.n	800e71e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6938      	ldr	r0, [r7, #16]
 800e708:	f000 fa84 	bl	800ec14 <xQueueSemaphoreTake>
 800e70c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d004      	beq.n	800e71e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e71e:	697b      	ldr	r3, [r7, #20]
	}
 800e720:	4618      	mov	r0, r3
 800e722:	371c      	adds	r7, #28
 800e724:	46bd      	mov	sp, r7
 800e726:	bd90      	pop	{r4, r7, pc}

0800e728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08e      	sub	sp, #56	; 0x38
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e736:	2300      	movs	r3, #0
 800e738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10a      	bne.n	800e75a <xQueueGenericSend+0x32>
	__asm volatile
 800e744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e756:	bf00      	nop
 800e758:	e7fe      	b.n	800e758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d103      	bne.n	800e768 <xQueueGenericSend+0x40>
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <xQueueGenericSend+0x44>
 800e768:	2301      	movs	r3, #1
 800e76a:	e000      	b.n	800e76e <xQueueGenericSend+0x46>
 800e76c:	2300      	movs	r3, #0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <xQueueGenericSend+0x60>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	f383 8811 	msr	BASEPRI, r3
 800e77a:	f3bf 8f6f 	isb	sy
 800e77e:	f3bf 8f4f 	dsb	sy
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e784:	bf00      	nop
 800e786:	e7fe      	b.n	800e786 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	d103      	bne.n	800e796 <xQueueGenericSend+0x6e>
 800e78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e792:	2b01      	cmp	r3, #1
 800e794:	d101      	bne.n	800e79a <xQueueGenericSend+0x72>
 800e796:	2301      	movs	r3, #1
 800e798:	e000      	b.n	800e79c <xQueueGenericSend+0x74>
 800e79a:	2300      	movs	r3, #0
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10a      	bne.n	800e7b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	623b      	str	r3, [r7, #32]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7b6:	f001 fb7b 	bl	800feb0 <xTaskGetSchedulerState>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d102      	bne.n	800e7c6 <xQueueGenericSend+0x9e>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <xQueueGenericSend+0xa2>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e000      	b.n	800e7cc <xQueueGenericSend+0xa4>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10a      	bne.n	800e7e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	61fb      	str	r3, [r7, #28]
}
 800e7e2:	bf00      	nop
 800e7e4:	e7fe      	b.n	800e7e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e7e6:	f002 f9bd 	bl	8010b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d302      	bcc.n	800e7fc <xQueueGenericSend+0xd4>
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d129      	bne.n	800e850 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	68b9      	ldr	r1, [r7, #8]
 800e800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e802:	f000 fbab 	bl	800ef5c <prvCopyDataToQueue>
 800e806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d010      	beq.n	800e832 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	3324      	adds	r3, #36	; 0x24
 800e814:	4618      	mov	r0, r3
 800e816:	f001 f97d 	bl	800fb14 <xTaskRemoveFromEventList>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d013      	beq.n	800e848 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e820:	4b3f      	ldr	r3, [pc, #252]	; (800e920 <xQueueGenericSend+0x1f8>)
 800e822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	e00a      	b.n	800e848 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	2b00      	cmp	r3, #0
 800e836:	d007      	beq.n	800e848 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e838:	4b39      	ldr	r3, [pc, #228]	; (800e920 <xQueueGenericSend+0x1f8>)
 800e83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e848:	f002 f9bc 	bl	8010bc4 <vPortExitCritical>
				return pdPASS;
 800e84c:	2301      	movs	r3, #1
 800e84e:	e063      	b.n	800e918 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d103      	bne.n	800e85e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e856:	f002 f9b5 	bl	8010bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	e05c      	b.n	800e918 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e860:	2b00      	cmp	r3, #0
 800e862:	d106      	bne.n	800e872 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e864:	f107 0314 	add.w	r3, r7, #20
 800e868:	4618      	mov	r0, r3
 800e86a:	f001 f9b7 	bl	800fbdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e86e:	2301      	movs	r3, #1
 800e870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e872:	f002 f9a7 	bl	8010bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e876:	f000 ff1b 	bl	800f6b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e87a:	f002 f973 	bl	8010b64 <vPortEnterCritical>
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e884:	b25b      	sxtb	r3, r3
 800e886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e88a:	d103      	bne.n	800e894 <xQueueGenericSend+0x16c>
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e89a:	b25b      	sxtb	r3, r3
 800e89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a0:	d103      	bne.n	800e8aa <xQueueGenericSend+0x182>
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8aa:	f002 f98b 	bl	8010bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8ae:	1d3a      	adds	r2, r7, #4
 800e8b0:	f107 0314 	add.w	r3, r7, #20
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f001 f9a6 	bl	800fc08 <xTaskCheckForTimeOut>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d124      	bne.n	800e90c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e8c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8c4:	f000 fc42 	bl	800f14c <prvIsQueueFull>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d018      	beq.n	800e900 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	3310      	adds	r3, #16
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f001 f8cc 	bl	800fa74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8de:	f000 fbcd 	bl	800f07c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e8e2:	f000 fef3 	bl	800f6cc <xTaskResumeAll>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f47f af7c 	bne.w	800e7e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <xQueueGenericSend+0x1f8>)
 800e8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	e772      	b.n	800e7e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e902:	f000 fbbb 	bl	800f07c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e906:	f000 fee1 	bl	800f6cc <xTaskResumeAll>
 800e90a:	e76c      	b.n	800e7e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e90e:	f000 fbb5 	bl	800f07c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e912:	f000 fedb 	bl	800f6cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3738      	adds	r7, #56	; 0x38
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	e000ed04 	.word	0xe000ed04

0800e924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08e      	sub	sp, #56	; 0x38
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
 800e930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10a      	bne.n	800e952 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e940:	f383 8811 	msr	BASEPRI, r3
 800e944:	f3bf 8f6f 	isb	sy
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e94e:	bf00      	nop
 800e950:	e7fe      	b.n	800e950 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d103      	bne.n	800e960 <xQueueGenericSendFromISR+0x3c>
 800e958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <xQueueGenericSendFromISR+0x40>
 800e960:	2301      	movs	r3, #1
 800e962:	e000      	b.n	800e966 <xQueueGenericSendFromISR+0x42>
 800e964:	2300      	movs	r3, #0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10a      	bne.n	800e980 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	623b      	str	r3, [r7, #32]
}
 800e97c:	bf00      	nop
 800e97e:	e7fe      	b.n	800e97e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b02      	cmp	r3, #2
 800e984:	d103      	bne.n	800e98e <xQueueGenericSendFromISR+0x6a>
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d101      	bne.n	800e992 <xQueueGenericSendFromISR+0x6e>
 800e98e:	2301      	movs	r3, #1
 800e990:	e000      	b.n	800e994 <xQueueGenericSendFromISR+0x70>
 800e992:	2300      	movs	r3, #0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	61fb      	str	r3, [r7, #28]
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9ae:	f002 f9bb 	bl	8010d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e9b2:	f3ef 8211 	mrs	r2, BASEPRI
 800e9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ba:	f383 8811 	msr	BASEPRI, r3
 800e9be:	f3bf 8f6f 	isb	sy
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	61ba      	str	r2, [r7, #24]
 800e9c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e9ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d302      	bcc.n	800e9e0 <xQueueGenericSendFromISR+0xbc>
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d12c      	bne.n	800ea3a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	68b9      	ldr	r1, [r7, #8]
 800e9ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9f0:	f000 fab4 	bl	800ef5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e9f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fc:	d112      	bne.n	800ea24 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d016      	beq.n	800ea34 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	3324      	adds	r3, #36	; 0x24
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f001 f882 	bl	800fb14 <xTaskRemoveFromEventList>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00e      	beq.n	800ea34 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00b      	beq.n	800ea34 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	e007      	b.n	800ea34 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ea28:	3301      	adds	r3, #1
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	b25a      	sxtb	r2, r3
 800ea2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea34:	2301      	movs	r3, #1
 800ea36:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ea38:	e001      	b.n	800ea3e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3738      	adds	r7, #56	; 0x38
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08c      	sub	sp, #48	; 0x30
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea60:	2300      	movs	r3, #0
 800ea62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d10a      	bne.n	800ea84 <xQueueReceive+0x30>
	__asm volatile
 800ea6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea72:	f383 8811 	msr	BASEPRI, r3
 800ea76:	f3bf 8f6f 	isb	sy
 800ea7a:	f3bf 8f4f 	dsb	sy
 800ea7e:	623b      	str	r3, [r7, #32]
}
 800ea80:	bf00      	nop
 800ea82:	e7fe      	b.n	800ea82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d103      	bne.n	800ea92 <xQueueReceive+0x3e>
 800ea8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <xQueueReceive+0x42>
 800ea92:	2301      	movs	r3, #1
 800ea94:	e000      	b.n	800ea98 <xQueueReceive+0x44>
 800ea96:	2300      	movs	r3, #0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10a      	bne.n	800eab2 <xQueueReceive+0x5e>
	__asm volatile
 800ea9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	61fb      	str	r3, [r7, #28]
}
 800eaae:	bf00      	nop
 800eab0:	e7fe      	b.n	800eab0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eab2:	f001 f9fd 	bl	800feb0 <xTaskGetSchedulerState>
 800eab6:	4603      	mov	r3, r0
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d102      	bne.n	800eac2 <xQueueReceive+0x6e>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <xQueueReceive+0x72>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <xQueueReceive+0x74>
 800eac6:	2300      	movs	r3, #0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10a      	bne.n	800eae2 <xQueueReceive+0x8e>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	61bb      	str	r3, [r7, #24]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eae2:	f002 f83f 	bl	8010b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d01f      	beq.n	800eb32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eaf2:	68b9      	ldr	r1, [r7, #8]
 800eaf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaf6:	f000 fa9b 	bl	800f030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	1e5a      	subs	r2, r3, #1
 800eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb04:	691b      	ldr	r3, [r3, #16]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00f      	beq.n	800eb2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	3310      	adds	r3, #16
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f001 f800 	bl	800fb14 <xTaskRemoveFromEventList>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d007      	beq.n	800eb2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb1a:	4b3d      	ldr	r3, [pc, #244]	; (800ec10 <xQueueReceive+0x1bc>)
 800eb1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb2a:	f002 f84b 	bl	8010bc4 <vPortExitCritical>
				return pdPASS;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e069      	b.n	800ec06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb38:	f002 f844 	bl	8010bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e062      	b.n	800ec06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d106      	bne.n	800eb54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb46:	f107 0310 	add.w	r3, r7, #16
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f001 f846 	bl	800fbdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb50:	2301      	movs	r3, #1
 800eb52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb54:	f002 f836 	bl	8010bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb58:	f000 fdaa 	bl	800f6b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb5c:	f002 f802 	bl	8010b64 <vPortEnterCritical>
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb66:	b25b      	sxtb	r3, r3
 800eb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6c:	d103      	bne.n	800eb76 <xQueueReceive+0x122>
 800eb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb7c:	b25b      	sxtb	r3, r3
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d103      	bne.n	800eb8c <xQueueReceive+0x138>
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb8c:	f002 f81a 	bl	8010bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb90:	1d3a      	adds	r2, r7, #4
 800eb92:	f107 0310 	add.w	r3, r7, #16
 800eb96:	4611      	mov	r1, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 f835 	bl	800fc08 <xTaskCheckForTimeOut>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d123      	bne.n	800ebec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eba6:	f000 fabb 	bl	800f120 <prvIsQueueEmpty>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d017      	beq.n	800ebe0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	3324      	adds	r3, #36	; 0x24
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 ff5b 	bl	800fa74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebc0:	f000 fa5c 	bl	800f07c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebc4:	f000 fd82 	bl	800f6cc <xTaskResumeAll>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d189      	bne.n	800eae2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ebce:	4b10      	ldr	r3, [pc, #64]	; (800ec10 <xQueueReceive+0x1bc>)
 800ebd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd4:	601a      	str	r2, [r3, #0]
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	e780      	b.n	800eae2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ebe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebe2:	f000 fa4b 	bl	800f07c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebe6:	f000 fd71 	bl	800f6cc <xTaskResumeAll>
 800ebea:	e77a      	b.n	800eae2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ebec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebee:	f000 fa45 	bl	800f07c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebf2:	f000 fd6b 	bl	800f6cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebf8:	f000 fa92 	bl	800f120 <prvIsQueueEmpty>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f43f af6f 	beq.w	800eae2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3730      	adds	r7, #48	; 0x30
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	e000ed04 	.word	0xe000ed04

0800ec14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b08e      	sub	sp, #56	; 0x38
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec26:	2300      	movs	r3, #0
 800ec28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d10a      	bne.n	800ec46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ec30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec34:	f383 8811 	msr	BASEPRI, r3
 800ec38:	f3bf 8f6f 	isb	sy
 800ec3c:	f3bf 8f4f 	dsb	sy
 800ec40:	623b      	str	r3, [r7, #32]
}
 800ec42:	bf00      	nop
 800ec44:	e7fe      	b.n	800ec44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	61fb      	str	r3, [r7, #28]
}
 800ec60:	bf00      	nop
 800ec62:	e7fe      	b.n	800ec62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec64:	f001 f924 	bl	800feb0 <xTaskGetSchedulerState>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d102      	bne.n	800ec74 <xQueueSemaphoreTake+0x60>
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <xQueueSemaphoreTake+0x64>
 800ec74:	2301      	movs	r3, #1
 800ec76:	e000      	b.n	800ec7a <xQueueSemaphoreTake+0x66>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10a      	bne.n	800ec94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	61bb      	str	r3, [r7, #24]
}
 800ec90:	bf00      	nop
 800ec92:	e7fe      	b.n	800ec92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec94:	f001 ff66 	bl	8010b64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d024      	beq.n	800ecee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca6:	1e5a      	subs	r2, r3, #1
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d104      	bne.n	800ecbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ecb4:	f001 fa72 	bl	801019c <pvTaskIncrementMutexHeldCount>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00f      	beq.n	800ece6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc8:	3310      	adds	r3, #16
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 ff22 	bl	800fb14 <xTaskRemoveFromEventList>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d007      	beq.n	800ece6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ecd6:	4b54      	ldr	r3, [pc, #336]	; (800ee28 <xQueueSemaphoreTake+0x214>)
 800ecd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ece6:	f001 ff6d 	bl	8010bc4 <vPortExitCritical>
				return pdPASS;
 800ecea:	2301      	movs	r3, #1
 800ecec:	e097      	b.n	800ee1e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d111      	bne.n	800ed18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ecfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfe:	f383 8811 	msr	BASEPRI, r3
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	617b      	str	r3, [r7, #20]
}
 800ed0c:	bf00      	nop
 800ed0e:	e7fe      	b.n	800ed0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed10:	f001 ff58 	bl	8010bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed14:	2300      	movs	r3, #0
 800ed16:	e082      	b.n	800ee1e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d106      	bne.n	800ed2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed1e:	f107 030c 	add.w	r3, r7, #12
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 ff5a 	bl	800fbdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed2c:	f001 ff4a 	bl	8010bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed30:	f000 fcbe 	bl	800f6b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed34:	f001 ff16 	bl	8010b64 <vPortEnterCritical>
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed3e:	b25b      	sxtb	r3, r3
 800ed40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed44:	d103      	bne.n	800ed4e <xQueueSemaphoreTake+0x13a>
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed54:	b25b      	sxtb	r3, r3
 800ed56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5a:	d103      	bne.n	800ed64 <xQueueSemaphoreTake+0x150>
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed64:	f001 ff2e 	bl	8010bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed68:	463a      	mov	r2, r7
 800ed6a:	f107 030c 	add.w	r3, r7, #12
 800ed6e:	4611      	mov	r1, r2
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 ff49 	bl	800fc08 <xTaskCheckForTimeOut>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d132      	bne.n	800ede2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed7e:	f000 f9cf 	bl	800f120 <prvIsQueueEmpty>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d026      	beq.n	800edd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d109      	bne.n	800eda4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ed90:	f001 fee8 	bl	8010b64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f001 f8a7 	bl	800feec <xTaskPriorityInherit>
 800ed9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eda0:	f001 ff10 	bl	8010bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	3324      	adds	r3, #36	; 0x24
 800eda8:	683a      	ldr	r2, [r7, #0]
 800edaa:	4611      	mov	r1, r2
 800edac:	4618      	mov	r0, r3
 800edae:	f000 fe61 	bl	800fa74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800edb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edb4:	f000 f962 	bl	800f07c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edb8:	f000 fc88 	bl	800f6cc <xTaskResumeAll>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f47f af68 	bne.w	800ec94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800edc4:	4b18      	ldr	r3, [pc, #96]	; (800ee28 <xQueueSemaphoreTake+0x214>)
 800edc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edca:	601a      	str	r2, [r3, #0]
 800edcc:	f3bf 8f4f 	dsb	sy
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	e75e      	b.n	800ec94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800edd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd8:	f000 f950 	bl	800f07c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eddc:	f000 fc76 	bl	800f6cc <xTaskResumeAll>
 800ede0:	e758      	b.n	800ec94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ede2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ede4:	f000 f94a 	bl	800f07c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ede8:	f000 fc70 	bl	800f6cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edee:	f000 f997 	bl	800f120 <prvIsQueueEmpty>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f43f af4d 	beq.w	800ec94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00d      	beq.n	800ee1c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ee00:	f001 feb0 	bl	8010b64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee06:	f000 f891 	bl	800ef2c <prvGetDisinheritPriorityAfterTimeout>
 800ee0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee12:	4618      	mov	r0, r3
 800ee14:	f001 f940 	bl	8010098 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee18:	f001 fed4 	bl	8010bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3738      	adds	r7, #56	; 0x38
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	e000ed04 	.word	0xe000ed04

0800ee2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b08e      	sub	sp, #56	; 0x38
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d10a      	bne.n	800ee58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ee42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee46:	f383 8811 	msr	BASEPRI, r3
 800ee4a:	f3bf 8f6f 	isb	sy
 800ee4e:	f3bf 8f4f 	dsb	sy
 800ee52:	623b      	str	r3, [r7, #32]
}
 800ee54:	bf00      	nop
 800ee56:	e7fe      	b.n	800ee56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d103      	bne.n	800ee66 <xQueueReceiveFromISR+0x3a>
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <xQueueReceiveFromISR+0x3e>
 800ee66:	2301      	movs	r3, #1
 800ee68:	e000      	b.n	800ee6c <xQueueReceiveFromISR+0x40>
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10a      	bne.n	800ee86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ee70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee74:	f383 8811 	msr	BASEPRI, r3
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	61fb      	str	r3, [r7, #28]
}
 800ee82:	bf00      	nop
 800ee84:	e7fe      	b.n	800ee84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee86:	f001 ff4f 	bl	8010d28 <vPortValidateInterruptPriority>
	__asm volatile
 800ee8a:	f3ef 8211 	mrs	r2, BASEPRI
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	61ba      	str	r2, [r7, #24]
 800eea0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eea2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d02f      	beq.n	800ef12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eebc:	68b9      	ldr	r1, [r7, #8]
 800eebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eec0:	f000 f8b6 	bl	800f030 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	1e5a      	subs	r2, r3, #1
 800eec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed4:	d112      	bne.n	800eefc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d016      	beq.n	800ef0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	3310      	adds	r3, #16
 800eee2:	4618      	mov	r0, r3
 800eee4:	f000 fe16 	bl	800fb14 <xTaskRemoveFromEventList>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d00e      	beq.n	800ef0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d00b      	beq.n	800ef0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	e007      	b.n	800ef0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef00:	3301      	adds	r3, #1
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	b25a      	sxtb	r2, r3
 800ef06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ef10:	e001      	b.n	800ef16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ef12:	2300      	movs	r3, #0
 800ef14:	637b      	str	r3, [r7, #52]	; 0x34
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	f383 8811 	msr	BASEPRI, r3
}
 800ef20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3738      	adds	r7, #56	; 0x38
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d006      	beq.n	800ef4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	e001      	b.n	800ef4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
	}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3714      	adds	r7, #20
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b086      	sub	sp, #24
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10d      	bne.n	800ef96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d14d      	bne.n	800f01e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f001 f818 	bl	800ffbc <xTaskPriorityDisinherit>
 800ef8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	609a      	str	r2, [r3, #8]
 800ef94:	e043      	b.n	800f01e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d119      	bne.n	800efd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6858      	ldr	r0, [r3, #4]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efa4:	461a      	mov	r2, r3
 800efa6:	68b9      	ldr	r1, [r7, #8]
 800efa8:	f003 fc72 	bl	8012890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efb4:	441a      	add	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d32b      	bcc.n	800f01e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	605a      	str	r2, [r3, #4]
 800efce:	e026      	b.n	800f01e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	68d8      	ldr	r0, [r3, #12]
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd8:	461a      	mov	r2, r3
 800efda:	68b9      	ldr	r1, [r7, #8]
 800efdc:	f003 fc58 	bl	8012890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	68da      	ldr	r2, [r3, #12]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe8:	425b      	negs	r3, r3
 800efea:	441a      	add	r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d207      	bcs.n	800f00c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	689a      	ldr	r2, [r3, #8]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f004:	425b      	negs	r3, r3
 800f006:	441a      	add	r2, r3
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d105      	bne.n	800f01e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	3b01      	subs	r3, #1
 800f01c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	1c5a      	adds	r2, r3, #1
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f026:	697b      	ldr	r3, [r7, #20]
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3718      	adds	r7, #24
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d018      	beq.n	800f074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	68da      	ldr	r2, [r3, #12]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04a:	441a      	add	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	429a      	cmp	r2, r3
 800f05a:	d303      	bcc.n	800f064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	68d9      	ldr	r1, [r3, #12]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06c:	461a      	mov	r2, r3
 800f06e:	6838      	ldr	r0, [r7, #0]
 800f070:	f003 fc0e 	bl	8012890 <memcpy>
	}
}
 800f074:	bf00      	nop
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f084:	f001 fd6e 	bl	8010b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f08e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f090:	e011      	b.n	800f0b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	d012      	beq.n	800f0c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3324      	adds	r3, #36	; 0x24
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 fd38 	bl	800fb14 <xTaskRemoveFromEventList>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0aa:	f000 fe0f 	bl	800fccc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0ae:	7bfb      	ldrb	r3, [r7, #15]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	dce9      	bgt.n	800f092 <prvUnlockQueue+0x16>
 800f0be:	e000      	b.n	800f0c2 <prvUnlockQueue+0x46>
					break;
 800f0c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	22ff      	movs	r2, #255	; 0xff
 800f0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f0ca:	f001 fd7b 	bl	8010bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f0ce:	f001 fd49 	bl	8010b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0da:	e011      	b.n	800f100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d012      	beq.n	800f10a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	3310      	adds	r3, #16
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fd13 	bl	800fb14 <xTaskRemoveFromEventList>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d001      	beq.n	800f0f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f0f4:	f000 fdea 	bl	800fccc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f0f8:	7bbb      	ldrb	r3, [r7, #14]
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f104:	2b00      	cmp	r3, #0
 800f106:	dce9      	bgt.n	800f0dc <prvUnlockQueue+0x60>
 800f108:	e000      	b.n	800f10c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f10a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	22ff      	movs	r2, #255	; 0xff
 800f110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f114:	f001 fd56 	bl	8010bc4 <vPortExitCritical>
}
 800f118:	bf00      	nop
 800f11a:	3710      	adds	r7, #16
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f128:	f001 fd1c 	bl	8010b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f130:	2b00      	cmp	r3, #0
 800f132:	d102      	bne.n	800f13a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f134:	2301      	movs	r3, #1
 800f136:	60fb      	str	r3, [r7, #12]
 800f138:	e001      	b.n	800f13e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f13a:	2300      	movs	r3, #0
 800f13c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f13e:	f001 fd41 	bl	8010bc4 <vPortExitCritical>

	return xReturn;
 800f142:	68fb      	ldr	r3, [r7, #12]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f154:	f001 fd06 	bl	8010b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f160:	429a      	cmp	r2, r3
 800f162:	d102      	bne.n	800f16a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f164:	2301      	movs	r3, #1
 800f166:	60fb      	str	r3, [r7, #12]
 800f168:	e001      	b.n	800f16e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f16a:	2300      	movs	r3, #0
 800f16c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f16e:	f001 fd29 	bl	8010bc4 <vPortExitCritical>

	return xReturn;
 800f172:	68fb      	ldr	r3, [r7, #12]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f186:	2300      	movs	r3, #0
 800f188:	60fb      	str	r3, [r7, #12]
 800f18a:	e014      	b.n	800f1b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f18c:	4a0f      	ldr	r2, [pc, #60]	; (800f1cc <vQueueAddToRegistry+0x50>)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d10b      	bne.n	800f1b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f198:	490c      	ldr	r1, [pc, #48]	; (800f1cc <vQueueAddToRegistry+0x50>)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f1a2:	4a0a      	ldr	r2, [pc, #40]	; (800f1cc <vQueueAddToRegistry+0x50>)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	4413      	add	r3, r2
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f1ae:	e006      	b.n	800f1be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	60fb      	str	r3, [r7, #12]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2b07      	cmp	r3, #7
 800f1ba:	d9e7      	bls.n	800f18c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f1bc:	bf00      	nop
 800f1be:	bf00      	nop
 800f1c0:	3714      	adds	r7, #20
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	20005dc8 	.word	0x20005dc8

0800f1d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b086      	sub	sp, #24
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f1e0:	f001 fcc0 	bl	8010b64 <vPortEnterCritical>
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ea:	b25b      	sxtb	r3, r3
 800f1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f0:	d103      	bne.n	800f1fa <vQueueWaitForMessageRestricted+0x2a>
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f200:	b25b      	sxtb	r3, r3
 800f202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f206:	d103      	bne.n	800f210 <vQueueWaitForMessageRestricted+0x40>
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	2200      	movs	r2, #0
 800f20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f210:	f001 fcd8 	bl	8010bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	3324      	adds	r3, #36	; 0x24
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	68b9      	ldr	r1, [r7, #8]
 800f224:	4618      	mov	r0, r3
 800f226:	f000 fc49 	bl	800fabc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f22a:	6978      	ldr	r0, [r7, #20]
 800f22c:	f7ff ff26 	bl	800f07c <prvUnlockQueue>
	}
 800f230:	bf00      	nop
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b08e      	sub	sp, #56	; 0x38
 800f23c:	af04      	add	r7, sp, #16
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
 800f244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10a      	bne.n	800f262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f250:	f383 8811 	msr	BASEPRI, r3
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	623b      	str	r3, [r7, #32]
}
 800f25e:	bf00      	nop
 800f260:	e7fe      	b.n	800f260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10a      	bne.n	800f27e <xTaskCreateStatic+0x46>
	__asm volatile
 800f268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26c:	f383 8811 	msr	BASEPRI, r3
 800f270:	f3bf 8f6f 	isb	sy
 800f274:	f3bf 8f4f 	dsb	sy
 800f278:	61fb      	str	r3, [r7, #28]
}
 800f27a:	bf00      	nop
 800f27c:	e7fe      	b.n	800f27c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f27e:	235c      	movs	r3, #92	; 0x5c
 800f280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	2b5c      	cmp	r3, #92	; 0x5c
 800f286:	d00a      	beq.n	800f29e <xTaskCreateStatic+0x66>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	61bb      	str	r3, [r7, #24]
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f29e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d01e      	beq.n	800f2e4 <xTaskCreateStatic+0xac>
 800f2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d01b      	beq.n	800f2e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b8:	2202      	movs	r2, #2
 800f2ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f2be:	2300      	movs	r3, #0
 800f2c0:	9303      	str	r3, [sp, #12]
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	f107 0314 	add.w	r3, r7, #20
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 f850 	bl	800f37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2de:	f000 f8dd 	bl	800f49c <prvAddNewTaskToReadyList>
 800f2e2:	e001      	b.n	800f2e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f2e8:	697b      	ldr	r3, [r7, #20]
	}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3728      	adds	r7, #40	; 0x28
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b08c      	sub	sp, #48	; 0x30
 800f2f6:	af04      	add	r7, sp, #16
 800f2f8:	60f8      	str	r0, [r7, #12]
 800f2fa:	60b9      	str	r1, [r7, #8]
 800f2fc:	603b      	str	r3, [r7, #0]
 800f2fe:	4613      	mov	r3, r2
 800f300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f302:	88fb      	ldrh	r3, [r7, #6]
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	4618      	mov	r0, r3
 800f308:	f001 fd4e 	bl	8010da8 <pvPortMalloc>
 800f30c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00e      	beq.n	800f332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f314:	205c      	movs	r0, #92	; 0x5c
 800f316:	f001 fd47 	bl	8010da8 <pvPortMalloc>
 800f31a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d003      	beq.n	800f32a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	631a      	str	r2, [r3, #48]	; 0x30
 800f328:	e005      	b.n	800f336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f32a:	6978      	ldr	r0, [r7, #20]
 800f32c:	f001 fe00 	bl	8010f30 <vPortFree>
 800f330:	e001      	b.n	800f336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f332:	2300      	movs	r3, #0
 800f334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d017      	beq.n	800f36c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	2200      	movs	r2, #0
 800f340:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f344:	88fa      	ldrh	r2, [r7, #6]
 800f346:	2300      	movs	r3, #0
 800f348:	9303      	str	r3, [sp, #12]
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	9302      	str	r3, [sp, #8]
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f000 f80e 	bl	800f37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f360:	69f8      	ldr	r0, [r7, #28]
 800f362:	f000 f89b 	bl	800f49c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f366:	2301      	movs	r3, #1
 800f368:	61bb      	str	r3, [r7, #24]
 800f36a:	e002      	b.n	800f372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f36c:	f04f 33ff 	mov.w	r3, #4294967295
 800f370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f372:	69bb      	ldr	r3, [r7, #24]
	}
 800f374:	4618      	mov	r0, r3
 800f376:	3720      	adds	r7, #32
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b088      	sub	sp, #32
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
 800f388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	461a      	mov	r2, r3
 800f394:	21a5      	movs	r1, #165	; 0xa5
 800f396:	f003 faa3 	bl	80128e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	4413      	add	r3, r2
 800f3aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	f023 0307 	bic.w	r3, r3, #7
 800f3b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	f003 0307 	and.w	r3, r3, #7
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00a      	beq.n	800f3d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	617b      	str	r3, [r7, #20]
}
 800f3d0:	bf00      	nop
 800f3d2:	e7fe      	b.n	800f3d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d01f      	beq.n	800f41a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3da:	2300      	movs	r3, #0
 800f3dc:	61fb      	str	r3, [r7, #28]
 800f3de:	e012      	b.n	800f406 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	7819      	ldrb	r1, [r3, #0]
 800f3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	3334      	adds	r3, #52	; 0x34
 800f3f0:	460a      	mov	r2, r1
 800f3f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d006      	beq.n	800f40e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	3301      	adds	r3, #1
 800f404:	61fb      	str	r3, [r7, #28]
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	2b0f      	cmp	r3, #15
 800f40a:	d9e9      	bls.n	800f3e0 <prvInitialiseNewTask+0x64>
 800f40c:	e000      	b.n	800f410 <prvInitialiseNewTask+0x94>
			{
				break;
 800f40e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f412:	2200      	movs	r2, #0
 800f414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f418:	e003      	b.n	800f422 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	2200      	movs	r2, #0
 800f41e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f424:	2b37      	cmp	r3, #55	; 0x37
 800f426:	d901      	bls.n	800f42c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f428:	2337      	movs	r3, #55	; 0x37
 800f42a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f436:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43a:	2200      	movs	r2, #0
 800f43c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f440:	3304      	adds	r3, #4
 800f442:	4618      	mov	r0, r3
 800f444:	f7fe fee2 	bl	800e20c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44a:	3318      	adds	r3, #24
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fe fedd 	bl	800e20c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46a:	2200      	movs	r2, #0
 800f46c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	2200      	movs	r2, #0
 800f472:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f476:	683a      	ldr	r2, [r7, #0]
 800f478:	68f9      	ldr	r1, [r7, #12]
 800f47a:	69b8      	ldr	r0, [r7, #24]
 800f47c:	f001 fa44 	bl	8010908 <pxPortInitialiseStack>
 800f480:	4602      	mov	r2, r0
 800f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d002      	beq.n	800f492 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f492:	bf00      	nop
 800f494:	3720      	adds	r7, #32
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
	...

0800f49c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4a4:	f001 fb5e 	bl	8010b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4a8:	4b2d      	ldr	r3, [pc, #180]	; (800f560 <prvAddNewTaskToReadyList+0xc4>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	4a2c      	ldr	r2, [pc, #176]	; (800f560 <prvAddNewTaskToReadyList+0xc4>)
 800f4b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4b2:	4b2c      	ldr	r3, [pc, #176]	; (800f564 <prvAddNewTaskToReadyList+0xc8>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4ba:	4a2a      	ldr	r2, [pc, #168]	; (800f564 <prvAddNewTaskToReadyList+0xc8>)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f4c0:	4b27      	ldr	r3, [pc, #156]	; (800f560 <prvAddNewTaskToReadyList+0xc4>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d110      	bne.n	800f4ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f4c8:	f000 fc24 	bl	800fd14 <prvInitialiseTaskLists>
 800f4cc:	e00d      	b.n	800f4ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f4ce:	4b26      	ldr	r3, [pc, #152]	; (800f568 <prvAddNewTaskToReadyList+0xcc>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d109      	bne.n	800f4ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f4d6:	4b23      	ldr	r3, [pc, #140]	; (800f564 <prvAddNewTaskToReadyList+0xc8>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d802      	bhi.n	800f4ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f4e4:	4a1f      	ldr	r2, [pc, #124]	; (800f564 <prvAddNewTaskToReadyList+0xc8>)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4ea:	4b20      	ldr	r3, [pc, #128]	; (800f56c <prvAddNewTaskToReadyList+0xd0>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	4a1e      	ldr	r2, [pc, #120]	; (800f56c <prvAddNewTaskToReadyList+0xd0>)
 800f4f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f4f4:	4b1d      	ldr	r3, [pc, #116]	; (800f56c <prvAddNewTaskToReadyList+0xd0>)
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f500:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <prvAddNewTaskToReadyList+0xd4>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	429a      	cmp	r2, r3
 800f506:	d903      	bls.n	800f510 <prvAddNewTaskToReadyList+0x74>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	4a18      	ldr	r2, [pc, #96]	; (800f570 <prvAddNewTaskToReadyList+0xd4>)
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4a15      	ldr	r2, [pc, #84]	; (800f574 <prvAddNewTaskToReadyList+0xd8>)
 800f51e:	441a      	add	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7fe fe7d 	bl	800e226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f52c:	f001 fb4a 	bl	8010bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f530:	4b0d      	ldr	r3, [pc, #52]	; (800f568 <prvAddNewTaskToReadyList+0xcc>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00e      	beq.n	800f556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f538:	4b0a      	ldr	r3, [pc, #40]	; (800f564 <prvAddNewTaskToReadyList+0xc8>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f542:	429a      	cmp	r2, r3
 800f544:	d207      	bcs.n	800f556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <prvAddNewTaskToReadyList+0xdc>)
 800f548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	20001fd8 	.word	0x20001fd8
 800f564:	20001b04 	.word	0x20001b04
 800f568:	20001fe4 	.word	0x20001fe4
 800f56c:	20001ff4 	.word	0x20001ff4
 800f570:	20001fe0 	.word	0x20001fe0
 800f574:	20001b08 	.word	0x20001b08
 800f578:	e000ed04 	.word	0xe000ed04

0800f57c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f584:	2300      	movs	r3, #0
 800f586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d017      	beq.n	800f5be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <vTaskDelay+0x60>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00a      	beq.n	800f5ac <vTaskDelay+0x30>
	__asm volatile
 800f596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59a:	f383 8811 	msr	BASEPRI, r3
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	60bb      	str	r3, [r7, #8]
}
 800f5a8:	bf00      	nop
 800f5aa:	e7fe      	b.n	800f5aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f5ac:	f000 f880 	bl	800f6b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fe06 	bl	80101c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f5b8:	f000 f888 	bl	800f6cc <xTaskResumeAll>
 800f5bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f5c4:	4b06      	ldr	r3, [pc, #24]	; (800f5e0 <vTaskDelay+0x64>)
 800f5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f5d4:	bf00      	nop
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	20002000 	.word	0x20002000
 800f5e0:	e000ed04 	.word	0xe000ed04

0800f5e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b08a      	sub	sp, #40	; 0x28
 800f5e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5f2:	463a      	mov	r2, r7
 800f5f4:	1d39      	adds	r1, r7, #4
 800f5f6:	f107 0308 	add.w	r3, r7, #8
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fe fdb2 	bl	800e164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f600:	6839      	ldr	r1, [r7, #0]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	9202      	str	r2, [sp, #8]
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	2300      	movs	r3, #0
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	2300      	movs	r3, #0
 800f610:	460a      	mov	r2, r1
 800f612:	4921      	ldr	r1, [pc, #132]	; (800f698 <vTaskStartScheduler+0xb4>)
 800f614:	4821      	ldr	r0, [pc, #132]	; (800f69c <vTaskStartScheduler+0xb8>)
 800f616:	f7ff fe0f 	bl	800f238 <xTaskCreateStatic>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4a20      	ldr	r2, [pc, #128]	; (800f6a0 <vTaskStartScheduler+0xbc>)
 800f61e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f620:	4b1f      	ldr	r3, [pc, #124]	; (800f6a0 <vTaskStartScheduler+0xbc>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f628:	2301      	movs	r3, #1
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	e001      	b.n	800f632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f62e:	2300      	movs	r3, #0
 800f630:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d102      	bne.n	800f63e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f638:	f000 fe18 	bl	801026c <xTimerCreateTimerTask>
 800f63c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d116      	bne.n	800f672 <vTaskStartScheduler+0x8e>
	__asm volatile
 800f644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f648:	f383 8811 	msr	BASEPRI, r3
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	613b      	str	r3, [r7, #16]
}
 800f656:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f658:	4b12      	ldr	r3, [pc, #72]	; (800f6a4 <vTaskStartScheduler+0xc0>)
 800f65a:	f04f 32ff 	mov.w	r2, #4294967295
 800f65e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f660:	4b11      	ldr	r3, [pc, #68]	; (800f6a8 <vTaskStartScheduler+0xc4>)
 800f662:	2201      	movs	r2, #1
 800f664:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f666:	4b11      	ldr	r3, [pc, #68]	; (800f6ac <vTaskStartScheduler+0xc8>)
 800f668:	2200      	movs	r2, #0
 800f66a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f66c:	f001 f9d8 	bl	8010a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f670:	e00e      	b.n	800f690 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f678:	d10a      	bne.n	800f690 <vTaskStartScheduler+0xac>
	__asm volatile
 800f67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67e:	f383 8811 	msr	BASEPRI, r3
 800f682:	f3bf 8f6f 	isb	sy
 800f686:	f3bf 8f4f 	dsb	sy
 800f68a:	60fb      	str	r3, [r7, #12]
}
 800f68c:	bf00      	nop
 800f68e:	e7fe      	b.n	800f68e <vTaskStartScheduler+0xaa>
}
 800f690:	bf00      	nop
 800f692:	3718      	adds	r7, #24
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	08012c9c 	.word	0x08012c9c
 800f69c:	0800fce5 	.word	0x0800fce5
 800f6a0:	20001ffc 	.word	0x20001ffc
 800f6a4:	20001ff8 	.word	0x20001ff8
 800f6a8:	20001fe4 	.word	0x20001fe4
 800f6ac:	20001fdc 	.word	0x20001fdc

0800f6b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f6b4:	4b04      	ldr	r3, [pc, #16]	; (800f6c8 <vTaskSuspendAll+0x18>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	4a03      	ldr	r2, [pc, #12]	; (800f6c8 <vTaskSuspendAll+0x18>)
 800f6bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f6be:	bf00      	nop
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	20002000 	.word	0x20002000

0800f6cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6da:	4b42      	ldr	r3, [pc, #264]	; (800f7e4 <xTaskResumeAll+0x118>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10a      	bne.n	800f6f8 <xTaskResumeAll+0x2c>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	603b      	str	r3, [r7, #0]
}
 800f6f4:	bf00      	nop
 800f6f6:	e7fe      	b.n	800f6f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f6f8:	f001 fa34 	bl	8010b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f6fc:	4b39      	ldr	r3, [pc, #228]	; (800f7e4 <xTaskResumeAll+0x118>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3b01      	subs	r3, #1
 800f702:	4a38      	ldr	r2, [pc, #224]	; (800f7e4 <xTaskResumeAll+0x118>)
 800f704:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f706:	4b37      	ldr	r3, [pc, #220]	; (800f7e4 <xTaskResumeAll+0x118>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d162      	bne.n	800f7d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f70e:	4b36      	ldr	r3, [pc, #216]	; (800f7e8 <xTaskResumeAll+0x11c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d05e      	beq.n	800f7d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f716:	e02f      	b.n	800f778 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f718:	4b34      	ldr	r3, [pc, #208]	; (800f7ec <xTaskResumeAll+0x120>)
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	3318      	adds	r3, #24
 800f724:	4618      	mov	r0, r3
 800f726:	f7fe fddb 	bl	800e2e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3304      	adds	r3, #4
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fe fdd6 	bl	800e2e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f738:	4b2d      	ldr	r3, [pc, #180]	; (800f7f0 <xTaskResumeAll+0x124>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d903      	bls.n	800f748 <xTaskResumeAll+0x7c>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f744:	4a2a      	ldr	r2, [pc, #168]	; (800f7f0 <xTaskResumeAll+0x124>)
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f74c:	4613      	mov	r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4a27      	ldr	r2, [pc, #156]	; (800f7f4 <xTaskResumeAll+0x128>)
 800f756:	441a      	add	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3304      	adds	r3, #4
 800f75c:	4619      	mov	r1, r3
 800f75e:	4610      	mov	r0, r2
 800f760:	f7fe fd61 	bl	800e226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f768:	4b23      	ldr	r3, [pc, #140]	; (800f7f8 <xTaskResumeAll+0x12c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	429a      	cmp	r2, r3
 800f770:	d302      	bcc.n	800f778 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f772:	4b22      	ldr	r3, [pc, #136]	; (800f7fc <xTaskResumeAll+0x130>)
 800f774:	2201      	movs	r2, #1
 800f776:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f778:	4b1c      	ldr	r3, [pc, #112]	; (800f7ec <xTaskResumeAll+0x120>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1cb      	bne.n	800f718 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d001      	beq.n	800f78a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f786:	f000 fb63 	bl	800fe50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f78a:	4b1d      	ldr	r3, [pc, #116]	; (800f800 <xTaskResumeAll+0x134>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d010      	beq.n	800f7b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f796:	f000 f847 	bl	800f828 <xTaskIncrementTick>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7a0:	4b16      	ldr	r3, [pc, #88]	; (800f7fc <xTaskResumeAll+0x130>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3b01      	subs	r3, #1
 800f7aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1f1      	bne.n	800f796 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800f7b2:	4b13      	ldr	r3, [pc, #76]	; (800f800 <xTaskResumeAll+0x134>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7b8:	4b10      	ldr	r3, [pc, #64]	; (800f7fc <xTaskResumeAll+0x130>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d009      	beq.n	800f7d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7c4:	4b0f      	ldr	r3, [pc, #60]	; (800f804 <xTaskResumeAll+0x138>)
 800f7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ca:	601a      	str	r2, [r3, #0]
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7d4:	f001 f9f6 	bl	8010bc4 <vPortExitCritical>

	return xAlreadyYielded;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3710      	adds	r7, #16
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	20002000 	.word	0x20002000
 800f7e8:	20001fd8 	.word	0x20001fd8
 800f7ec:	20001f98 	.word	0x20001f98
 800f7f0:	20001fe0 	.word	0x20001fe0
 800f7f4:	20001b08 	.word	0x20001b08
 800f7f8:	20001b04 	.word	0x20001b04
 800f7fc:	20001fec 	.word	0x20001fec
 800f800:	20001fe8 	.word	0x20001fe8
 800f804:	e000ed04 	.word	0xe000ed04

0800f808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <xTaskGetTickCount+0x1c>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f814:	687b      	ldr	r3, [r7, #4]
}
 800f816:	4618      	mov	r0, r3
 800f818:	370c      	adds	r7, #12
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	20001fdc 	.word	0x20001fdc

0800f828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b086      	sub	sp, #24
 800f82c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f82e:	2300      	movs	r3, #0
 800f830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f832:	4b4f      	ldr	r3, [pc, #316]	; (800f970 <xTaskIncrementTick+0x148>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	f040 8089 	bne.w	800f94e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f83c:	4b4d      	ldr	r3, [pc, #308]	; (800f974 <xTaskIncrementTick+0x14c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3301      	adds	r3, #1
 800f842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f844:	4a4b      	ldr	r2, [pc, #300]	; (800f974 <xTaskIncrementTick+0x14c>)
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d120      	bne.n	800f892 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f850:	4b49      	ldr	r3, [pc, #292]	; (800f978 <xTaskIncrementTick+0x150>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00a      	beq.n	800f870 <xTaskIncrementTick+0x48>
	__asm volatile
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	603b      	str	r3, [r7, #0]
}
 800f86c:	bf00      	nop
 800f86e:	e7fe      	b.n	800f86e <xTaskIncrementTick+0x46>
 800f870:	4b41      	ldr	r3, [pc, #260]	; (800f978 <xTaskIncrementTick+0x150>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	60fb      	str	r3, [r7, #12]
 800f876:	4b41      	ldr	r3, [pc, #260]	; (800f97c <xTaskIncrementTick+0x154>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a3f      	ldr	r2, [pc, #252]	; (800f978 <xTaskIncrementTick+0x150>)
 800f87c:	6013      	str	r3, [r2, #0]
 800f87e:	4a3f      	ldr	r2, [pc, #252]	; (800f97c <xTaskIncrementTick+0x154>)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6013      	str	r3, [r2, #0]
 800f884:	4b3e      	ldr	r3, [pc, #248]	; (800f980 <xTaskIncrementTick+0x158>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3301      	adds	r3, #1
 800f88a:	4a3d      	ldr	r2, [pc, #244]	; (800f980 <xTaskIncrementTick+0x158>)
 800f88c:	6013      	str	r3, [r2, #0]
 800f88e:	f000 fadf 	bl	800fe50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f892:	4b3c      	ldr	r3, [pc, #240]	; (800f984 <xTaskIncrementTick+0x15c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d349      	bcc.n	800f930 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f89c:	4b36      	ldr	r3, [pc, #216]	; (800f978 <xTaskIncrementTick+0x150>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d104      	bne.n	800f8b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8a6:	4b37      	ldr	r3, [pc, #220]	; (800f984 <xTaskIncrementTick+0x15c>)
 800f8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ac:	601a      	str	r2, [r3, #0]
					break;
 800f8ae:	e03f      	b.n	800f930 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8b0:	4b31      	ldr	r3, [pc, #196]	; (800f978 <xTaskIncrementTick+0x150>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d203      	bcs.n	800f8d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f8c8:	4a2e      	ldr	r2, [pc, #184]	; (800f984 <xTaskIncrementTick+0x15c>)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f8ce:	e02f      	b.n	800f930 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fe fd03 	bl	800e2e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	3318      	adds	r3, #24
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe fcfa 	bl	800e2e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f0:	4b25      	ldr	r3, [pc, #148]	; (800f988 <xTaskIncrementTick+0x160>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d903      	bls.n	800f900 <xTaskIncrementTick+0xd8>
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8fc:	4a22      	ldr	r2, [pc, #136]	; (800f988 <xTaskIncrementTick+0x160>)
 800f8fe:	6013      	str	r3, [r2, #0]
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f904:	4613      	mov	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	4a1f      	ldr	r2, [pc, #124]	; (800f98c <xTaskIncrementTick+0x164>)
 800f90e:	441a      	add	r2, r3
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	3304      	adds	r3, #4
 800f914:	4619      	mov	r1, r3
 800f916:	4610      	mov	r0, r2
 800f918:	f7fe fc85 	bl	800e226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f920:	4b1b      	ldr	r3, [pc, #108]	; (800f990 <xTaskIncrementTick+0x168>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f926:	429a      	cmp	r2, r3
 800f928:	d3b8      	bcc.n	800f89c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f92a:	2301      	movs	r3, #1
 800f92c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f92e:	e7b5      	b.n	800f89c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f930:	4b17      	ldr	r3, [pc, #92]	; (800f990 <xTaskIncrementTick+0x168>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f936:	4915      	ldr	r1, [pc, #84]	; (800f98c <xTaskIncrementTick+0x164>)
 800f938:	4613      	mov	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	440b      	add	r3, r1
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d907      	bls.n	800f958 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800f948:	2301      	movs	r3, #1
 800f94a:	617b      	str	r3, [r7, #20]
 800f94c:	e004      	b.n	800f958 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f94e:	4b11      	ldr	r3, [pc, #68]	; (800f994 <xTaskIncrementTick+0x16c>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	4a0f      	ldr	r2, [pc, #60]	; (800f994 <xTaskIncrementTick+0x16c>)
 800f956:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f958:	4b0f      	ldr	r3, [pc, #60]	; (800f998 <xTaskIncrementTick+0x170>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d001      	beq.n	800f964 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800f960:	2301      	movs	r3, #1
 800f962:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f964:	697b      	ldr	r3, [r7, #20]
}
 800f966:	4618      	mov	r0, r3
 800f968:	3718      	adds	r7, #24
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20002000 	.word	0x20002000
 800f974:	20001fdc 	.word	0x20001fdc
 800f978:	20001f90 	.word	0x20001f90
 800f97c:	20001f94 	.word	0x20001f94
 800f980:	20001ff0 	.word	0x20001ff0
 800f984:	20001ff8 	.word	0x20001ff8
 800f988:	20001fe0 	.word	0x20001fe0
 800f98c:	20001b08 	.word	0x20001b08
 800f990:	20001b04 	.word	0x20001b04
 800f994:	20001fe8 	.word	0x20001fe8
 800f998:	20001fec 	.word	0x20001fec

0800f99c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9a2:	4b2f      	ldr	r3, [pc, #188]	; (800fa60 <vTaskSwitchContext+0xc4>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d003      	beq.n	800f9b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f9aa:	4b2e      	ldr	r3, [pc, #184]	; (800fa64 <vTaskSwitchContext+0xc8>)
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9b0:	e052      	b.n	800fa58 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800f9b2:	4b2c      	ldr	r3, [pc, #176]	; (800fa64 <vTaskSwitchContext+0xc8>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f9b8:	4b2b      	ldr	r3, [pc, #172]	; (800fa68 <vTaskSwitchContext+0xcc>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	4b2a      	ldr	r3, [pc, #168]	; (800fa68 <vTaskSwitchContext+0xcc>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d808      	bhi.n	800f9da <vTaskSwitchContext+0x3e>
 800f9c8:	4b27      	ldr	r3, [pc, #156]	; (800fa68 <vTaskSwitchContext+0xcc>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	4b26      	ldr	r3, [pc, #152]	; (800fa68 <vTaskSwitchContext+0xcc>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	3334      	adds	r3, #52	; 0x34
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	f7fe fbb9 	bl	800e14c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9da:	4b24      	ldr	r3, [pc, #144]	; (800fa6c <vTaskSwitchContext+0xd0>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	60fb      	str	r3, [r7, #12]
 800f9e0:	e010      	b.n	800fa04 <vTaskSwitchContext+0x68>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d10a      	bne.n	800f9fe <vTaskSwitchContext+0x62>
	__asm volatile
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	607b      	str	r3, [r7, #4]
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <vTaskSwitchContext+0x60>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3b01      	subs	r3, #1
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	491a      	ldr	r1, [pc, #104]	; (800fa70 <vTaskSwitchContext+0xd4>)
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4413      	add	r3, r2
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	440b      	add	r3, r1
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0e4      	beq.n	800f9e2 <vTaskSwitchContext+0x46>
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4413      	add	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4a13      	ldr	r2, [pc, #76]	; (800fa70 <vTaskSwitchContext+0xd4>)
 800fa24:	4413      	add	r3, r2
 800fa26:	60bb      	str	r3, [r7, #8]
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	685a      	ldr	r2, [r3, #4]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	605a      	str	r2, [r3, #4]
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	3308      	adds	r3, #8
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d104      	bne.n	800fa48 <vTaskSwitchContext+0xac>
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	685a      	ldr	r2, [r3, #4]
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	605a      	str	r2, [r3, #4]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	4a06      	ldr	r2, [pc, #24]	; (800fa68 <vTaskSwitchContext+0xcc>)
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	4a06      	ldr	r2, [pc, #24]	; (800fa6c <vTaskSwitchContext+0xd0>)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6013      	str	r3, [r2, #0]
}
 800fa58:	bf00      	nop
 800fa5a:	3710      	adds	r7, #16
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	20002000 	.word	0x20002000
 800fa64:	20001fec 	.word	0x20001fec
 800fa68:	20001b04 	.word	0x20001b04
 800fa6c:	20001fe0 	.word	0x20001fe0
 800fa70:	20001b08 	.word	0x20001b08

0800fa74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d10a      	bne.n	800fa9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa88:	f383 8811 	msr	BASEPRI, r3
 800fa8c:	f3bf 8f6f 	isb	sy
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	60fb      	str	r3, [r7, #12]
}
 800fa96:	bf00      	nop
 800fa98:	e7fe      	b.n	800fa98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa9a:	4b07      	ldr	r3, [pc, #28]	; (800fab8 <vTaskPlaceOnEventList+0x44>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	3318      	adds	r3, #24
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7fe fbe3 	bl	800e26e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800faa8:	2101      	movs	r1, #1
 800faaa:	6838      	ldr	r0, [r7, #0]
 800faac:	f000 fb8a 	bl	80101c4 <prvAddCurrentTaskToDelayedList>
}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	20001b04 	.word	0x20001b04

0800fabc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10a      	bne.n	800fae4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	617b      	str	r3, [r7, #20]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fae4:	4b0a      	ldr	r3, [pc, #40]	; (800fb10 <vTaskPlaceOnEventListRestricted+0x54>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	3318      	adds	r3, #24
 800faea:	4619      	mov	r1, r3
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f7fe fb9a 	bl	800e226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800faf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fafc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	68b8      	ldr	r0, [r7, #8]
 800fb02:	f000 fb5f 	bl	80101c4 <prvAddCurrentTaskToDelayedList>
	}
 800fb06:	bf00      	nop
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	20001b04 	.word	0x20001b04

0800fb14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d10a      	bne.n	800fb40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	60fb      	str	r3, [r7, #12]
}
 800fb3c:	bf00      	nop
 800fb3e:	e7fe      	b.n	800fb3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	3318      	adds	r3, #24
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fe fbcb 	bl	800e2e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb4a:	4b1e      	ldr	r3, [pc, #120]	; (800fbc4 <xTaskRemoveFromEventList+0xb0>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d11d      	bne.n	800fb8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	3304      	adds	r3, #4
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fe fbc2 	bl	800e2e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb60:	4b19      	ldr	r3, [pc, #100]	; (800fbc8 <xTaskRemoveFromEventList+0xb4>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d903      	bls.n	800fb70 <xTaskRemoveFromEventList+0x5c>
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6c:	4a16      	ldr	r2, [pc, #88]	; (800fbc8 <xTaskRemoveFromEventList+0xb4>)
 800fb6e:	6013      	str	r3, [r2, #0]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb74:	4613      	mov	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4413      	add	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4a13      	ldr	r2, [pc, #76]	; (800fbcc <xTaskRemoveFromEventList+0xb8>)
 800fb7e:	441a      	add	r2, r3
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	3304      	adds	r3, #4
 800fb84:	4619      	mov	r1, r3
 800fb86:	4610      	mov	r0, r2
 800fb88:	f7fe fb4d 	bl	800e226 <vListInsertEnd>
 800fb8c:	e005      	b.n	800fb9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	3318      	adds	r3, #24
 800fb92:	4619      	mov	r1, r3
 800fb94:	480e      	ldr	r0, [pc, #56]	; (800fbd0 <xTaskRemoveFromEventList+0xbc>)
 800fb96:	f7fe fb46 	bl	800e226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9e:	4b0d      	ldr	r3, [pc, #52]	; (800fbd4 <xTaskRemoveFromEventList+0xc0>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d905      	bls.n	800fbb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fbac:	4b0a      	ldr	r3, [pc, #40]	; (800fbd8 <xTaskRemoveFromEventList+0xc4>)
 800fbae:	2201      	movs	r2, #1
 800fbb0:	601a      	str	r2, [r3, #0]
 800fbb2:	e001      	b.n	800fbb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fbb8:	697b      	ldr	r3, [r7, #20]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3718      	adds	r7, #24
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20002000 	.word	0x20002000
 800fbc8:	20001fe0 	.word	0x20001fe0
 800fbcc:	20001b08 	.word	0x20001b08
 800fbd0:	20001f98 	.word	0x20001f98
 800fbd4:	20001b04 	.word	0x20001b04
 800fbd8:	20001fec 	.word	0x20001fec

0800fbdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fbe4:	4b06      	ldr	r3, [pc, #24]	; (800fc00 <vTaskInternalSetTimeOutState+0x24>)
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fbec:	4b05      	ldr	r3, [pc, #20]	; (800fc04 <vTaskInternalSetTimeOutState+0x28>)
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	605a      	str	r2, [r3, #4]
}
 800fbf4:	bf00      	nop
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	20001ff0 	.word	0x20001ff0
 800fc04:	20001fdc 	.word	0x20001fdc

0800fc08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b088      	sub	sp, #32
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10a      	bne.n	800fc2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1c:	f383 8811 	msr	BASEPRI, r3
 800fc20:	f3bf 8f6f 	isb	sy
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	613b      	str	r3, [r7, #16]
}
 800fc2a:	bf00      	nop
 800fc2c:	e7fe      	b.n	800fc2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d10a      	bne.n	800fc4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc38:	f383 8811 	msr	BASEPRI, r3
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	60fb      	str	r3, [r7, #12]
}
 800fc46:	bf00      	nop
 800fc48:	e7fe      	b.n	800fc48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fc4a:	f000 ff8b 	bl	8010b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fc4e:	4b1d      	ldr	r3, [pc, #116]	; (800fcc4 <xTaskCheckForTimeOut+0xbc>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	69ba      	ldr	r2, [r7, #24]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc66:	d102      	bne.n	800fc6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	61fb      	str	r3, [r7, #28]
 800fc6c:	e023      	b.n	800fcb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	4b15      	ldr	r3, [pc, #84]	; (800fcc8 <xTaskCheckForTimeOut+0xc0>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d007      	beq.n	800fc8a <xTaskCheckForTimeOut+0x82>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	69ba      	ldr	r2, [r7, #24]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d302      	bcc.n	800fc8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc84:	2301      	movs	r3, #1
 800fc86:	61fb      	str	r3, [r7, #28]
 800fc88:	e015      	b.n	800fcb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d20b      	bcs.n	800fcac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	1ad2      	subs	r2, r2, r3
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ff9b 	bl	800fbdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fca6:	2300      	movs	r3, #0
 800fca8:	61fb      	str	r3, [r7, #28]
 800fcaa:	e004      	b.n	800fcb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fcb6:	f000 ff85 	bl	8010bc4 <vPortExitCritical>

	return xReturn;
 800fcba:	69fb      	ldr	r3, [r7, #28]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3720      	adds	r7, #32
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	20001fdc 	.word	0x20001fdc
 800fcc8:	20001ff0 	.word	0x20001ff0

0800fccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fccc:	b480      	push	{r7}
 800fcce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fcd0:	4b03      	ldr	r3, [pc, #12]	; (800fce0 <vTaskMissedYield+0x14>)
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	601a      	str	r2, [r3, #0]
}
 800fcd6:	bf00      	nop
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	20001fec 	.word	0x20001fec

0800fce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fcec:	f000 f852 	bl	800fd94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fcf0:	4b06      	ldr	r3, [pc, #24]	; (800fd0c <prvIdleTask+0x28>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d9f9      	bls.n	800fcec <prvIdleTask+0x8>
			{
				taskYIELD();
 800fcf8:	4b05      	ldr	r3, [pc, #20]	; (800fd10 <prvIdleTask+0x2c>)
 800fcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcfe:	601a      	str	r2, [r3, #0]
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd08:	e7f0      	b.n	800fcec <prvIdleTask+0x8>
 800fd0a:	bf00      	nop
 800fd0c:	20001b08 	.word	0x20001b08
 800fd10:	e000ed04 	.word	0xe000ed04

0800fd14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b082      	sub	sp, #8
 800fd18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	607b      	str	r3, [r7, #4]
 800fd1e:	e00c      	b.n	800fd3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	4613      	mov	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4413      	add	r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	4a12      	ldr	r2, [pc, #72]	; (800fd74 <prvInitialiseTaskLists+0x60>)
 800fd2c:	4413      	add	r3, r2
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fe fa4c 	bl	800e1cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3301      	adds	r3, #1
 800fd38:	607b      	str	r3, [r7, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b37      	cmp	r3, #55	; 0x37
 800fd3e:	d9ef      	bls.n	800fd20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd40:	480d      	ldr	r0, [pc, #52]	; (800fd78 <prvInitialiseTaskLists+0x64>)
 800fd42:	f7fe fa43 	bl	800e1cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd46:	480d      	ldr	r0, [pc, #52]	; (800fd7c <prvInitialiseTaskLists+0x68>)
 800fd48:	f7fe fa40 	bl	800e1cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fd4c:	480c      	ldr	r0, [pc, #48]	; (800fd80 <prvInitialiseTaskLists+0x6c>)
 800fd4e:	f7fe fa3d 	bl	800e1cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fd52:	480c      	ldr	r0, [pc, #48]	; (800fd84 <prvInitialiseTaskLists+0x70>)
 800fd54:	f7fe fa3a 	bl	800e1cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fd58:	480b      	ldr	r0, [pc, #44]	; (800fd88 <prvInitialiseTaskLists+0x74>)
 800fd5a:	f7fe fa37 	bl	800e1cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd5e:	4b0b      	ldr	r3, [pc, #44]	; (800fd8c <prvInitialiseTaskLists+0x78>)
 800fd60:	4a05      	ldr	r2, [pc, #20]	; (800fd78 <prvInitialiseTaskLists+0x64>)
 800fd62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd64:	4b0a      	ldr	r3, [pc, #40]	; (800fd90 <prvInitialiseTaskLists+0x7c>)
 800fd66:	4a05      	ldr	r2, [pc, #20]	; (800fd7c <prvInitialiseTaskLists+0x68>)
 800fd68:	601a      	str	r2, [r3, #0]
}
 800fd6a:	bf00      	nop
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	20001b08 	.word	0x20001b08
 800fd78:	20001f68 	.word	0x20001f68
 800fd7c:	20001f7c 	.word	0x20001f7c
 800fd80:	20001f98 	.word	0x20001f98
 800fd84:	20001fac 	.word	0x20001fac
 800fd88:	20001fc4 	.word	0x20001fc4
 800fd8c:	20001f90 	.word	0x20001f90
 800fd90:	20001f94 	.word	0x20001f94

0800fd94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd9a:	e019      	b.n	800fdd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd9c:	f000 fee2 	bl	8010b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda0:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <prvCheckTasksWaitingTermination+0x50>)
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fe fa97 	bl	800e2e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fdb2:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <prvCheckTasksWaitingTermination+0x54>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4a0b      	ldr	r2, [pc, #44]	; (800fde8 <prvCheckTasksWaitingTermination+0x54>)
 800fdba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fdbc:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <prvCheckTasksWaitingTermination+0x58>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <prvCheckTasksWaitingTermination+0x58>)
 800fdc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fdc6:	f000 fefd 	bl	8010bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 f810 	bl	800fdf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdd0:	4b06      	ldr	r3, [pc, #24]	; (800fdec <prvCheckTasksWaitingTermination+0x58>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1e1      	bne.n	800fd9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fdd8:	bf00      	nop
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	20001fac 	.word	0x20001fac
 800fde8:	20001fd8 	.word	0x20001fd8
 800fdec:	20001fc0 	.word	0x20001fc0

0800fdf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d108      	bne.n	800fe14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe06:	4618      	mov	r0, r3
 800fe08:	f001 f892 	bl	8010f30 <vPortFree>
				vPortFree( pxTCB );
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f001 f88f 	bl	8010f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe12:	e018      	b.n	800fe46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d103      	bne.n	800fe26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f001 f886 	bl	8010f30 <vPortFree>
	}
 800fe24:	e00f      	b.n	800fe46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	d00a      	beq.n	800fe46 <prvDeleteTCB+0x56>
	__asm volatile
 800fe30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe34:	f383 8811 	msr	BASEPRI, r3
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	60fb      	str	r3, [r7, #12]
}
 800fe42:	bf00      	nop
 800fe44:	e7fe      	b.n	800fe44 <prvDeleteTCB+0x54>
	}
 800fe46:	bf00      	nop
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
	...

0800fe50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe56:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <prvResetNextTaskUnblockTime+0x38>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d104      	bne.n	800fe6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe60:	4b0a      	ldr	r3, [pc, #40]	; (800fe8c <prvResetNextTaskUnblockTime+0x3c>)
 800fe62:	f04f 32ff 	mov.w	r2, #4294967295
 800fe66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe68:	e008      	b.n	800fe7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe6a:	4b07      	ldr	r3, [pc, #28]	; (800fe88 <prvResetNextTaskUnblockTime+0x38>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	4a04      	ldr	r2, [pc, #16]	; (800fe8c <prvResetNextTaskUnblockTime+0x3c>)
 800fe7a:	6013      	str	r3, [r2, #0]
}
 800fe7c:	bf00      	nop
 800fe7e:	370c      	adds	r7, #12
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr
 800fe88:	20001f90 	.word	0x20001f90
 800fe8c:	20001ff8 	.word	0x20001ff8

0800fe90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fe96:	4b05      	ldr	r3, [pc, #20]	; (800feac <xTaskGetCurrentTaskHandle+0x1c>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fe9c:	687b      	ldr	r3, [r7, #4]
	}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	370c      	adds	r7, #12
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	20001b04 	.word	0x20001b04

0800feb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800feb6:	4b0b      	ldr	r3, [pc, #44]	; (800fee4 <xTaskGetSchedulerState+0x34>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d102      	bne.n	800fec4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800febe:	2301      	movs	r3, #1
 800fec0:	607b      	str	r3, [r7, #4]
 800fec2:	e008      	b.n	800fed6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fec4:	4b08      	ldr	r3, [pc, #32]	; (800fee8 <xTaskGetSchedulerState+0x38>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d102      	bne.n	800fed2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fecc:	2302      	movs	r3, #2
 800fece:	607b      	str	r3, [r7, #4]
 800fed0:	e001      	b.n	800fed6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fed2:	2300      	movs	r3, #0
 800fed4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fed6:	687b      	ldr	r3, [r7, #4]
	}
 800fed8:	4618      	mov	r0, r3
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	20001fe4 	.word	0x20001fe4
 800fee8:	20002000 	.word	0x20002000

0800feec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fef8:	2300      	movs	r3, #0
 800fefa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d051      	beq.n	800ffa6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff06:	4b2a      	ldr	r3, [pc, #168]	; (800ffb0 <xTaskPriorityInherit+0xc4>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d241      	bcs.n	800ff94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	699b      	ldr	r3, [r3, #24]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	db06      	blt.n	800ff26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff18:	4b25      	ldr	r3, [pc, #148]	; (800ffb0 <xTaskPriorityInherit+0xc4>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	6959      	ldr	r1, [r3, #20]
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff2e:	4613      	mov	r3, r2
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	4413      	add	r3, r2
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	4a1f      	ldr	r2, [pc, #124]	; (800ffb4 <xTaskPriorityInherit+0xc8>)
 800ff38:	4413      	add	r3, r2
 800ff3a:	4299      	cmp	r1, r3
 800ff3c:	d122      	bne.n	800ff84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	3304      	adds	r3, #4
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fe f9cc 	bl	800e2e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff48:	4b19      	ldr	r3, [pc, #100]	; (800ffb0 <xTaskPriorityInherit+0xc4>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff56:	4b18      	ldr	r3, [pc, #96]	; (800ffb8 <xTaskPriorityInherit+0xcc>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d903      	bls.n	800ff66 <xTaskPriorityInherit+0x7a>
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff62:	4a15      	ldr	r2, [pc, #84]	; (800ffb8 <xTaskPriorityInherit+0xcc>)
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	4413      	add	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4a10      	ldr	r2, [pc, #64]	; (800ffb4 <xTaskPriorityInherit+0xc8>)
 800ff74:	441a      	add	r2, r3
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	f7fe f952 	bl	800e226 <vListInsertEnd>
 800ff82:	e004      	b.n	800ff8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff84:	4b0a      	ldr	r3, [pc, #40]	; (800ffb0 <xTaskPriorityInherit+0xc4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	60fb      	str	r3, [r7, #12]
 800ff92:	e008      	b.n	800ffa6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff98:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <xTaskPriorityInherit+0xc4>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d201      	bcs.n	800ffa6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
	}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	20001b04 	.word	0x20001b04
 800ffb4:	20001b08 	.word	0x20001b08
 800ffb8:	20001fe0 	.word	0x20001fe0

0800ffbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d056      	beq.n	8010080 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ffd2:	4b2e      	ldr	r3, [pc, #184]	; (801008c <xTaskPriorityDisinherit+0xd0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d00a      	beq.n	800fff2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ffdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe0:	f383 8811 	msr	BASEPRI, r3
 800ffe4:	f3bf 8f6f 	isb	sy
 800ffe8:	f3bf 8f4f 	dsb	sy
 800ffec:	60fb      	str	r3, [r7, #12]
}
 800ffee:	bf00      	nop
 800fff0:	e7fe      	b.n	800fff0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d10a      	bne.n	8010010 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffe:	f383 8811 	msr	BASEPRI, r3
 8010002:	f3bf 8f6f 	isb	sy
 8010006:	f3bf 8f4f 	dsb	sy
 801000a:	60bb      	str	r3, [r7, #8]
}
 801000c:	bf00      	nop
 801000e:	e7fe      	b.n	801000e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010014:	1e5a      	subs	r2, r3, #1
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010022:	429a      	cmp	r2, r3
 8010024:	d02c      	beq.n	8010080 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801002a:	2b00      	cmp	r3, #0
 801002c:	d128      	bne.n	8010080 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	3304      	adds	r3, #4
 8010032:	4618      	mov	r0, r3
 8010034:	f7fe f954 	bl	800e2e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010044:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010050:	4b0f      	ldr	r3, [pc, #60]	; (8010090 <xTaskPriorityDisinherit+0xd4>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	429a      	cmp	r2, r3
 8010056:	d903      	bls.n	8010060 <xTaskPriorityDisinherit+0xa4>
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801005c:	4a0c      	ldr	r2, [pc, #48]	; (8010090 <xTaskPriorityDisinherit+0xd4>)
 801005e:	6013      	str	r3, [r2, #0]
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010064:	4613      	mov	r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	4413      	add	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	4a09      	ldr	r2, [pc, #36]	; (8010094 <xTaskPriorityDisinherit+0xd8>)
 801006e:	441a      	add	r2, r3
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	3304      	adds	r3, #4
 8010074:	4619      	mov	r1, r3
 8010076:	4610      	mov	r0, r2
 8010078:	f7fe f8d5 	bl	800e226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801007c:	2301      	movs	r3, #1
 801007e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010080:	697b      	ldr	r3, [r7, #20]
	}
 8010082:	4618      	mov	r0, r3
 8010084:	3718      	adds	r7, #24
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	20001b04 	.word	0x20001b04
 8010090:	20001fe0 	.word	0x20001fe0
 8010094:	20001b08 	.word	0x20001b08

08010098 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010098:	b580      	push	{r7, lr}
 801009a:	b088      	sub	sp, #32
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80100a6:	2301      	movs	r3, #1
 80100a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d06a      	beq.n	8010186 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d10a      	bne.n	80100ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	60fb      	str	r3, [r7, #12]
}
 80100ca:	bf00      	nop
 80100cc:	e7fe      	b.n	80100cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100d2:	683a      	ldr	r2, [r7, #0]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d902      	bls.n	80100de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	61fb      	str	r3, [r7, #28]
 80100dc:	e002      	b.n	80100e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80100de:	69bb      	ldr	r3, [r7, #24]
 80100e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e8:	69fa      	ldr	r2, [r7, #28]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d04b      	beq.n	8010186 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100f2:	697a      	ldr	r2, [r7, #20]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d146      	bne.n	8010186 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80100f8:	4b25      	ldr	r3, [pc, #148]	; (8010190 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	69ba      	ldr	r2, [r7, #24]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d10a      	bne.n	8010118 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010106:	f383 8811 	msr	BASEPRI, r3
 801010a:	f3bf 8f6f 	isb	sy
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	60bb      	str	r3, [r7, #8]
}
 8010114:	bf00      	nop
 8010116:	e7fe      	b.n	8010116 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	69fa      	ldr	r2, [r7, #28]
 8010122:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	699b      	ldr	r3, [r3, #24]
 8010128:	2b00      	cmp	r3, #0
 801012a:	db04      	blt.n	8010136 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010132:	69bb      	ldr	r3, [r7, #24]
 8010134:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010136:	69bb      	ldr	r3, [r7, #24]
 8010138:	6959      	ldr	r1, [r3, #20]
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	4613      	mov	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4413      	add	r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	4a13      	ldr	r2, [pc, #76]	; (8010194 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010146:	4413      	add	r3, r2
 8010148:	4299      	cmp	r1, r3
 801014a:	d11c      	bne.n	8010186 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	3304      	adds	r3, #4
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe f8c5 	bl	800e2e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801015a:	4b0f      	ldr	r3, [pc, #60]	; (8010198 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	429a      	cmp	r2, r3
 8010160:	d903      	bls.n	801016a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010162:	69bb      	ldr	r3, [r7, #24]
 8010164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010166:	4a0c      	ldr	r2, [pc, #48]	; (8010198 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010168:	6013      	str	r3, [r2, #0]
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801016e:	4613      	mov	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4413      	add	r3, r2
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4a07      	ldr	r2, [pc, #28]	; (8010194 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010178:	441a      	add	r2, r3
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	3304      	adds	r3, #4
 801017e:	4619      	mov	r1, r3
 8010180:	4610      	mov	r0, r2
 8010182:	f7fe f850 	bl	800e226 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010186:	bf00      	nop
 8010188:	3720      	adds	r7, #32
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	20001b04 	.word	0x20001b04
 8010194:	20001b08 	.word	0x20001b08
 8010198:	20001fe0 	.word	0x20001fe0

0801019c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801019c:	b480      	push	{r7}
 801019e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80101a0:	4b07      	ldr	r3, [pc, #28]	; (80101c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d004      	beq.n	80101b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80101a8:	4b05      	ldr	r3, [pc, #20]	; (80101c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101ae:	3201      	adds	r2, #1
 80101b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80101b2:	4b03      	ldr	r3, [pc, #12]	; (80101c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101b4:	681b      	ldr	r3, [r3, #0]
	}
 80101b6:	4618      	mov	r0, r3
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	20001b04 	.word	0x20001b04

080101c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80101ce:	4b21      	ldr	r3, [pc, #132]	; (8010254 <prvAddCurrentTaskToDelayedList+0x90>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101d4:	4b20      	ldr	r3, [pc, #128]	; (8010258 <prvAddCurrentTaskToDelayedList+0x94>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3304      	adds	r3, #4
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe f880 	bl	800e2e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e6:	d10a      	bne.n	80101fe <prvAddCurrentTaskToDelayedList+0x3a>
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d007      	beq.n	80101fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101ee:	4b1a      	ldr	r3, [pc, #104]	; (8010258 <prvAddCurrentTaskToDelayedList+0x94>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3304      	adds	r3, #4
 80101f4:	4619      	mov	r1, r3
 80101f6:	4819      	ldr	r0, [pc, #100]	; (801025c <prvAddCurrentTaskToDelayedList+0x98>)
 80101f8:	f7fe f815 	bl	800e226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80101fc:	e026      	b.n	801024c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4413      	add	r3, r2
 8010204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010206:	4b14      	ldr	r3, [pc, #80]	; (8010258 <prvAddCurrentTaskToDelayedList+0x94>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	429a      	cmp	r2, r3
 8010214:	d209      	bcs.n	801022a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010216:	4b12      	ldr	r3, [pc, #72]	; (8010260 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	4b0f      	ldr	r3, [pc, #60]	; (8010258 <prvAddCurrentTaskToDelayedList+0x94>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	3304      	adds	r3, #4
 8010220:	4619      	mov	r1, r3
 8010222:	4610      	mov	r0, r2
 8010224:	f7fe f823 	bl	800e26e <vListInsert>
}
 8010228:	e010      	b.n	801024c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801022a:	4b0e      	ldr	r3, [pc, #56]	; (8010264 <prvAddCurrentTaskToDelayedList+0xa0>)
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	4b0a      	ldr	r3, [pc, #40]	; (8010258 <prvAddCurrentTaskToDelayedList+0x94>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	3304      	adds	r3, #4
 8010234:	4619      	mov	r1, r3
 8010236:	4610      	mov	r0, r2
 8010238:	f7fe f819 	bl	800e26e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801023c:	4b0a      	ldr	r3, [pc, #40]	; (8010268 <prvAddCurrentTaskToDelayedList+0xa4>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	429a      	cmp	r2, r3
 8010244:	d202      	bcs.n	801024c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010246:	4a08      	ldr	r2, [pc, #32]	; (8010268 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	6013      	str	r3, [r2, #0]
}
 801024c:	bf00      	nop
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	20001fdc 	.word	0x20001fdc
 8010258:	20001b04 	.word	0x20001b04
 801025c:	20001fc4 	.word	0x20001fc4
 8010260:	20001f94 	.word	0x20001f94
 8010264:	20001f90 	.word	0x20001f90
 8010268:	20001ff8 	.word	0x20001ff8

0801026c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b08a      	sub	sp, #40	; 0x28
 8010270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010272:	2300      	movs	r3, #0
 8010274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010276:	f000 fb07 	bl	8010888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801027a:	4b1c      	ldr	r3, [pc, #112]	; (80102ec <xTimerCreateTimerTask+0x80>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d021      	beq.n	80102c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010282:	2300      	movs	r3, #0
 8010284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010286:	2300      	movs	r3, #0
 8010288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801028a:	1d3a      	adds	r2, r7, #4
 801028c:	f107 0108 	add.w	r1, r7, #8
 8010290:	f107 030c 	add.w	r3, r7, #12
 8010294:	4618      	mov	r0, r3
 8010296:	f7fd ff7f 	bl	800e198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801029a:	6879      	ldr	r1, [r7, #4]
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	9202      	str	r2, [sp, #8]
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	2302      	movs	r3, #2
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	2300      	movs	r3, #0
 80102aa:	460a      	mov	r2, r1
 80102ac:	4910      	ldr	r1, [pc, #64]	; (80102f0 <xTimerCreateTimerTask+0x84>)
 80102ae:	4811      	ldr	r0, [pc, #68]	; (80102f4 <xTimerCreateTimerTask+0x88>)
 80102b0:	f7fe ffc2 	bl	800f238 <xTaskCreateStatic>
 80102b4:	4603      	mov	r3, r0
 80102b6:	4a10      	ldr	r2, [pc, #64]	; (80102f8 <xTimerCreateTimerTask+0x8c>)
 80102b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80102ba:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <xTimerCreateTimerTask+0x8c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80102c2:	2301      	movs	r3, #1
 80102c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d10a      	bne.n	80102e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	f383 8811 	msr	BASEPRI, r3
 80102d4:	f3bf 8f6f 	isb	sy
 80102d8:	f3bf 8f4f 	dsb	sy
 80102dc:	613b      	str	r3, [r7, #16]
}
 80102de:	bf00      	nop
 80102e0:	e7fe      	b.n	80102e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80102e2:	697b      	ldr	r3, [r7, #20]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	20002034 	.word	0x20002034
 80102f0:	08012ca4 	.word	0x08012ca4
 80102f4:	08010431 	.word	0x08010431
 80102f8:	20002038 	.word	0x20002038

080102fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b08a      	sub	sp, #40	; 0x28
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801030a:	2300      	movs	r3, #0
 801030c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d10a      	bne.n	801032a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	623b      	str	r3, [r7, #32]
}
 8010326:	bf00      	nop
 8010328:	e7fe      	b.n	8010328 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801032a:	4b1a      	ldr	r3, [pc, #104]	; (8010394 <xTimerGenericCommand+0x98>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d02a      	beq.n	8010388 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	2b05      	cmp	r3, #5
 8010342:	dc18      	bgt.n	8010376 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010344:	f7ff fdb4 	bl	800feb0 <xTaskGetSchedulerState>
 8010348:	4603      	mov	r3, r0
 801034a:	2b02      	cmp	r3, #2
 801034c:	d109      	bne.n	8010362 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801034e:	4b11      	ldr	r3, [pc, #68]	; (8010394 <xTimerGenericCommand+0x98>)
 8010350:	6818      	ldr	r0, [r3, #0]
 8010352:	f107 0110 	add.w	r1, r7, #16
 8010356:	2300      	movs	r3, #0
 8010358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801035a:	f7fe f9e5 	bl	800e728 <xQueueGenericSend>
 801035e:	6278      	str	r0, [r7, #36]	; 0x24
 8010360:	e012      	b.n	8010388 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010362:	4b0c      	ldr	r3, [pc, #48]	; (8010394 <xTimerGenericCommand+0x98>)
 8010364:	6818      	ldr	r0, [r3, #0]
 8010366:	f107 0110 	add.w	r1, r7, #16
 801036a:	2300      	movs	r3, #0
 801036c:	2200      	movs	r2, #0
 801036e:	f7fe f9db 	bl	800e728 <xQueueGenericSend>
 8010372:	6278      	str	r0, [r7, #36]	; 0x24
 8010374:	e008      	b.n	8010388 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010376:	4b07      	ldr	r3, [pc, #28]	; (8010394 <xTimerGenericCommand+0x98>)
 8010378:	6818      	ldr	r0, [r3, #0]
 801037a:	f107 0110 	add.w	r1, r7, #16
 801037e:	2300      	movs	r3, #0
 8010380:	683a      	ldr	r2, [r7, #0]
 8010382:	f7fe facf 	bl	800e924 <xQueueGenericSendFromISR>
 8010386:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801038a:	4618      	mov	r0, r3
 801038c:	3728      	adds	r7, #40	; 0x28
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	20002034 	.word	0x20002034

08010398 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af02      	add	r7, sp, #8
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103a2:	4b22      	ldr	r3, [pc, #136]	; (801042c <prvProcessExpiredTimer+0x94>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	3304      	adds	r3, #4
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fd ff95 	bl	800e2e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103bc:	f003 0304 	and.w	r3, r3, #4
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d022      	beq.n	801040a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	699a      	ldr	r2, [r3, #24]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	18d1      	adds	r1, r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	6978      	ldr	r0, [r7, #20]
 80103d2:	f000 f8d1 	bl	8010578 <prvInsertTimerInActiveList>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d01f      	beq.n	801041c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103dc:	2300      	movs	r3, #0
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	2300      	movs	r3, #0
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	2100      	movs	r1, #0
 80103e6:	6978      	ldr	r0, [r7, #20]
 80103e8:	f7ff ff88 	bl	80102fc <xTimerGenericCommand>
 80103ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d113      	bne.n	801041c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	60fb      	str	r3, [r7, #12]
}
 8010406:	bf00      	nop
 8010408:	e7fe      	b.n	8010408 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010410:	f023 0301 	bic.w	r3, r3, #1
 8010414:	b2da      	uxtb	r2, r3
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	6a1b      	ldr	r3, [r3, #32]
 8010420:	6978      	ldr	r0, [r7, #20]
 8010422:	4798      	blx	r3
}
 8010424:	bf00      	nop
 8010426:	3718      	adds	r7, #24
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	2000202c 	.word	0x2000202c

08010430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010438:	f107 0308 	add.w	r3, r7, #8
 801043c:	4618      	mov	r0, r3
 801043e:	f000 f857 	bl	80104f0 <prvGetNextExpireTime>
 8010442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	4619      	mov	r1, r3
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f000 f803 	bl	8010454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801044e:	f000 f8d5 	bl	80105fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010452:	e7f1      	b.n	8010438 <prvTimerTask+0x8>

08010454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801045e:	f7ff f927 	bl	800f6b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010462:	f107 0308 	add.w	r3, r7, #8
 8010466:	4618      	mov	r0, r3
 8010468:	f000 f866 	bl	8010538 <prvSampleTimeNow>
 801046c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d130      	bne.n	80104d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10a      	bne.n	8010490 <prvProcessTimerOrBlockTask+0x3c>
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	429a      	cmp	r2, r3
 8010480:	d806      	bhi.n	8010490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010482:	f7ff f923 	bl	800f6cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010486:	68f9      	ldr	r1, [r7, #12]
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff ff85 	bl	8010398 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801048e:	e024      	b.n	80104da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d008      	beq.n	80104a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010496:	4b13      	ldr	r3, [pc, #76]	; (80104e4 <prvProcessTimerOrBlockTask+0x90>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <prvProcessTimerOrBlockTask+0x50>
 80104a0:	2301      	movs	r3, #1
 80104a2:	e000      	b.n	80104a6 <prvProcessTimerOrBlockTask+0x52>
 80104a4:	2300      	movs	r3, #0
 80104a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80104a8:	4b0f      	ldr	r3, [pc, #60]	; (80104e8 <prvProcessTimerOrBlockTask+0x94>)
 80104aa:	6818      	ldr	r0, [r3, #0]
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	4619      	mov	r1, r3
 80104b6:	f7fe fe8b 	bl	800f1d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80104ba:	f7ff f907 	bl	800f6cc <xTaskResumeAll>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d10a      	bne.n	80104da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80104c4:	4b09      	ldr	r3, [pc, #36]	; (80104ec <prvProcessTimerOrBlockTask+0x98>)
 80104c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ca:	601a      	str	r2, [r3, #0]
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	f3bf 8f6f 	isb	sy
}
 80104d4:	e001      	b.n	80104da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80104d6:	f7ff f8f9 	bl	800f6cc <xTaskResumeAll>
}
 80104da:	bf00      	nop
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	20002030 	.word	0x20002030
 80104e8:	20002034 	.word	0x20002034
 80104ec:	e000ed04 	.word	0xe000ed04

080104f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104f8:	4b0e      	ldr	r3, [pc, #56]	; (8010534 <prvGetNextExpireTime+0x44>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <prvGetNextExpireTime+0x16>
 8010502:	2201      	movs	r2, #1
 8010504:	e000      	b.n	8010508 <prvGetNextExpireTime+0x18>
 8010506:	2200      	movs	r2, #0
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d105      	bne.n	8010520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010514:	4b07      	ldr	r3, [pc, #28]	; (8010534 <prvGetNextExpireTime+0x44>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	60fb      	str	r3, [r7, #12]
 801051e:	e001      	b.n	8010524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010520:	2300      	movs	r3, #0
 8010522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010524:	68fb      	ldr	r3, [r7, #12]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	2000202c 	.word	0x2000202c

08010538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010540:	f7ff f962 	bl	800f808 <xTaskGetTickCount>
 8010544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010546:	4b0b      	ldr	r3, [pc, #44]	; (8010574 <prvSampleTimeNow+0x3c>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	429a      	cmp	r2, r3
 801054e:	d205      	bcs.n	801055c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010550:	f000 f936 	bl	80107c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	601a      	str	r2, [r3, #0]
 801055a:	e002      	b.n	8010562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010562:	4a04      	ldr	r2, [pc, #16]	; (8010574 <prvSampleTimeNow+0x3c>)
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010568:	68fb      	ldr	r3, [r7, #12]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	2000203c 	.word	0x2000203c

08010578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b086      	sub	sp, #24
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
 8010584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010586:	2300      	movs	r3, #0
 8010588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	68ba      	ldr	r2, [r7, #8]
 801058e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010596:	68ba      	ldr	r2, [r7, #8]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	429a      	cmp	r2, r3
 801059c:	d812      	bhi.n	80105c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	1ad2      	subs	r2, r2, r3
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	699b      	ldr	r3, [r3, #24]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d302      	bcc.n	80105b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80105ac:	2301      	movs	r3, #1
 80105ae:	617b      	str	r3, [r7, #20]
 80105b0:	e01b      	b.n	80105ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80105b2:	4b10      	ldr	r3, [pc, #64]	; (80105f4 <prvInsertTimerInActiveList+0x7c>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	3304      	adds	r3, #4
 80105ba:	4619      	mov	r1, r3
 80105bc:	4610      	mov	r0, r2
 80105be:	f7fd fe56 	bl	800e26e <vListInsert>
 80105c2:	e012      	b.n	80105ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d206      	bcs.n	80105da <prvInsertTimerInActiveList+0x62>
 80105cc:	68ba      	ldr	r2, [r7, #8]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d302      	bcc.n	80105da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80105d4:	2301      	movs	r3, #1
 80105d6:	617b      	str	r3, [r7, #20]
 80105d8:	e007      	b.n	80105ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105da:	4b07      	ldr	r3, [pc, #28]	; (80105f8 <prvInsertTimerInActiveList+0x80>)
 80105dc:	681a      	ldr	r2, [r3, #0]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	3304      	adds	r3, #4
 80105e2:	4619      	mov	r1, r3
 80105e4:	4610      	mov	r0, r2
 80105e6:	f7fd fe42 	bl	800e26e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80105ea:	697b      	ldr	r3, [r7, #20]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3718      	adds	r7, #24
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	20002030 	.word	0x20002030
 80105f8:	2000202c 	.word	0x2000202c

080105fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b08e      	sub	sp, #56	; 0x38
 8010600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010602:	e0ca      	b.n	801079a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2b00      	cmp	r3, #0
 8010608:	da18      	bge.n	801063c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801060a:	1d3b      	adds	r3, r7, #4
 801060c:	3304      	adds	r3, #4
 801060e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010612:	2b00      	cmp	r3, #0
 8010614:	d10a      	bne.n	801062c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061a:	f383 8811 	msr	BASEPRI, r3
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f3bf 8f4f 	dsb	sy
 8010626:	61fb      	str	r3, [r7, #28]
}
 8010628:	bf00      	nop
 801062a:	e7fe      	b.n	801062a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010632:	6850      	ldr	r0, [r2, #4]
 8010634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010636:	6892      	ldr	r2, [r2, #8]
 8010638:	4611      	mov	r1, r2
 801063a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	f2c0 80aa 	blt.w	8010798 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	695b      	ldr	r3, [r3, #20]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d004      	beq.n	801065a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	3304      	adds	r3, #4
 8010654:	4618      	mov	r0, r3
 8010656:	f7fd fe43 	bl	800e2e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801065a:	463b      	mov	r3, r7
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff ff6b 	bl	8010538 <prvSampleTimeNow>
 8010662:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b09      	cmp	r3, #9
 8010668:	f200 8097 	bhi.w	801079a <prvProcessReceivedCommands+0x19e>
 801066c:	a201      	add	r2, pc, #4	; (adr r2, 8010674 <prvProcessReceivedCommands+0x78>)
 801066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010672:	bf00      	nop
 8010674:	0801069d 	.word	0x0801069d
 8010678:	0801069d 	.word	0x0801069d
 801067c:	0801069d 	.word	0x0801069d
 8010680:	08010711 	.word	0x08010711
 8010684:	08010725 	.word	0x08010725
 8010688:	0801076f 	.word	0x0801076f
 801068c:	0801069d 	.word	0x0801069d
 8010690:	0801069d 	.word	0x0801069d
 8010694:	08010711 	.word	0x08010711
 8010698:	08010725 	.word	0x08010725
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106a2:	f043 0301 	orr.w	r3, r3, #1
 80106a6:	b2da      	uxtb	r2, r3
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80106ae:	68ba      	ldr	r2, [r7, #8]
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	18d1      	adds	r1, r2, r3
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106bc:	f7ff ff5c 	bl	8010578 <prvInsertTimerInActiveList>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d069      	beq.n	801079a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106d4:	f003 0304 	and.w	r3, r3, #4
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d05e      	beq.n	801079a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80106dc:	68ba      	ldr	r2, [r7, #8]
 80106de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e0:	699b      	ldr	r3, [r3, #24]
 80106e2:	441a      	add	r2, r3
 80106e4:	2300      	movs	r3, #0
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	2300      	movs	r3, #0
 80106ea:	2100      	movs	r1, #0
 80106ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106ee:	f7ff fe05 	bl	80102fc <xTimerGenericCommand>
 80106f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80106f4:	6a3b      	ldr	r3, [r7, #32]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d14f      	bne.n	801079a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	61bb      	str	r3, [r7, #24]
}
 801070c:	bf00      	nop
 801070e:	e7fe      	b.n	801070e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010716:	f023 0301 	bic.w	r3, r3, #1
 801071a:	b2da      	uxtb	r2, r3
 801071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010722:	e03a      	b.n	801079a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801072a:	f043 0301 	orr.w	r3, r3, #1
 801072e:	b2da      	uxtb	r2, r3
 8010730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073e:	699b      	ldr	r3, [r3, #24]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10a      	bne.n	801075a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	617b      	str	r3, [r7, #20]
}
 8010756:	bf00      	nop
 8010758:	e7fe      	b.n	8010758 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075c:	699a      	ldr	r2, [r3, #24]
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	18d1      	adds	r1, r2, r3
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010768:	f7ff ff06 	bl	8010578 <prvInsertTimerInActiveList>
					break;
 801076c:	e015      	b.n	801079a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010774:	f003 0302 	and.w	r3, r3, #2
 8010778:	2b00      	cmp	r3, #0
 801077a:	d103      	bne.n	8010784 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801077c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801077e:	f000 fbd7 	bl	8010f30 <vPortFree>
 8010782:	e00a      	b.n	801079a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801078a:	f023 0301 	bic.w	r3, r3, #1
 801078e:	b2da      	uxtb	r2, r3
 8010790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010796:	e000      	b.n	801079a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801079a:	4b08      	ldr	r3, [pc, #32]	; (80107bc <prvProcessReceivedCommands+0x1c0>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	1d39      	adds	r1, r7, #4
 80107a0:	2200      	movs	r2, #0
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fe f956 	bl	800ea54 <xQueueReceive>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f47f af2a 	bne.w	8010604 <prvProcessReceivedCommands+0x8>
	}
}
 80107b0:	bf00      	nop
 80107b2:	bf00      	nop
 80107b4:	3730      	adds	r7, #48	; 0x30
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	20002034 	.word	0x20002034

080107c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80107c6:	e048      	b.n	801085a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80107c8:	4b2d      	ldr	r3, [pc, #180]	; (8010880 <prvSwitchTimerLists+0xc0>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107d2:	4b2b      	ldr	r3, [pc, #172]	; (8010880 <prvSwitchTimerLists+0xc0>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	3304      	adds	r3, #4
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fd fd7d 	bl	800e2e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	6a1b      	ldr	r3, [r3, #32]
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107f4:	f003 0304 	and.w	r3, r3, #4
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d02e      	beq.n	801085a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	699b      	ldr	r3, [r3, #24]
 8010800:	693a      	ldr	r2, [r7, #16]
 8010802:	4413      	add	r3, r2
 8010804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	429a      	cmp	r2, r3
 801080c:	d90e      	bls.n	801082c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801081a:	4b19      	ldr	r3, [pc, #100]	; (8010880 <prvSwitchTimerLists+0xc0>)
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	3304      	adds	r3, #4
 8010822:	4619      	mov	r1, r3
 8010824:	4610      	mov	r0, r2
 8010826:	f7fd fd22 	bl	800e26e <vListInsert>
 801082a:	e016      	b.n	801085a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801082c:	2300      	movs	r3, #0
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	2300      	movs	r3, #0
 8010832:	693a      	ldr	r2, [r7, #16]
 8010834:	2100      	movs	r1, #0
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7ff fd60 	bl	80102fc <xTimerGenericCommand>
 801083c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10a      	bne.n	801085a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	603b      	str	r3, [r7, #0]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801085a:	4b09      	ldr	r3, [pc, #36]	; (8010880 <prvSwitchTimerLists+0xc0>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d1b1      	bne.n	80107c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010864:	4b06      	ldr	r3, [pc, #24]	; (8010880 <prvSwitchTimerLists+0xc0>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801086a:	4b06      	ldr	r3, [pc, #24]	; (8010884 <prvSwitchTimerLists+0xc4>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	4a04      	ldr	r2, [pc, #16]	; (8010880 <prvSwitchTimerLists+0xc0>)
 8010870:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010872:	4a04      	ldr	r2, [pc, #16]	; (8010884 <prvSwitchTimerLists+0xc4>)
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	6013      	str	r3, [r2, #0]
}
 8010878:	bf00      	nop
 801087a:	3718      	adds	r7, #24
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	2000202c 	.word	0x2000202c
 8010884:	20002030 	.word	0x20002030

08010888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801088e:	f000 f969 	bl	8010b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010892:	4b15      	ldr	r3, [pc, #84]	; (80108e8 <prvCheckForValidListAndQueue+0x60>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d120      	bne.n	80108dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801089a:	4814      	ldr	r0, [pc, #80]	; (80108ec <prvCheckForValidListAndQueue+0x64>)
 801089c:	f7fd fc96 	bl	800e1cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80108a0:	4813      	ldr	r0, [pc, #76]	; (80108f0 <prvCheckForValidListAndQueue+0x68>)
 80108a2:	f7fd fc93 	bl	800e1cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80108a6:	4b13      	ldr	r3, [pc, #76]	; (80108f4 <prvCheckForValidListAndQueue+0x6c>)
 80108a8:	4a10      	ldr	r2, [pc, #64]	; (80108ec <prvCheckForValidListAndQueue+0x64>)
 80108aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80108ac:	4b12      	ldr	r3, [pc, #72]	; (80108f8 <prvCheckForValidListAndQueue+0x70>)
 80108ae:	4a10      	ldr	r2, [pc, #64]	; (80108f0 <prvCheckForValidListAndQueue+0x68>)
 80108b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80108b2:	2300      	movs	r3, #0
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	4b11      	ldr	r3, [pc, #68]	; (80108fc <prvCheckForValidListAndQueue+0x74>)
 80108b8:	4a11      	ldr	r2, [pc, #68]	; (8010900 <prvCheckForValidListAndQueue+0x78>)
 80108ba:	2110      	movs	r1, #16
 80108bc:	200a      	movs	r0, #10
 80108be:	f7fd fda1 	bl	800e404 <xQueueGenericCreateStatic>
 80108c2:	4603      	mov	r3, r0
 80108c4:	4a08      	ldr	r2, [pc, #32]	; (80108e8 <prvCheckForValidListAndQueue+0x60>)
 80108c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80108c8:	4b07      	ldr	r3, [pc, #28]	; (80108e8 <prvCheckForValidListAndQueue+0x60>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d005      	beq.n	80108dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80108d0:	4b05      	ldr	r3, [pc, #20]	; (80108e8 <prvCheckForValidListAndQueue+0x60>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	490b      	ldr	r1, [pc, #44]	; (8010904 <prvCheckForValidListAndQueue+0x7c>)
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fe fc50 	bl	800f17c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108dc:	f000 f972 	bl	8010bc4 <vPortExitCritical>
}
 80108e0:	bf00      	nop
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	20002034 	.word	0x20002034
 80108ec:	20002004 	.word	0x20002004
 80108f0:	20002018 	.word	0x20002018
 80108f4:	2000202c 	.word	0x2000202c
 80108f8:	20002030 	.word	0x20002030
 80108fc:	200020e0 	.word	0x200020e0
 8010900:	20002040 	.word	0x20002040
 8010904:	08012cac 	.word	0x08012cac

08010908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	3b04      	subs	r3, #4
 8010918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	3b04      	subs	r3, #4
 8010926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	f023 0201 	bic.w	r2, r3, #1
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	3b04      	subs	r3, #4
 8010936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010938:	4a0c      	ldr	r2, [pc, #48]	; (801096c <pxPortInitialiseStack+0x64>)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3b14      	subs	r3, #20
 8010942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	3b04      	subs	r3, #4
 801094e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f06f 0202 	mvn.w	r2, #2
 8010956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3b20      	subs	r3, #32
 801095c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801095e:	68fb      	ldr	r3, [r7, #12]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr
 801096c:	08010971 	.word	0x08010971

08010970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010970:	b480      	push	{r7}
 8010972:	b085      	sub	sp, #20
 8010974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801097a:	4b12      	ldr	r3, [pc, #72]	; (80109c4 <prvTaskExitError+0x54>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010982:	d00a      	beq.n	801099a <prvTaskExitError+0x2a>
	__asm volatile
 8010984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010988:	f383 8811 	msr	BASEPRI, r3
 801098c:	f3bf 8f6f 	isb	sy
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	60fb      	str	r3, [r7, #12]
}
 8010996:	bf00      	nop
 8010998:	e7fe      	b.n	8010998 <prvTaskExitError+0x28>
	__asm volatile
 801099a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099e:	f383 8811 	msr	BASEPRI, r3
 80109a2:	f3bf 8f6f 	isb	sy
 80109a6:	f3bf 8f4f 	dsb	sy
 80109aa:	60bb      	str	r3, [r7, #8]
}
 80109ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80109ae:	bf00      	nop
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d0fc      	beq.n	80109b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80109b6:	bf00      	nop
 80109b8:	bf00      	nop
 80109ba:	3714      	adds	r7, #20
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr
 80109c4:	2000002c 	.word	0x2000002c
	...

080109d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80109d0:	4b07      	ldr	r3, [pc, #28]	; (80109f0 <pxCurrentTCBConst2>)
 80109d2:	6819      	ldr	r1, [r3, #0]
 80109d4:	6808      	ldr	r0, [r1, #0]
 80109d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109da:	f380 8809 	msr	PSP, r0
 80109de:	f3bf 8f6f 	isb	sy
 80109e2:	f04f 0000 	mov.w	r0, #0
 80109e6:	f380 8811 	msr	BASEPRI, r0
 80109ea:	4770      	bx	lr
 80109ec:	f3af 8000 	nop.w

080109f0 <pxCurrentTCBConst2>:
 80109f0:	20001b04 	.word	0x20001b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109f4:	bf00      	nop
 80109f6:	bf00      	nop

080109f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109f8:	4808      	ldr	r0, [pc, #32]	; (8010a1c <prvPortStartFirstTask+0x24>)
 80109fa:	6800      	ldr	r0, [r0, #0]
 80109fc:	6800      	ldr	r0, [r0, #0]
 80109fe:	f380 8808 	msr	MSP, r0
 8010a02:	f04f 0000 	mov.w	r0, #0
 8010a06:	f380 8814 	msr	CONTROL, r0
 8010a0a:	b662      	cpsie	i
 8010a0c:	b661      	cpsie	f
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	f3bf 8f6f 	isb	sy
 8010a16:	df00      	svc	0
 8010a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a1a:	bf00      	nop
 8010a1c:	e000ed08 	.word	0xe000ed08

08010a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b086      	sub	sp, #24
 8010a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010a26:	4b46      	ldr	r3, [pc, #280]	; (8010b40 <xPortStartScheduler+0x120>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4a46      	ldr	r2, [pc, #280]	; (8010b44 <xPortStartScheduler+0x124>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d10a      	bne.n	8010a46 <xPortStartScheduler+0x26>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a34:	f383 8811 	msr	BASEPRI, r3
 8010a38:	f3bf 8f6f 	isb	sy
 8010a3c:	f3bf 8f4f 	dsb	sy
 8010a40:	613b      	str	r3, [r7, #16]
}
 8010a42:	bf00      	nop
 8010a44:	e7fe      	b.n	8010a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a46:	4b3e      	ldr	r3, [pc, #248]	; (8010b40 <xPortStartScheduler+0x120>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a3f      	ldr	r2, [pc, #252]	; (8010b48 <xPortStartScheduler+0x128>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d10a      	bne.n	8010a66 <xPortStartScheduler+0x46>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	60fb      	str	r3, [r7, #12]
}
 8010a62:	bf00      	nop
 8010a64:	e7fe      	b.n	8010a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a66:	4b39      	ldr	r3, [pc, #228]	; (8010b4c <xPortStartScheduler+0x12c>)
 8010a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	22ff      	movs	r2, #255	; 0xff
 8010a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010a80:	78fb      	ldrb	r3, [r7, #3]
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	4b31      	ldr	r3, [pc, #196]	; (8010b50 <xPortStartScheduler+0x130>)
 8010a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a8e:	4b31      	ldr	r3, [pc, #196]	; (8010b54 <xPortStartScheduler+0x134>)
 8010a90:	2207      	movs	r2, #7
 8010a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a94:	e009      	b.n	8010aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010a96:	4b2f      	ldr	r3, [pc, #188]	; (8010b54 <xPortStartScheduler+0x134>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	4a2d      	ldr	r2, [pc, #180]	; (8010b54 <xPortStartScheduler+0x134>)
 8010a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010aa0:	78fb      	ldrb	r3, [r7, #3]
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	005b      	lsls	r3, r3, #1
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010aaa:	78fb      	ldrb	r3, [r7, #3]
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ab2:	2b80      	cmp	r3, #128	; 0x80
 8010ab4:	d0ef      	beq.n	8010a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ab6:	4b27      	ldr	r3, [pc, #156]	; (8010b54 <xPortStartScheduler+0x134>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f1c3 0307 	rsb	r3, r3, #7
 8010abe:	2b04      	cmp	r3, #4
 8010ac0:	d00a      	beq.n	8010ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac6:	f383 8811 	msr	BASEPRI, r3
 8010aca:	f3bf 8f6f 	isb	sy
 8010ace:	f3bf 8f4f 	dsb	sy
 8010ad2:	60bb      	str	r3, [r7, #8]
}
 8010ad4:	bf00      	nop
 8010ad6:	e7fe      	b.n	8010ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ad8:	4b1e      	ldr	r3, [pc, #120]	; (8010b54 <xPortStartScheduler+0x134>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	021b      	lsls	r3, r3, #8
 8010ade:	4a1d      	ldr	r2, [pc, #116]	; (8010b54 <xPortStartScheduler+0x134>)
 8010ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010ae2:	4b1c      	ldr	r3, [pc, #112]	; (8010b54 <xPortStartScheduler+0x134>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010aea:	4a1a      	ldr	r2, [pc, #104]	; (8010b54 <xPortStartScheduler+0x134>)
 8010aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010af6:	4b18      	ldr	r3, [pc, #96]	; (8010b58 <xPortStartScheduler+0x138>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a17      	ldr	r2, [pc, #92]	; (8010b58 <xPortStartScheduler+0x138>)
 8010afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b02:	4b15      	ldr	r3, [pc, #84]	; (8010b58 <xPortStartScheduler+0x138>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4a14      	ldr	r2, [pc, #80]	; (8010b58 <xPortStartScheduler+0x138>)
 8010b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b0e:	f000 f8dd 	bl	8010ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b12:	4b12      	ldr	r3, [pc, #72]	; (8010b5c <xPortStartScheduler+0x13c>)
 8010b14:	2200      	movs	r2, #0
 8010b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b18:	f000 f8fc 	bl	8010d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b1c:	4b10      	ldr	r3, [pc, #64]	; (8010b60 <xPortStartScheduler+0x140>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4a0f      	ldr	r2, [pc, #60]	; (8010b60 <xPortStartScheduler+0x140>)
 8010b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b28:	f7ff ff66 	bl	80109f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b2c:	f7fe ff36 	bl	800f99c <vTaskSwitchContext>
	prvTaskExitError();
 8010b30:	f7ff ff1e 	bl	8010970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	e000ed00 	.word	0xe000ed00
 8010b44:	410fc271 	.word	0x410fc271
 8010b48:	410fc270 	.word	0x410fc270
 8010b4c:	e000e400 	.word	0xe000e400
 8010b50:	20002130 	.word	0x20002130
 8010b54:	20002134 	.word	0x20002134
 8010b58:	e000ed20 	.word	0xe000ed20
 8010b5c:	2000002c 	.word	0x2000002c
 8010b60:	e000ef34 	.word	0xe000ef34

08010b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
	__asm volatile
 8010b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6e:	f383 8811 	msr	BASEPRI, r3
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	f3bf 8f4f 	dsb	sy
 8010b7a:	607b      	str	r3, [r7, #4]
}
 8010b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010b7e:	4b0f      	ldr	r3, [pc, #60]	; (8010bbc <vPortEnterCritical+0x58>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	3301      	adds	r3, #1
 8010b84:	4a0d      	ldr	r2, [pc, #52]	; (8010bbc <vPortEnterCritical+0x58>)
 8010b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010b88:	4b0c      	ldr	r3, [pc, #48]	; (8010bbc <vPortEnterCritical+0x58>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d10f      	bne.n	8010bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b90:	4b0b      	ldr	r3, [pc, #44]	; (8010bc0 <vPortEnterCritical+0x5c>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00a      	beq.n	8010bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9e:	f383 8811 	msr	BASEPRI, r3
 8010ba2:	f3bf 8f6f 	isb	sy
 8010ba6:	f3bf 8f4f 	dsb	sy
 8010baa:	603b      	str	r3, [r7, #0]
}
 8010bac:	bf00      	nop
 8010bae:	e7fe      	b.n	8010bae <vPortEnterCritical+0x4a>
	}
}
 8010bb0:	bf00      	nop
 8010bb2:	370c      	adds	r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr
 8010bbc:	2000002c 	.word	0x2000002c
 8010bc0:	e000ed04 	.word	0xe000ed04

08010bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010bca:	4b12      	ldr	r3, [pc, #72]	; (8010c14 <vPortExitCritical+0x50>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d10a      	bne.n	8010be8 <vPortExitCritical+0x24>
	__asm volatile
 8010bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd6:	f383 8811 	msr	BASEPRI, r3
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	607b      	str	r3, [r7, #4]
}
 8010be4:	bf00      	nop
 8010be6:	e7fe      	b.n	8010be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010be8:	4b0a      	ldr	r3, [pc, #40]	; (8010c14 <vPortExitCritical+0x50>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	4a09      	ldr	r2, [pc, #36]	; (8010c14 <vPortExitCritical+0x50>)
 8010bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010bf2:	4b08      	ldr	r3, [pc, #32]	; (8010c14 <vPortExitCritical+0x50>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d105      	bne.n	8010c06 <vPortExitCritical+0x42>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	f383 8811 	msr	BASEPRI, r3
}
 8010c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c06:	bf00      	nop
 8010c08:	370c      	adds	r7, #12
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	2000002c 	.word	0x2000002c
	...

08010c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c20:	f3ef 8009 	mrs	r0, PSP
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	4b15      	ldr	r3, [pc, #84]	; (8010c80 <pxCurrentTCBConst>)
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	f01e 0f10 	tst.w	lr, #16
 8010c30:	bf08      	it	eq
 8010c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3a:	6010      	str	r0, [r2, #0]
 8010c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c44:	f380 8811 	msr	BASEPRI, r0
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	f3bf 8f6f 	isb	sy
 8010c50:	f7fe fea4 	bl	800f99c <vTaskSwitchContext>
 8010c54:	f04f 0000 	mov.w	r0, #0
 8010c58:	f380 8811 	msr	BASEPRI, r0
 8010c5c:	bc09      	pop	{r0, r3}
 8010c5e:	6819      	ldr	r1, [r3, #0]
 8010c60:	6808      	ldr	r0, [r1, #0]
 8010c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c66:	f01e 0f10 	tst.w	lr, #16
 8010c6a:	bf08      	it	eq
 8010c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010c70:	f380 8809 	msr	PSP, r0
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	f3af 8000 	nop.w

08010c80 <pxCurrentTCBConst>:
 8010c80:	20001b04 	.word	0x20001b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010c84:	bf00      	nop
 8010c86:	bf00      	nop

08010c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	f383 8811 	msr	BASEPRI, r3
 8010c96:	f3bf 8f6f 	isb	sy
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	607b      	str	r3, [r7, #4]
}
 8010ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ca2:	f7fe fdc1 	bl	800f828 <xTaskIncrementTick>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d003      	beq.n	8010cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010cac:	4b06      	ldr	r3, [pc, #24]	; (8010cc8 <SysTick_Handler+0x40>)
 8010cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	f383 8811 	msr	BASEPRI, r3
}
 8010cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010cc0:	bf00      	nop
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	e000ed04 	.word	0xe000ed04

08010ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010cd0:	4b0b      	ldr	r3, [pc, #44]	; (8010d00 <vPortSetupTimerInterrupt+0x34>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010cd6:	4b0b      	ldr	r3, [pc, #44]	; (8010d04 <vPortSetupTimerInterrupt+0x38>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010cdc:	4b0a      	ldr	r3, [pc, #40]	; (8010d08 <vPortSetupTimerInterrupt+0x3c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a0a      	ldr	r2, [pc, #40]	; (8010d0c <vPortSetupTimerInterrupt+0x40>)
 8010ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ce6:	099b      	lsrs	r3, r3, #6
 8010ce8:	4a09      	ldr	r2, [pc, #36]	; (8010d10 <vPortSetupTimerInterrupt+0x44>)
 8010cea:	3b01      	subs	r3, #1
 8010cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010cee:	4b04      	ldr	r3, [pc, #16]	; (8010d00 <vPortSetupTimerInterrupt+0x34>)
 8010cf0:	2207      	movs	r2, #7
 8010cf2:	601a      	str	r2, [r3, #0]
}
 8010cf4:	bf00      	nop
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	e000e010 	.word	0xe000e010
 8010d04:	e000e018 	.word	0xe000e018
 8010d08:	20000000 	.word	0x20000000
 8010d0c:	10624dd3 	.word	0x10624dd3
 8010d10:	e000e014 	.word	0xe000e014

08010d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d24 <vPortEnableVFP+0x10>
 8010d18:	6801      	ldr	r1, [r0, #0]
 8010d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d1e:	6001      	str	r1, [r0, #0]
 8010d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d22:	bf00      	nop
 8010d24:	e000ed88 	.word	0xe000ed88

08010d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d2e:	f3ef 8305 	mrs	r3, IPSR
 8010d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2b0f      	cmp	r3, #15
 8010d38:	d914      	bls.n	8010d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d3a:	4a17      	ldr	r2, [pc, #92]	; (8010d98 <vPortValidateInterruptPriority+0x70>)
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	4413      	add	r3, r2
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d44:	4b15      	ldr	r3, [pc, #84]	; (8010d9c <vPortValidateInterruptPriority+0x74>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	7afa      	ldrb	r2, [r7, #11]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d20a      	bcs.n	8010d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d52:	f383 8811 	msr	BASEPRI, r3
 8010d56:	f3bf 8f6f 	isb	sy
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	607b      	str	r3, [r7, #4]
}
 8010d60:	bf00      	nop
 8010d62:	e7fe      	b.n	8010d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d64:	4b0e      	ldr	r3, [pc, #56]	; (8010da0 <vPortValidateInterruptPriority+0x78>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010d6c:	4b0d      	ldr	r3, [pc, #52]	; (8010da4 <vPortValidateInterruptPriority+0x7c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d90a      	bls.n	8010d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d78:	f383 8811 	msr	BASEPRI, r3
 8010d7c:	f3bf 8f6f 	isb	sy
 8010d80:	f3bf 8f4f 	dsb	sy
 8010d84:	603b      	str	r3, [r7, #0]
}
 8010d86:	bf00      	nop
 8010d88:	e7fe      	b.n	8010d88 <vPortValidateInterruptPriority+0x60>
	}
 8010d8a:	bf00      	nop
 8010d8c:	3714      	adds	r7, #20
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	e000e3f0 	.word	0xe000e3f0
 8010d9c:	20002130 	.word	0x20002130
 8010da0:	e000ed0c 	.word	0xe000ed0c
 8010da4:	20002134 	.word	0x20002134

08010da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08a      	sub	sp, #40	; 0x28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010db0:	2300      	movs	r3, #0
 8010db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010db4:	f7fe fc7c 	bl	800f6b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010db8:	4b58      	ldr	r3, [pc, #352]	; (8010f1c <pvPortMalloc+0x174>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d101      	bne.n	8010dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010dc0:	f000 f910 	bl	8010fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010dc4:	4b56      	ldr	r3, [pc, #344]	; (8010f20 <pvPortMalloc+0x178>)
 8010dc6:	681a      	ldr	r2, [r3, #0]
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4013      	ands	r3, r2
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	f040 808e 	bne.w	8010eee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d01d      	beq.n	8010e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010dd8:	2208      	movs	r2, #8
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4413      	add	r3, r2
 8010dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f003 0307 	and.w	r3, r3, #7
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d014      	beq.n	8010e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f023 0307 	bic.w	r3, r3, #7
 8010df0:	3308      	adds	r3, #8
 8010df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f003 0307 	and.w	r3, r3, #7
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00a      	beq.n	8010e14 <pvPortMalloc+0x6c>
	__asm volatile
 8010dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e02:	f383 8811 	msr	BASEPRI, r3
 8010e06:	f3bf 8f6f 	isb	sy
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	617b      	str	r3, [r7, #20]
}
 8010e10:	bf00      	nop
 8010e12:	e7fe      	b.n	8010e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d069      	beq.n	8010eee <pvPortMalloc+0x146>
 8010e1a:	4b42      	ldr	r3, [pc, #264]	; (8010f24 <pvPortMalloc+0x17c>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d864      	bhi.n	8010eee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e24:	4b40      	ldr	r3, [pc, #256]	; (8010f28 <pvPortMalloc+0x180>)
 8010e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e28:	4b3f      	ldr	r3, [pc, #252]	; (8010f28 <pvPortMalloc+0x180>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e2e:	e004      	b.n	8010e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d903      	bls.n	8010e4c <pvPortMalloc+0xa4>
 8010e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1f1      	bne.n	8010e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e4c:	4b33      	ldr	r3, [pc, #204]	; (8010f1c <pvPortMalloc+0x174>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d04b      	beq.n	8010eee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e56:	6a3b      	ldr	r3, [r7, #32]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2208      	movs	r2, #8
 8010e5c:	4413      	add	r3, r2
 8010e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	6a3b      	ldr	r3, [r7, #32]
 8010e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	1ad2      	subs	r2, r2, r3
 8010e70:	2308      	movs	r3, #8
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d91f      	bls.n	8010eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	f003 0307 	and.w	r3, r3, #7
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00a      	beq.n	8010ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8010e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8e:	f383 8811 	msr	BASEPRI, r3
 8010e92:	f3bf 8f6f 	isb	sy
 8010e96:	f3bf 8f4f 	dsb	sy
 8010e9a:	613b      	str	r3, [r7, #16]
}
 8010e9c:	bf00      	nop
 8010e9e:	e7fe      	b.n	8010e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea2:	685a      	ldr	r2, [r3, #4]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	1ad2      	subs	r2, r2, r3
 8010ea8:	69bb      	ldr	r3, [r7, #24]
 8010eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010eb2:	69b8      	ldr	r0, [r7, #24]
 8010eb4:	f000 f8f8 	bl	80110a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010eb8:	4b1a      	ldr	r3, [pc, #104]	; (8010f24 <pvPortMalloc+0x17c>)
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	4a18      	ldr	r2, [pc, #96]	; (8010f24 <pvPortMalloc+0x17c>)
 8010ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ec6:	4b17      	ldr	r3, [pc, #92]	; (8010f24 <pvPortMalloc+0x17c>)
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	4b18      	ldr	r3, [pc, #96]	; (8010f2c <pvPortMalloc+0x184>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d203      	bcs.n	8010eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010ed2:	4b14      	ldr	r3, [pc, #80]	; (8010f24 <pvPortMalloc+0x17c>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a15      	ldr	r2, [pc, #84]	; (8010f2c <pvPortMalloc+0x184>)
 8010ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	685a      	ldr	r2, [r3, #4]
 8010ede:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <pvPortMalloc+0x178>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	431a      	orrs	r2, r3
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	2200      	movs	r2, #0
 8010eec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010eee:	f7fe fbed 	bl	800f6cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	f003 0307 	and.w	r3, r3, #7
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00a      	beq.n	8010f12 <pvPortMalloc+0x16a>
	__asm volatile
 8010efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f00:	f383 8811 	msr	BASEPRI, r3
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	60fb      	str	r3, [r7, #12]
}
 8010f0e:	bf00      	nop
 8010f10:	e7fe      	b.n	8010f10 <pvPortMalloc+0x168>
	return pvReturn;
 8010f12:	69fb      	ldr	r3, [r7, #28]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3728      	adds	r7, #40	; 0x28
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	20005d40 	.word	0x20005d40
 8010f20:	20005d4c 	.word	0x20005d4c
 8010f24:	20005d44 	.word	0x20005d44
 8010f28:	20005d38 	.word	0x20005d38
 8010f2c:	20005d48 	.word	0x20005d48

08010f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d048      	beq.n	8010fd4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f42:	2308      	movs	r3, #8
 8010f44:	425b      	negs	r3, r3
 8010f46:	697a      	ldr	r2, [r7, #20]
 8010f48:	4413      	add	r3, r2
 8010f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	685a      	ldr	r2, [r3, #4]
 8010f54:	4b21      	ldr	r3, [pc, #132]	; (8010fdc <vPortFree+0xac>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4013      	ands	r3, r2
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d10a      	bne.n	8010f74 <vPortFree+0x44>
	__asm volatile
 8010f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f62:	f383 8811 	msr	BASEPRI, r3
 8010f66:	f3bf 8f6f 	isb	sy
 8010f6a:	f3bf 8f4f 	dsb	sy
 8010f6e:	60fb      	str	r3, [r7, #12]
}
 8010f70:	bf00      	nop
 8010f72:	e7fe      	b.n	8010f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00a      	beq.n	8010f92 <vPortFree+0x62>
	__asm volatile
 8010f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f80:	f383 8811 	msr	BASEPRI, r3
 8010f84:	f3bf 8f6f 	isb	sy
 8010f88:	f3bf 8f4f 	dsb	sy
 8010f8c:	60bb      	str	r3, [r7, #8]
}
 8010f8e:	bf00      	nop
 8010f90:	e7fe      	b.n	8010f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	685a      	ldr	r2, [r3, #4]
 8010f96:	4b11      	ldr	r3, [pc, #68]	; (8010fdc <vPortFree+0xac>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4013      	ands	r3, r2
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d019      	beq.n	8010fd4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d115      	bne.n	8010fd4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	4b0b      	ldr	r3, [pc, #44]	; (8010fdc <vPortFree+0xac>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	43db      	mvns	r3, r3
 8010fb2:	401a      	ands	r2, r3
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010fb8:	f7fe fb7a 	bl	800f6b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	685a      	ldr	r2, [r3, #4]
 8010fc0:	4b07      	ldr	r3, [pc, #28]	; (8010fe0 <vPortFree+0xb0>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	4a06      	ldr	r2, [pc, #24]	; (8010fe0 <vPortFree+0xb0>)
 8010fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010fca:	6938      	ldr	r0, [r7, #16]
 8010fcc:	f000 f86c 	bl	80110a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010fd0:	f7fe fb7c 	bl	800f6cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010fd4:	bf00      	nop
 8010fd6:	3718      	adds	r7, #24
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	20005d4c 	.word	0x20005d4c
 8010fe0:	20005d44 	.word	0x20005d44

08010fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010ff0:	4b27      	ldr	r3, [pc, #156]	; (8011090 <prvHeapInit+0xac>)
 8010ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f003 0307 	and.w	r3, r3, #7
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00c      	beq.n	8011018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	3307      	adds	r3, #7
 8011002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	f023 0307 	bic.w	r3, r3, #7
 801100a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801100c:	68ba      	ldr	r2, [r7, #8]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	4a1f      	ldr	r2, [pc, #124]	; (8011090 <prvHeapInit+0xac>)
 8011014:	4413      	add	r3, r2
 8011016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801101c:	4a1d      	ldr	r2, [pc, #116]	; (8011094 <prvHeapInit+0xb0>)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011022:	4b1c      	ldr	r3, [pc, #112]	; (8011094 <prvHeapInit+0xb0>)
 8011024:	2200      	movs	r2, #0
 8011026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	4413      	add	r3, r2
 801102e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011030:	2208      	movs	r2, #8
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	1a9b      	subs	r3, r3, r2
 8011036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f023 0307 	bic.w	r3, r3, #7
 801103e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	4a15      	ldr	r2, [pc, #84]	; (8011098 <prvHeapInit+0xb4>)
 8011044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011046:	4b14      	ldr	r3, [pc, #80]	; (8011098 <prvHeapInit+0xb4>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2200      	movs	r2, #0
 801104c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801104e:	4b12      	ldr	r3, [pc, #72]	; (8011098 <prvHeapInit+0xb4>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2200      	movs	r2, #0
 8011054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	1ad2      	subs	r2, r2, r3
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011064:	4b0c      	ldr	r3, [pc, #48]	; (8011098 <prvHeapInit+0xb4>)
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	4a0a      	ldr	r2, [pc, #40]	; (801109c <prvHeapInit+0xb8>)
 8011072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	4a09      	ldr	r2, [pc, #36]	; (80110a0 <prvHeapInit+0xbc>)
 801107a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801107c:	4b09      	ldr	r3, [pc, #36]	; (80110a4 <prvHeapInit+0xc0>)
 801107e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011082:	601a      	str	r2, [r3, #0]
}
 8011084:	bf00      	nop
 8011086:	3714      	adds	r7, #20
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr
 8011090:	20002138 	.word	0x20002138
 8011094:	20005d38 	.word	0x20005d38
 8011098:	20005d40 	.word	0x20005d40
 801109c:	20005d48 	.word	0x20005d48
 80110a0:	20005d44 	.word	0x20005d44
 80110a4:	20005d4c 	.word	0x20005d4c

080110a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80110a8:	b480      	push	{r7}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80110b0:	4b28      	ldr	r3, [pc, #160]	; (8011154 <prvInsertBlockIntoFreeList+0xac>)
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	e002      	b.n	80110bc <prvInsertBlockIntoFreeList+0x14>
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	60fb      	str	r3, [r7, #12]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d8f7      	bhi.n	80110b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	4413      	add	r3, r2
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d108      	bne.n	80110ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	685a      	ldr	r2, [r3, #4]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	441a      	add	r2, r3
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	441a      	add	r2, r3
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d118      	bne.n	8011130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	4b15      	ldr	r3, [pc, #84]	; (8011158 <prvInsertBlockIntoFreeList+0xb0>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	429a      	cmp	r2, r3
 8011108:	d00d      	beq.n	8011126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	685a      	ldr	r2, [r3, #4]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	441a      	add	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	601a      	str	r2, [r3, #0]
 8011124:	e008      	b.n	8011138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011126:	4b0c      	ldr	r3, [pc, #48]	; (8011158 <prvInsertBlockIntoFreeList+0xb0>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	601a      	str	r2, [r3, #0]
 801112e:	e003      	b.n	8011138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d002      	beq.n	8011146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011146:	bf00      	nop
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop
 8011154:	20005d38 	.word	0x20005d38
 8011158:	20005d40 	.word	0x20005d40

0801115c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011160:	2201      	movs	r2, #1
 8011162:	490e      	ldr	r1, [pc, #56]	; (801119c <MX_USB_HOST_Init+0x40>)
 8011164:	480e      	ldr	r0, [pc, #56]	; (80111a0 <MX_USB_HOST_Init+0x44>)
 8011166:	f7fa fe6f 	bl	800be48 <USBH_Init>
 801116a:	4603      	mov	r3, r0
 801116c:	2b00      	cmp	r3, #0
 801116e:	d001      	beq.n	8011174 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011170:	f7f0 ff94 	bl	800209c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011174:	490b      	ldr	r1, [pc, #44]	; (80111a4 <MX_USB_HOST_Init+0x48>)
 8011176:	480a      	ldr	r0, [pc, #40]	; (80111a0 <MX_USB_HOST_Init+0x44>)
 8011178:	f7fa ff16 	bl	800bfa8 <USBH_RegisterClass>
 801117c:	4603      	mov	r3, r0
 801117e:	2b00      	cmp	r3, #0
 8011180:	d001      	beq.n	8011186 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011182:	f7f0 ff8b 	bl	800209c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011186:	4806      	ldr	r0, [pc, #24]	; (80111a0 <MX_USB_HOST_Init+0x44>)
 8011188:	f7fa ff9a 	bl	800c0c0 <USBH_Start>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011192:	f7f0 ff83 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011196:	bf00      	nop
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	080111a9 	.word	0x080111a9
 80111a0:	20005e08 	.word	0x20005e08
 80111a4:	2000000c 	.word	0x2000000c

080111a8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	460b      	mov	r3, r1
 80111b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80111b4:	78fb      	ldrb	r3, [r7, #3]
 80111b6:	3b01      	subs	r3, #1
 80111b8:	2b04      	cmp	r3, #4
 80111ba:	d819      	bhi.n	80111f0 <USBH_UserProcess+0x48>
 80111bc:	a201      	add	r2, pc, #4	; (adr r2, 80111c4 <USBH_UserProcess+0x1c>)
 80111be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c2:	bf00      	nop
 80111c4:	080111f1 	.word	0x080111f1
 80111c8:	080111e1 	.word	0x080111e1
 80111cc:	080111f1 	.word	0x080111f1
 80111d0:	080111e9 	.word	0x080111e9
 80111d4:	080111d9 	.word	0x080111d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80111d8:	4b09      	ldr	r3, [pc, #36]	; (8011200 <USBH_UserProcess+0x58>)
 80111da:	2203      	movs	r2, #3
 80111dc:	701a      	strb	r2, [r3, #0]
  break;
 80111de:	e008      	b.n	80111f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80111e0:	4b07      	ldr	r3, [pc, #28]	; (8011200 <USBH_UserProcess+0x58>)
 80111e2:	2202      	movs	r2, #2
 80111e4:	701a      	strb	r2, [r3, #0]
  break;
 80111e6:	e004      	b.n	80111f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80111e8:	4b05      	ldr	r3, [pc, #20]	; (8011200 <USBH_UserProcess+0x58>)
 80111ea:	2201      	movs	r2, #1
 80111ec:	701a      	strb	r2, [r3, #0]
  break;
 80111ee:	e000      	b.n	80111f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80111f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80111f2:	bf00      	nop
 80111f4:	370c      	adds	r7, #12
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	20005d50 	.word	0x20005d50

08011204 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b08a      	sub	sp, #40	; 0x28
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801120c:	f107 0314 	add.w	r3, r7, #20
 8011210:	2200      	movs	r2, #0
 8011212:	601a      	str	r2, [r3, #0]
 8011214:	605a      	str	r2, [r3, #4]
 8011216:	609a      	str	r2, [r3, #8]
 8011218:	60da      	str	r2, [r3, #12]
 801121a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011224:	d147      	bne.n	80112b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011226:	2300      	movs	r3, #0
 8011228:	613b      	str	r3, [r7, #16]
 801122a:	4b25      	ldr	r3, [pc, #148]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 801122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801122e:	4a24      	ldr	r2, [pc, #144]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 8011230:	f043 0301 	orr.w	r3, r3, #1
 8011234:	6313      	str	r3, [r2, #48]	; 0x30
 8011236:	4b22      	ldr	r3, [pc, #136]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 8011238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	613b      	str	r3, [r7, #16]
 8011240:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8011242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011248:	2300      	movs	r3, #0
 801124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801124c:	2300      	movs	r3, #0
 801124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011250:	f107 0314 	add.w	r3, r7, #20
 8011254:	4619      	mov	r1, r3
 8011256:	481b      	ldr	r0, [pc, #108]	; (80112c4 <HAL_HCD_MspInit+0xc0>)
 8011258:	f7f3 fa66 	bl	8004728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801125c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011262:	2302      	movs	r3, #2
 8011264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011266:	2300      	movs	r3, #0
 8011268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801126a:	2303      	movs	r3, #3
 801126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801126e:	230a      	movs	r3, #10
 8011270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011272:	f107 0314 	add.w	r3, r7, #20
 8011276:	4619      	mov	r1, r3
 8011278:	4812      	ldr	r0, [pc, #72]	; (80112c4 <HAL_HCD_MspInit+0xc0>)
 801127a:	f7f3 fa55 	bl	8004728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801127e:	4b10      	ldr	r3, [pc, #64]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 8011280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011282:	4a0f      	ldr	r2, [pc, #60]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 8011284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011288:	6353      	str	r3, [r2, #52]	; 0x34
 801128a:	2300      	movs	r3, #0
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	4b0c      	ldr	r3, [pc, #48]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 8011290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011292:	4a0b      	ldr	r2, [pc, #44]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 8011294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011298:	6453      	str	r3, [r2, #68]	; 0x44
 801129a:	4b09      	ldr	r3, [pc, #36]	; (80112c0 <HAL_HCD_MspInit+0xbc>)
 801129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112a2:	60fb      	str	r3, [r7, #12]
 80112a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80112a6:	2200      	movs	r2, #0
 80112a8:	2100      	movs	r1, #0
 80112aa:	2043      	movs	r0, #67	; 0x43
 80112ac:	f7f2 fef4 	bl	8004098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80112b0:	2043      	movs	r0, #67	; 0x43
 80112b2:	f7f2 ff0d 	bl	80040d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80112b6:	bf00      	nop
 80112b8:	3728      	adds	r7, #40	; 0x28
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	40023800 	.word	0x40023800
 80112c4:	40020000 	.word	0x40020000

080112c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fb fb9f 	bl	800ca1a <USBH_LL_IncTimer>
}
 80112dc:	bf00      	nop
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fb fbe3 	bl	800cabe <USBH_LL_Connect>
}
 80112f8:	bf00      	nop
 80112fa:	3708      	adds	r7, #8
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801130e:	4618      	mov	r0, r3
 8011310:	f7fb fbf8 	bl	800cb04 <USBH_LL_Disconnect>
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	460b      	mov	r3, r1
 8011326:	70fb      	strb	r3, [r7, #3]
 8011328:	4613      	mov	r3, r2
 801132a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011332:	4618      	mov	r0, r3
 8011334:	f7fb fc2f 	bl	800cb96 <USBH_LL_NotifyURBChange>
#endif
}
 8011338:	bf00      	nop
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801134e:	4618      	mov	r0, r3
 8011350:	f7fb fb8d 	bl	800ca6e <USBH_LL_PortEnabled>
}
 8011354:	bf00      	nop
 8011356:	3708      	adds	r7, #8
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801136a:	4618      	mov	r0, r3
 801136c:	f7fb fb99 	bl	800caa2 <USBH_LL_PortDisabled>
}
 8011370:	bf00      	nop
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011386:	2b01      	cmp	r3, #1
 8011388:	d12a      	bne.n	80113e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801138a:	4a18      	ldr	r2, [pc, #96]	; (80113ec <USBH_LL_Init+0x74>)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4a15      	ldr	r2, [pc, #84]	; (80113ec <USBH_LL_Init+0x74>)
 8011396:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801139a:	4b14      	ldr	r3, [pc, #80]	; (80113ec <USBH_LL_Init+0x74>)
 801139c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80113a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80113a2:	4b12      	ldr	r3, [pc, #72]	; (80113ec <USBH_LL_Init+0x74>)
 80113a4:	220c      	movs	r2, #12
 80113a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80113a8:	4b10      	ldr	r3, [pc, #64]	; (80113ec <USBH_LL_Init+0x74>)
 80113aa:	2201      	movs	r2, #1
 80113ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80113ae:	4b0f      	ldr	r3, [pc, #60]	; (80113ec <USBH_LL_Init+0x74>)
 80113b0:	2200      	movs	r2, #0
 80113b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80113b4:	4b0d      	ldr	r3, [pc, #52]	; (80113ec <USBH_LL_Init+0x74>)
 80113b6:	2202      	movs	r2, #2
 80113b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80113ba:	4b0c      	ldr	r3, [pc, #48]	; (80113ec <USBH_LL_Init+0x74>)
 80113bc:	2200      	movs	r2, #0
 80113be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80113c0:	480a      	ldr	r0, [pc, #40]	; (80113ec <USBH_LL_Init+0x74>)
 80113c2:	f7f3 fb79 	bl	8004ab8 <HAL_HCD_Init>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d001      	beq.n	80113d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80113cc:	f7f0 fe66 	bl	800209c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80113d0:	4806      	ldr	r0, [pc, #24]	; (80113ec <USBH_LL_Init+0x74>)
 80113d2:	f7f3 ff7d 	bl	80052d0 <HAL_HCD_GetCurrentFrame>
 80113d6:	4603      	mov	r3, r0
 80113d8:	4619      	mov	r1, r3
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7fb fb0e 	bl	800c9fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	200061ec 	.word	0x200061ec

080113f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113fc:	2300      	movs	r3, #0
 80113fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011406:	4618      	mov	r0, r3
 8011408:	f7f3 feea 	bl	80051e0 <HAL_HCD_Start>
 801140c:	4603      	mov	r3, r0
 801140e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011410:	7bfb      	ldrb	r3, [r7, #15]
 8011412:	4618      	mov	r0, r3
 8011414:	f000 f95e 	bl	80116d4 <USBH_Get_USB_Status>
 8011418:	4603      	mov	r3, r0
 801141a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801141c:	7bbb      	ldrb	r3, [r7, #14]
}
 801141e:	4618      	mov	r0, r3
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}

08011426 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011426:	b580      	push	{r7, lr}
 8011428:	b084      	sub	sp, #16
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801142e:	2300      	movs	r3, #0
 8011430:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011432:	2300      	movs	r3, #0
 8011434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801143c:	4618      	mov	r0, r3
 801143e:	f7f3 fef2 	bl	8005226 <HAL_HCD_Stop>
 8011442:	4603      	mov	r3, r0
 8011444:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011446:	7bfb      	ldrb	r3, [r7, #15]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 f943 	bl	80116d4 <USBH_Get_USB_Status>
 801144e:	4603      	mov	r3, r0
 8011450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011452:	7bbb      	ldrb	r3, [r7, #14]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3710      	adds	r7, #16
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011464:	2301      	movs	r3, #1
 8011466:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801146e:	4618      	mov	r0, r3
 8011470:	f7f3 ff3c 	bl	80052ec <HAL_HCD_GetCurrentSpeed>
 8011474:	4603      	mov	r3, r0
 8011476:	2b02      	cmp	r3, #2
 8011478:	d00c      	beq.n	8011494 <USBH_LL_GetSpeed+0x38>
 801147a:	2b02      	cmp	r3, #2
 801147c:	d80d      	bhi.n	801149a <USBH_LL_GetSpeed+0x3e>
 801147e:	2b00      	cmp	r3, #0
 8011480:	d002      	beq.n	8011488 <USBH_LL_GetSpeed+0x2c>
 8011482:	2b01      	cmp	r3, #1
 8011484:	d003      	beq.n	801148e <USBH_LL_GetSpeed+0x32>
 8011486:	e008      	b.n	801149a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011488:	2300      	movs	r3, #0
 801148a:	73fb      	strb	r3, [r7, #15]
    break;
 801148c:	e008      	b.n	80114a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801148e:	2301      	movs	r3, #1
 8011490:	73fb      	strb	r3, [r7, #15]
    break;
 8011492:	e005      	b.n	80114a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011494:	2302      	movs	r3, #2
 8011496:	73fb      	strb	r3, [r7, #15]
    break;
 8011498:	e002      	b.n	80114a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801149a:	2301      	movs	r3, #1
 801149c:	73fb      	strb	r3, [r7, #15]
    break;
 801149e:	bf00      	nop
  }
  return  speed;
 80114a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3710      	adds	r7, #16
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}

080114aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80114aa:	b580      	push	{r7, lr}
 80114ac:	b084      	sub	sp, #16
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114b2:	2300      	movs	r3, #0
 80114b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114b6:	2300      	movs	r3, #0
 80114b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7f3 fecd 	bl	8005260 <HAL_HCD_ResetPort>
 80114c6:	4603      	mov	r3, r0
 80114c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f000 f901 	bl	80116d4 <USBH_Get_USB_Status>
 80114d2:	4603      	mov	r3, r0
 80114d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114f2:	78fa      	ldrb	r2, [r7, #3]
 80114f4:	4611      	mov	r1, r2
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7f3 fed5 	bl	80052a6 <HAL_HCD_HC_GetXferCount>
 80114fc:	4603      	mov	r3, r0
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}

08011506 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011506:	b590      	push	{r4, r7, lr}
 8011508:	b089      	sub	sp, #36	; 0x24
 801150a:	af04      	add	r7, sp, #16
 801150c:	6078      	str	r0, [r7, #4]
 801150e:	4608      	mov	r0, r1
 8011510:	4611      	mov	r1, r2
 8011512:	461a      	mov	r2, r3
 8011514:	4603      	mov	r3, r0
 8011516:	70fb      	strb	r3, [r7, #3]
 8011518:	460b      	mov	r3, r1
 801151a:	70bb      	strb	r3, [r7, #2]
 801151c:	4613      	mov	r3, r2
 801151e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011520:	2300      	movs	r3, #0
 8011522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011524:	2300      	movs	r3, #0
 8011526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801152e:	787c      	ldrb	r4, [r7, #1]
 8011530:	78ba      	ldrb	r2, [r7, #2]
 8011532:	78f9      	ldrb	r1, [r7, #3]
 8011534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011536:	9302      	str	r3, [sp, #8]
 8011538:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801153c:	9301      	str	r3, [sp, #4]
 801153e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011542:	9300      	str	r3, [sp, #0]
 8011544:	4623      	mov	r3, r4
 8011546:	f7f3 fb19 	bl	8004b7c <HAL_HCD_HC_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801154e:	7bfb      	ldrb	r3, [r7, #15]
 8011550:	4618      	mov	r0, r3
 8011552:	f000 f8bf 	bl	80116d4 <USBH_Get_USB_Status>
 8011556:	4603      	mov	r3, r0
 8011558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801155a:	7bbb      	ldrb	r3, [r7, #14]
}
 801155c:	4618      	mov	r0, r3
 801155e:	3714      	adds	r7, #20
 8011560:	46bd      	mov	sp, r7
 8011562:	bd90      	pop	{r4, r7, pc}

08011564 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	460b      	mov	r3, r1
 801156e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011570:	2300      	movs	r3, #0
 8011572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011574:	2300      	movs	r3, #0
 8011576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801157e:	78fa      	ldrb	r2, [r7, #3]
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7f3 fb92 	bl	8004cac <HAL_HCD_HC_Halt>
 8011588:	4603      	mov	r3, r0
 801158a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801158c:	7bfb      	ldrb	r3, [r7, #15]
 801158e:	4618      	mov	r0, r3
 8011590:	f000 f8a0 	bl	80116d4 <USBH_Get_USB_Status>
 8011594:	4603      	mov	r3, r0
 8011596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011598:	7bbb      	ldrb	r3, [r7, #14]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80115a2:	b590      	push	{r4, r7, lr}
 80115a4:	b089      	sub	sp, #36	; 0x24
 80115a6:	af04      	add	r7, sp, #16
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	4608      	mov	r0, r1
 80115ac:	4611      	mov	r1, r2
 80115ae:	461a      	mov	r2, r3
 80115b0:	4603      	mov	r3, r0
 80115b2:	70fb      	strb	r3, [r7, #3]
 80115b4:	460b      	mov	r3, r1
 80115b6:	70bb      	strb	r3, [r7, #2]
 80115b8:	4613      	mov	r3, r2
 80115ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115bc:	2300      	movs	r3, #0
 80115be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80115ca:	787c      	ldrb	r4, [r7, #1]
 80115cc:	78ba      	ldrb	r2, [r7, #2]
 80115ce:	78f9      	ldrb	r1, [r7, #3]
 80115d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80115d4:	9303      	str	r3, [sp, #12]
 80115d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80115d8:	9302      	str	r3, [sp, #8]
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	9301      	str	r3, [sp, #4]
 80115de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	4623      	mov	r3, r4
 80115e6:	f7f3 fb85 	bl	8004cf4 <HAL_HCD_HC_SubmitRequest>
 80115ea:	4603      	mov	r3, r0
 80115ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80115ee:	7bfb      	ldrb	r3, [r7, #15]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 f86f 	bl	80116d4 <USBH_Get_USB_Status>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3714      	adds	r7, #20
 8011600:	46bd      	mov	sp, r7
 8011602:	bd90      	pop	{r4, r7, pc}

08011604 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	460b      	mov	r3, r1
 801160e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011616:	78fa      	ldrb	r2, [r7, #3]
 8011618:	4611      	mov	r1, r2
 801161a:	4618      	mov	r0, r3
 801161c:	f7f3 fe2e 	bl	800527c <HAL_HCD_HC_GetURBState>
 8011620:	4603      	mov	r3, r0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b082      	sub	sp, #8
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	460b      	mov	r3, r1
 8011634:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801163c:	2b01      	cmp	r3, #1
 801163e:	d103      	bne.n	8011648 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011640:	78fb      	ldrb	r3, [r7, #3]
 8011642:	4618      	mov	r0, r3
 8011644:	f000 f872 	bl	801172c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011648:	20c8      	movs	r0, #200	; 0xc8
 801164a:	f7f2 f9d7 	bl	80039fc <HAL_Delay>
  return USBH_OK;
 801164e:	2300      	movs	r3, #0
}
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011658:	b480      	push	{r7}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
 8011664:	4613      	mov	r3, r2
 8011666:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801166e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011670:	78fa      	ldrb	r2, [r7, #3]
 8011672:	68f9      	ldr	r1, [r7, #12]
 8011674:	4613      	mov	r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	00db      	lsls	r3, r3, #3
 801167c:	440b      	add	r3, r1
 801167e:	333b      	adds	r3, #59	; 0x3b
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00a      	beq.n	801169c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011686:	78fa      	ldrb	r2, [r7, #3]
 8011688:	68f9      	ldr	r1, [r7, #12]
 801168a:	4613      	mov	r3, r2
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4413      	add	r3, r2
 8011690:	00db      	lsls	r3, r3, #3
 8011692:	440b      	add	r3, r1
 8011694:	3350      	adds	r3, #80	; 0x50
 8011696:	78ba      	ldrb	r2, [r7, #2]
 8011698:	701a      	strb	r2, [r3, #0]
 801169a:	e009      	b.n	80116b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801169c:	78fa      	ldrb	r2, [r7, #3]
 801169e:	68f9      	ldr	r1, [r7, #12]
 80116a0:	4613      	mov	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4413      	add	r3, r2
 80116a6:	00db      	lsls	r3, r3, #3
 80116a8:	440b      	add	r3, r1
 80116aa:	3351      	adds	r3, #81	; 0x51
 80116ac:	78ba      	ldrb	r2, [r7, #2]
 80116ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3714      	adds	r7, #20
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr

080116be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b082      	sub	sp, #8
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7f2 f998 	bl	80039fc <HAL_Delay>
}
 80116cc:	bf00      	nop
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116de:	2300      	movs	r3, #0
 80116e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80116e2:	79fb      	ldrb	r3, [r7, #7]
 80116e4:	2b03      	cmp	r3, #3
 80116e6:	d817      	bhi.n	8011718 <USBH_Get_USB_Status+0x44>
 80116e8:	a201      	add	r2, pc, #4	; (adr r2, 80116f0 <USBH_Get_USB_Status+0x1c>)
 80116ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ee:	bf00      	nop
 80116f0:	08011701 	.word	0x08011701
 80116f4:	08011707 	.word	0x08011707
 80116f8:	0801170d 	.word	0x0801170d
 80116fc:	08011713 	.word	0x08011713
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011700:	2300      	movs	r3, #0
 8011702:	73fb      	strb	r3, [r7, #15]
    break;
 8011704:	e00b      	b.n	801171e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011706:	2302      	movs	r3, #2
 8011708:	73fb      	strb	r3, [r7, #15]
    break;
 801170a:	e008      	b.n	801171e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801170c:	2301      	movs	r3, #1
 801170e:	73fb      	strb	r3, [r7, #15]
    break;
 8011710:	e005      	b.n	801171e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011712:	2302      	movs	r3, #2
 8011714:	73fb      	strb	r3, [r7, #15]
    break;
 8011716:	e002      	b.n	801171e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011718:	2302      	movs	r3, #2
 801171a:	73fb      	strb	r3, [r7, #15]
    break;
 801171c:	bf00      	nop
  }
  return usb_status;
 801171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011720:	4618      	mov	r0, r3
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011736:	79fb      	ldrb	r3, [r7, #7]
 8011738:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801173a:	79fb      	ldrb	r3, [r7, #7]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d102      	bne.n	8011746 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011740:	2301      	movs	r3, #1
 8011742:	73fb      	strb	r3, [r7, #15]
 8011744:	e001      	b.n	801174a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011746:	2300      	movs	r3, #0
 8011748:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 801174a:	7bfb      	ldrb	r3, [r7, #15]
 801174c:	461a      	mov	r2, r3
 801174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011752:	4803      	ldr	r0, [pc, #12]	; (8011760 <MX_DriverVbusFS+0x34>)
 8011754:	f7f3 f97c 	bl	8004a50 <HAL_GPIO_WritePin>
}
 8011758:	bf00      	nop
 801175a:	3710      	adds	r7, #16
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	40021800 	.word	0x40021800

08011764 <_ZdlPv>:
 8011764:	f001 b88c 	b.w	8012880 <free>

08011768 <_Znwj>:
 8011768:	2801      	cmp	r0, #1
 801176a:	bf38      	it	cc
 801176c:	2001      	movcc	r0, #1
 801176e:	b510      	push	{r4, lr}
 8011770:	4604      	mov	r4, r0
 8011772:	4620      	mov	r0, r4
 8011774:	f001 f87c 	bl	8012870 <malloc>
 8011778:	b930      	cbnz	r0, 8011788 <_Znwj+0x20>
 801177a:	f000 f88b 	bl	8011894 <_ZSt15get_new_handlerv>
 801177e:	b908      	cbnz	r0, 8011784 <_Znwj+0x1c>
 8011780:	f001 f844 	bl	801280c <abort>
 8011784:	4780      	blx	r0
 8011786:	e7f4      	b.n	8011772 <_Znwj+0xa>
 8011788:	bd10      	pop	{r4, pc}

0801178a <_ZNSaIcEC1Ev>:
 801178a:	4770      	bx	lr

0801178c <_ZNSaIcED1Ev>:
 801178c:	4770      	bx	lr

0801178e <_ZSt17__throw_bad_allocv>:
 801178e:	b508      	push	{r3, lr}
 8011790:	f001 f83c 	bl	801280c <abort>

08011794 <_ZSt19__throw_logic_errorPKc>:
 8011794:	b508      	push	{r3, lr}
 8011796:	f001 f839 	bl	801280c <abort>

0801179a <_ZSt24__throw_invalid_argumentPKc>:
 801179a:	b508      	push	{r3, lr}
 801179c:	f001 f836 	bl	801280c <abort>

080117a0 <_ZSt20__throw_length_errorPKc>:
 80117a0:	b508      	push	{r3, lr}
 80117a2:	f001 f833 	bl	801280c <abort>

080117a6 <_ZSt20__throw_out_of_rangePKc>:
 80117a6:	b508      	push	{r3, lr}
 80117a8:	f001 f830 	bl	801280c <abort>

080117ac <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80117ac:	b10a      	cbz	r2, 80117b2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80117ae:	f001 b86f 	b.w	8012890 <memcpy>
 80117b2:	4770      	bx	lr

080117b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80117b4:	b508      	push	{r3, lr}
 80117b6:	680b      	ldr	r3, [r1, #0]
 80117b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117bc:	d302      	bcc.n	80117c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80117be:	480d      	ldr	r0, [pc, #52]	; (80117f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80117c0:	f7ff ffee 	bl	80117a0 <_ZSt20__throw_length_errorPKc>
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d90b      	bls.n	80117e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80117c8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80117cc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80117d0:	d206      	bcs.n	80117e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80117d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80117d6:	bf2a      	itet	cs
 80117d8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80117dc:	6008      	strcc	r0, [r1, #0]
 80117de:	600b      	strcs	r3, [r1, #0]
 80117e0:	6808      	ldr	r0, [r1, #0]
 80117e2:	3001      	adds	r0, #1
 80117e4:	d501      	bpl.n	80117ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80117e6:	f7ff ffd2 	bl	801178e <_ZSt17__throw_bad_allocv>
 80117ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80117ee:	f7ff bfbb 	b.w	8011768 <_Znwj>
 80117f2:	bf00      	nop
 80117f4:	08012d24 	.word	0x08012d24

080117f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80117f8:	f850 3b08 	ldr.w	r3, [r0], #8
 80117fc:	4283      	cmp	r3, r0
 80117fe:	d002      	beq.n	8011806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8011800:	4618      	mov	r0, r3
 8011802:	f7ff bfaf 	b.w	8011764 <_ZdlPv>
 8011806:	4770      	bx	lr

08011808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011808:	2a01      	cmp	r2, #1
 801180a:	b510      	push	{r4, lr}
 801180c:	d102      	bne.n	8011814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801180e:	780a      	ldrb	r2, [r1, #0]
 8011810:	7002      	strb	r2, [r0, #0]
 8011812:	bd10      	pop	{r4, pc}
 8011814:	f7ff ffca 	bl	80117ac <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8011818:	e7fb      	b.n	8011812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801181a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801181a:	b508      	push	{r3, lr}
 801181c:	1a52      	subs	r2, r2, r1
 801181e:	f7ff fff3 	bl	8011808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011822:	bd08      	pop	{r3, pc}

08011824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011824:	b510      	push	{r4, lr}
 8011826:	4604      	mov	r4, r0
 8011828:	f7ff ffe6 	bl	80117f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801182c:	4620      	mov	r0, r4
 801182e:	bd10      	pop	{r4, pc}

08011830 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8011830:	6800      	ldr	r0, [r0, #0]
 8011832:	4770      	bx	lr

08011834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011834:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011836:	4604      	mov	r4, r0
 8011838:	4616      	mov	r6, r2
 801183a:	460d      	mov	r5, r1
 801183c:	b919      	cbnz	r1, 8011846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801183e:	b112      	cbz	r2, 8011846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8011840:	480d      	ldr	r0, [pc, #52]	; (8011878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8011842:	f7ff ffa7 	bl	8011794 <_ZSt19__throw_logic_errorPKc>
 8011846:	1b73      	subs	r3, r6, r5
 8011848:	2b0f      	cmp	r3, #15
 801184a:	9301      	str	r3, [sp, #4]
 801184c:	d907      	bls.n	801185e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801184e:	2200      	movs	r2, #0
 8011850:	a901      	add	r1, sp, #4
 8011852:	4620      	mov	r0, r4
 8011854:	f7ff ffae 	bl	80117b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011858:	9b01      	ldr	r3, [sp, #4]
 801185a:	6020      	str	r0, [r4, #0]
 801185c:	60a3      	str	r3, [r4, #8]
 801185e:	4632      	mov	r2, r6
 8011860:	4629      	mov	r1, r5
 8011862:	6820      	ldr	r0, [r4, #0]
 8011864:	f7ff ffd9 	bl	801181a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011868:	9b01      	ldr	r3, [sp, #4]
 801186a:	6822      	ldr	r2, [r4, #0]
 801186c:	6063      	str	r3, [r4, #4]
 801186e:	2100      	movs	r1, #0
 8011870:	54d1      	strb	r1, [r2, r3]
 8011872:	b002      	add	sp, #8
 8011874:	bd70      	pop	{r4, r5, r6, pc}
 8011876:	bf00      	nop
 8011878:	08012d3c 	.word	0x08012d3c

0801187c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 801187c:	b510      	push	{r4, lr}
 801187e:	f100 0308 	add.w	r3, r0, #8
 8011882:	4604      	mov	r4, r0
 8011884:	6003      	str	r3, [r0, #0]
 8011886:	440a      	add	r2, r1
 8011888:	f04f 0300 	mov.w	r3, #0
 801188c:	f7ff ffd2 	bl	8011834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011890:	4620      	mov	r0, r4
 8011892:	bd10      	pop	{r4, pc}

08011894 <_ZSt15get_new_handlerv>:
 8011894:	4b02      	ldr	r3, [pc, #8]	; (80118a0 <_ZSt15get_new_handlerv+0xc>)
 8011896:	6818      	ldr	r0, [r3, #0]
 8011898:	f3bf 8f5b 	dmb	ish
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	20005d54 	.word	0x20005d54

080118a4 <pow>:
 80118a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118a8:	ec59 8b10 	vmov	r8, r9, d0
 80118ac:	ec57 6b11 	vmov	r6, r7, d1
 80118b0:	f000 f8a6 	bl	8011a00 <__ieee754_pow>
 80118b4:	4b4e      	ldr	r3, [pc, #312]	; (80119f0 <pow+0x14c>)
 80118b6:	f993 3000 	ldrsb.w	r3, [r3]
 80118ba:	3301      	adds	r3, #1
 80118bc:	ec55 4b10 	vmov	r4, r5, d0
 80118c0:	d015      	beq.n	80118ee <pow+0x4a>
 80118c2:	4632      	mov	r2, r6
 80118c4:	463b      	mov	r3, r7
 80118c6:	4630      	mov	r0, r6
 80118c8:	4639      	mov	r1, r7
 80118ca:	f7ef f8ff 	bl	8000acc <__aeabi_dcmpun>
 80118ce:	b970      	cbnz	r0, 80118ee <pow+0x4a>
 80118d0:	4642      	mov	r2, r8
 80118d2:	464b      	mov	r3, r9
 80118d4:	4640      	mov	r0, r8
 80118d6:	4649      	mov	r1, r9
 80118d8:	f7ef f8f8 	bl	8000acc <__aeabi_dcmpun>
 80118dc:	2200      	movs	r2, #0
 80118de:	2300      	movs	r3, #0
 80118e0:	b148      	cbz	r0, 80118f6 <pow+0x52>
 80118e2:	4630      	mov	r0, r6
 80118e4:	4639      	mov	r1, r7
 80118e6:	f7ef f8bf 	bl	8000a68 <__aeabi_dcmpeq>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d17d      	bne.n	80119ea <pow+0x146>
 80118ee:	ec45 4b10 	vmov	d0, r4, r5
 80118f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118f6:	4640      	mov	r0, r8
 80118f8:	4649      	mov	r1, r9
 80118fa:	f7ef f8b5 	bl	8000a68 <__aeabi_dcmpeq>
 80118fe:	b1e0      	cbz	r0, 801193a <pow+0x96>
 8011900:	2200      	movs	r2, #0
 8011902:	2300      	movs	r3, #0
 8011904:	4630      	mov	r0, r6
 8011906:	4639      	mov	r1, r7
 8011908:	f7ef f8ae 	bl	8000a68 <__aeabi_dcmpeq>
 801190c:	2800      	cmp	r0, #0
 801190e:	d16c      	bne.n	80119ea <pow+0x146>
 8011910:	ec47 6b10 	vmov	d0, r6, r7
 8011914:	f000 fe53 	bl	80125be <finite>
 8011918:	2800      	cmp	r0, #0
 801191a:	d0e8      	beq.n	80118ee <pow+0x4a>
 801191c:	2200      	movs	r2, #0
 801191e:	2300      	movs	r3, #0
 8011920:	4630      	mov	r0, r6
 8011922:	4639      	mov	r1, r7
 8011924:	f7ef f8aa 	bl	8000a7c <__aeabi_dcmplt>
 8011928:	2800      	cmp	r0, #0
 801192a:	d0e0      	beq.n	80118ee <pow+0x4a>
 801192c:	f000 ff76 	bl	801281c <__errno>
 8011930:	2321      	movs	r3, #33	; 0x21
 8011932:	6003      	str	r3, [r0, #0]
 8011934:	2400      	movs	r4, #0
 8011936:	4d2f      	ldr	r5, [pc, #188]	; (80119f4 <pow+0x150>)
 8011938:	e7d9      	b.n	80118ee <pow+0x4a>
 801193a:	ec45 4b10 	vmov	d0, r4, r5
 801193e:	f000 fe3e 	bl	80125be <finite>
 8011942:	bbb8      	cbnz	r0, 80119b4 <pow+0x110>
 8011944:	ec49 8b10 	vmov	d0, r8, r9
 8011948:	f000 fe39 	bl	80125be <finite>
 801194c:	b390      	cbz	r0, 80119b4 <pow+0x110>
 801194e:	ec47 6b10 	vmov	d0, r6, r7
 8011952:	f000 fe34 	bl	80125be <finite>
 8011956:	b368      	cbz	r0, 80119b4 <pow+0x110>
 8011958:	4622      	mov	r2, r4
 801195a:	462b      	mov	r3, r5
 801195c:	4620      	mov	r0, r4
 801195e:	4629      	mov	r1, r5
 8011960:	f7ef f8b4 	bl	8000acc <__aeabi_dcmpun>
 8011964:	b160      	cbz	r0, 8011980 <pow+0xdc>
 8011966:	f000 ff59 	bl	801281c <__errno>
 801196a:	2321      	movs	r3, #33	; 0x21
 801196c:	6003      	str	r3, [r0, #0]
 801196e:	2200      	movs	r2, #0
 8011970:	2300      	movs	r3, #0
 8011972:	4610      	mov	r0, r2
 8011974:	4619      	mov	r1, r3
 8011976:	f7ee ff39 	bl	80007ec <__aeabi_ddiv>
 801197a:	4604      	mov	r4, r0
 801197c:	460d      	mov	r5, r1
 801197e:	e7b6      	b.n	80118ee <pow+0x4a>
 8011980:	f000 ff4c 	bl	801281c <__errno>
 8011984:	2322      	movs	r3, #34	; 0x22
 8011986:	6003      	str	r3, [r0, #0]
 8011988:	2200      	movs	r2, #0
 801198a:	2300      	movs	r3, #0
 801198c:	4640      	mov	r0, r8
 801198e:	4649      	mov	r1, r9
 8011990:	f7ef f874 	bl	8000a7c <__aeabi_dcmplt>
 8011994:	2400      	movs	r4, #0
 8011996:	b158      	cbz	r0, 80119b0 <pow+0x10c>
 8011998:	ec47 6b10 	vmov	d0, r6, r7
 801199c:	f000 fe24 	bl	80125e8 <rint>
 80119a0:	4632      	mov	r2, r6
 80119a2:	ec51 0b10 	vmov	r0, r1, d0
 80119a6:	463b      	mov	r3, r7
 80119a8:	f7ef f85e 	bl	8000a68 <__aeabi_dcmpeq>
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d0c2      	beq.n	8011936 <pow+0x92>
 80119b0:	4d11      	ldr	r5, [pc, #68]	; (80119f8 <pow+0x154>)
 80119b2:	e79c      	b.n	80118ee <pow+0x4a>
 80119b4:	2200      	movs	r2, #0
 80119b6:	2300      	movs	r3, #0
 80119b8:	4620      	mov	r0, r4
 80119ba:	4629      	mov	r1, r5
 80119bc:	f7ef f854 	bl	8000a68 <__aeabi_dcmpeq>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d094      	beq.n	80118ee <pow+0x4a>
 80119c4:	ec49 8b10 	vmov	d0, r8, r9
 80119c8:	f000 fdf9 	bl	80125be <finite>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d08e      	beq.n	80118ee <pow+0x4a>
 80119d0:	ec47 6b10 	vmov	d0, r6, r7
 80119d4:	f000 fdf3 	bl	80125be <finite>
 80119d8:	2800      	cmp	r0, #0
 80119da:	d088      	beq.n	80118ee <pow+0x4a>
 80119dc:	f000 ff1e 	bl	801281c <__errno>
 80119e0:	2322      	movs	r3, #34	; 0x22
 80119e2:	6003      	str	r3, [r0, #0]
 80119e4:	2400      	movs	r4, #0
 80119e6:	2500      	movs	r5, #0
 80119e8:	e781      	b.n	80118ee <pow+0x4a>
 80119ea:	4d04      	ldr	r5, [pc, #16]	; (80119fc <pow+0x158>)
 80119ec:	2400      	movs	r4, #0
 80119ee:	e77e      	b.n	80118ee <pow+0x4a>
 80119f0:	20000030 	.word	0x20000030
 80119f4:	fff00000 	.word	0xfff00000
 80119f8:	7ff00000 	.word	0x7ff00000
 80119fc:	3ff00000 	.word	0x3ff00000

08011a00 <__ieee754_pow>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	ed2d 8b06 	vpush	{d8-d10}
 8011a08:	b08d      	sub	sp, #52	; 0x34
 8011a0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011a0e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8011a12:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8011a16:	ea56 0100 	orrs.w	r1, r6, r0
 8011a1a:	ec53 2b10 	vmov	r2, r3, d0
 8011a1e:	f000 84d1 	beq.w	80123c4 <__ieee754_pow+0x9c4>
 8011a22:	497f      	ldr	r1, [pc, #508]	; (8011c20 <__ieee754_pow+0x220>)
 8011a24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011a28:	428c      	cmp	r4, r1
 8011a2a:	ee10 8a10 	vmov	r8, s0
 8011a2e:	4699      	mov	r9, r3
 8011a30:	dc09      	bgt.n	8011a46 <__ieee754_pow+0x46>
 8011a32:	d103      	bne.n	8011a3c <__ieee754_pow+0x3c>
 8011a34:	b97a      	cbnz	r2, 8011a56 <__ieee754_pow+0x56>
 8011a36:	42a6      	cmp	r6, r4
 8011a38:	dd02      	ble.n	8011a40 <__ieee754_pow+0x40>
 8011a3a:	e00c      	b.n	8011a56 <__ieee754_pow+0x56>
 8011a3c:	428e      	cmp	r6, r1
 8011a3e:	dc02      	bgt.n	8011a46 <__ieee754_pow+0x46>
 8011a40:	428e      	cmp	r6, r1
 8011a42:	d110      	bne.n	8011a66 <__ieee754_pow+0x66>
 8011a44:	b178      	cbz	r0, 8011a66 <__ieee754_pow+0x66>
 8011a46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011a4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011a4e:	ea54 0308 	orrs.w	r3, r4, r8
 8011a52:	f000 84b7 	beq.w	80123c4 <__ieee754_pow+0x9c4>
 8011a56:	4873      	ldr	r0, [pc, #460]	; (8011c24 <__ieee754_pow+0x224>)
 8011a58:	b00d      	add	sp, #52	; 0x34
 8011a5a:	ecbd 8b06 	vpop	{d8-d10}
 8011a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a62:	f000 bdb9 	b.w	80125d8 <nan>
 8011a66:	f1b9 0f00 	cmp.w	r9, #0
 8011a6a:	da36      	bge.n	8011ada <__ieee754_pow+0xda>
 8011a6c:	496e      	ldr	r1, [pc, #440]	; (8011c28 <__ieee754_pow+0x228>)
 8011a6e:	428e      	cmp	r6, r1
 8011a70:	dc51      	bgt.n	8011b16 <__ieee754_pow+0x116>
 8011a72:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011a76:	428e      	cmp	r6, r1
 8011a78:	f340 84af 	ble.w	80123da <__ieee754_pow+0x9da>
 8011a7c:	1531      	asrs	r1, r6, #20
 8011a7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011a82:	2914      	cmp	r1, #20
 8011a84:	dd0f      	ble.n	8011aa6 <__ieee754_pow+0xa6>
 8011a86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011a8a:	fa20 fc01 	lsr.w	ip, r0, r1
 8011a8e:	fa0c f101 	lsl.w	r1, ip, r1
 8011a92:	4281      	cmp	r1, r0
 8011a94:	f040 84a1 	bne.w	80123da <__ieee754_pow+0x9da>
 8011a98:	f00c 0c01 	and.w	ip, ip, #1
 8011a9c:	f1cc 0102 	rsb	r1, ip, #2
 8011aa0:	9100      	str	r1, [sp, #0]
 8011aa2:	b180      	cbz	r0, 8011ac6 <__ieee754_pow+0xc6>
 8011aa4:	e059      	b.n	8011b5a <__ieee754_pow+0x15a>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d155      	bne.n	8011b56 <__ieee754_pow+0x156>
 8011aaa:	f1c1 0114 	rsb	r1, r1, #20
 8011aae:	fa46 fc01 	asr.w	ip, r6, r1
 8011ab2:	fa0c f101 	lsl.w	r1, ip, r1
 8011ab6:	42b1      	cmp	r1, r6
 8011ab8:	f040 848c 	bne.w	80123d4 <__ieee754_pow+0x9d4>
 8011abc:	f00c 0c01 	and.w	ip, ip, #1
 8011ac0:	f1cc 0102 	rsb	r1, ip, #2
 8011ac4:	9100      	str	r1, [sp, #0]
 8011ac6:	4959      	ldr	r1, [pc, #356]	; (8011c2c <__ieee754_pow+0x22c>)
 8011ac8:	428e      	cmp	r6, r1
 8011aca:	d12d      	bne.n	8011b28 <__ieee754_pow+0x128>
 8011acc:	2f00      	cmp	r7, #0
 8011ace:	da79      	bge.n	8011bc4 <__ieee754_pow+0x1c4>
 8011ad0:	4956      	ldr	r1, [pc, #344]	; (8011c2c <__ieee754_pow+0x22c>)
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	f7ee fe8a 	bl	80007ec <__aeabi_ddiv>
 8011ad8:	e016      	b.n	8011b08 <__ieee754_pow+0x108>
 8011ada:	2100      	movs	r1, #0
 8011adc:	9100      	str	r1, [sp, #0]
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d13b      	bne.n	8011b5a <__ieee754_pow+0x15a>
 8011ae2:	494f      	ldr	r1, [pc, #316]	; (8011c20 <__ieee754_pow+0x220>)
 8011ae4:	428e      	cmp	r6, r1
 8011ae6:	d1ee      	bne.n	8011ac6 <__ieee754_pow+0xc6>
 8011ae8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011aec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011af0:	ea53 0308 	orrs.w	r3, r3, r8
 8011af4:	f000 8466 	beq.w	80123c4 <__ieee754_pow+0x9c4>
 8011af8:	4b4d      	ldr	r3, [pc, #308]	; (8011c30 <__ieee754_pow+0x230>)
 8011afa:	429c      	cmp	r4, r3
 8011afc:	dd0d      	ble.n	8011b1a <__ieee754_pow+0x11a>
 8011afe:	2f00      	cmp	r7, #0
 8011b00:	f280 8464 	bge.w	80123cc <__ieee754_pow+0x9cc>
 8011b04:	2000      	movs	r0, #0
 8011b06:	2100      	movs	r1, #0
 8011b08:	ec41 0b10 	vmov	d0, r0, r1
 8011b0c:	b00d      	add	sp, #52	; 0x34
 8011b0e:	ecbd 8b06 	vpop	{d8-d10}
 8011b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b16:	2102      	movs	r1, #2
 8011b18:	e7e0      	b.n	8011adc <__ieee754_pow+0xdc>
 8011b1a:	2f00      	cmp	r7, #0
 8011b1c:	daf2      	bge.n	8011b04 <__ieee754_pow+0x104>
 8011b1e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011b22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b26:	e7ef      	b.n	8011b08 <__ieee754_pow+0x108>
 8011b28:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8011b2c:	d104      	bne.n	8011b38 <__ieee754_pow+0x138>
 8011b2e:	4610      	mov	r0, r2
 8011b30:	4619      	mov	r1, r3
 8011b32:	f7ee fd31 	bl	8000598 <__aeabi_dmul>
 8011b36:	e7e7      	b.n	8011b08 <__ieee754_pow+0x108>
 8011b38:	493e      	ldr	r1, [pc, #248]	; (8011c34 <__ieee754_pow+0x234>)
 8011b3a:	428f      	cmp	r7, r1
 8011b3c:	d10d      	bne.n	8011b5a <__ieee754_pow+0x15a>
 8011b3e:	f1b9 0f00 	cmp.w	r9, #0
 8011b42:	db0a      	blt.n	8011b5a <__ieee754_pow+0x15a>
 8011b44:	ec43 2b10 	vmov	d0, r2, r3
 8011b48:	b00d      	add	sp, #52	; 0x34
 8011b4a:	ecbd 8b06 	vpop	{d8-d10}
 8011b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b52:	f000 bc77 	b.w	8012444 <__ieee754_sqrt>
 8011b56:	2100      	movs	r1, #0
 8011b58:	9100      	str	r1, [sp, #0]
 8011b5a:	ec43 2b10 	vmov	d0, r2, r3
 8011b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011b62:	f000 fd23 	bl	80125ac <fabs>
 8011b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b6a:	ec51 0b10 	vmov	r0, r1, d0
 8011b6e:	f1b8 0f00 	cmp.w	r8, #0
 8011b72:	d12a      	bne.n	8011bca <__ieee754_pow+0x1ca>
 8011b74:	b12c      	cbz	r4, 8011b82 <__ieee754_pow+0x182>
 8011b76:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011c2c <__ieee754_pow+0x22c>
 8011b7a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8011b7e:	45e6      	cmp	lr, ip
 8011b80:	d123      	bne.n	8011bca <__ieee754_pow+0x1ca>
 8011b82:	2f00      	cmp	r7, #0
 8011b84:	da05      	bge.n	8011b92 <__ieee754_pow+0x192>
 8011b86:	4602      	mov	r2, r0
 8011b88:	460b      	mov	r3, r1
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	4927      	ldr	r1, [pc, #156]	; (8011c2c <__ieee754_pow+0x22c>)
 8011b8e:	f7ee fe2d 	bl	80007ec <__aeabi_ddiv>
 8011b92:	f1b9 0f00 	cmp.w	r9, #0
 8011b96:	dab7      	bge.n	8011b08 <__ieee754_pow+0x108>
 8011b98:	9b00      	ldr	r3, [sp, #0]
 8011b9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011b9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ba2:	4323      	orrs	r3, r4
 8011ba4:	d108      	bne.n	8011bb8 <__ieee754_pow+0x1b8>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4610      	mov	r0, r2
 8011bac:	4619      	mov	r1, r3
 8011bae:	f7ee fb3b 	bl	8000228 <__aeabi_dsub>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	e78d      	b.n	8011ad4 <__ieee754_pow+0xd4>
 8011bb8:	9b00      	ldr	r3, [sp, #0]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d1a4      	bne.n	8011b08 <__ieee754_pow+0x108>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	e79e      	b.n	8011b08 <__ieee754_pow+0x108>
 8011bca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011bce:	f10c 35ff 	add.w	r5, ip, #4294967295
 8011bd2:	950a      	str	r5, [sp, #40]	; 0x28
 8011bd4:	9d00      	ldr	r5, [sp, #0]
 8011bd6:	46ac      	mov	ip, r5
 8011bd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011bda:	ea5c 0505 	orrs.w	r5, ip, r5
 8011bde:	d0e4      	beq.n	8011baa <__ieee754_pow+0x1aa>
 8011be0:	4b15      	ldr	r3, [pc, #84]	; (8011c38 <__ieee754_pow+0x238>)
 8011be2:	429e      	cmp	r6, r3
 8011be4:	f340 80fc 	ble.w	8011de0 <__ieee754_pow+0x3e0>
 8011be8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011bec:	429e      	cmp	r6, r3
 8011bee:	4b10      	ldr	r3, [pc, #64]	; (8011c30 <__ieee754_pow+0x230>)
 8011bf0:	dd07      	ble.n	8011c02 <__ieee754_pow+0x202>
 8011bf2:	429c      	cmp	r4, r3
 8011bf4:	dc0a      	bgt.n	8011c0c <__ieee754_pow+0x20c>
 8011bf6:	2f00      	cmp	r7, #0
 8011bf8:	da84      	bge.n	8011b04 <__ieee754_pow+0x104>
 8011bfa:	a307      	add	r3, pc, #28	; (adr r3, 8011c18 <__ieee754_pow+0x218>)
 8011bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c00:	e795      	b.n	8011b2e <__ieee754_pow+0x12e>
 8011c02:	429c      	cmp	r4, r3
 8011c04:	dbf7      	blt.n	8011bf6 <__ieee754_pow+0x1f6>
 8011c06:	4b09      	ldr	r3, [pc, #36]	; (8011c2c <__ieee754_pow+0x22c>)
 8011c08:	429c      	cmp	r4, r3
 8011c0a:	dd17      	ble.n	8011c3c <__ieee754_pow+0x23c>
 8011c0c:	2f00      	cmp	r7, #0
 8011c0e:	dcf4      	bgt.n	8011bfa <__ieee754_pow+0x1fa>
 8011c10:	e778      	b.n	8011b04 <__ieee754_pow+0x104>
 8011c12:	bf00      	nop
 8011c14:	f3af 8000 	nop.w
 8011c18:	8800759c 	.word	0x8800759c
 8011c1c:	7e37e43c 	.word	0x7e37e43c
 8011c20:	7ff00000 	.word	0x7ff00000
 8011c24:	08012d65 	.word	0x08012d65
 8011c28:	433fffff 	.word	0x433fffff
 8011c2c:	3ff00000 	.word	0x3ff00000
 8011c30:	3fefffff 	.word	0x3fefffff
 8011c34:	3fe00000 	.word	0x3fe00000
 8011c38:	41e00000 	.word	0x41e00000
 8011c3c:	4b64      	ldr	r3, [pc, #400]	; (8011dd0 <__ieee754_pow+0x3d0>)
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f7ee faf2 	bl	8000228 <__aeabi_dsub>
 8011c44:	a356      	add	r3, pc, #344	; (adr r3, 8011da0 <__ieee754_pow+0x3a0>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	460d      	mov	r5, r1
 8011c4e:	f7ee fca3 	bl	8000598 <__aeabi_dmul>
 8011c52:	a355      	add	r3, pc, #340	; (adr r3, 8011da8 <__ieee754_pow+0x3a8>)
 8011c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c58:	4606      	mov	r6, r0
 8011c5a:	460f      	mov	r7, r1
 8011c5c:	4620      	mov	r0, r4
 8011c5e:	4629      	mov	r1, r5
 8011c60:	f7ee fc9a 	bl	8000598 <__aeabi_dmul>
 8011c64:	4b5b      	ldr	r3, [pc, #364]	; (8011dd4 <__ieee754_pow+0x3d4>)
 8011c66:	4682      	mov	sl, r0
 8011c68:	468b      	mov	fp, r1
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	4629      	mov	r1, r5
 8011c70:	f7ee fc92 	bl	8000598 <__aeabi_dmul>
 8011c74:	4602      	mov	r2, r0
 8011c76:	460b      	mov	r3, r1
 8011c78:	a14d      	add	r1, pc, #308	; (adr r1, 8011db0 <__ieee754_pow+0x3b0>)
 8011c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c7e:	f7ee fad3 	bl	8000228 <__aeabi_dsub>
 8011c82:	4622      	mov	r2, r4
 8011c84:	462b      	mov	r3, r5
 8011c86:	f7ee fc87 	bl	8000598 <__aeabi_dmul>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	2000      	movs	r0, #0
 8011c90:	4951      	ldr	r1, [pc, #324]	; (8011dd8 <__ieee754_pow+0x3d8>)
 8011c92:	f7ee fac9 	bl	8000228 <__aeabi_dsub>
 8011c96:	4622      	mov	r2, r4
 8011c98:	4680      	mov	r8, r0
 8011c9a:	4689      	mov	r9, r1
 8011c9c:	462b      	mov	r3, r5
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	f7ee fc79 	bl	8000598 <__aeabi_dmul>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4640      	mov	r0, r8
 8011cac:	4649      	mov	r1, r9
 8011cae:	f7ee fc73 	bl	8000598 <__aeabi_dmul>
 8011cb2:	a341      	add	r3, pc, #260	; (adr r3, 8011db8 <__ieee754_pow+0x3b8>)
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	f7ee fc6e 	bl	8000598 <__aeabi_dmul>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	4650      	mov	r0, sl
 8011cc2:	4659      	mov	r1, fp
 8011cc4:	f7ee fab0 	bl	8000228 <__aeabi_dsub>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	460b      	mov	r3, r1
 8011ccc:	4680      	mov	r8, r0
 8011cce:	4689      	mov	r9, r1
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	f7ee faaa 	bl	800022c <__adddf3>
 8011cd8:	2400      	movs	r4, #0
 8011cda:	4632      	mov	r2, r6
 8011cdc:	463b      	mov	r3, r7
 8011cde:	4620      	mov	r0, r4
 8011ce0:	460d      	mov	r5, r1
 8011ce2:	f7ee faa1 	bl	8000228 <__aeabi_dsub>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4640      	mov	r0, r8
 8011cec:	4649      	mov	r1, r9
 8011cee:	f7ee fa9b 	bl	8000228 <__aeabi_dsub>
 8011cf2:	9b00      	ldr	r3, [sp, #0]
 8011cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cf6:	3b01      	subs	r3, #1
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	4682      	mov	sl, r0
 8011cfc:	468b      	mov	fp, r1
 8011cfe:	f040 81f1 	bne.w	80120e4 <__ieee754_pow+0x6e4>
 8011d02:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011dc0 <__ieee754_pow+0x3c0>
 8011d06:	eeb0 8a47 	vmov.f32	s16, s14
 8011d0a:	eef0 8a67 	vmov.f32	s17, s15
 8011d0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011d12:	2600      	movs	r6, #0
 8011d14:	4632      	mov	r2, r6
 8011d16:	463b      	mov	r3, r7
 8011d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d1c:	f7ee fa84 	bl	8000228 <__aeabi_dsub>
 8011d20:	4622      	mov	r2, r4
 8011d22:	462b      	mov	r3, r5
 8011d24:	f7ee fc38 	bl	8000598 <__aeabi_dmul>
 8011d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011d2c:	4680      	mov	r8, r0
 8011d2e:	4689      	mov	r9, r1
 8011d30:	4650      	mov	r0, sl
 8011d32:	4659      	mov	r1, fp
 8011d34:	f7ee fc30 	bl	8000598 <__aeabi_dmul>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	4649      	mov	r1, r9
 8011d40:	f7ee fa74 	bl	800022c <__adddf3>
 8011d44:	4632      	mov	r2, r6
 8011d46:	463b      	mov	r3, r7
 8011d48:	4680      	mov	r8, r0
 8011d4a:	4689      	mov	r9, r1
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	4629      	mov	r1, r5
 8011d50:	f7ee fc22 	bl	8000598 <__aeabi_dmul>
 8011d54:	460b      	mov	r3, r1
 8011d56:	4604      	mov	r4, r0
 8011d58:	460d      	mov	r5, r1
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	4649      	mov	r1, r9
 8011d5e:	4640      	mov	r0, r8
 8011d60:	f7ee fa64 	bl	800022c <__adddf3>
 8011d64:	4b1d      	ldr	r3, [pc, #116]	; (8011ddc <__ieee754_pow+0x3dc>)
 8011d66:	4299      	cmp	r1, r3
 8011d68:	ec45 4b19 	vmov	d9, r4, r5
 8011d6c:	4606      	mov	r6, r0
 8011d6e:	460f      	mov	r7, r1
 8011d70:	468b      	mov	fp, r1
 8011d72:	f340 82fe 	ble.w	8012372 <__ieee754_pow+0x972>
 8011d76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011d7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011d7e:	4303      	orrs	r3, r0
 8011d80:	f000 81f0 	beq.w	8012164 <__ieee754_pow+0x764>
 8011d84:	a310      	add	r3, pc, #64	; (adr r3, 8011dc8 <__ieee754_pow+0x3c8>)
 8011d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8a:	ec51 0b18 	vmov	r0, r1, d8
 8011d8e:	f7ee fc03 	bl	8000598 <__aeabi_dmul>
 8011d92:	a30d      	add	r3, pc, #52	; (adr r3, 8011dc8 <__ieee754_pow+0x3c8>)
 8011d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d98:	e6cb      	b.n	8011b32 <__ieee754_pow+0x132>
 8011d9a:	bf00      	nop
 8011d9c:	f3af 8000 	nop.w
 8011da0:	60000000 	.word	0x60000000
 8011da4:	3ff71547 	.word	0x3ff71547
 8011da8:	f85ddf44 	.word	0xf85ddf44
 8011dac:	3e54ae0b 	.word	0x3e54ae0b
 8011db0:	55555555 	.word	0x55555555
 8011db4:	3fd55555 	.word	0x3fd55555
 8011db8:	652b82fe 	.word	0x652b82fe
 8011dbc:	3ff71547 	.word	0x3ff71547
 8011dc0:	00000000 	.word	0x00000000
 8011dc4:	bff00000 	.word	0xbff00000
 8011dc8:	8800759c 	.word	0x8800759c
 8011dcc:	7e37e43c 	.word	0x7e37e43c
 8011dd0:	3ff00000 	.word	0x3ff00000
 8011dd4:	3fd00000 	.word	0x3fd00000
 8011dd8:	3fe00000 	.word	0x3fe00000
 8011ddc:	408fffff 	.word	0x408fffff
 8011de0:	4bd7      	ldr	r3, [pc, #860]	; (8012140 <__ieee754_pow+0x740>)
 8011de2:	ea03 0309 	and.w	r3, r3, r9
 8011de6:	2200      	movs	r2, #0
 8011de8:	b92b      	cbnz	r3, 8011df6 <__ieee754_pow+0x3f6>
 8011dea:	4bd6      	ldr	r3, [pc, #856]	; (8012144 <__ieee754_pow+0x744>)
 8011dec:	f7ee fbd4 	bl	8000598 <__aeabi_dmul>
 8011df0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011df4:	460c      	mov	r4, r1
 8011df6:	1523      	asrs	r3, r4, #20
 8011df8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011dfc:	4413      	add	r3, r2
 8011dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8011e00:	4bd1      	ldr	r3, [pc, #836]	; (8012148 <__ieee754_pow+0x748>)
 8011e02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011e06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011e0a:	429c      	cmp	r4, r3
 8011e0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011e10:	dd08      	ble.n	8011e24 <__ieee754_pow+0x424>
 8011e12:	4bce      	ldr	r3, [pc, #824]	; (801214c <__ieee754_pow+0x74c>)
 8011e14:	429c      	cmp	r4, r3
 8011e16:	f340 8163 	ble.w	80120e0 <__ieee754_pow+0x6e0>
 8011e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011e24:	2400      	movs	r4, #0
 8011e26:	00e3      	lsls	r3, r4, #3
 8011e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e2a:	4bc9      	ldr	r3, [pc, #804]	; (8012150 <__ieee754_pow+0x750>)
 8011e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e30:	ed93 7b00 	vldr	d7, [r3]
 8011e34:	4629      	mov	r1, r5
 8011e36:	ec53 2b17 	vmov	r2, r3, d7
 8011e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8011e3e:	eef0 8a67 	vmov.f32	s17, s15
 8011e42:	4682      	mov	sl, r0
 8011e44:	f7ee f9f0 	bl	8000228 <__aeabi_dsub>
 8011e48:	4652      	mov	r2, sl
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	460f      	mov	r7, r1
 8011e4e:	462b      	mov	r3, r5
 8011e50:	ec51 0b18 	vmov	r0, r1, d8
 8011e54:	f7ee f9ea 	bl	800022c <__adddf3>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	49bd      	ldr	r1, [pc, #756]	; (8012154 <__ieee754_pow+0x754>)
 8011e60:	f7ee fcc4 	bl	80007ec <__aeabi_ddiv>
 8011e64:	ec41 0b19 	vmov	d9, r0, r1
 8011e68:	4602      	mov	r2, r0
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	4639      	mov	r1, r7
 8011e70:	f7ee fb92 	bl	8000598 <__aeabi_dmul>
 8011e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011e7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011e80:	2300      	movs	r3, #0
 8011e82:	9304      	str	r3, [sp, #16]
 8011e84:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011e88:	46ab      	mov	fp, r5
 8011e8a:	106d      	asrs	r5, r5, #1
 8011e8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011e90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011e94:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011e98:	2200      	movs	r2, #0
 8011e9a:	4640      	mov	r0, r8
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	4614      	mov	r4, r2
 8011ea0:	461d      	mov	r5, r3
 8011ea2:	f7ee fb79 	bl	8000598 <__aeabi_dmul>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4639      	mov	r1, r7
 8011eae:	f7ee f9bb 	bl	8000228 <__aeabi_dsub>
 8011eb2:	ec53 2b18 	vmov	r2, r3, d8
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	460f      	mov	r7, r1
 8011eba:	4620      	mov	r0, r4
 8011ebc:	4629      	mov	r1, r5
 8011ebe:	f7ee f9b3 	bl	8000228 <__aeabi_dsub>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4650      	mov	r0, sl
 8011ec8:	4659      	mov	r1, fp
 8011eca:	f7ee f9ad 	bl	8000228 <__aeabi_dsub>
 8011ece:	4642      	mov	r2, r8
 8011ed0:	464b      	mov	r3, r9
 8011ed2:	f7ee fb61 	bl	8000598 <__aeabi_dmul>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	4630      	mov	r0, r6
 8011edc:	4639      	mov	r1, r7
 8011ede:	f7ee f9a3 	bl	8000228 <__aeabi_dsub>
 8011ee2:	ec53 2b19 	vmov	r2, r3, d9
 8011ee6:	f7ee fb57 	bl	8000598 <__aeabi_dmul>
 8011eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011eee:	ec41 0b18 	vmov	d8, r0, r1
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	f7ee fb4f 	bl	8000598 <__aeabi_dmul>
 8011efa:	a37d      	add	r3, pc, #500	; (adr r3, 80120f0 <__ieee754_pow+0x6f0>)
 8011efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f00:	4604      	mov	r4, r0
 8011f02:	460d      	mov	r5, r1
 8011f04:	f7ee fb48 	bl	8000598 <__aeabi_dmul>
 8011f08:	a37b      	add	r3, pc, #492	; (adr r3, 80120f8 <__ieee754_pow+0x6f8>)
 8011f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0e:	f7ee f98d 	bl	800022c <__adddf3>
 8011f12:	4622      	mov	r2, r4
 8011f14:	462b      	mov	r3, r5
 8011f16:	f7ee fb3f 	bl	8000598 <__aeabi_dmul>
 8011f1a:	a379      	add	r3, pc, #484	; (adr r3, 8012100 <__ieee754_pow+0x700>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	f7ee f984 	bl	800022c <__adddf3>
 8011f24:	4622      	mov	r2, r4
 8011f26:	462b      	mov	r3, r5
 8011f28:	f7ee fb36 	bl	8000598 <__aeabi_dmul>
 8011f2c:	a376      	add	r3, pc, #472	; (adr r3, 8012108 <__ieee754_pow+0x708>)
 8011f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f32:	f7ee f97b 	bl	800022c <__adddf3>
 8011f36:	4622      	mov	r2, r4
 8011f38:	462b      	mov	r3, r5
 8011f3a:	f7ee fb2d 	bl	8000598 <__aeabi_dmul>
 8011f3e:	a374      	add	r3, pc, #464	; (adr r3, 8012110 <__ieee754_pow+0x710>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	f7ee f972 	bl	800022c <__adddf3>
 8011f48:	4622      	mov	r2, r4
 8011f4a:	462b      	mov	r3, r5
 8011f4c:	f7ee fb24 	bl	8000598 <__aeabi_dmul>
 8011f50:	a371      	add	r3, pc, #452	; (adr r3, 8012118 <__ieee754_pow+0x718>)
 8011f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f56:	f7ee f969 	bl	800022c <__adddf3>
 8011f5a:	4622      	mov	r2, r4
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	460f      	mov	r7, r1
 8011f60:	462b      	mov	r3, r5
 8011f62:	4620      	mov	r0, r4
 8011f64:	4629      	mov	r1, r5
 8011f66:	f7ee fb17 	bl	8000598 <__aeabi_dmul>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	4630      	mov	r0, r6
 8011f70:	4639      	mov	r1, r7
 8011f72:	f7ee fb11 	bl	8000598 <__aeabi_dmul>
 8011f76:	4642      	mov	r2, r8
 8011f78:	4604      	mov	r4, r0
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	464b      	mov	r3, r9
 8011f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f82:	f7ee f953 	bl	800022c <__adddf3>
 8011f86:	ec53 2b18 	vmov	r2, r3, d8
 8011f8a:	f7ee fb05 	bl	8000598 <__aeabi_dmul>
 8011f8e:	4622      	mov	r2, r4
 8011f90:	462b      	mov	r3, r5
 8011f92:	f7ee f94b 	bl	800022c <__adddf3>
 8011f96:	4642      	mov	r2, r8
 8011f98:	4682      	mov	sl, r0
 8011f9a:	468b      	mov	fp, r1
 8011f9c:	464b      	mov	r3, r9
 8011f9e:	4640      	mov	r0, r8
 8011fa0:	4649      	mov	r1, r9
 8011fa2:	f7ee faf9 	bl	8000598 <__aeabi_dmul>
 8011fa6:	4b6c      	ldr	r3, [pc, #432]	; (8012158 <__ieee754_pow+0x758>)
 8011fa8:	2200      	movs	r2, #0
 8011faa:	4606      	mov	r6, r0
 8011fac:	460f      	mov	r7, r1
 8011fae:	f7ee f93d 	bl	800022c <__adddf3>
 8011fb2:	4652      	mov	r2, sl
 8011fb4:	465b      	mov	r3, fp
 8011fb6:	f7ee f939 	bl	800022c <__adddf3>
 8011fba:	9c04      	ldr	r4, [sp, #16]
 8011fbc:	460d      	mov	r5, r1
 8011fbe:	4622      	mov	r2, r4
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4640      	mov	r0, r8
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee fae7 	bl	8000598 <__aeabi_dmul>
 8011fca:	4b63      	ldr	r3, [pc, #396]	; (8012158 <__ieee754_pow+0x758>)
 8011fcc:	4680      	mov	r8, r0
 8011fce:	4689      	mov	r9, r1
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	4629      	mov	r1, r5
 8011fd6:	f7ee f927 	bl	8000228 <__aeabi_dsub>
 8011fda:	4632      	mov	r2, r6
 8011fdc:	463b      	mov	r3, r7
 8011fde:	f7ee f923 	bl	8000228 <__aeabi_dsub>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	4650      	mov	r0, sl
 8011fe8:	4659      	mov	r1, fp
 8011fea:	f7ee f91d 	bl	8000228 <__aeabi_dsub>
 8011fee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ff2:	f7ee fad1 	bl	8000598 <__aeabi_dmul>
 8011ff6:	4622      	mov	r2, r4
 8011ff8:	4606      	mov	r6, r0
 8011ffa:	460f      	mov	r7, r1
 8011ffc:	462b      	mov	r3, r5
 8011ffe:	ec51 0b18 	vmov	r0, r1, d8
 8012002:	f7ee fac9 	bl	8000598 <__aeabi_dmul>
 8012006:	4602      	mov	r2, r0
 8012008:	460b      	mov	r3, r1
 801200a:	4630      	mov	r0, r6
 801200c:	4639      	mov	r1, r7
 801200e:	f7ee f90d 	bl	800022c <__adddf3>
 8012012:	4606      	mov	r6, r0
 8012014:	460f      	mov	r7, r1
 8012016:	4602      	mov	r2, r0
 8012018:	460b      	mov	r3, r1
 801201a:	4640      	mov	r0, r8
 801201c:	4649      	mov	r1, r9
 801201e:	f7ee f905 	bl	800022c <__adddf3>
 8012022:	9c04      	ldr	r4, [sp, #16]
 8012024:	a33e      	add	r3, pc, #248	; (adr r3, 8012120 <__ieee754_pow+0x720>)
 8012026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202a:	4620      	mov	r0, r4
 801202c:	460d      	mov	r5, r1
 801202e:	f7ee fab3 	bl	8000598 <__aeabi_dmul>
 8012032:	4642      	mov	r2, r8
 8012034:	ec41 0b18 	vmov	d8, r0, r1
 8012038:	464b      	mov	r3, r9
 801203a:	4620      	mov	r0, r4
 801203c:	4629      	mov	r1, r5
 801203e:	f7ee f8f3 	bl	8000228 <__aeabi_dsub>
 8012042:	4602      	mov	r2, r0
 8012044:	460b      	mov	r3, r1
 8012046:	4630      	mov	r0, r6
 8012048:	4639      	mov	r1, r7
 801204a:	f7ee f8ed 	bl	8000228 <__aeabi_dsub>
 801204e:	a336      	add	r3, pc, #216	; (adr r3, 8012128 <__ieee754_pow+0x728>)
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	f7ee faa0 	bl	8000598 <__aeabi_dmul>
 8012058:	a335      	add	r3, pc, #212	; (adr r3, 8012130 <__ieee754_pow+0x730>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	4606      	mov	r6, r0
 8012060:	460f      	mov	r7, r1
 8012062:	4620      	mov	r0, r4
 8012064:	4629      	mov	r1, r5
 8012066:	f7ee fa97 	bl	8000598 <__aeabi_dmul>
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	4630      	mov	r0, r6
 8012070:	4639      	mov	r1, r7
 8012072:	f7ee f8db 	bl	800022c <__adddf3>
 8012076:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012078:	4b38      	ldr	r3, [pc, #224]	; (801215c <__ieee754_pow+0x75c>)
 801207a:	4413      	add	r3, r2
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	f7ee f8d4 	bl	800022c <__adddf3>
 8012084:	4682      	mov	sl, r0
 8012086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012088:	468b      	mov	fp, r1
 801208a:	f7ee fa1b 	bl	80004c4 <__aeabi_i2d>
 801208e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012090:	4b33      	ldr	r3, [pc, #204]	; (8012160 <__ieee754_pow+0x760>)
 8012092:	4413      	add	r3, r2
 8012094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012098:	4606      	mov	r6, r0
 801209a:	460f      	mov	r7, r1
 801209c:	4652      	mov	r2, sl
 801209e:	465b      	mov	r3, fp
 80120a0:	ec51 0b18 	vmov	r0, r1, d8
 80120a4:	f7ee f8c2 	bl	800022c <__adddf3>
 80120a8:	4642      	mov	r2, r8
 80120aa:	464b      	mov	r3, r9
 80120ac:	f7ee f8be 	bl	800022c <__adddf3>
 80120b0:	4632      	mov	r2, r6
 80120b2:	463b      	mov	r3, r7
 80120b4:	f7ee f8ba 	bl	800022c <__adddf3>
 80120b8:	9c04      	ldr	r4, [sp, #16]
 80120ba:	4632      	mov	r2, r6
 80120bc:	463b      	mov	r3, r7
 80120be:	4620      	mov	r0, r4
 80120c0:	460d      	mov	r5, r1
 80120c2:	f7ee f8b1 	bl	8000228 <__aeabi_dsub>
 80120c6:	4642      	mov	r2, r8
 80120c8:	464b      	mov	r3, r9
 80120ca:	f7ee f8ad 	bl	8000228 <__aeabi_dsub>
 80120ce:	ec53 2b18 	vmov	r2, r3, d8
 80120d2:	f7ee f8a9 	bl	8000228 <__aeabi_dsub>
 80120d6:	4602      	mov	r2, r0
 80120d8:	460b      	mov	r3, r1
 80120da:	4650      	mov	r0, sl
 80120dc:	4659      	mov	r1, fp
 80120de:	e606      	b.n	8011cee <__ieee754_pow+0x2ee>
 80120e0:	2401      	movs	r4, #1
 80120e2:	e6a0      	b.n	8011e26 <__ieee754_pow+0x426>
 80120e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012138 <__ieee754_pow+0x738>
 80120e8:	e60d      	b.n	8011d06 <__ieee754_pow+0x306>
 80120ea:	bf00      	nop
 80120ec:	f3af 8000 	nop.w
 80120f0:	4a454eef 	.word	0x4a454eef
 80120f4:	3fca7e28 	.word	0x3fca7e28
 80120f8:	93c9db65 	.word	0x93c9db65
 80120fc:	3fcd864a 	.word	0x3fcd864a
 8012100:	a91d4101 	.word	0xa91d4101
 8012104:	3fd17460 	.word	0x3fd17460
 8012108:	518f264d 	.word	0x518f264d
 801210c:	3fd55555 	.word	0x3fd55555
 8012110:	db6fabff 	.word	0xdb6fabff
 8012114:	3fdb6db6 	.word	0x3fdb6db6
 8012118:	33333303 	.word	0x33333303
 801211c:	3fe33333 	.word	0x3fe33333
 8012120:	e0000000 	.word	0xe0000000
 8012124:	3feec709 	.word	0x3feec709
 8012128:	dc3a03fd 	.word	0xdc3a03fd
 801212c:	3feec709 	.word	0x3feec709
 8012130:	145b01f5 	.word	0x145b01f5
 8012134:	be3e2fe0 	.word	0xbe3e2fe0
 8012138:	00000000 	.word	0x00000000
 801213c:	3ff00000 	.word	0x3ff00000
 8012140:	7ff00000 	.word	0x7ff00000
 8012144:	43400000 	.word	0x43400000
 8012148:	0003988e 	.word	0x0003988e
 801214c:	000bb679 	.word	0x000bb679
 8012150:	08012d68 	.word	0x08012d68
 8012154:	3ff00000 	.word	0x3ff00000
 8012158:	40080000 	.word	0x40080000
 801215c:	08012d88 	.word	0x08012d88
 8012160:	08012d78 	.word	0x08012d78
 8012164:	a3b5      	add	r3, pc, #724	; (adr r3, 801243c <__ieee754_pow+0xa3c>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	4640      	mov	r0, r8
 801216c:	4649      	mov	r1, r9
 801216e:	f7ee f85d 	bl	800022c <__adddf3>
 8012172:	4622      	mov	r2, r4
 8012174:	ec41 0b1a 	vmov	d10, r0, r1
 8012178:	462b      	mov	r3, r5
 801217a:	4630      	mov	r0, r6
 801217c:	4639      	mov	r1, r7
 801217e:	f7ee f853 	bl	8000228 <__aeabi_dsub>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	ec51 0b1a 	vmov	r0, r1, d10
 801218a:	f7ee fc95 	bl	8000ab8 <__aeabi_dcmpgt>
 801218e:	2800      	cmp	r0, #0
 8012190:	f47f adf8 	bne.w	8011d84 <__ieee754_pow+0x384>
 8012194:	4aa4      	ldr	r2, [pc, #656]	; (8012428 <__ieee754_pow+0xa28>)
 8012196:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801219a:	4293      	cmp	r3, r2
 801219c:	f340 810b 	ble.w	80123b6 <__ieee754_pow+0x9b6>
 80121a0:	151b      	asrs	r3, r3, #20
 80121a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80121a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80121aa:	fa4a f303 	asr.w	r3, sl, r3
 80121ae:	445b      	add	r3, fp
 80121b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80121b4:	4e9d      	ldr	r6, [pc, #628]	; (801242c <__ieee754_pow+0xa2c>)
 80121b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80121ba:	4116      	asrs	r6, r2
 80121bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80121c0:	2000      	movs	r0, #0
 80121c2:	ea23 0106 	bic.w	r1, r3, r6
 80121c6:	f1c2 0214 	rsb	r2, r2, #20
 80121ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80121ce:	fa4a fa02 	asr.w	sl, sl, r2
 80121d2:	f1bb 0f00 	cmp.w	fp, #0
 80121d6:	4602      	mov	r2, r0
 80121d8:	460b      	mov	r3, r1
 80121da:	4620      	mov	r0, r4
 80121dc:	4629      	mov	r1, r5
 80121de:	bfb8      	it	lt
 80121e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80121e4:	f7ee f820 	bl	8000228 <__aeabi_dsub>
 80121e8:	ec41 0b19 	vmov	d9, r0, r1
 80121ec:	4642      	mov	r2, r8
 80121ee:	464b      	mov	r3, r9
 80121f0:	ec51 0b19 	vmov	r0, r1, d9
 80121f4:	f7ee f81a 	bl	800022c <__adddf3>
 80121f8:	2400      	movs	r4, #0
 80121fa:	a379      	add	r3, pc, #484	; (adr r3, 80123e0 <__ieee754_pow+0x9e0>)
 80121fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012200:	4620      	mov	r0, r4
 8012202:	460d      	mov	r5, r1
 8012204:	f7ee f9c8 	bl	8000598 <__aeabi_dmul>
 8012208:	ec53 2b19 	vmov	r2, r3, d9
 801220c:	4606      	mov	r6, r0
 801220e:	460f      	mov	r7, r1
 8012210:	4620      	mov	r0, r4
 8012212:	4629      	mov	r1, r5
 8012214:	f7ee f808 	bl	8000228 <__aeabi_dsub>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	4640      	mov	r0, r8
 801221e:	4649      	mov	r1, r9
 8012220:	f7ee f802 	bl	8000228 <__aeabi_dsub>
 8012224:	a370      	add	r3, pc, #448	; (adr r3, 80123e8 <__ieee754_pow+0x9e8>)
 8012226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222a:	f7ee f9b5 	bl	8000598 <__aeabi_dmul>
 801222e:	a370      	add	r3, pc, #448	; (adr r3, 80123f0 <__ieee754_pow+0x9f0>)
 8012230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012234:	4680      	mov	r8, r0
 8012236:	4689      	mov	r9, r1
 8012238:	4620      	mov	r0, r4
 801223a:	4629      	mov	r1, r5
 801223c:	f7ee f9ac 	bl	8000598 <__aeabi_dmul>
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	4640      	mov	r0, r8
 8012246:	4649      	mov	r1, r9
 8012248:	f7ed fff0 	bl	800022c <__adddf3>
 801224c:	4604      	mov	r4, r0
 801224e:	460d      	mov	r5, r1
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	4630      	mov	r0, r6
 8012256:	4639      	mov	r1, r7
 8012258:	f7ed ffe8 	bl	800022c <__adddf3>
 801225c:	4632      	mov	r2, r6
 801225e:	463b      	mov	r3, r7
 8012260:	4680      	mov	r8, r0
 8012262:	4689      	mov	r9, r1
 8012264:	f7ed ffe0 	bl	8000228 <__aeabi_dsub>
 8012268:	4602      	mov	r2, r0
 801226a:	460b      	mov	r3, r1
 801226c:	4620      	mov	r0, r4
 801226e:	4629      	mov	r1, r5
 8012270:	f7ed ffda 	bl	8000228 <__aeabi_dsub>
 8012274:	4642      	mov	r2, r8
 8012276:	4606      	mov	r6, r0
 8012278:	460f      	mov	r7, r1
 801227a:	464b      	mov	r3, r9
 801227c:	4640      	mov	r0, r8
 801227e:	4649      	mov	r1, r9
 8012280:	f7ee f98a 	bl	8000598 <__aeabi_dmul>
 8012284:	a35c      	add	r3, pc, #368	; (adr r3, 80123f8 <__ieee754_pow+0x9f8>)
 8012286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228a:	4604      	mov	r4, r0
 801228c:	460d      	mov	r5, r1
 801228e:	f7ee f983 	bl	8000598 <__aeabi_dmul>
 8012292:	a35b      	add	r3, pc, #364	; (adr r3, 8012400 <__ieee754_pow+0xa00>)
 8012294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012298:	f7ed ffc6 	bl	8000228 <__aeabi_dsub>
 801229c:	4622      	mov	r2, r4
 801229e:	462b      	mov	r3, r5
 80122a0:	f7ee f97a 	bl	8000598 <__aeabi_dmul>
 80122a4:	a358      	add	r3, pc, #352	; (adr r3, 8012408 <__ieee754_pow+0xa08>)
 80122a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122aa:	f7ed ffbf 	bl	800022c <__adddf3>
 80122ae:	4622      	mov	r2, r4
 80122b0:	462b      	mov	r3, r5
 80122b2:	f7ee f971 	bl	8000598 <__aeabi_dmul>
 80122b6:	a356      	add	r3, pc, #344	; (adr r3, 8012410 <__ieee754_pow+0xa10>)
 80122b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122bc:	f7ed ffb4 	bl	8000228 <__aeabi_dsub>
 80122c0:	4622      	mov	r2, r4
 80122c2:	462b      	mov	r3, r5
 80122c4:	f7ee f968 	bl	8000598 <__aeabi_dmul>
 80122c8:	a353      	add	r3, pc, #332	; (adr r3, 8012418 <__ieee754_pow+0xa18>)
 80122ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ce:	f7ed ffad 	bl	800022c <__adddf3>
 80122d2:	4622      	mov	r2, r4
 80122d4:	462b      	mov	r3, r5
 80122d6:	f7ee f95f 	bl	8000598 <__aeabi_dmul>
 80122da:	4602      	mov	r2, r0
 80122dc:	460b      	mov	r3, r1
 80122de:	4640      	mov	r0, r8
 80122e0:	4649      	mov	r1, r9
 80122e2:	f7ed ffa1 	bl	8000228 <__aeabi_dsub>
 80122e6:	4604      	mov	r4, r0
 80122e8:	460d      	mov	r5, r1
 80122ea:	4602      	mov	r2, r0
 80122ec:	460b      	mov	r3, r1
 80122ee:	4640      	mov	r0, r8
 80122f0:	4649      	mov	r1, r9
 80122f2:	f7ee f951 	bl	8000598 <__aeabi_dmul>
 80122f6:	2200      	movs	r2, #0
 80122f8:	ec41 0b19 	vmov	d9, r0, r1
 80122fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012300:	4620      	mov	r0, r4
 8012302:	4629      	mov	r1, r5
 8012304:	f7ed ff90 	bl	8000228 <__aeabi_dsub>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	ec51 0b19 	vmov	r0, r1, d9
 8012310:	f7ee fa6c 	bl	80007ec <__aeabi_ddiv>
 8012314:	4632      	mov	r2, r6
 8012316:	4604      	mov	r4, r0
 8012318:	460d      	mov	r5, r1
 801231a:	463b      	mov	r3, r7
 801231c:	4640      	mov	r0, r8
 801231e:	4649      	mov	r1, r9
 8012320:	f7ee f93a 	bl	8000598 <__aeabi_dmul>
 8012324:	4632      	mov	r2, r6
 8012326:	463b      	mov	r3, r7
 8012328:	f7ed ff80 	bl	800022c <__adddf3>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	4620      	mov	r0, r4
 8012332:	4629      	mov	r1, r5
 8012334:	f7ed ff78 	bl	8000228 <__aeabi_dsub>
 8012338:	4642      	mov	r2, r8
 801233a:	464b      	mov	r3, r9
 801233c:	f7ed ff74 	bl	8000228 <__aeabi_dsub>
 8012340:	460b      	mov	r3, r1
 8012342:	4602      	mov	r2, r0
 8012344:	493a      	ldr	r1, [pc, #232]	; (8012430 <__ieee754_pow+0xa30>)
 8012346:	2000      	movs	r0, #0
 8012348:	f7ed ff6e 	bl	8000228 <__aeabi_dsub>
 801234c:	e9cd 0100 	strd	r0, r1, [sp]
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801235a:	da2f      	bge.n	80123bc <__ieee754_pow+0x9bc>
 801235c:	4650      	mov	r0, sl
 801235e:	ed9d 0b00 	vldr	d0, [sp]
 8012362:	f000 f9cd 	bl	8012700 <scalbn>
 8012366:	ec51 0b10 	vmov	r0, r1, d0
 801236a:	ec53 2b18 	vmov	r2, r3, d8
 801236e:	f7ff bbe0 	b.w	8011b32 <__ieee754_pow+0x132>
 8012372:	4b30      	ldr	r3, [pc, #192]	; (8012434 <__ieee754_pow+0xa34>)
 8012374:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012378:	429e      	cmp	r6, r3
 801237a:	f77f af0b 	ble.w	8012194 <__ieee754_pow+0x794>
 801237e:	4b2e      	ldr	r3, [pc, #184]	; (8012438 <__ieee754_pow+0xa38>)
 8012380:	440b      	add	r3, r1
 8012382:	4303      	orrs	r3, r0
 8012384:	d00b      	beq.n	801239e <__ieee754_pow+0x99e>
 8012386:	a326      	add	r3, pc, #152	; (adr r3, 8012420 <__ieee754_pow+0xa20>)
 8012388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238c:	ec51 0b18 	vmov	r0, r1, d8
 8012390:	f7ee f902 	bl	8000598 <__aeabi_dmul>
 8012394:	a322      	add	r3, pc, #136	; (adr r3, 8012420 <__ieee754_pow+0xa20>)
 8012396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239a:	f7ff bbca 	b.w	8011b32 <__ieee754_pow+0x132>
 801239e:	4622      	mov	r2, r4
 80123a0:	462b      	mov	r3, r5
 80123a2:	f7ed ff41 	bl	8000228 <__aeabi_dsub>
 80123a6:	4642      	mov	r2, r8
 80123a8:	464b      	mov	r3, r9
 80123aa:	f7ee fb7b 	bl	8000aa4 <__aeabi_dcmpge>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f43f aef0 	beq.w	8012194 <__ieee754_pow+0x794>
 80123b4:	e7e7      	b.n	8012386 <__ieee754_pow+0x986>
 80123b6:	f04f 0a00 	mov.w	sl, #0
 80123ba:	e717      	b.n	80121ec <__ieee754_pow+0x7ec>
 80123bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123c0:	4619      	mov	r1, r3
 80123c2:	e7d2      	b.n	801236a <__ieee754_pow+0x96a>
 80123c4:	491a      	ldr	r1, [pc, #104]	; (8012430 <__ieee754_pow+0xa30>)
 80123c6:	2000      	movs	r0, #0
 80123c8:	f7ff bb9e 	b.w	8011b08 <__ieee754_pow+0x108>
 80123cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123d0:	f7ff bb9a 	b.w	8011b08 <__ieee754_pow+0x108>
 80123d4:	9000      	str	r0, [sp, #0]
 80123d6:	f7ff bb76 	b.w	8011ac6 <__ieee754_pow+0xc6>
 80123da:	2100      	movs	r1, #0
 80123dc:	f7ff bb60 	b.w	8011aa0 <__ieee754_pow+0xa0>
 80123e0:	00000000 	.word	0x00000000
 80123e4:	3fe62e43 	.word	0x3fe62e43
 80123e8:	fefa39ef 	.word	0xfefa39ef
 80123ec:	3fe62e42 	.word	0x3fe62e42
 80123f0:	0ca86c39 	.word	0x0ca86c39
 80123f4:	be205c61 	.word	0xbe205c61
 80123f8:	72bea4d0 	.word	0x72bea4d0
 80123fc:	3e663769 	.word	0x3e663769
 8012400:	c5d26bf1 	.word	0xc5d26bf1
 8012404:	3ebbbd41 	.word	0x3ebbbd41
 8012408:	af25de2c 	.word	0xaf25de2c
 801240c:	3f11566a 	.word	0x3f11566a
 8012410:	16bebd93 	.word	0x16bebd93
 8012414:	3f66c16c 	.word	0x3f66c16c
 8012418:	5555553e 	.word	0x5555553e
 801241c:	3fc55555 	.word	0x3fc55555
 8012420:	c2f8f359 	.word	0xc2f8f359
 8012424:	01a56e1f 	.word	0x01a56e1f
 8012428:	3fe00000 	.word	0x3fe00000
 801242c:	000fffff 	.word	0x000fffff
 8012430:	3ff00000 	.word	0x3ff00000
 8012434:	4090cbff 	.word	0x4090cbff
 8012438:	3f6f3400 	.word	0x3f6f3400
 801243c:	652b82fe 	.word	0x652b82fe
 8012440:	3c971547 	.word	0x3c971547

08012444 <__ieee754_sqrt>:
 8012444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012448:	ec55 4b10 	vmov	r4, r5, d0
 801244c:	4e56      	ldr	r6, [pc, #344]	; (80125a8 <__ieee754_sqrt+0x164>)
 801244e:	43ae      	bics	r6, r5
 8012450:	ee10 0a10 	vmov	r0, s0
 8012454:	ee10 3a10 	vmov	r3, s0
 8012458:	4629      	mov	r1, r5
 801245a:	462a      	mov	r2, r5
 801245c:	d110      	bne.n	8012480 <__ieee754_sqrt+0x3c>
 801245e:	ee10 2a10 	vmov	r2, s0
 8012462:	462b      	mov	r3, r5
 8012464:	f7ee f898 	bl	8000598 <__aeabi_dmul>
 8012468:	4602      	mov	r2, r0
 801246a:	460b      	mov	r3, r1
 801246c:	4620      	mov	r0, r4
 801246e:	4629      	mov	r1, r5
 8012470:	f7ed fedc 	bl	800022c <__adddf3>
 8012474:	4604      	mov	r4, r0
 8012476:	460d      	mov	r5, r1
 8012478:	ec45 4b10 	vmov	d0, r4, r5
 801247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012480:	2d00      	cmp	r5, #0
 8012482:	dc10      	bgt.n	80124a6 <__ieee754_sqrt+0x62>
 8012484:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012488:	4330      	orrs	r0, r6
 801248a:	d0f5      	beq.n	8012478 <__ieee754_sqrt+0x34>
 801248c:	b15d      	cbz	r5, 80124a6 <__ieee754_sqrt+0x62>
 801248e:	ee10 2a10 	vmov	r2, s0
 8012492:	462b      	mov	r3, r5
 8012494:	ee10 0a10 	vmov	r0, s0
 8012498:	f7ed fec6 	bl	8000228 <__aeabi_dsub>
 801249c:	4602      	mov	r2, r0
 801249e:	460b      	mov	r3, r1
 80124a0:	f7ee f9a4 	bl	80007ec <__aeabi_ddiv>
 80124a4:	e7e6      	b.n	8012474 <__ieee754_sqrt+0x30>
 80124a6:	1509      	asrs	r1, r1, #20
 80124a8:	d076      	beq.n	8012598 <__ieee754_sqrt+0x154>
 80124aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80124ae:	07ce      	lsls	r6, r1, #31
 80124b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80124b4:	bf5e      	ittt	pl
 80124b6:	0fda      	lsrpl	r2, r3, #31
 80124b8:	005b      	lslpl	r3, r3, #1
 80124ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80124be:	0fda      	lsrs	r2, r3, #31
 80124c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80124c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80124c8:	2000      	movs	r0, #0
 80124ca:	106d      	asrs	r5, r5, #1
 80124cc:	005b      	lsls	r3, r3, #1
 80124ce:	f04f 0e16 	mov.w	lr, #22
 80124d2:	4684      	mov	ip, r0
 80124d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80124d8:	eb0c 0401 	add.w	r4, ip, r1
 80124dc:	4294      	cmp	r4, r2
 80124de:	bfde      	ittt	le
 80124e0:	1b12      	suble	r2, r2, r4
 80124e2:	eb04 0c01 	addle.w	ip, r4, r1
 80124e6:	1840      	addle	r0, r0, r1
 80124e8:	0052      	lsls	r2, r2, #1
 80124ea:	f1be 0e01 	subs.w	lr, lr, #1
 80124ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80124f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80124f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80124fa:	d1ed      	bne.n	80124d8 <__ieee754_sqrt+0x94>
 80124fc:	4671      	mov	r1, lr
 80124fe:	2720      	movs	r7, #32
 8012500:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012504:	4562      	cmp	r2, ip
 8012506:	eb04 060e 	add.w	r6, r4, lr
 801250a:	dc02      	bgt.n	8012512 <__ieee754_sqrt+0xce>
 801250c:	d113      	bne.n	8012536 <__ieee754_sqrt+0xf2>
 801250e:	429e      	cmp	r6, r3
 8012510:	d811      	bhi.n	8012536 <__ieee754_sqrt+0xf2>
 8012512:	2e00      	cmp	r6, #0
 8012514:	eb06 0e04 	add.w	lr, r6, r4
 8012518:	da43      	bge.n	80125a2 <__ieee754_sqrt+0x15e>
 801251a:	f1be 0f00 	cmp.w	lr, #0
 801251e:	db40      	blt.n	80125a2 <__ieee754_sqrt+0x15e>
 8012520:	f10c 0801 	add.w	r8, ip, #1
 8012524:	eba2 020c 	sub.w	r2, r2, ip
 8012528:	429e      	cmp	r6, r3
 801252a:	bf88      	it	hi
 801252c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012530:	1b9b      	subs	r3, r3, r6
 8012532:	4421      	add	r1, r4
 8012534:	46c4      	mov	ip, r8
 8012536:	0052      	lsls	r2, r2, #1
 8012538:	3f01      	subs	r7, #1
 801253a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801253e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012542:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012546:	d1dd      	bne.n	8012504 <__ieee754_sqrt+0xc0>
 8012548:	4313      	orrs	r3, r2
 801254a:	d006      	beq.n	801255a <__ieee754_sqrt+0x116>
 801254c:	1c4c      	adds	r4, r1, #1
 801254e:	bf13      	iteet	ne
 8012550:	3101      	addne	r1, #1
 8012552:	3001      	addeq	r0, #1
 8012554:	4639      	moveq	r1, r7
 8012556:	f021 0101 	bicne.w	r1, r1, #1
 801255a:	1043      	asrs	r3, r0, #1
 801255c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012560:	0849      	lsrs	r1, r1, #1
 8012562:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012566:	07c2      	lsls	r2, r0, #31
 8012568:	bf48      	it	mi
 801256a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801256e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8012572:	460c      	mov	r4, r1
 8012574:	463d      	mov	r5, r7
 8012576:	e77f      	b.n	8012478 <__ieee754_sqrt+0x34>
 8012578:	0ada      	lsrs	r2, r3, #11
 801257a:	3815      	subs	r0, #21
 801257c:	055b      	lsls	r3, r3, #21
 801257e:	2a00      	cmp	r2, #0
 8012580:	d0fa      	beq.n	8012578 <__ieee754_sqrt+0x134>
 8012582:	02d7      	lsls	r7, r2, #11
 8012584:	d50a      	bpl.n	801259c <__ieee754_sqrt+0x158>
 8012586:	f1c1 0420 	rsb	r4, r1, #32
 801258a:	fa23 f404 	lsr.w	r4, r3, r4
 801258e:	1e4d      	subs	r5, r1, #1
 8012590:	408b      	lsls	r3, r1
 8012592:	4322      	orrs	r2, r4
 8012594:	1b41      	subs	r1, r0, r5
 8012596:	e788      	b.n	80124aa <__ieee754_sqrt+0x66>
 8012598:	4608      	mov	r0, r1
 801259a:	e7f0      	b.n	801257e <__ieee754_sqrt+0x13a>
 801259c:	0052      	lsls	r2, r2, #1
 801259e:	3101      	adds	r1, #1
 80125a0:	e7ef      	b.n	8012582 <__ieee754_sqrt+0x13e>
 80125a2:	46e0      	mov	r8, ip
 80125a4:	e7be      	b.n	8012524 <__ieee754_sqrt+0xe0>
 80125a6:	bf00      	nop
 80125a8:	7ff00000 	.word	0x7ff00000

080125ac <fabs>:
 80125ac:	ec51 0b10 	vmov	r0, r1, d0
 80125b0:	ee10 2a10 	vmov	r2, s0
 80125b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125b8:	ec43 2b10 	vmov	d0, r2, r3
 80125bc:	4770      	bx	lr

080125be <finite>:
 80125be:	b082      	sub	sp, #8
 80125c0:	ed8d 0b00 	vstr	d0, [sp]
 80125c4:	9801      	ldr	r0, [sp, #4]
 80125c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80125ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80125ce:	0fc0      	lsrs	r0, r0, #31
 80125d0:	b002      	add	sp, #8
 80125d2:	4770      	bx	lr
 80125d4:	0000      	movs	r0, r0
	...

080125d8 <nan>:
 80125d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80125e0 <nan+0x8>
 80125dc:	4770      	bx	lr
 80125de:	bf00      	nop
 80125e0:	00000000 	.word	0x00000000
 80125e4:	7ff80000 	.word	0x7ff80000

080125e8 <rint>:
 80125e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125ea:	ec51 0b10 	vmov	r0, r1, d0
 80125ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80125f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80125f6:	2e13      	cmp	r6, #19
 80125f8:	ee10 4a10 	vmov	r4, s0
 80125fc:	460b      	mov	r3, r1
 80125fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012602:	dc58      	bgt.n	80126b6 <rint+0xce>
 8012604:	2e00      	cmp	r6, #0
 8012606:	da2b      	bge.n	8012660 <rint+0x78>
 8012608:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801260c:	4302      	orrs	r2, r0
 801260e:	d023      	beq.n	8012658 <rint+0x70>
 8012610:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012614:	4302      	orrs	r2, r0
 8012616:	4254      	negs	r4, r2
 8012618:	4314      	orrs	r4, r2
 801261a:	0c4b      	lsrs	r3, r1, #17
 801261c:	0b24      	lsrs	r4, r4, #12
 801261e:	045b      	lsls	r3, r3, #17
 8012620:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012624:	ea44 0103 	orr.w	r1, r4, r3
 8012628:	4b32      	ldr	r3, [pc, #200]	; (80126f4 <rint+0x10c>)
 801262a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801262e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012632:	4602      	mov	r2, r0
 8012634:	460b      	mov	r3, r1
 8012636:	4630      	mov	r0, r6
 8012638:	4639      	mov	r1, r7
 801263a:	f7ed fdf7 	bl	800022c <__adddf3>
 801263e:	e9cd 0100 	strd	r0, r1, [sp]
 8012642:	463b      	mov	r3, r7
 8012644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012648:	4632      	mov	r2, r6
 801264a:	f7ed fded 	bl	8000228 <__aeabi_dsub>
 801264e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012652:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012656:	4639      	mov	r1, r7
 8012658:	ec41 0b10 	vmov	d0, r0, r1
 801265c:	b003      	add	sp, #12
 801265e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012660:	4a25      	ldr	r2, [pc, #148]	; (80126f8 <rint+0x110>)
 8012662:	4132      	asrs	r2, r6
 8012664:	ea01 0702 	and.w	r7, r1, r2
 8012668:	4307      	orrs	r7, r0
 801266a:	d0f5      	beq.n	8012658 <rint+0x70>
 801266c:	0851      	lsrs	r1, r2, #1
 801266e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8012672:	4314      	orrs	r4, r2
 8012674:	d00c      	beq.n	8012690 <rint+0xa8>
 8012676:	ea23 0201 	bic.w	r2, r3, r1
 801267a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801267e:	2e13      	cmp	r6, #19
 8012680:	fa43 f606 	asr.w	r6, r3, r6
 8012684:	bf0c      	ite	eq
 8012686:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801268a:	2400      	movne	r4, #0
 801268c:	ea42 0306 	orr.w	r3, r2, r6
 8012690:	4918      	ldr	r1, [pc, #96]	; (80126f4 <rint+0x10c>)
 8012692:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012696:	4622      	mov	r2, r4
 8012698:	e9d5 4500 	ldrd	r4, r5, [r5]
 801269c:	4620      	mov	r0, r4
 801269e:	4629      	mov	r1, r5
 80126a0:	f7ed fdc4 	bl	800022c <__adddf3>
 80126a4:	e9cd 0100 	strd	r0, r1, [sp]
 80126a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126ac:	4622      	mov	r2, r4
 80126ae:	462b      	mov	r3, r5
 80126b0:	f7ed fdba 	bl	8000228 <__aeabi_dsub>
 80126b4:	e7d0      	b.n	8012658 <rint+0x70>
 80126b6:	2e33      	cmp	r6, #51	; 0x33
 80126b8:	dd07      	ble.n	80126ca <rint+0xe2>
 80126ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80126be:	d1cb      	bne.n	8012658 <rint+0x70>
 80126c0:	ee10 2a10 	vmov	r2, s0
 80126c4:	f7ed fdb2 	bl	800022c <__adddf3>
 80126c8:	e7c6      	b.n	8012658 <rint+0x70>
 80126ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80126ce:	f04f 36ff 	mov.w	r6, #4294967295
 80126d2:	40d6      	lsrs	r6, r2
 80126d4:	4230      	tst	r0, r6
 80126d6:	d0bf      	beq.n	8012658 <rint+0x70>
 80126d8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80126dc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80126e0:	bf1f      	itttt	ne
 80126e2:	ea24 0101 	bicne.w	r1, r4, r1
 80126e6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80126ea:	fa44 f202 	asrne.w	r2, r4, r2
 80126ee:	ea41 0402 	orrne.w	r4, r1, r2
 80126f2:	e7cd      	b.n	8012690 <rint+0xa8>
 80126f4:	08012d98 	.word	0x08012d98
 80126f8:	000fffff 	.word	0x000fffff
 80126fc:	00000000 	.word	0x00000000

08012700 <scalbn>:
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	ec55 4b10 	vmov	r4, r5, d0
 8012706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801270a:	4606      	mov	r6, r0
 801270c:	462b      	mov	r3, r5
 801270e:	b99a      	cbnz	r2, 8012738 <scalbn+0x38>
 8012710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012714:	4323      	orrs	r3, r4
 8012716:	d036      	beq.n	8012786 <scalbn+0x86>
 8012718:	4b39      	ldr	r3, [pc, #228]	; (8012800 <scalbn+0x100>)
 801271a:	4629      	mov	r1, r5
 801271c:	ee10 0a10 	vmov	r0, s0
 8012720:	2200      	movs	r2, #0
 8012722:	f7ed ff39 	bl	8000598 <__aeabi_dmul>
 8012726:	4b37      	ldr	r3, [pc, #220]	; (8012804 <scalbn+0x104>)
 8012728:	429e      	cmp	r6, r3
 801272a:	4604      	mov	r4, r0
 801272c:	460d      	mov	r5, r1
 801272e:	da10      	bge.n	8012752 <scalbn+0x52>
 8012730:	a32b      	add	r3, pc, #172	; (adr r3, 80127e0 <scalbn+0xe0>)
 8012732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012736:	e03a      	b.n	80127ae <scalbn+0xae>
 8012738:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801273c:	428a      	cmp	r2, r1
 801273e:	d10c      	bne.n	801275a <scalbn+0x5a>
 8012740:	ee10 2a10 	vmov	r2, s0
 8012744:	4620      	mov	r0, r4
 8012746:	4629      	mov	r1, r5
 8012748:	f7ed fd70 	bl	800022c <__adddf3>
 801274c:	4604      	mov	r4, r0
 801274e:	460d      	mov	r5, r1
 8012750:	e019      	b.n	8012786 <scalbn+0x86>
 8012752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012756:	460b      	mov	r3, r1
 8012758:	3a36      	subs	r2, #54	; 0x36
 801275a:	4432      	add	r2, r6
 801275c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012760:	428a      	cmp	r2, r1
 8012762:	dd08      	ble.n	8012776 <scalbn+0x76>
 8012764:	2d00      	cmp	r5, #0
 8012766:	a120      	add	r1, pc, #128	; (adr r1, 80127e8 <scalbn+0xe8>)
 8012768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801276c:	da1c      	bge.n	80127a8 <scalbn+0xa8>
 801276e:	a120      	add	r1, pc, #128	; (adr r1, 80127f0 <scalbn+0xf0>)
 8012770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012774:	e018      	b.n	80127a8 <scalbn+0xa8>
 8012776:	2a00      	cmp	r2, #0
 8012778:	dd08      	ble.n	801278c <scalbn+0x8c>
 801277a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801277e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012782:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012786:	ec45 4b10 	vmov	d0, r4, r5
 801278a:	bd70      	pop	{r4, r5, r6, pc}
 801278c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012790:	da19      	bge.n	80127c6 <scalbn+0xc6>
 8012792:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012796:	429e      	cmp	r6, r3
 8012798:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801279c:	dd0a      	ble.n	80127b4 <scalbn+0xb4>
 801279e:	a112      	add	r1, pc, #72	; (adr r1, 80127e8 <scalbn+0xe8>)
 80127a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1e2      	bne.n	801276e <scalbn+0x6e>
 80127a8:	a30f      	add	r3, pc, #60	; (adr r3, 80127e8 <scalbn+0xe8>)
 80127aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ae:	f7ed fef3 	bl	8000598 <__aeabi_dmul>
 80127b2:	e7cb      	b.n	801274c <scalbn+0x4c>
 80127b4:	a10a      	add	r1, pc, #40	; (adr r1, 80127e0 <scalbn+0xe0>)
 80127b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d0b8      	beq.n	8012730 <scalbn+0x30>
 80127be:	a10e      	add	r1, pc, #56	; (adr r1, 80127f8 <scalbn+0xf8>)
 80127c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127c4:	e7b4      	b.n	8012730 <scalbn+0x30>
 80127c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127ca:	3236      	adds	r2, #54	; 0x36
 80127cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80127d4:	4620      	mov	r0, r4
 80127d6:	4b0c      	ldr	r3, [pc, #48]	; (8012808 <scalbn+0x108>)
 80127d8:	2200      	movs	r2, #0
 80127da:	e7e8      	b.n	80127ae <scalbn+0xae>
 80127dc:	f3af 8000 	nop.w
 80127e0:	c2f8f359 	.word	0xc2f8f359
 80127e4:	01a56e1f 	.word	0x01a56e1f
 80127e8:	8800759c 	.word	0x8800759c
 80127ec:	7e37e43c 	.word	0x7e37e43c
 80127f0:	8800759c 	.word	0x8800759c
 80127f4:	fe37e43c 	.word	0xfe37e43c
 80127f8:	c2f8f359 	.word	0xc2f8f359
 80127fc:	81a56e1f 	.word	0x81a56e1f
 8012800:	43500000 	.word	0x43500000
 8012804:	ffff3cb0 	.word	0xffff3cb0
 8012808:	3c900000 	.word	0x3c900000

0801280c <abort>:
 801280c:	b508      	push	{r3, lr}
 801280e:	2006      	movs	r0, #6
 8012810:	f000 f950 	bl	8012ab4 <raise>
 8012814:	2001      	movs	r0, #1
 8012816:	f7f1 f82f 	bl	8003878 <_exit>
	...

0801281c <__errno>:
 801281c:	4b01      	ldr	r3, [pc, #4]	; (8012824 <__errno+0x8>)
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop
 8012824:	20000034 	.word	0x20000034

08012828 <__libc_init_array>:
 8012828:	b570      	push	{r4, r5, r6, lr}
 801282a:	4d0d      	ldr	r5, [pc, #52]	; (8012860 <__libc_init_array+0x38>)
 801282c:	4c0d      	ldr	r4, [pc, #52]	; (8012864 <__libc_init_array+0x3c>)
 801282e:	1b64      	subs	r4, r4, r5
 8012830:	10a4      	asrs	r4, r4, #2
 8012832:	2600      	movs	r6, #0
 8012834:	42a6      	cmp	r6, r4
 8012836:	d109      	bne.n	801284c <__libc_init_array+0x24>
 8012838:	4d0b      	ldr	r5, [pc, #44]	; (8012868 <__libc_init_array+0x40>)
 801283a:	4c0c      	ldr	r4, [pc, #48]	; (801286c <__libc_init_array+0x44>)
 801283c:	f000 f9f2 	bl	8012c24 <_init>
 8012840:	1b64      	subs	r4, r4, r5
 8012842:	10a4      	asrs	r4, r4, #2
 8012844:	2600      	movs	r6, #0
 8012846:	42a6      	cmp	r6, r4
 8012848:	d105      	bne.n	8012856 <__libc_init_array+0x2e>
 801284a:	bd70      	pop	{r4, r5, r6, pc}
 801284c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012850:	4798      	blx	r3
 8012852:	3601      	adds	r6, #1
 8012854:	e7ee      	b.n	8012834 <__libc_init_array+0xc>
 8012856:	f855 3b04 	ldr.w	r3, [r5], #4
 801285a:	4798      	blx	r3
 801285c:	3601      	adds	r6, #1
 801285e:	e7f2      	b.n	8012846 <__libc_init_array+0x1e>
 8012860:	08012eb4 	.word	0x08012eb4
 8012864:	08012eb4 	.word	0x08012eb4
 8012868:	08012eb4 	.word	0x08012eb4
 801286c:	08012ebc 	.word	0x08012ebc

08012870 <malloc>:
 8012870:	4b02      	ldr	r3, [pc, #8]	; (801287c <malloc+0xc>)
 8012872:	4601      	mov	r1, r0
 8012874:	6818      	ldr	r0, [r3, #0]
 8012876:	f000 b88b 	b.w	8012990 <_malloc_r>
 801287a:	bf00      	nop
 801287c:	20000034 	.word	0x20000034

08012880 <free>:
 8012880:	4b02      	ldr	r3, [pc, #8]	; (801288c <free+0xc>)
 8012882:	4601      	mov	r1, r0
 8012884:	6818      	ldr	r0, [r3, #0]
 8012886:	f000 b833 	b.w	80128f0 <_free_r>
 801288a:	bf00      	nop
 801288c:	20000034 	.word	0x20000034

08012890 <memcpy>:
 8012890:	440a      	add	r2, r1
 8012892:	4291      	cmp	r1, r2
 8012894:	f100 33ff 	add.w	r3, r0, #4294967295
 8012898:	d100      	bne.n	801289c <memcpy+0xc>
 801289a:	4770      	bx	lr
 801289c:	b510      	push	{r4, lr}
 801289e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128a6:	4291      	cmp	r1, r2
 80128a8:	d1f9      	bne.n	801289e <memcpy+0xe>
 80128aa:	bd10      	pop	{r4, pc}

080128ac <memmove>:
 80128ac:	4288      	cmp	r0, r1
 80128ae:	b510      	push	{r4, lr}
 80128b0:	eb01 0402 	add.w	r4, r1, r2
 80128b4:	d902      	bls.n	80128bc <memmove+0x10>
 80128b6:	4284      	cmp	r4, r0
 80128b8:	4623      	mov	r3, r4
 80128ba:	d807      	bhi.n	80128cc <memmove+0x20>
 80128bc:	1e43      	subs	r3, r0, #1
 80128be:	42a1      	cmp	r1, r4
 80128c0:	d008      	beq.n	80128d4 <memmove+0x28>
 80128c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128ca:	e7f8      	b.n	80128be <memmove+0x12>
 80128cc:	4402      	add	r2, r0
 80128ce:	4601      	mov	r1, r0
 80128d0:	428a      	cmp	r2, r1
 80128d2:	d100      	bne.n	80128d6 <memmove+0x2a>
 80128d4:	bd10      	pop	{r4, pc}
 80128d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80128da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80128de:	e7f7      	b.n	80128d0 <memmove+0x24>

080128e0 <memset>:
 80128e0:	4402      	add	r2, r0
 80128e2:	4603      	mov	r3, r0
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d100      	bne.n	80128ea <memset+0xa>
 80128e8:	4770      	bx	lr
 80128ea:	f803 1b01 	strb.w	r1, [r3], #1
 80128ee:	e7f9      	b.n	80128e4 <memset+0x4>

080128f0 <_free_r>:
 80128f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128f2:	2900      	cmp	r1, #0
 80128f4:	d048      	beq.n	8012988 <_free_r+0x98>
 80128f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128fa:	9001      	str	r0, [sp, #4]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	f1a1 0404 	sub.w	r4, r1, #4
 8012902:	bfb8      	it	lt
 8012904:	18e4      	addlt	r4, r4, r3
 8012906:	f000 f97f 	bl	8012c08 <__malloc_lock>
 801290a:	4a20      	ldr	r2, [pc, #128]	; (801298c <_free_r+0x9c>)
 801290c:	9801      	ldr	r0, [sp, #4]
 801290e:	6813      	ldr	r3, [r2, #0]
 8012910:	4615      	mov	r5, r2
 8012912:	b933      	cbnz	r3, 8012922 <_free_r+0x32>
 8012914:	6063      	str	r3, [r4, #4]
 8012916:	6014      	str	r4, [r2, #0]
 8012918:	b003      	add	sp, #12
 801291a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801291e:	f000 b979 	b.w	8012c14 <__malloc_unlock>
 8012922:	42a3      	cmp	r3, r4
 8012924:	d90b      	bls.n	801293e <_free_r+0x4e>
 8012926:	6821      	ldr	r1, [r4, #0]
 8012928:	1862      	adds	r2, r4, r1
 801292a:	4293      	cmp	r3, r2
 801292c:	bf04      	itt	eq
 801292e:	681a      	ldreq	r2, [r3, #0]
 8012930:	685b      	ldreq	r3, [r3, #4]
 8012932:	6063      	str	r3, [r4, #4]
 8012934:	bf04      	itt	eq
 8012936:	1852      	addeq	r2, r2, r1
 8012938:	6022      	streq	r2, [r4, #0]
 801293a:	602c      	str	r4, [r5, #0]
 801293c:	e7ec      	b.n	8012918 <_free_r+0x28>
 801293e:	461a      	mov	r2, r3
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	b10b      	cbz	r3, 8012948 <_free_r+0x58>
 8012944:	42a3      	cmp	r3, r4
 8012946:	d9fa      	bls.n	801293e <_free_r+0x4e>
 8012948:	6811      	ldr	r1, [r2, #0]
 801294a:	1855      	adds	r5, r2, r1
 801294c:	42a5      	cmp	r5, r4
 801294e:	d10b      	bne.n	8012968 <_free_r+0x78>
 8012950:	6824      	ldr	r4, [r4, #0]
 8012952:	4421      	add	r1, r4
 8012954:	1854      	adds	r4, r2, r1
 8012956:	42a3      	cmp	r3, r4
 8012958:	6011      	str	r1, [r2, #0]
 801295a:	d1dd      	bne.n	8012918 <_free_r+0x28>
 801295c:	681c      	ldr	r4, [r3, #0]
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	6053      	str	r3, [r2, #4]
 8012962:	4421      	add	r1, r4
 8012964:	6011      	str	r1, [r2, #0]
 8012966:	e7d7      	b.n	8012918 <_free_r+0x28>
 8012968:	d902      	bls.n	8012970 <_free_r+0x80>
 801296a:	230c      	movs	r3, #12
 801296c:	6003      	str	r3, [r0, #0]
 801296e:	e7d3      	b.n	8012918 <_free_r+0x28>
 8012970:	6825      	ldr	r5, [r4, #0]
 8012972:	1961      	adds	r1, r4, r5
 8012974:	428b      	cmp	r3, r1
 8012976:	bf04      	itt	eq
 8012978:	6819      	ldreq	r1, [r3, #0]
 801297a:	685b      	ldreq	r3, [r3, #4]
 801297c:	6063      	str	r3, [r4, #4]
 801297e:	bf04      	itt	eq
 8012980:	1949      	addeq	r1, r1, r5
 8012982:	6021      	streq	r1, [r4, #0]
 8012984:	6054      	str	r4, [r2, #4]
 8012986:	e7c7      	b.n	8012918 <_free_r+0x28>
 8012988:	b003      	add	sp, #12
 801298a:	bd30      	pop	{r4, r5, pc}
 801298c:	20005d58 	.word	0x20005d58

08012990 <_malloc_r>:
 8012990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012992:	1ccd      	adds	r5, r1, #3
 8012994:	f025 0503 	bic.w	r5, r5, #3
 8012998:	3508      	adds	r5, #8
 801299a:	2d0c      	cmp	r5, #12
 801299c:	bf38      	it	cc
 801299e:	250c      	movcc	r5, #12
 80129a0:	2d00      	cmp	r5, #0
 80129a2:	4606      	mov	r6, r0
 80129a4:	db01      	blt.n	80129aa <_malloc_r+0x1a>
 80129a6:	42a9      	cmp	r1, r5
 80129a8:	d903      	bls.n	80129b2 <_malloc_r+0x22>
 80129aa:	230c      	movs	r3, #12
 80129ac:	6033      	str	r3, [r6, #0]
 80129ae:	2000      	movs	r0, #0
 80129b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129b2:	f000 f929 	bl	8012c08 <__malloc_lock>
 80129b6:	4921      	ldr	r1, [pc, #132]	; (8012a3c <_malloc_r+0xac>)
 80129b8:	680a      	ldr	r2, [r1, #0]
 80129ba:	4614      	mov	r4, r2
 80129bc:	b99c      	cbnz	r4, 80129e6 <_malloc_r+0x56>
 80129be:	4f20      	ldr	r7, [pc, #128]	; (8012a40 <_malloc_r+0xb0>)
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	b923      	cbnz	r3, 80129ce <_malloc_r+0x3e>
 80129c4:	4621      	mov	r1, r4
 80129c6:	4630      	mov	r0, r6
 80129c8:	f000 f83c 	bl	8012a44 <_sbrk_r>
 80129cc:	6038      	str	r0, [r7, #0]
 80129ce:	4629      	mov	r1, r5
 80129d0:	4630      	mov	r0, r6
 80129d2:	f000 f837 	bl	8012a44 <_sbrk_r>
 80129d6:	1c43      	adds	r3, r0, #1
 80129d8:	d123      	bne.n	8012a22 <_malloc_r+0x92>
 80129da:	230c      	movs	r3, #12
 80129dc:	6033      	str	r3, [r6, #0]
 80129de:	4630      	mov	r0, r6
 80129e0:	f000 f918 	bl	8012c14 <__malloc_unlock>
 80129e4:	e7e3      	b.n	80129ae <_malloc_r+0x1e>
 80129e6:	6823      	ldr	r3, [r4, #0]
 80129e8:	1b5b      	subs	r3, r3, r5
 80129ea:	d417      	bmi.n	8012a1c <_malloc_r+0x8c>
 80129ec:	2b0b      	cmp	r3, #11
 80129ee:	d903      	bls.n	80129f8 <_malloc_r+0x68>
 80129f0:	6023      	str	r3, [r4, #0]
 80129f2:	441c      	add	r4, r3
 80129f4:	6025      	str	r5, [r4, #0]
 80129f6:	e004      	b.n	8012a02 <_malloc_r+0x72>
 80129f8:	6863      	ldr	r3, [r4, #4]
 80129fa:	42a2      	cmp	r2, r4
 80129fc:	bf0c      	ite	eq
 80129fe:	600b      	streq	r3, [r1, #0]
 8012a00:	6053      	strne	r3, [r2, #4]
 8012a02:	4630      	mov	r0, r6
 8012a04:	f000 f906 	bl	8012c14 <__malloc_unlock>
 8012a08:	f104 000b 	add.w	r0, r4, #11
 8012a0c:	1d23      	adds	r3, r4, #4
 8012a0e:	f020 0007 	bic.w	r0, r0, #7
 8012a12:	1ac2      	subs	r2, r0, r3
 8012a14:	d0cc      	beq.n	80129b0 <_malloc_r+0x20>
 8012a16:	1a1b      	subs	r3, r3, r0
 8012a18:	50a3      	str	r3, [r4, r2]
 8012a1a:	e7c9      	b.n	80129b0 <_malloc_r+0x20>
 8012a1c:	4622      	mov	r2, r4
 8012a1e:	6864      	ldr	r4, [r4, #4]
 8012a20:	e7cc      	b.n	80129bc <_malloc_r+0x2c>
 8012a22:	1cc4      	adds	r4, r0, #3
 8012a24:	f024 0403 	bic.w	r4, r4, #3
 8012a28:	42a0      	cmp	r0, r4
 8012a2a:	d0e3      	beq.n	80129f4 <_malloc_r+0x64>
 8012a2c:	1a21      	subs	r1, r4, r0
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f000 f808 	bl	8012a44 <_sbrk_r>
 8012a34:	3001      	adds	r0, #1
 8012a36:	d1dd      	bne.n	80129f4 <_malloc_r+0x64>
 8012a38:	e7cf      	b.n	80129da <_malloc_r+0x4a>
 8012a3a:	bf00      	nop
 8012a3c:	20005d58 	.word	0x20005d58
 8012a40:	20005d5c 	.word	0x20005d5c

08012a44 <_sbrk_r>:
 8012a44:	b538      	push	{r3, r4, r5, lr}
 8012a46:	4d06      	ldr	r5, [pc, #24]	; (8012a60 <_sbrk_r+0x1c>)
 8012a48:	2300      	movs	r3, #0
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	4608      	mov	r0, r1
 8012a4e:	602b      	str	r3, [r5, #0]
 8012a50:	f7f0 ff1c 	bl	800388c <_sbrk>
 8012a54:	1c43      	adds	r3, r0, #1
 8012a56:	d102      	bne.n	8012a5e <_sbrk_r+0x1a>
 8012a58:	682b      	ldr	r3, [r5, #0]
 8012a5a:	b103      	cbz	r3, 8012a5e <_sbrk_r+0x1a>
 8012a5c:	6023      	str	r3, [r4, #0]
 8012a5e:	bd38      	pop	{r3, r4, r5, pc}
 8012a60:	200064b0 	.word	0x200064b0

08012a64 <_raise_r>:
 8012a64:	291f      	cmp	r1, #31
 8012a66:	b538      	push	{r3, r4, r5, lr}
 8012a68:	4604      	mov	r4, r0
 8012a6a:	460d      	mov	r5, r1
 8012a6c:	d904      	bls.n	8012a78 <_raise_r+0x14>
 8012a6e:	2316      	movs	r3, #22
 8012a70:	6003      	str	r3, [r0, #0]
 8012a72:	f04f 30ff 	mov.w	r0, #4294967295
 8012a76:	bd38      	pop	{r3, r4, r5, pc}
 8012a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a7a:	b112      	cbz	r2, 8012a82 <_raise_r+0x1e>
 8012a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a80:	b94b      	cbnz	r3, 8012a96 <_raise_r+0x32>
 8012a82:	4620      	mov	r0, r4
 8012a84:	f000 f830 	bl	8012ae8 <_getpid_r>
 8012a88:	462a      	mov	r2, r5
 8012a8a:	4601      	mov	r1, r0
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a92:	f000 b817 	b.w	8012ac4 <_kill_r>
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d00a      	beq.n	8012ab0 <_raise_r+0x4c>
 8012a9a:	1c59      	adds	r1, r3, #1
 8012a9c:	d103      	bne.n	8012aa6 <_raise_r+0x42>
 8012a9e:	2316      	movs	r3, #22
 8012aa0:	6003      	str	r3, [r0, #0]
 8012aa2:	2001      	movs	r0, #1
 8012aa4:	e7e7      	b.n	8012a76 <_raise_r+0x12>
 8012aa6:	2400      	movs	r4, #0
 8012aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012aac:	4628      	mov	r0, r5
 8012aae:	4798      	blx	r3
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	e7e0      	b.n	8012a76 <_raise_r+0x12>

08012ab4 <raise>:
 8012ab4:	4b02      	ldr	r3, [pc, #8]	; (8012ac0 <raise+0xc>)
 8012ab6:	4601      	mov	r1, r0
 8012ab8:	6818      	ldr	r0, [r3, #0]
 8012aba:	f7ff bfd3 	b.w	8012a64 <_raise_r>
 8012abe:	bf00      	nop
 8012ac0:	20000034 	.word	0x20000034

08012ac4 <_kill_r>:
 8012ac4:	b538      	push	{r3, r4, r5, lr}
 8012ac6:	4d07      	ldr	r5, [pc, #28]	; (8012ae4 <_kill_r+0x20>)
 8012ac8:	2300      	movs	r3, #0
 8012aca:	4604      	mov	r4, r0
 8012acc:	4608      	mov	r0, r1
 8012ace:	4611      	mov	r1, r2
 8012ad0:	602b      	str	r3, [r5, #0]
 8012ad2:	f7f0 fec1 	bl	8003858 <_kill>
 8012ad6:	1c43      	adds	r3, r0, #1
 8012ad8:	d102      	bne.n	8012ae0 <_kill_r+0x1c>
 8012ada:	682b      	ldr	r3, [r5, #0]
 8012adc:	b103      	cbz	r3, 8012ae0 <_kill_r+0x1c>
 8012ade:	6023      	str	r3, [r4, #0]
 8012ae0:	bd38      	pop	{r3, r4, r5, pc}
 8012ae2:	bf00      	nop
 8012ae4:	200064b0 	.word	0x200064b0

08012ae8 <_getpid_r>:
 8012ae8:	f7f0 beae 	b.w	8003848 <_getpid>

08012aec <_strtol_l.isra.0>:
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af2:	d001      	beq.n	8012af8 <_strtol_l.isra.0+0xc>
 8012af4:	2b24      	cmp	r3, #36	; 0x24
 8012af6:	d906      	bls.n	8012b06 <_strtol_l.isra.0+0x1a>
 8012af8:	f7ff fe90 	bl	801281c <__errno>
 8012afc:	2316      	movs	r3, #22
 8012afe:	6003      	str	r3, [r0, #0]
 8012b00:	2000      	movs	r0, #0
 8012b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b06:	4f3a      	ldr	r7, [pc, #232]	; (8012bf0 <_strtol_l.isra.0+0x104>)
 8012b08:	468e      	mov	lr, r1
 8012b0a:	4676      	mov	r6, lr
 8012b0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012b10:	5de5      	ldrb	r5, [r4, r7]
 8012b12:	f015 0508 	ands.w	r5, r5, #8
 8012b16:	d1f8      	bne.n	8012b0a <_strtol_l.isra.0+0x1e>
 8012b18:	2c2d      	cmp	r4, #45	; 0x2d
 8012b1a:	d134      	bne.n	8012b86 <_strtol_l.isra.0+0x9a>
 8012b1c:	f89e 4000 	ldrb.w	r4, [lr]
 8012b20:	f04f 0801 	mov.w	r8, #1
 8012b24:	f106 0e02 	add.w	lr, r6, #2
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d05c      	beq.n	8012be6 <_strtol_l.isra.0+0xfa>
 8012b2c:	2b10      	cmp	r3, #16
 8012b2e:	d10c      	bne.n	8012b4a <_strtol_l.isra.0+0x5e>
 8012b30:	2c30      	cmp	r4, #48	; 0x30
 8012b32:	d10a      	bne.n	8012b4a <_strtol_l.isra.0+0x5e>
 8012b34:	f89e 4000 	ldrb.w	r4, [lr]
 8012b38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012b3c:	2c58      	cmp	r4, #88	; 0x58
 8012b3e:	d14d      	bne.n	8012bdc <_strtol_l.isra.0+0xf0>
 8012b40:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012b44:	2310      	movs	r3, #16
 8012b46:	f10e 0e02 	add.w	lr, lr, #2
 8012b4a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8012b4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012b52:	2600      	movs	r6, #0
 8012b54:	fbbc f9f3 	udiv	r9, ip, r3
 8012b58:	4635      	mov	r5, r6
 8012b5a:	fb03 ca19 	mls	sl, r3, r9, ip
 8012b5e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012b62:	2f09      	cmp	r7, #9
 8012b64:	d818      	bhi.n	8012b98 <_strtol_l.isra.0+0xac>
 8012b66:	463c      	mov	r4, r7
 8012b68:	42a3      	cmp	r3, r4
 8012b6a:	dd24      	ble.n	8012bb6 <_strtol_l.isra.0+0xca>
 8012b6c:	2e00      	cmp	r6, #0
 8012b6e:	db1f      	blt.n	8012bb0 <_strtol_l.isra.0+0xc4>
 8012b70:	45a9      	cmp	r9, r5
 8012b72:	d31d      	bcc.n	8012bb0 <_strtol_l.isra.0+0xc4>
 8012b74:	d101      	bne.n	8012b7a <_strtol_l.isra.0+0x8e>
 8012b76:	45a2      	cmp	sl, r4
 8012b78:	db1a      	blt.n	8012bb0 <_strtol_l.isra.0+0xc4>
 8012b7a:	fb05 4503 	mla	r5, r5, r3, r4
 8012b7e:	2601      	movs	r6, #1
 8012b80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012b84:	e7eb      	b.n	8012b5e <_strtol_l.isra.0+0x72>
 8012b86:	2c2b      	cmp	r4, #43	; 0x2b
 8012b88:	bf08      	it	eq
 8012b8a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012b8e:	46a8      	mov	r8, r5
 8012b90:	bf08      	it	eq
 8012b92:	f106 0e02 	addeq.w	lr, r6, #2
 8012b96:	e7c7      	b.n	8012b28 <_strtol_l.isra.0+0x3c>
 8012b98:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012b9c:	2f19      	cmp	r7, #25
 8012b9e:	d801      	bhi.n	8012ba4 <_strtol_l.isra.0+0xb8>
 8012ba0:	3c37      	subs	r4, #55	; 0x37
 8012ba2:	e7e1      	b.n	8012b68 <_strtol_l.isra.0+0x7c>
 8012ba4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012ba8:	2f19      	cmp	r7, #25
 8012baa:	d804      	bhi.n	8012bb6 <_strtol_l.isra.0+0xca>
 8012bac:	3c57      	subs	r4, #87	; 0x57
 8012bae:	e7db      	b.n	8012b68 <_strtol_l.isra.0+0x7c>
 8012bb0:	f04f 36ff 	mov.w	r6, #4294967295
 8012bb4:	e7e4      	b.n	8012b80 <_strtol_l.isra.0+0x94>
 8012bb6:	2e00      	cmp	r6, #0
 8012bb8:	da05      	bge.n	8012bc6 <_strtol_l.isra.0+0xda>
 8012bba:	2322      	movs	r3, #34	; 0x22
 8012bbc:	6003      	str	r3, [r0, #0]
 8012bbe:	4665      	mov	r5, ip
 8012bc0:	b942      	cbnz	r2, 8012bd4 <_strtol_l.isra.0+0xe8>
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	e79d      	b.n	8012b02 <_strtol_l.isra.0+0x16>
 8012bc6:	f1b8 0f00 	cmp.w	r8, #0
 8012bca:	d000      	beq.n	8012bce <_strtol_l.isra.0+0xe2>
 8012bcc:	426d      	negs	r5, r5
 8012bce:	2a00      	cmp	r2, #0
 8012bd0:	d0f7      	beq.n	8012bc2 <_strtol_l.isra.0+0xd6>
 8012bd2:	b10e      	cbz	r6, 8012bd8 <_strtol_l.isra.0+0xec>
 8012bd4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012bd8:	6011      	str	r1, [r2, #0]
 8012bda:	e7f2      	b.n	8012bc2 <_strtol_l.isra.0+0xd6>
 8012bdc:	2430      	movs	r4, #48	; 0x30
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d1b3      	bne.n	8012b4a <_strtol_l.isra.0+0x5e>
 8012be2:	2308      	movs	r3, #8
 8012be4:	e7b1      	b.n	8012b4a <_strtol_l.isra.0+0x5e>
 8012be6:	2c30      	cmp	r4, #48	; 0x30
 8012be8:	d0a4      	beq.n	8012b34 <_strtol_l.isra.0+0x48>
 8012bea:	230a      	movs	r3, #10
 8012bec:	e7ad      	b.n	8012b4a <_strtol_l.isra.0+0x5e>
 8012bee:	bf00      	nop
 8012bf0:	08012da9 	.word	0x08012da9

08012bf4 <strtol>:
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	460a      	mov	r2, r1
 8012bf8:	4601      	mov	r1, r0
 8012bfa:	4802      	ldr	r0, [pc, #8]	; (8012c04 <strtol+0x10>)
 8012bfc:	6800      	ldr	r0, [r0, #0]
 8012bfe:	f7ff bf75 	b.w	8012aec <_strtol_l.isra.0>
 8012c02:	bf00      	nop
 8012c04:	20000034 	.word	0x20000034

08012c08 <__malloc_lock>:
 8012c08:	4801      	ldr	r0, [pc, #4]	; (8012c10 <__malloc_lock+0x8>)
 8012c0a:	f000 b809 	b.w	8012c20 <__retarget_lock_acquire_recursive>
 8012c0e:	bf00      	nop
 8012c10:	200064b8 	.word	0x200064b8

08012c14 <__malloc_unlock>:
 8012c14:	4801      	ldr	r0, [pc, #4]	; (8012c1c <__malloc_unlock+0x8>)
 8012c16:	f000 b804 	b.w	8012c22 <__retarget_lock_release_recursive>
 8012c1a:	bf00      	nop
 8012c1c:	200064b8 	.word	0x200064b8

08012c20 <__retarget_lock_acquire_recursive>:
 8012c20:	4770      	bx	lr

08012c22 <__retarget_lock_release_recursive>:
 8012c22:	4770      	bx	lr

08012c24 <_init>:
 8012c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c26:	bf00      	nop
 8012c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c2a:	bc08      	pop	{r3}
 8012c2c:	469e      	mov	lr, r3
 8012c2e:	4770      	bx	lr

08012c30 <_fini>:
 8012c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c32:	bf00      	nop
 8012c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c36:	bc08      	pop	{r3}
 8012c38:	469e      	mov	lr, r3
 8012c3a:	4770      	bx	lr
