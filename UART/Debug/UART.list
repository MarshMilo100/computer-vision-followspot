
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011da8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08011f88  08011f88  00021f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012088  08012088  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08012088  08012088  00022088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012090  08012090  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012090  08012090  00022090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012098  08012098  00022098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080120a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005480  20000098  08012138  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005518  08012138  00035518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e07a  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007774  00000000  00000000  0006e142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c18  00000000  00000000  000758b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002930  00000000  00000000  000784d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e60f  00000000  00000000  0007ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033f03  00000000  00000000  0008940f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffb5b  00000000  00000000  000bd312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bce6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c6a4  00000000  00000000  001bcec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011f70 	.word	0x08011f70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	08011f70 	.word	0x08011f70

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f001 f876 	bl	8001ff2 <_ZNSaI10CoordinateED1Ev>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f859 	bl	8001fd2 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implC1Ev>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_ZNSt6vectorI10CoordinateSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ffeb 	bl	8000f10 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EEC1Ev>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN PFP */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	// simplify this if block when the logic is sorted out
	if(Rx_Data[0] == '-' && Rx_Data[1] == '2')
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b2d      	cmp	r3, #45	; 0x2d
 8000f52:	d109      	bne.n	8000f68 <HAL_UART_RxCpltCallback+0x24>
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	2b32      	cmp	r3, #50	; 0x32
 8000f5a:	d105      	bne.n	8000f68 <HAL_UART_RxCpltCallback+0x24>
	{
		// begin to receive data
		HAL_UART_Receive_IT(&huart6, Rx_Data, 2);
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	4918      	ldr	r1, [pc, #96]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f60:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <HAL_UART_RxCpltCallback+0x80>)
 8000f62:	f007 ff88 	bl	8008e76 <HAL_UART_Receive_IT>
 8000f66:	e027      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x74>
	}
	else if(Rx_Data[0] == '\n' || Rx_Data[1] == '\n')
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b0a      	cmp	r3, #10
 8000f6e:	d003      	beq.n	8000f78 <HAL_UART_RxCpltCallback+0x34>
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	2b0a      	cmp	r3, #10
 8000f76:	d10f      	bne.n	8000f98 <HAL_UART_RxCpltCallback+0x54>
	{
		// received the end of the pixel data
		if (!storeCoordinate)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_UART_RxCpltCallback+0x84>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <HAL_UART_RxCpltCallback+0x48>
		{
			sendLocationReady = true;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_UART_RxCpltCallback+0x88>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, Rx_Data, 2);
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_UART_RxCpltCallback+0x80>)
 8000f92:	f007 ff70 	bl	8008e76 <HAL_UART_Receive_IT>
 8000f96:	e00f      	b.n	8000fb8 <HAL_UART_RxCpltCallback+0x74>
	}
	else
	{
		// store pixel data
		if (!sendLocationReady)
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_UART_RxCpltCallback+0x88>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_UART_RxCpltCallback+0x68>
		{
			storeCoordinate = true;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_UART_RxCpltCallback+0x84>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, Rx_Data, 2);
 8000fac:	2202      	movs	r2, #2
 8000fae:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <HAL_UART_RxCpltCallback+0x7c>)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <HAL_UART_RxCpltCallback+0x80>)
 8000fb2:	f007 ff60 	bl	8008e76 <HAL_UART_Receive_IT>
	}

	//HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // red LED

}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000444 	.word	0x20000444
 8000fc4:	2000035c 	.word	0x2000035c
 8000fc8:	20000447 	.word	0x20000447
 8000fcc:	20000446 	.word	0x20000446

08000fd0 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Calculates the BoundaryBox around the person based off the pixels read it
struct BoundaryBox getSinglePersonLocation( std::vector<struct Coordinate>& whitePixels)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	struct BoundaryBox personBoundaryBox;

    float widthAverage, widthStd = 0;
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
    float heightAverage, heightStd = 0;
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	64bb      	str	r3, [r7, #72]	; 0x48
    int length = whitePixels.size();
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f001 f828 	bl	800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	63fb      	str	r3, [r7, #60]	; 0x3c

    int widthSum = 0, heightSum = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40

	for(struct Coordinate pixel : whitePixels)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ffc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ffe:	f001 f82d 	bl	800205c <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 8001002:	4603      	mov	r3, r0
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001008:	f001 f838 	bl	800207c <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 800100c:	4603      	mov	r3, r0
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	f107 021c 	add.w	r2, r7, #28
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f001 f83f 	bl	800209e <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d019      	beq.n	800105a <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x8a>
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f860 	bl	80020f0 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>
 8001030:	4602      	mov	r2, r0
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	e892 0003 	ldmia.w	r2, {r0, r1}
 800103a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		widthSum += pixel.width;
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001042:	4413      	add	r3, r2
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
		heightSum += pixel.height;
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800104a:	4413      	add	r3, r2
 800104c:	643b      	str	r3, [r7, #64]	; 0x40
	for(struct Coordinate pixel : whitePixels)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f83b 	bl	80020ce <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>
 8001058:	e7da      	b.n	8001010 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x40>
	}

    widthAverage = widthSum / length;
 800105a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800105c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800105e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    heightAverage = heightSum / length;
 800106e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	fb92 f3f3 	sdiv	r3, r2, r3
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	for(struct Coordinate pixel : whitePixels)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001088:	f000 ffe8 	bl	800205c <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 800108c:	4603      	mov	r3, r0
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001092:	f000 fff3 	bl	800207c <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 8001096:	4603      	mov	r3, r0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	f107 020c 	add.w	r2, r7, #12
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fffa 	bl	800209e <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d045      	beq.n	800113c <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x16c>
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f81b 	bl	80020f0 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		widthStd += (pixel.width - widthAverage) * (pixel.width - widthAverage);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		heightStd += (pixel.height - heightAverage) * (pixel.height - heightAverage);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800110a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001118:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800111c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001124:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	for(struct Coordinate pixel : whitePixels)
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4618      	mov	r0, r3
 8001136:	f000 ffca 	bl	80020ce <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>
 800113a:	e7ae      	b.n	800109a <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0xca>
	}

    widthStd = widthStd * (1 / length - 1);
 800113c:	2201      	movs	r2, #1
 800113e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001140:	fb92 f3f3 	sdiv	r3, r2, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    heightStd = heightStd * (1 / length - 1);
 800115a:	2201      	movs	r2, #1
 800115c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800115e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    widthStd = pow(widthStd, 0.5);
 8001178:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800117a:	f7ff f9b5 	bl	80004e8 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8001238 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x268>
 8001186:	ec43 2b10 	vmov	d0, r2, r3
 800118a:	f00f fdbd 	bl	8010d08 <pow>
 800118e:	ec53 2b10 	vmov	r2, r3, d0
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fcd7 	bl	8000b48 <__aeabi_d2f>
 800119a:	4603      	mov	r3, r0
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
    heightStd = pow(heightStd, 0.5);
 800119e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011a0:	f7ff f9a2 	bl	80004e8 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001238 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x268>
 80011ac:	ec43 2b10 	vmov	d0, r2, r3
 80011b0:	f00f fdaa 	bl	8010d08 <pow>
 80011b4:	ec53 2b10 	vmov	r2, r3, d0
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fcc4 	bl	8000b48 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48

    personBoundaryBox.widthIndex = widthAverage;
 80011c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 2a90 	vmov	r2, s15
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
    personBoundaryBox.heightIndex = heightAverage;
 80011d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011dc:	ee17 2a90 	vmov	r2, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
    personBoundaryBox.width = widthStd * 1.5;
 80011e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80011e6:	f7ff f97f 	bl	80004e8 <__aeabi_f2d>
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x270>)
 80011f0:	f7ff f9d2 	bl	8000598 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc7c 	bl	8000af8 <__aeabi_d2iz>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
    personBoundaryBox.height = heightStd * 1.5;
 8001206:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001208:	f7ff f96e 	bl	80004e8 <__aeabi_f2d>
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x270>)
 8001212:	f7ff f9c1 	bl	8000598 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fc6b 	bl	8000af8 <__aeabi_d2iz>
 8001222:	4602      	mov	r2, r0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]

    return personBoundaryBox;
 8001228:	bf00      	nop
}
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	3750      	adds	r7, #80	; 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	3fe00000 	.word	0x3fe00000
 8001240:	3ff80000 	.word	0x3ff80000

08001244 <_Z12sendLocation11BoundaryBox>:

// Gets the current location and sends it to the light board over UDP if it is different from the last location
struct BoundaryBox sendLocation(struct BoundaryBox previousLocation)
{
 8001244:	b084      	sub	sp, #16
 8001246:	b580      	push	{r7, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = recievedCoordinates.size();
 8001256:	4826      	ldr	r0, [pc, #152]	; (80012f0 <_Z12sendLocation11BoundaryBox+0xac>)
 8001258:	f000 fef0 	bl	800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 800125c:	4603      	mov	r3, r0
 800125e:	61fb      	str	r3, [r7, #28]
	BoundaryBox currentLocation = getSinglePersonLocation(recievedCoordinates);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4923      	ldr	r1, [pc, #140]	; (80012f0 <_Z12sendLocation11BoundaryBox+0xac>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff feb3 	bl	8000fd0 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE>

	int upperLeftHeight = previousLocation.heightIndex - (previousLocation.height / 2);
 800126a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800126e:	0fd9      	lsrs	r1, r3, #31
 8001270:	440b      	add	r3, r1
 8001272:	105b      	asrs	r3, r3, #1
 8001274:	425b      	negs	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
	int uperLeftWidth = previousLocation.widthIndex - (previousLocation.width / 2);
 800127a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127e:	0fd9      	lsrs	r1, r3, #31
 8001280:	440b      	add	r3, r1
 8001282:	105b      	asrs	r3, r3, #1
 8001284:	425b      	negs	r3, r3
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]

	int lowerRightHeight = previousLocation.heightIndex + (previousLocation.height / 2);
 800128a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128e:	0fd9      	lsrs	r1, r3, #31
 8001290:	440b      	add	r3, r1
 8001292:	105b      	asrs	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
	int lowerRightWidth = previousLocation.widthIndex + (previousLocation.width / 2);
 8001298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129c:	0fd9      	lsrs	r1, r3, #31
 800129e:	440b      	add	r3, r1
 80012a0:	105b      	asrs	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]


	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dd0e      	ble.n	80012ce <_Z12sendLocation11BoundaryBox+0x8a>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	da09      	bge.n	80012ce <_Z12sendLocation11BoundaryBox+0x8a>
	   currentLocation.widthIndex < lowerRightWidth && currentLocation.widthIndex > uperLeftWidth))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dd04      	ble.n	80012ce <_Z12sendLocation11BoundaryBox+0x8a>
	   currentLocation.widthIndex < lowerRightWidth && currentLocation.widthIndex > uperLeftWidth))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	db07      	blt.n	80012de <_Z12sendLocation11BoundaryBox+0x9a>
	{
		// This is when we create new UDP light packets
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2120      	movs	r1, #32
 80012d2:	4808      	ldr	r0, [pc, #32]	; (80012f4 <_Z12sendLocation11BoundaryBox+0xb0>)
 80012d4:	f003 fad2 	bl	800487c <HAL_GPIO_WritePin>
		osDelay(100);
 80012d8:	2064      	movs	r0, #100	; 0x64
 80012da:	f00c fb4f 	bl	800d97c <osDelay>
	}

	return currentLocation;
 80012de:	bf00      	nop
}
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ea:	b004      	add	sp, #16
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000448 	.word	0x20000448
 80012f4:	40020800 	.word	0x40020800

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f002 fa52 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001300:	f000 f83a 	bl	8001378 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001304:	f000 fb60 	bl	80019c8 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8001308:	f000 f8e4 	bl	80014d4 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 800130c:	f000 f93e 	bl	800158c <_ZL11MX_DAC_Initv>
  MX_DFSDM1_Init();
 8001310:	f000 f970 	bl	80015f4 <_ZL14MX_DFSDM1_Initv>
  MX_DFSDM2_Init();
 8001314:	f000 f9aa 	bl	800166c <_ZL14MX_DFSDM2_Initv>
  MX_FMPI2C1_Init();
 8001318:	f000 fa1c 	bl	8001754 <_ZL15MX_FMPI2C1_Initv>
  MX_FSMC_Init();
 800131c:	f000 fcfc 	bl	8001d18 <_ZL12MX_FSMC_Initv>
  MX_I2S2_Init();
 8001320:	f000 fa58 	bl	80017d4 <_ZL12MX_I2S2_Initv>
  MX_QUADSPI_Init();
 8001324:	f000 fa8a 	bl	800183c <_ZL15MX_QUADSPI_Initv>
  MX_SDIO_SD_Init();
 8001328:	f000 fab8 	bl	800189c <_ZL15MX_SDIO_SD_Initv>
  MX_UART10_Init();
 800132c:	f000 faf0 	bl	8001910 <_ZL14MX_UART10_Initv>
  MX_USART6_UART_Init();
 8001330:	f000 fb1c 	bl	800196c <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001334:	f00c fa12 	bl	800d75c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(DefaultThread, NULL, &blink01_attributes);
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <main+0x68>)
 800133a:	2100      	movs	r1, #0
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <main+0x6c>)
 800133e:	f00c fa77 	bl	800d830 <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <main+0x70>)
 8001346:	6013      	str	r3, [r2, #0]

  /* creation of mainThread */
  mainThreadHandle = osThreadNew(MainThread, NULL, &mainThread_attributes);
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <main+0x74>)
 800134a:	2100      	movs	r1, #0
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <main+0x78>)
 800134e:	f00c fa6f 	bl	800d830 <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <main+0x7c>)
 8001356:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001358:	f00c fa34 	bl	800d7c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0x64>
 800135e:	bf00      	nop
 8001360:	08011fe0 	.word	0x08011fe0
 8001364:	08001e91 	.word	0x08001e91
 8001368:	2000043c 	.word	0x2000043c
 800136c:	08012004 	.word	0x08012004
 8001370:	08001f31 	.word	0x08001f31
 8001374:	20000440 	.word	0x20000440

08001378 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0aa      	sub	sp, #168	; 0xa8
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001382:	2234      	movs	r2, #52	; 0x34
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f010 fcde 	bl	8011d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2258      	movs	r2, #88	; 0x58
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f010 fccf 	bl	8011d48 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <_Z18SystemClock_Configv+0x154>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a46      	ldr	r2, [pc, #280]	; (80014cc <_Z18SystemClock_Configv+0x154>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <_Z18SystemClock_Configv+0x154>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <_Z18SystemClock_Configv+0x158>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a40      	ldr	r2, [pc, #256]	; (80014d0 <_Z18SystemClock_Configv+0x158>)
 80013d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <_Z18SystemClock_Configv+0x158>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013e2:	2303      	movs	r3, #3
 80013e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f2:	2310      	movs	r3, #16
 80013f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001406:	230f      	movs	r3, #15
 8001408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 800140c:	2390      	movs	r3, #144	; 0x90
 800140e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001418:	2305      	movs	r3, #5
 800141a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001428:	4618      	mov	r0, r3
 800142a:	f006 faa9 	bl	8007980 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800143e:	f000 fdc1 	bl	8001fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001446:	2300      	movs	r3, #0
 8001448:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001456:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f005 fc9d 	bl	8006d9c <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 8001472:	f000 fda7 	bl	8001fc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8001476:	f240 1371 	movw	r3, #369	; 0x171
 800147a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800147c:	2332      	movs	r3, #50	; 0x32
 800147e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8001480:	230c      	movs	r3, #12
 8001482:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800148c:	2300      	movs	r3, #0
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8001490:	2300      	movs	r3, #0
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8001494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800149a:	2300      	movs	r3, #0
 800149c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fe78 	bl	80071a0 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <_Z18SystemClock_Configv+0x14c>
  {
    Error_Handler();
 80014c0:	f000 fd80 	bl	8001fc4 <Error_Handler>
  }
}
 80014c4:	bf00      	nop
 80014c6:	37a8      	adds	r7, #168	; 0xa8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000

080014d4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <_ZL12MX_ADC1_Initv+0xb0>)
 80014ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <_ZL12MX_ADC1_Initv+0xb4>)
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 8001520:	2201      	movs	r2, #1
 8001522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 800152e:	2201      	movs	r2, #1
 8001530:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 8001534:	f002 f99c 	bl	8003870 <HAL_ADC_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001548:	f000 fd3c 	bl	8001fc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800154c:	230a      	movs	r3, #10
 800154e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001550:	2301      	movs	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <_ZL12MX_ADC1_Initv+0xac>)
 800155e:	f002 f9cb 	bl	80038f8 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001572:	f000 fd27 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000b4 	.word	0x200000b4
 8001584:	40012000 	.word	0x40012000
 8001588:	0f000001 	.word	0x0f000001

0800158c <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <_ZL11MX_DAC_Initv+0x60>)
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_ZL11MX_DAC_Initv+0x64>)
 800159e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <_ZL11MX_DAC_Initv+0x60>)
 80015a2:	f002 fcb9 	bl	8003f18 <HAL_DAC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 80015b6:	f000 fd05 	bl	8001fc4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <_ZL11MX_DAC_Initv+0x60>)
 80015ca:	f002 fd1b 	bl	8004004 <HAL_DAC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 80015de:	f000 fcf1 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000fc 	.word	0x200000fc
 80015f0:	40007400 	.word	0x40007400

080015f4 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <_ZL14MX_DFSDM1_Initv+0x74>)
 80015fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001600:	2201      	movs	r2, #1
 8001602:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 800160c:	2202      	movs	r2, #2
 800160e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001624:	2202      	movs	r2, #2
 8001626:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001636:	2201      	movs	r2, #1
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 800163c:	2200      	movs	r2, #0
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001642:	2200      	movs	r2, #0
 8001644:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <_ZL14MX_DFSDM1_Initv+0x70>)
 8001648:	f002 fd34 	bl	80040b4 <HAL_DFSDM_ChannelInit>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf14      	ite	ne
 8001652:	2301      	movne	r3, #1
 8001654:	2300      	moveq	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <_ZL14MX_DFSDM1_Initv+0x6c>
  {
    Error_Handler();
 800165c:	f000 fcb2 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000110 	.word	0x20000110
 8001668:	40016020 	.word	0x40016020

0800166c <_ZL14MX_DFSDM2_Initv>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001672:	4a35      	ldr	r2, [pc, #212]	; (8001748 <_ZL14MX_DFSDM2_Initv+0xdc>)
 8001674:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001678:	2201      	movs	r2, #1
 800167a:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001684:	2202      	movs	r2, #2
 8001686:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800169c:	2202      	movs	r2, #2
 800169e:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80016be:	4821      	ldr	r0, [pc, #132]	; (8001744 <_ZL14MX_DFSDM2_Initv+0xd8>)
 80016c0:	f002 fcf8 	bl	80040b4 <HAL_DFSDM_ChannelInit>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <_ZL14MX_DFSDM2_Initv+0x6c>
  {
    Error_Handler();
 80016d4:	f000 fc76 	bl	8001fc4 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <_ZL14MX_DFSDM2_Initv+0xe4>)
 80016dc:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001704:	2202      	movs	r2, #2
 8001706:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001716:	2201      	movs	r2, #1
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001722:	2200      	movs	r2, #0
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001728:	f002 fcc4 	bl	80040b4 <HAL_DFSDM_ChannelInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZL14MX_DFSDM2_Initv+0xd4>
  {
    Error_Handler();
 800173c:	f000 fc42 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000148 	.word	0x20000148
 8001748:	40016420 	.word	0x40016420
 800174c:	20000180 	.word	0x20000180
 8001750:	400164e0 	.word	0x400164e0

08001754 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800175a:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <_ZL15MX_FMPI2C1_Initv+0x78>)
 800175c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001760:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <_ZL15MX_FMPI2C1_Initv+0x7c>)
 8001762:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800176c:	2201      	movs	r2, #1
 800176e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001790:	f002 fe06 	bl	80043a0 <HAL_FMPI2C_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <_ZL15MX_FMPI2C1_Initv+0x54>
  {
    Error_Handler();
 80017a4:	f000 fc0e 	bl	8001fc4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <_ZL15MX_FMPI2C1_Initv+0x74>)
 80017ac:	f002 fe87 	bl	80044be <HAL_FMPI2CEx_ConfigAnalogFilter>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <_ZL15MX_FMPI2C1_Initv+0x70>
  {
    Error_Handler();
 80017c0:	f000 fc00 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200001b8 	.word	0x200001b8
 80017cc:	40006000 	.word	0x40006000
 80017d0:	00303d5b 	.word	0x00303d5b

080017d4 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <_ZL12MX_I2S2_Initv+0x64>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 80017e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 80017fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001800:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 8001810:	2201      	movs	r2, #1
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <_ZL12MX_I2S2_Initv+0x60>)
 8001816:	f004 fd3d 	bl	8006294 <HAL_I2S_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_ZL12MX_I2S2_Initv+0x5a>
  {
    Error_Handler();
 800182a:	f000 fbcb 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000204 	.word	0x20000204
 8001838:	40003800 	.word	0x40003800

0800183c <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8001844:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 800184e:	2201      	movs	r2, #1
 8001850:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 800185a:	2201      	movs	r2, #1
 800185c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001878:	f005 f9ce 	bl	8006c18 <HAL_QSPI_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 800188c:	f000 fb9a 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000024c 	.word	0x2000024c
 8001898:	a0001000 	.word	0xa0001000

0800189c <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018a2:	4a1a      	ldr	r2, [pc, #104]	; (800190c <_ZL15MX_SDIO_SD_Initv+0x70>)
 80018a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80018ca:	480f      	ldr	r0, [pc, #60]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018cc:	f006 fa9a 	bl	8007e04 <HAL_SD_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 80018e0:	f000 fb70 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80018e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 80018ea:	f006 fcbf 	bl	800826c <HAL_SD_ConfigWideBusOperation>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80018fe:	f000 fb61 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000298 	.word	0x20000298
 800190c:	40012c00 	.word	0x40012c00

08001910 <_ZL14MX_UART10_Initv>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <_ZL14MX_UART10_Initv+0x58>)
 8001918:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <_ZL14MX_UART10_Initv+0x54>)
 8001948:	f007 fa48 	bl	8008ddc <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <_ZL14MX_UART10_Initv+0x50>
  {
    Error_Handler();
 800195c:	f000 fb32 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000031c 	.word	0x2000031c
 8001968:	40011c00 	.word	0x40011c00

0800196c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001974:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <_ZL19MX_USART6_UART_Initv+0x54>)
 80019a4:	f007 fa1a 	bl	8008ddc <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 80019b8:	f000 fb04 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	2000035c 	.word	0x2000035c
 80019c4:	40011400 	.word	0x40011400

080019c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08e      	sub	sp, #56	; 0x38
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	4bb0      	ldr	r3, [pc, #704]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4aaf      	ldr	r2, [pc, #700]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4bad      	ldr	r3, [pc, #692]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	623b      	str	r3, [r7, #32]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	4ba9      	ldr	r3, [pc, #676]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4aa8      	ldr	r2, [pc, #672]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4ba6      	ldr	r3, [pc, #664]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	4ba2      	ldr	r3, [pc, #648]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4aa1      	ldr	r2, [pc, #644]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b9f      	ldr	r3, [pc, #636]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	4b9b      	ldr	r3, [pc, #620]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a9a      	ldr	r2, [pc, #616]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b98      	ldr	r3, [pc, #608]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a93      	ldr	r2, [pc, #588]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b91      	ldr	r3, [pc, #580]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b8d      	ldr	r3, [pc, #564]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a8c      	ldr	r2, [pc, #560]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b8a      	ldr	r3, [pc, #552]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b86      	ldr	r3, [pc, #536]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a85      	ldr	r2, [pc, #532]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b83      	ldr	r3, [pc, #524]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a7e      	ldr	r2, [pc, #504]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2138      	movs	r1, #56	; 0x38
 8001ac2:	4879      	ldr	r0, [pc, #484]	; (8001ca8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001ac4:	f002 feda 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	4877      	ldr	r0, [pc, #476]	; (8001cac <_ZL12MX_GPIO_Initv+0x2e4>)
 8001ace:	f002 fed5 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ad8:	4875      	ldr	r0, [pc, #468]	; (8001cb0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001ada:	f002 fecf 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001ae4:	4873      	ldr	r0, [pc, #460]	; (8001cb4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001ae6:	f002 fec9 	bl	800487c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001aea:	2338      	movs	r3, #56	; 0x38
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afe:	4619      	mov	r1, r3
 8001b00:	4869      	ldr	r0, [pc, #420]	; (8001ca8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001b02:	f002 fd27 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001b06:	2340      	movs	r3, #64	; 0x40
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b16:	2303      	movs	r3, #3
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4861      	ldr	r0, [pc, #388]	; (8001ca8 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001b22:	f002 fd17 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b40:	4619      	mov	r1, r3
 8001b42:	485d      	ldr	r0, [pc, #372]	; (8001cb8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001b44:	f002 fd06 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4c:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <_ZL12MX_GPIO_Initv+0x2f4>)
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4854      	ldr	r0, [pc, #336]	; (8001cac <_ZL12MX_GPIO_Initv+0x2e4>)
 8001b5c:	f002 fcfa 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b64:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <_ZL12MX_GPIO_Initv+0x2f4>)
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	4619      	mov	r1, r3
 8001b72:	4853      	ldr	r0, [pc, #332]	; (8001cc0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8001b74:	f002 fcee 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001b78:	2320      	movs	r3, #32
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4847      	ldr	r0, [pc, #284]	; (8001cac <_ZL12MX_GPIO_Initv+0x2e4>)
 8001b90:	f002 fce0 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	4840      	ldr	r0, [pc, #256]	; (8001cb0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001bb0:	f002 fcd0 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bba:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <_ZL12MX_GPIO_Initv+0x2f4>)
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	483b      	ldr	r0, [pc, #236]	; (8001cb8 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001bca:	f002 fcc3 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001bce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001be0:	2304      	movs	r3, #4
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	4619      	mov	r1, r3
 8001bea:	4831      	ldr	r0, [pc, #196]	; (8001cb0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001bec:	f002 fcb2 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c02:	2307      	movs	r3, #7
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4828      	ldr	r0, [pc, #160]	; (8001cb0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001c0e:	f002 fca1 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001c12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4821      	ldr	r0, [pc, #132]	; (8001cb0 <_ZL12MX_GPIO_Initv+0x2e8>)
 8001c2c:	f002 fc92 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001c30:	f248 0380 	movw	r3, #32896	; 0x8080
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001c46:	f002 fc85 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001c4a:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001c64:	f002 fc76 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8001c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	480e      	ldr	r0, [pc, #56]	; (8001cc0 <_ZL12MX_GPIO_Initv+0x2f8>)
 8001c86:	f002 fc65 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001c8a:	2330      	movs	r3, #48	; 0x30
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	e00f      	b.n	8001cc4 <_ZL12MX_GPIO_Initv+0x2fc>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40021800 	.word	0x40021800
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	10110000 	.word	0x10110000
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4812      	ldr	r0, [pc, #72]	; (8001d10 <_ZL12MX_GPIO_Initv+0x348>)
 8001cc8:	f002 fc44 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001ccc:	2340      	movs	r3, #64	; 0x40
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_ZL12MX_GPIO_Initv+0x34c>)
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <_ZL12MX_GPIO_Initv+0x348>)
 8001ce0:	f002 fc38 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <_ZL12MX_GPIO_Initv+0x348>)
 8001d02:	f002 fc27 	bl	8004554 <HAL_GPIO_Init>

}
 8001d06:	bf00      	nop
 8001d08:	3738      	adds	r7, #56	; 0x38
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020400 	.word	0x40020400
 8001d14:	10110000 	.word	0x10110000

08001d18 <_ZL12MX_FSMC_Initv>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d30:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d32:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001d36:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d38:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d3a:	4a53      	ldr	r2, [pc, #332]	; (8001e88 <_ZL12MX_FSMC_Initv+0x170>)
 8001d3c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001d3e:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d52:	2210      	movs	r2, #16
 8001d54:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001d68:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001d6e:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001d74:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001d92:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001d98:	230f      	movs	r3, #15
 8001d9a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001da0:	23ff      	movs	r3, #255	; 0xff
 8001da2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001da4:	230f      	movs	r3, #15
 8001da6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001da8:	2310      	movs	r3, #16
 8001daa:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001dac:	2311      	movs	r3, #17
 8001dae:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4832      	ldr	r0, [pc, #200]	; (8001e84 <_ZL12MX_FSMC_Initv+0x16c>)
 8001dbc:	f006 fd8c 	bl	80088d8 <HAL_SRAM_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bf14      	ite	ne
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	2300      	moveq	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <_ZL12MX_FSMC_Initv+0xbc>
  {
    Error_Handler( );
 8001dd0:	f000 f8f8 	bl	8001fc4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001dd6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001dda:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001dde:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <_ZL12MX_FSMC_Initv+0x170>)
 8001de0:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001de4:	2204      	movs	r2, #4
 8001de6:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001de8:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001df6:	2210      	movs	r2, #16
 8001df8:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e3e:	230f      	movs	r3, #15
 8001e40:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e42:	230f      	movs	r3, #15
 8001e44:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e46:	23ff      	movs	r3, #255	; 0xff
 8001e48:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e4e:	2310      	movs	r3, #16
 8001e50:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e52:	2311      	movs	r3, #17
 8001e54:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480a      	ldr	r0, [pc, #40]	; (8001e8c <_ZL12MX_FSMC_Initv+0x174>)
 8001e62:	f006 fd39 	bl	80088d8 <HAL_SRAM_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <_ZL12MX_FSMC_Initv+0x162>
  {
    Error_Handler( );
 8001e76:	f000 f8a5 	bl	8001fc4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000039c 	.word	0x2000039c
 8001e88:	a0000104 	.word	0xa0000104
 8001e8c:	200003ec 	.word	0x200003ec

08001e90 <_Z13DefaultThreadPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultThread */
void DefaultThread(void *argument)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b08d      	sub	sp, #52	; 0x34
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6178      	str	r0, [r7, #20]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001e98:	f00e fc10 	bl	80106bc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  BoundaryBox previousLocation = BoundaryBox();	 // get a default boundary box to start
 8001e9c:	f107 0318 	add.w	r3, r7, #24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
  previousLocation.width = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  previousLocation.widthIndex = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  previousLocation.height = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  previousLocation.heightIndex = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_UART_Receive_IT(&huart6, Rx_Data, 2);
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4916      	ldr	r1, [pc, #88]	; (8001f18 <_Z13DefaultThreadPv+0x88>)
 8001ebe:	4817      	ldr	r0, [pc, #92]	; (8001f1c <_Z13DefaultThreadPv+0x8c>)
 8001ec0:	f006 ffd9 	bl	8008e76 <HAL_UART_Receive_IT>
  for(;;)
  {
	if (sendLocationReady && !storeCoordinate)
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <_Z13DefaultThreadPv+0x90>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01b      	beq.n	8001f04 <_Z13DefaultThreadPv+0x74>
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_Z13DefaultThreadPv+0x94>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d014      	beq.n	8001f04 <_Z13DefaultThreadPv+0x74>
	{
		previousLocation = sendLocation(previousLocation);
 8001eda:	4638      	mov	r0, r7
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee6:	f7ff f9ad 	bl	8001244 <_Z12sendLocation11BoundaryBox>
 8001eea:	f107 0418 	add.w	r4, r7, #24
 8001eee:	463b      	mov	r3, r7
 8001ef0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		recievedCoordinates.clear();
 8001ef6:	480c      	ldr	r0, [pc, #48]	; (8001f28 <_Z13DefaultThreadPv+0x98>)
 8001ef8:	f000 f906 	bl	8002108 <_ZNSt6vectorI10CoordinateSaIS0_EE5clearEv>
		//pixelCount = 0;	// not using this anymore?
		sendLocationReady = false;
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <_Z13DefaultThreadPv+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e004      	b.n	8001f0e <_Z13DefaultThreadPv+0x7e>
	}
	else
	{
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2120      	movs	r1, #32
 8001f08:	4808      	ldr	r0, [pc, #32]	; (8001f2c <_Z13DefaultThreadPv+0x9c>)
 8001f0a:	f002 fcb7 	bl	800487c <HAL_GPIO_WritePin>
	}
	osDelay(55);
 8001f0e:	2037      	movs	r0, #55	; 0x37
 8001f10:	f00b fd34 	bl	800d97c <osDelay>
	if (sendLocationReady && !storeCoordinate)
 8001f14:	e7d6      	b.n	8001ec4 <_Z13DefaultThreadPv+0x34>
 8001f16:	bf00      	nop
 8001f18:	20000444 	.word	0x20000444
 8001f1c:	2000035c 	.word	0x2000035c
 8001f20:	20000446 	.word	0x20000446
 8001f24:	20000447 	.word	0x20000447
 8001f28:	20000448 	.word	0x20000448
 8001f2c:	40020800 	.word	0x40020800

08001f30 <_Z10MainThreadPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainThread */
void MainThread(void *argument)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainThread */

	/* Infinite loop */
	for(;;)
	{
		if (storeCoordinate && !sendLocationReady)
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <_Z10MainThreadPv+0x5c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <_Z10MainThreadPv+0x48>
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_Z10MainThreadPv+0x60>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d014      	beq.n	8001f78 <_Z10MainThreadPv+0x48>
		{
			struct Coordinate temp;
			temp.height = Rx_Data[0];
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <_Z10MainThreadPv+0x64>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]
			temp.width = Rx_Data[1];
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <_Z10MainThreadPv+0x64>)
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	60bb      	str	r3, [r7, #8]
			recievedCoordinates.push_back(temp);
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <_Z10MainThreadPv+0x68>)
 8001f62:	f000 f8df 	bl	8002124 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_>
			//pixelCount++; // not using this anymore?
			storeCoordinate = false;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <_Z10MainThreadPv+0x5c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);// Red LED
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2108      	movs	r1, #8
 8001f70:	480a      	ldr	r0, [pc, #40]	; (8001f9c <_Z10MainThreadPv+0x6c>)
 8001f72:	f002 fc83 	bl	800487c <HAL_GPIO_WritePin>
 8001f76:	e004      	b.n	8001f82 <_Z10MainThreadPv+0x52>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);// Red LED
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2108      	movs	r1, #8
 8001f7c:	4807      	ldr	r0, [pc, #28]	; (8001f9c <_Z10MainThreadPv+0x6c>)
 8001f7e:	f002 fc7d 	bl	800487c <HAL_GPIO_WritePin>
		}
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // Red LED
		osDelay(10);
 8001f82:	200a      	movs	r0, #10
 8001f84:	f00b fcfa 	bl	800d97c <osDelay>
	}
 8001f88:	e7d6      	b.n	8001f38 <_Z10MainThreadPv+0x8>
 8001f8a:	bf00      	nop
 8001f8c:	20000447 	.word	0x20000447
 8001f90:	20000446 	.word	0x20000446
 8001f94:	20000444 	.word	0x20000444
 8001f98:	20000448 	.word	0x20000448
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fb2:	f001 fc19 	bl	80037e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40001000 	.word	0x40001000

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8c8 	bl	8002170 <_ZNSaI10CoordinateEC1Ev>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f8d0 	bl	8002188 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZNSaI10CoordinateED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8d8 	bl	80021b0 <_ZN9__gnu_cxx13new_allocatorI10CoordinateED1Ev>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8002022:	461a      	mov	r2, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8ce 	bl	80021c6 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>
      }
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe ff63 	bl	8000ef8 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implD1Ev>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	10db      	asrs	r3, r3, #3
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f8bd 	bl	80021ec <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1d1a      	adds	r2, r3, #4
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f8ac 	bl	80021ec <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800209e:	b590      	push	{r4, r7, lr}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8af 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	681c      	ldr	r4, [r3, #0]
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f000 f8aa 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80020b8:	4603      	mov	r3, r0
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	429c      	cmp	r4, r3
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}

080020ce <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f103 0208 	add.w	r2, r3, #8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]
	return *this;
 80020e2:	687b      	ldr	r3, [r7, #4]
      }
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_ZNSt6vectorI10CoordinateSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f883 	bl	8002222 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_>
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	d00d      	beq.n	8002156 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	f000 f88e 	bl	8002264 <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f103 0208 	add.w	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	605a      	str	r2, [r3, #4]
      }
 8002154:	e008      	b.n	8002168 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff90 	bl	800207c <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 800215c:	4603      	mov	r3, r0
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8a8 	bl	80022b8 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZNSaI10CoordinateEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f959 	bl	8002430 <_ZN9__gnu_cxx13new_allocatorI10CoordinateEC1Ev>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
	{ }
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_ZN9__gnu_cxx13new_allocatorI10CoordinateED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
	if (__p)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f931 	bl	8002446 <_ZNSt16allocator_traitsISaI10CoordinateEE10deallocateERS1_PS0_j>
      }
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002222:	b590      	push	{r4, r7, lr}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	10db      	asrs	r3, r3, #3
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00e      	beq.n	800225c <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f90d 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800224a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800224c:	461a      	mov	r2, r3
 800224e:	4621      	mov	r1, r4
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	f000 f912 	bl	800247a <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f910 	bl	8002496 <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f915 	bl	80024ac <_ZN9__gnu_cxx13new_allocatorI10CoordinateE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f805 	bl	80022a0 <_ZNSt6vectorI10CoordinateSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002296:	4603      	mov	r3, r0
      }
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_ZNSt6vectorI10CoordinateSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80022a8:	2301      	movs	r3, #1
      }
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80022c4:	4a59      	ldr	r2, [pc, #356]	; (800242c <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f908 	bl	80024de <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc>
 80022ce:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff febd 	bl	800205c <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	f107 0214 	add.w	r2, r7, #20
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f93b 	bl	800256c <_ZN9__gnu_cxxmiIP10CoordinateSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80022f6:	4603      	mov	r3, r0
 80022f8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f949 	bl	8002596 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj>
 8002304:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800230a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	18d5      	adds	r5, r2, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f8be 	bl	8002496 <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	4629      	mov	r1, r5
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff ff9f 	bl	8002264 <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800232a:	f7ff ffae 	bl	800228a <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d027      	beq.n	8002384 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff67 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800233e:	4603      	mov	r3, r0
 8002340:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f88d 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800234a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4621      	mov	r1, r4
 8002350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002352:	f000 f934 	bl	80025be <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002356:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	3308      	adds	r3, #8
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff52 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002368:	4603      	mov	r3, r0
 800236a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f878 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002374:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	4620      	mov	r0, r4
 800237c:	f000 f91f 	bl	80025be <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002380:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002382:	e026      	b.n	80023d2 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff3f 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800238e:	4603      	mov	r3, r0
 8002390:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f865 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800239a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4621      	mov	r1, r4
 80023a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a2:	f000 f920 	bl	80025e6 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 80023a6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	3308      	adds	r3, #8
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff2a 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80023b8:	4603      	mov	r3, r0
 80023ba:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f850 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80023c4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80023c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c8:	6a39      	ldr	r1, [r7, #32]
 80023ca:	4620      	mov	r0, r4
 80023cc:	f000 f90b 	bl	80025e6 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 80023d0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80023d2:	f7ff ff5a 	bl	800228a <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f083 0301 	eor.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f83d 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461a      	mov	r2, r3
 80023ee:	6a39      	ldr	r1, [r7, #32]
 80023f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f2:	f000 f842 	bl	800247a <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80023f6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8002402:	461a      	mov	r2, r3
 8002404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002406:	f7ff fede 	bl	80021c6 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002414:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	441a      	add	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	609a      	str	r2, [r3, #8]
    }
 8002422:	bf00      	nop
 8002424:	3730      	adds	r7, #48	; 0x30
 8002426:	46bd      	mov	sp, r7
 8002428:	bdb0      	pop	{r4, r5, r7, pc}
 800242a:	bf00      	nop
 800242c:	08011f9c 	.word	0x08011f9c

08002430 <_ZN9__gnu_cxx13new_allocatorI10CoordinateEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_ZNSt16allocator_traitsISaI10CoordinateEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f8de 	bl	8002618 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE10deallocateEPS1_j>
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f8d2 	bl	8002632 <_ZSt8_DestroyIP10CoordinateEvT_S2_>
    }
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_ZN9__gnu_cxx13new_allocatorI10CoordinateE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ffec 	bl	8002496 <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 80024be:	4604      	mov	r4, r0
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4619      	mov	r1, r3
 80024c4:	2008      	movs	r0, #8
 80024c6:	f7fe fd0b 	bl	8000ee0 <_ZnwjPv>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4622      	mov	r2, r4
 80024ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}

080024de <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80024de:	b590      	push	{r4, r7, lr}
 80024e0:	b087      	sub	sp, #28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f8ae 	bl	800264c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 80024f0:	4604      	mov	r4, r0
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f7ff fda2 	bl	800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	1ae2      	subs	r2, r4, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	bf34      	ite	cc
 8002502:	2301      	movcc	r3, #1
 8002504:	2300      	movcs	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f00e fbef 	bl	8010cf0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fd92 	bl	800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8002518:	4604      	mov	r4, r0
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fd8e 	bl	800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8002520:	4603      	mov	r3, r0
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	f107 0208 	add.w	r2, r7, #8
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f89d 	bl	800266e <_ZSt3maxIjERKT_S2_S2_>
 8002534:	4603      	mov	r3, r0
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4423      	add	r3, r4
 800253a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fd7d 	bl	800203c <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4293      	cmp	r3, r2
 8002548:	d306      	bcc.n	8002558 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f87e 	bl	800264c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 8002550:	4602      	mov	r2, r0
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4293      	cmp	r3, r2
 8002556:	d904      	bls.n	8002562 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f877 	bl	800264c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 800255e:	4603      	mov	r3, r0
 8002560:	e000      	b.n	8002564 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002562:	697b      	ldr	r3, [r7, #20]
      }
 8002564:	4618      	mov	r0, r3
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}

0800256c <_ZN9__gnu_cxxmiIP10CoordinateSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fe48 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800257c:	4603      	mov	r3, r0
 800257e:	681c      	ldr	r4, [r3, #0]
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f7ff fe43 	bl	800220c <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002586:	4603      	mov	r3, r0
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1ae3      	subs	r3, r4, r3
 800258c:	10db      	asrs	r3, r3, #3
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj+0x1e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f873 	bl	8002696 <_ZNSt16allocator_traitsISaI10CoordinateEE8allocateERS1_j>
 80025b0:	4603      	mov	r3, r0
 80025b2:	e000      	b.n	80025b6 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj+0x20>
 80025b4:	2300      	movs	r3, #0
      }
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80025be:	b590      	push	{r4, r7, lr}
 80025c0:	b089      	sub	sp, #36	; 0x24
 80025c2:	af02      	add	r7, sp, #8
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80025cc:	f88d 4000 	strb.w	r4, [sp]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f86c 	bl	80026b4 <_ZNSt6vectorI10CoordinateSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80025dc:	4603      	mov	r3, r0
      }
 80025de:	4618      	mov	r0, r3
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}

080025e6 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80025e6:	b590      	push	{r4, r7, lr}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f86f 	bl	80026d8 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>
 80025fa:	4604      	mov	r4, r0
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f000 f86b 	bl	80026d8 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>
 8002602:	4601      	mov	r1, r0
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4620      	mov	r0, r4
 800260a:	f000 f874 	bl	80026f6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CoordinateES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800260e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}

08002618 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002624:	68b8      	ldr	r0, [r7, #8]
 8002626:	f00e fb4d 	bl	8010cc4 <_ZdlPv>
      }
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_ZSt8_DestroyIP10CoordinateEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f86a 	bl	8002718 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CoordinateEEvT_S4_>
    }
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f883 	bl	8002762 <_ZNKSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800265c:	4603      	mov	r3, r0
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f865 	bl	800272e <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_max_sizeERKS1_>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d201      	bcs.n	8002688 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	e000      	b.n	800268a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002688:	687b      	ldr	r3, [r7, #4]
    }
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_ZNSt16allocator_traitsISaI10CoordinateEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80026a0:	2200      	movs	r2, #0
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f867 	bl	8002778 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_ZNSt6vectorI10CoordinateSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f873 	bl	80027b4 <_ZSt12__relocate_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 80026ce:	4603      	mov	r3, r0
      }
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f881 	bl	80027ee <_ZNSt13move_iteratorIP10CoordinateEC1ES1_>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CoordinateES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f87f 	bl	800280c <_ZSt18uninitialized_copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>
 800270e:	4603      	mov	r3, r0
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CoordinateEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002736:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800273a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f877 	bl	8002830 <_ZNSt16allocator_traitsISaI10CoordinateEE8max_sizeERKS1_>
 8002742:	4603      	mov	r3, r0
 8002744:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002746:	f107 0208 	add.w	r2, r7, #8
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f879 	bl	8002848 <_ZSt3minIjERKT_S2_S2_>
 8002756:	4603      	mov	r3, r0
 8002758:	681b      	ldr	r3, [r3, #0]
      }
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZNKSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f873 	bl	8002870 <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>
 800278a:	4602      	mov	r2, r0
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4293      	cmp	r3, r2
 8002790:	bf8c      	ite	hi
 8002792:	2301      	movhi	r3, #1
 8002794:	2300      	movls	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800279c:	f00e faa5 	bl	8010cea <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00e fa8f 	bl	8010cc8 <_Znwj>
 80027aa:	4603      	mov	r3, r0
      }
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZSt12__relocate_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f860 	bl	8002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 80027c8:	4604      	mov	r4, r0
 80027ca:	68b8      	ldr	r0, [r7, #8]
 80027cc:	f000 f85c 	bl	8002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 80027d0:	4605      	mov	r5, r0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f858 	bl	8002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 80027d8:	4602      	mov	r2, r0
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	4629      	mov	r1, r5
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 f85d 	bl	800289e <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 80027e4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bdb0      	pop	{r4, r5, r7, pc}

080027ee <_ZNSt13move_iteratorIP10CoordinateEC1ES1_>:
      move_iterator(iterator_type __i)
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_ZSt18uninitialized_copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f85a 	bl	80028da <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10CoordinateES4_EET0_T_S7_S6_>
 8002826:	4603      	mov	r3, r0
    }
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNSt16allocator_traitsISaI10CoordinateEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f819 	bl	8002870 <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>
 800283e:	4603      	mov	r3, r0
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d201      	bcs.n	8002862 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	e000      	b.n	8002864 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002862:	687b      	ldr	r3, [r7, #4]
    }
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002878:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	10db      	asrs	r3, r3, #3
 80028b4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	dd06      	ble.n	80028ca <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	461a      	mov	r2, r3
 80028c2:	68f9      	ldr	r1, [r7, #12]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f00f fa25 	bl	8011d14 <memmove>
      return __result + __count;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
    }
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10CoordinateES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f805 	bl	80028fa <_ZSt4copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_ZSt4copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80028fa:	b590      	push	{r4, r7, lr}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f80f 	bl	800292a <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800290c:	4604      	mov	r4, r0
 800290e:	68b8      	ldr	r0, [r7, #8]
 8002910:	f000 f80b 	bl	800292a <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002914:	4603      	mov	r3, r0
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4619      	mov	r1, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f000 f816 	bl	800294c <_ZSt14__copy_move_a2ILb1EP10CoordinateS1_ET1_T0_S3_S2_>
 8002920:	4603      	mov	r3, r0
    }
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}

0800292a <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f82c 	bl	8002992 <_ZNKSt13move_iteratorIP10CoordinateE4baseEv>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f834 	bl	80029aa <_ZSt12__miter_baseIP10CoordinateET_S2_>
 8002942:	4603      	mov	r3, r0
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZSt14__copy_move_a2ILb1EP10CoordinateS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff ff95 	bl	8002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 800295e:	4604      	mov	r4, r0
 8002960:	68b8      	ldr	r0, [r7, #8]
 8002962:	f7ff ff91 	bl	8002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002966:	4605      	mov	r5, r0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff8c 	bl	8002888 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4629      	mov	r1, r5
 8002976:	4620      	mov	r0, r4
 8002978:	f000 f822 	bl	80029c0 <_ZSt13__copy_move_aILb1EP10CoordinateS1_ET1_T0_S3_S2_>
 800297c:	4602      	mov	r2, r0
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f82e 	bl	80029e4 <_ZSt12__niter_wrapIP10CoordinateET_RKS2_S2_>
 8002988:	4603      	mov	r3, r0
    }
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bdb0      	pop	{r4, r5, r7, pc}

08002992 <_ZNKSt13move_iteratorIP10CoordinateE4baseEv>:
      base() const
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_ZSt12__miter_baseIP10CoordinateET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZSt13__copy_move_aILb1EP10CoordinateS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80029cc:	2301      	movs	r3, #1
 80029ce:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f811 	bl	80029fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_>
 80029da:	4603      	mov	r3, r0
    }
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_ZSt12__niter_wrapIP10CoordinateET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
    { return __res; }
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	10db      	asrs	r3, r3, #3
 8002a10:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f00f f977 	bl	8011d14 <memmove>
	  return __result + _Num;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
	}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <_Z41__static_initialization_and_destruction_0ii>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d102      	bne.n	8002a58 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<struct Coordinate> recievedCoordinates;
 8002a52:	4809      	ldr	r0, [pc, #36]	; (8002a78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002a54:	f7fe fa69 	bl	8000f2a <_ZNSt6vectorI10CoordinateSaIS0_EEC1Ev>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002a68:	4803      	ldr	r0, [pc, #12]	; (8002a78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002a6a:	f000 f807 	bl	8002a7c <_ZNSt6vectorI10CoordinateSaIS0_EED1Ev>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000448 	.word	0x20000448

08002a7c <_ZNSt6vectorI10CoordinateSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fce8 	bl	8002464 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a94:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a96:	461a      	mov	r2, r3
 8002a98:	4629      	mov	r1, r5
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff fced 	bl	800247a <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
      }
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fab1 	bl	800200a <_ZNSt12_Vector_baseI10CoordinateSaIS0_EED1Ev>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}

08002ab2 <_GLOBAL__sub_I_hadc1>:
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7ff ffbc 	bl	8002a38 <_Z41__static_initialization_and_destruction_0ii>
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_GLOBAL__sub_D_hadc1>:
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7ff ffb4 	bl	8002a38 <_Z41__static_initialization_and_destruction_0ii>
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_MspInit+0x4c>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_MspInit+0x4c>)
 8002ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_MspInit+0x4c>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_MspInit+0x4c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_MspInit+0x4c>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_MspInit+0x4c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	; 0x30
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a31      	ldr	r2, [pc, #196]	; (8002c08 <HAL_ADC_MspInit+0xe4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d15b      	bne.n	8002bfe <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4a1a      	ldr	r2, [pc, #104]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_ADC_MspInit+0xe8>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8002bb6:	2311      	movs	r3, #17
 8002bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4811      	ldr	r0, [pc, #68]	; (8002c10 <HAL_ADC_MspInit+0xec>)
 8002bca:	f001 fcc3 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8002bce:	2326      	movs	r3, #38	; 0x26
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 031c 	add.w	r3, r7, #28
 8002bde:	4619      	mov	r1, r3
 8002be0:	480c      	ldr	r0, [pc, #48]	; (8002c14 <HAL_ADC_MspInit+0xf0>)
 8002be2:	f001 fcb7 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bea:	2303      	movs	r3, #3
 8002bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	f107 031c 	add.w	r3, r7, #28
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4807      	ldr	r0, [pc, #28]	; (8002c18 <HAL_ADC_MspInit+0xf4>)
 8002bfa:	f001 fcab 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3730      	adds	r7, #48	; 0x30
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40012000 	.word	0x40012000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400

08002c1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_DAC_MspInit+0x8c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12f      	bne.n	8002c9e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_DAC_MspInit+0x90>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_DAC_MspInit+0x90>)
 8002c48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_DAC_MspInit+0x90>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_DAC_MspInit+0x90>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_DAC_MspInit+0x90>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_DAC_MspInit+0x90>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8002c76:	2310      	movs	r3, #16
 8002c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4619      	mov	r1, r3
 8002c88:	4809      	ldr	r0, [pc, #36]	; (8002cb0 <HAL_DAC_MspInit+0x94>)
 8002c8a:	f001 fc63 	bl	8004554 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2036      	movs	r0, #54	; 0x36
 8002c94:	f001 f916 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c98:	2036      	movs	r0, #54	; 0x36
 8002c9a:	f001 f92f 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40007400 	.word	0x40007400
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40020000 	.word	0x40020000

08002cb4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DFSDM_ChannelMspInit+0x40>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a76      	ldr	r2, [pc, #472]	; (8002eb4 <HAL_DFSDM_ChannelMspInit+0x200>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DFSDM_ChannelMspInit+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <HAL_DFSDM_ChannelMspInit+0x204>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DFSDM_ChannelMspInit+0x40>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a73      	ldr	r2, [pc, #460]	; (8002ebc <HAL_DFSDM_ChannelMspInit+0x208>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d154      	bne.n	8002d9e <HAL_DFSDM_ChannelMspInit+0xea>
 8002cf4:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d150      	bne.n	8002d9e <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	4b70      	ldr	r3, [pc, #448]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	4a6f      	ldr	r2, [pc, #444]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0c:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d14:	623b      	str	r3, [r7, #32]
 8002d16:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	4b69      	ldr	r3, [pc, #420]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	4a68      	ldr	r2, [pc, #416]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6313      	str	r3, [r2, #48]	; 0x30
 8002d28:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a61      	ldr	r2, [pc, #388]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d3e:	f043 0308 	orr.w	r3, r3, #8
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002d62:	2306      	movs	r3, #6
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4856      	ldr	r0, [pc, #344]	; (8002ec8 <HAL_DFSDM_ChannelMspInit+0x214>)
 8002d6e:	f001 fbf1 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8002d72:	2340      	movs	r3, #64	; 0x40
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002d82:	2306      	movs	r3, #6
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	484f      	ldr	r0, [pc, #316]	; (8002ecc <HAL_DFSDM_ChannelMspInit+0x218>)
 8002d8e:	f001 fbe1 	bl	8004554 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002d92:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	4a49      	ldr	r2, [pc, #292]	; (8002ec0 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002d9a:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8002d9c:	e084      	b.n	8002ea8 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d07f      	beq.n	8002ea8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a41      	ldr	r2, [pc, #260]	; (8002eb4 <HAL_DFSDM_ChannelMspInit+0x200>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d07a      	beq.n	8002ea8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a40      	ldr	r2, [pc, #256]	; (8002eb8 <HAL_DFSDM_ChannelMspInit+0x204>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d075      	beq.n	8002ea8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3e      	ldr	r2, [pc, #248]	; (8002ebc <HAL_DFSDM_ChannelMspInit+0x208>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d070      	beq.n	8002ea8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002dc6:	4b42      	ldr	r3, [pc, #264]	; (8002ed0 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d16c      	bne.n	8002ea8 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e56:	4619      	mov	r1, r3
 8002e58:	481b      	ldr	r0, [pc, #108]	; (8002ec8 <HAL_DFSDM_ChannelMspInit+0x214>)
 8002e5a:	f001 fb7b 	bl	8004554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	4814      	ldr	r0, [pc, #80]	; (8002ecc <HAL_DFSDM_ChannelMspInit+0x218>)
 8002e7a:	f001 fb6b 	bl	8004554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e82:	2302      	movs	r3, #2
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8002e8e:	2306      	movs	r3, #6
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	4619      	mov	r1, r3
 8002e98:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <HAL_DFSDM_ChannelMspInit+0x220>)
 8002e9a:	f001 fb5b 	bl	8004554 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	3738      	adds	r7, #56	; 0x38
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40016000 	.word	0x40016000
 8002eb4:	40016020 	.word	0x40016020
 8002eb8:	40016040 	.word	0x40016040
 8002ebc:	40016060 	.word	0x40016060
 8002ec0:	20000454 	.word	0x20000454
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020c00 	.word	0x40020c00
 8002ed0:	20000458 	.word	0x20000458
 8002ed4:	40020400 	.word	0x40020400

08002ed8 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_FMPI2C_MspInit+0x84>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d12b      	bne.n	8002f52 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <HAL_FMPI2C_MspInit+0x88>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_FMPI2C_MspInit+0x88>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_FMPI2C_MspInit+0x88>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8002f16:	23c0      	movs	r3, #192	; 0xc0
 8002f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1a:	2312      	movs	r3, #18
 8002f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002f26:	2304      	movs	r3, #4
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480c      	ldr	r0, [pc, #48]	; (8002f64 <HAL_FMPI2C_MspInit+0x8c>)
 8002f32:	f001 fb0f 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_FMPI2C_MspInit+0x88>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_FMPI2C_MspInit+0x88>)
 8002f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_FMPI2C_MspInit+0x88>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40006000 	.word	0x40006000
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020800 	.word	0x40020800

08002f68 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	; (80030c4 <HAL_I2S_MspInit+0x15c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	f040 8097 	bne.w	80030ba <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4a4c      	ldr	r2, [pc, #304]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	4a45      	ldr	r2, [pc, #276]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	4a3e      	ldr	r2, [pc, #248]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd4:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4a37      	ldr	r2, [pc, #220]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002fea:	f043 0308 	orr.w	r3, r3, #8
 8002fee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	6313      	str	r3, [r2, #48]	; 0x30
 800300c:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_I2S_MspInit+0x160>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8003018:	2304      	movs	r3, #4
 800301a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8003028:	2306      	movs	r3, #6
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	4619      	mov	r1, r3
 8003032:	4826      	ldr	r0, [pc, #152]	; (80030cc <HAL_I2S_MspInit+0x164>)
 8003034:	f001 fa8e 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8003038:	2308      	movs	r3, #8
 800303a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003048:	2305      	movs	r3, #5
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	4619      	mov	r1, r3
 8003052:	481e      	ldr	r0, [pc, #120]	; (80030cc <HAL_I2S_MspInit+0x164>)
 8003054:	f001 fa7e 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8003058:	2308      	movs	r3, #8
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003068:	2305      	movs	r3, #5
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 800306c:	f107 031c 	add.w	r3, r7, #28
 8003070:	4619      	mov	r1, r3
 8003072:	4817      	ldr	r0, [pc, #92]	; (80030d0 <HAL_I2S_MspInit+0x168>)
 8003074:	f001 fa6e 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8003078:	2308      	movs	r3, #8
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003088:	2305      	movs	r3, #5
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	4810      	ldr	r0, [pc, #64]	; (80030d4 <HAL_I2S_MspInit+0x16c>)
 8003094:	f001 fa5e 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8003098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030aa:	2305      	movs	r3, #5
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	4808      	ldr	r0, [pc, #32]	; (80030d8 <HAL_I2S_MspInit+0x170>)
 80030b6:	f001 fa4d 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3730      	adds	r7, #48	; 0x30
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40003800 	.word	0x40003800
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40020400 	.word	0x40020400

080030dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08e      	sub	sp, #56	; 0x38
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a56      	ldr	r2, [pc, #344]	; (8003254 <HAL_QSPI_MspInit+0x178>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	f040 80a6 	bne.w	800324c <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003100:	2300      	movs	r3, #0
 8003102:	623b      	str	r3, [r7, #32]
 8003104:	4b54      	ldr	r3, [pc, #336]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	4a53      	ldr	r2, [pc, #332]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	6393      	str	r3, [r2, #56]	; 0x38
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003126:	f043 0310 	orr.w	r3, r3, #16
 800312a:	6313      	str	r3, [r2, #48]	; 0x30
 800312c:	4b4a      	ldr	r3, [pc, #296]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	4a45      	ldr	r2, [pc, #276]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003142:	f043 0320 	orr.w	r3, r3, #32
 8003146:	6313      	str	r3, [r2, #48]	; 0x30
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	6313      	str	r3, [r2, #48]	; 0x30
 8003164:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4a37      	ldr	r2, [pc, #220]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	6313      	str	r3, [r2, #48]	; 0x30
 8003180:	4b35      	ldr	r3, [pc, #212]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 8003196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319a:	6313      	str	r3, [r2, #48]	; 0x30
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_QSPI_MspInit+0x17c>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80031a8:	2304      	movs	r3, #4
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031b8:	2309      	movs	r3, #9
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c0:	4619      	mov	r1, r3
 80031c2:	4826      	ldr	r0, [pc, #152]	; (800325c <HAL_QSPI_MspInit+0x180>)
 80031c4:	f001 f9c6 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80031c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031da:	230a      	movs	r3, #10
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e2:	4619      	mov	r1, r3
 80031e4:	481e      	ldr	r0, [pc, #120]	; (8003260 <HAL_QSPI_MspInit+0x184>)
 80031e6:	f001 f9b5 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80031ea:	2304      	movs	r3, #4
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031fa:	2309      	movs	r3, #9
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003202:	4619      	mov	r1, r3
 8003204:	4817      	ldr	r0, [pc, #92]	; (8003264 <HAL_QSPI_MspInit+0x188>)
 8003206:	f001 f9a5 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800320a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800321c:	2309      	movs	r3, #9
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8003220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003224:	4619      	mov	r1, r3
 8003226:	4810      	ldr	r0, [pc, #64]	; (8003268 <HAL_QSPI_MspInit+0x18c>)
 8003228:	f001 f994 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800323c:	230a      	movs	r3, #10
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	4619      	mov	r1, r3
 8003246:	4809      	ldr	r0, [pc, #36]	; (800326c <HAL_QSPI_MspInit+0x190>)
 8003248:	f001 f984 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	3738      	adds	r7, #56	; 0x38
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	a0001000 	.word	0xa0001000
 8003258:	40023800 	.word	0x40023800
 800325c:	40021000 	.word	0x40021000
 8003260:	40021400 	.word	0x40021400
 8003264:	40020400 	.word	0x40020400
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40021800 	.word	0x40021800

08003270 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a28      	ldr	r2, [pc, #160]	; (8003330 <HAL_SD_MspInit+0xc0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d14a      	bne.n	8003328 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_SD_MspInit+0xc4>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_SD_MspInit+0xc4>)
 800329c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_SD_MspInit+0xc4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032f6:	230c      	movs	r3, #12
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	480d      	ldr	r0, [pc, #52]	; (8003338 <HAL_SD_MspInit+0xc8>)
 8003302:	f001 f927 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8003306:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800330a:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003318:	230c      	movs	r3, #12
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	4806      	ldr	r0, [pc, #24]	; (800333c <HAL_SD_MspInit+0xcc>)
 8003324:	f001 f916 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40023800 	.word	0x40023800
 8003338:	40020000 	.word	0x40020000
 800333c:	40020800 	.word	0x40020800

08003340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_UART_MspInit+0xfc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12d      	bne.n	80033be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_UART_MspInit+0x100>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_UART_MspInit+0x100>)
 800336c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_UART_MspInit+0x100>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <HAL_UART_MspInit+0x100>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_UART_MspInit+0x100>)
 8003388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_UART_MspInit+0x100>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800339a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80033ac:	230b      	movs	r3, #11
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	4619      	mov	r1, r3
 80033b6:	4823      	ldr	r0, [pc, #140]	; (8003444 <HAL_UART_MspInit+0x104>)
 80033b8:	f001 f8cc 	bl	8004554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80033bc:	e039      	b.n	8003432 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_UART_MspInit+0x108>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d134      	bne.n	8003432 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033d2:	f043 0320 	orr.w	r3, r3, #32
 80033d6:	6453      	str	r3, [r2, #68]	; 0x44
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8003400:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340e:	2303      	movs	r3, #3
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003412:	2308      	movs	r3, #8
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	4619      	mov	r1, r3
 800341c:	4809      	ldr	r0, [pc, #36]	; (8003444 <HAL_UART_MspInit+0x104>)
 800341e:	f001 f899 	bl	8004554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	2047      	movs	r0, #71	; 0x47
 8003428:	f000 fd4c 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800342c:	2047      	movs	r0, #71	; 0x47
 800342e:	f000 fd65 	bl	8003efc <HAL_NVIC_EnableIRQ>
}
 8003432:	bf00      	nop
 8003434:	3730      	adds	r7, #48	; 0x30
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40011c00 	.word	0x40011c00
 8003440:	40023800 	.word	0x40023800
 8003444:	40021800 	.word	0x40021800
 8003448:	40011400 	.word	0x40011400

0800344c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_FSMC_MspInit+0xc8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d151      	bne.n	800350c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8003468:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_FSMC_MspInit+0xc8>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_FSMC_MspInit+0xcc>)
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	4a28      	ldr	r2, [pc, #160]	; (8003518 <HAL_FSMC_MspInit+0xcc>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6393      	str	r3, [r2, #56]	; 0x38
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_FSMC_MspInit+0xcc>)
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800348a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800348e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800349c:	230c      	movs	r3, #12
 800349e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	481d      	ldr	r0, [pc, #116]	; (800351c <HAL_FSMC_MspInit+0xd0>)
 80034a6:	f001 f855 	bl	8004554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80034aa:	f240 433f 	movw	r3, #1087	; 0x43f
 80034ae:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b8:	2303      	movs	r3, #3
 80034ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80034bc:	230c      	movs	r3, #12
 80034be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4816      	ldr	r0, [pc, #88]	; (8003520 <HAL_FSMC_MspInit+0xd4>)
 80034c6:	f001 f845 	bl	8004554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80034ca:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034ce:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80034dc:	230c      	movs	r3, #12
 80034de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	480f      	ldr	r0, [pc, #60]	; (8003524 <HAL_FSMC_MspInit+0xd8>)
 80034e6:	f001 f835 	bl	8004554 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80034ea:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80034ee:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80034fc:	230c      	movs	r3, #12
 80034fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	4619      	mov	r1, r3
 8003504:	4808      	ldr	r0, [pc, #32]	; (8003528 <HAL_FSMC_MspInit+0xdc>)
 8003506:	f001 f825 	bl	8004554 <HAL_GPIO_Init>
 800350a:	e000      	b.n	800350e <HAL_FSMC_MspInit+0xc2>
    return;
 800350c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	2000045c 	.word	0x2000045c
 8003518:	40023800 	.word	0x40023800
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021000 	.word	0x40021000
 8003528:	40020c00 	.word	0x40020c00

0800352c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003534:	f7ff ff8a 	bl	800344c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003550:	2200      	movs	r2, #0
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	2036      	movs	r0, #54	; 0x36
 8003556:	f000 fcb5 	bl	8003ec4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800355a:	2036      	movs	r0, #54	; 0x36
 800355c:	f000 fcce 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <HAL_InitTick+0xa0>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <HAL_InitTick+0xa0>)
 800356a:	f043 0310 	orr.w	r3, r3, #16
 800356e:	6413      	str	r3, [r2, #64]	; 0x40
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_InitTick+0xa0>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800357c:	f107 0210 	add.w	r2, r7, #16
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f003 fdd8 	bl	800713c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800358c:	f003 fdae 	bl	80070ec <HAL_RCC_GetPCLK1Freq>
 8003590:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <HAL_InitTick+0xa4>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	3b01      	subs	r3, #1
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <HAL_InitTick+0xa8>)
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <HAL_InitTick+0xac>)
 80035a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_InitTick+0xa8>)
 80035a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <HAL_InitTick+0xa8>)
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_InitTick+0xa8>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_InitTick+0xa8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <HAL_InitTick+0xa8>)
 80035c2:	f005 f9cd 	bl	8008960 <HAL_TIM_Base_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <HAL_InitTick+0xa8>)
 80035ce:	f005 f9fc 	bl	80089ca <HAL_TIM_Base_Start_IT>
 80035d2:	4603      	mov	r3, r0
 80035d4:	e000      	b.n	80035d8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3730      	adds	r7, #48	; 0x30
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	20004db8 	.word	0x20004db8
 80035ec:	40001000 	.word	0x40001000

080035f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003602:	e7fe      	b.n	8003602 <HardFault_Handler+0x4>

08003604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <MemManage_Handler+0x4>

0800360a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800360e:	e7fe      	b.n	800360e <BusFault_Handler+0x4>

08003610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <UsageFault_Handler+0x4>

08003616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <TIM6_DAC_IRQHandler+0x20>)
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003632:	4804      	ldr	r0, [pc, #16]	; (8003644 <TIM6_DAC_IRQHandler+0x20>)
 8003634:	f000 fc92 	bl	8003f5c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003638:	4803      	ldr	r0, [pc, #12]	; (8003648 <TIM6_DAC_IRQHandler+0x24>)
 800363a:	f005 f9ea 	bl	8008a12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200000fc 	.word	0x200000fc
 8003648:	20004db8 	.word	0x20004db8

0800364c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <OTG_FS_IRQHandler+0x10>)
 8003652:	f001 fbbb 	bl	8004dcc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20005244 	.word	0x20005244

08003660 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <USART6_IRQHandler+0x10>)
 8003666:	f005 fc5b 	bl	8008f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000035c 	.word	0x2000035c

08003674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	return 1;
 8003678:	2301      	movs	r3, #1
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_kill>:

int _kill(int pid, int sig)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800368e:	f00e faf9 	bl	8011c84 <__errno>
 8003692:	4603      	mov	r3, r0
 8003694:	2216      	movs	r2, #22
 8003696:	601a      	str	r2, [r3, #0]
	return -1;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_exit>:

void _exit (int status)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ffe7 	bl	8003684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036b6:	e7fe      	b.n	80036b6 <_exit+0x12>

080036b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e8:	f00e facc 	bl	8011c84 <__errno>
 80036ec:	4603      	mov	r3, r0
 80036ee:	220c      	movs	r2, #12
 80036f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20050000 	.word	0x20050000
 8003718:	00000400 	.word	0x00000400
 800371c:	20000460 	.word	0x20000460
 8003720:	20005518 	.word	0x20005518

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SystemInit+0x28>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <SystemInit+0x28>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <SystemInit+0x28>)
 800373a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800373e:	609a      	str	r2, [r3, #8]
#endif
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003754:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003756:	e003      	b.n	8003760 <LoopCopyDataInit>

08003758 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800375a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800375c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800375e:	3104      	adds	r1, #4

08003760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003764:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003766:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003768:	d3f6      	bcc.n	8003758 <CopyDataInit>
  ldr  r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800376c:	e002      	b.n	8003774 <LoopFillZerobss>

0800376e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800376e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003770:	f842 3b04 	str.w	r3, [r2], #4

08003774 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003776:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003778:	d3f9      	bcc.n	800376e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800377a:	f7ff ffd3 	bl	8003724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f00e fa87 	bl	8011c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7fd fdb9 	bl	80012f8 <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003788:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800378c:	080120a0 	.word	0x080120a0
  ldr  r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003794:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8003798:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 800379c:	20005518 	.word	0x20005518

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 fb6e 	bl	8003eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7ff feb4 	bl	8003540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff f97c 	bl	8002ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_IncTick+0x20>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_IncTick+0x24>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_IncTick+0x24>)
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000008 	.word	0x20000008
 800380c:	20004df8 	.word	0x20004df8

08003810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return uwTick;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_GetTick+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20004df8 	.word	0x20004df8

08003828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7ff ffee 	bl	8003810 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d005      	beq.n	800384e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_Delay+0x44>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800384e:	bf00      	nop
 8003850:	f7ff ffde 	bl	8003810 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d8f7      	bhi.n	8003850 <HAL_Delay+0x28>
  {
  }
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000008 	.word	0x20000008

08003870 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e033      	b.n	80038ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff f948 	bl	8002b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d118      	bne.n	80038e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038b6:	f023 0302 	bic.w	r3, r3, #2
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f94a 	bl	8003b5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
 80038de:	e001      	b.n	80038e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e113      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x244>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d925      	bls.n	8003970 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	3b1e      	subs	r3, #30
 800393a:	2207      	movs	r2, #7
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43da      	mvns	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	400a      	ands	r2, r1
 8003948:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68d9      	ldr	r1, [r3, #12]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	4618      	mov	r0, r3
 800395c:	4603      	mov	r3, r0
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4403      	add	r3, r0
 8003962:	3b1e      	subs	r3, #30
 8003964:	409a      	lsls	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	e022      	b.n	80039b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6919      	ldr	r1, [r3, #16]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	2207      	movs	r2, #7
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	400a      	ands	r2, r1
 8003992:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6919      	ldr	r1, [r3, #16]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4618      	mov	r0, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4403      	add	r3, r0
 80039ac:	409a      	lsls	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d824      	bhi.n	8003a08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	3b05      	subs	r3, #5
 80039d0:	221f      	movs	r2, #31
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	400a      	ands	r2, r1
 80039de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b05      	subs	r3, #5
 80039fa:	fa00 f203 	lsl.w	r2, r0, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
 8003a06:	e04c      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d824      	bhi.n	8003a5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b23      	subs	r3, #35	; 0x23
 8003a22:	221f      	movs	r2, #31
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	400a      	ands	r2, r1
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b23      	subs	r3, #35	; 0x23
 8003a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
 8003a58:	e023      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b41      	subs	r3, #65	; 0x41
 8003a6c:	221f      	movs	r2, #31
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	400a      	ands	r2, r1
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4618      	mov	r0, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	3b41      	subs	r3, #65	; 0x41
 8003a96:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aa2:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <HAL_ADC_ConfigChannel+0x250>)
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_ADC_ConfigChannel+0x254>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10f      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1d8>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b12      	cmp	r3, #18
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_ADC_ConfigChannel+0x254>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d12b      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x23a>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_ADC_ConfigChannel+0x258>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <HAL_ADC_ConfigChannel+0x1f4>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b11      	cmp	r3, #17
 8003aea:	d122      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <HAL_ADC_ConfigChannel+0x258>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d111      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b0e:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_ADC_ConfigChannel+0x25c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <HAL_ADC_ConfigChannel+0x260>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9a      	lsrs	r2, r3, #18
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b24:	e002      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f9      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012300 	.word	0x40012300
 8003b4c:	40012000 	.word	0x40012000
 8003b50:	10000012 	.word	0x10000012
 8003b54:	20000000 	.word	0x20000000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b64:	4b79      	ldr	r3, [pc, #484]	; (8003d4c <ADC_Init+0x1f0>)
 8003b66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	021a      	lsls	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6899      	ldr	r1, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	4a58      	ldr	r2, [pc, #352]	; (8003d50 <ADC_Init+0x1f4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	e00f      	b.n	8003c5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0202 	bic.w	r2, r2, #2
 8003c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6899      	ldr	r1, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7e1b      	ldrb	r3, [r3, #24]
 8003c74:	005a      	lsls	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ca6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	035a      	lsls	r2, r3, #13
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	e007      	b.n	8003cd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	051a      	lsls	r2, r3, #20
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6899      	ldr	r1, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d12:	025a      	lsls	r2, r3, #9
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6899      	ldr	r1, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	029a      	lsls	r2, r3, #10
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40012300 	.word	0x40012300
 8003d50:	0f000001 	.word	0x0f000001

08003d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d70:	4013      	ands	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d86:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <__NVIC_SetPriorityGrouping+0x44>)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	60d3      	str	r3, [r2, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <__NVIC_GetPriorityGrouping+0x18>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	f003 0307 	and.w	r3, r3, #7
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	db0b      	blt.n	8003de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	4907      	ldr	r1, [pc, #28]	; (8003df0 <__NVIC_EnableIRQ+0x38>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2001      	movs	r0, #1
 8003dda:	fa00 f202 	lsl.w	r2, r0, r2
 8003dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	e000e100 	.word	0xe000e100

08003df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db0a      	blt.n	8003e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	490c      	ldr	r1, [pc, #48]	; (8003e40 <__NVIC_SetPriority+0x4c>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e1c:	e00a      	b.n	8003e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4908      	ldr	r1, [pc, #32]	; (8003e44 <__NVIC_SetPriority+0x50>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	761a      	strb	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000e100 	.word	0xe000e100
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f1c3 0307 	rsb	r3, r3, #7
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	bf28      	it	cs
 8003e66:	2304      	movcs	r3, #4
 8003e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d902      	bls.n	8003e78 <NVIC_EncodePriority+0x30>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	3b03      	subs	r3, #3
 8003e76:	e000      	b.n	8003e7a <NVIC_EncodePriority+0x32>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e90:	f04f 31ff 	mov.w	r1, #4294967295
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	43d9      	mvns	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea0:	4313      	orrs	r3, r2
         );
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff4c 	bl	8003d54 <__NVIC_SetPriorityGrouping>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed6:	f7ff ff61 	bl	8003d9c <__NVIC_GetPriorityGrouping>
 8003eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6978      	ldr	r0, [r7, #20]
 8003ee2:	f7ff ffb1 	bl	8003e48 <NVIC_EncodePriority>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff80 	bl	8003df4 <__NVIC_SetPriority>
}
 8003ef4:	bf00      	nop
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ff54 	bl	8003db8 <__NVIC_EnableIRQ>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e014      	b.n	8003f54 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	791b      	ldrb	r3, [r3, #4]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe fe6e 	bl	8002c1c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f72:	d118      	bne.n	8003fa6 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2204      	movs	r2, #4
 8003f78:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f825 	bl	8003ff0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb4:	d118      	bne.n	8003fe8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f043 0202 	orr.w	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003fe0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f85b 	bl	800409e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	795b      	ldrb	r3, [r3, #5]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_DAC_ConfigChannel+0x20>
 8004020:	2302      	movs	r3, #2
 8004022:	e036      	b.n	8004092 <HAL_DAC_ConfigChannel+0x8e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2202      	movs	r2, #2
 800402e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004038:	f640 72fe 	movw	r2, #4094	; 0xffe
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4013      	ands	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	22c0      	movs	r2, #192	; 0xc0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43da      	mvns	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	400a      	ands	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0cf      	b.n	8004266 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a69      	ldr	r2, [pc, #420]	; (8004270 <HAL_DFSDM_ChannelInit+0x1bc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_DFSDM_ChannelInit+0x3a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a67      	ldr	r2, [pc, #412]	; (8004274 <HAL_DFSDM_ChannelInit+0x1c0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_DFSDM_ChannelInit+0x3a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a66      	ldr	r2, [pc, #408]	; (8004278 <HAL_DFSDM_ChannelInit+0x1c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_DFSDM_ChannelInit+0x3a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a64      	ldr	r2, [pc, #400]	; (800427c <HAL_DFSDM_ChannelInit+0x1c8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d106      	bne.n	80040fc <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80040ee:	4b64      	ldr	r3, [pc, #400]	; (8004280 <HAL_DFSDM_ChannelInit+0x1cc>)
 80040f0:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80040f2:	4b64      	ldr	r3, [pc, #400]	; (8004284 <HAL_DFSDM_ChannelInit+0x1d0>)
 80040f4:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80040f6:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <HAL_DFSDM_ChannelInit+0x1bc>)
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e005      	b.n	8004108 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80040fc:	4b62      	ldr	r3, [pc, #392]	; (8004288 <HAL_DFSDM_ChannelInit+0x1d4>)
 80040fe:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004100:	4b62      	ldr	r3, [pc, #392]	; (800428c <HAL_DFSDM_ChannelInit+0x1d8>)
 8004102:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8004104:	4b62      	ldr	r3, [pc, #392]	; (8004290 <HAL_DFSDM_ChannelInit+0x1dc>)
 8004106:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f8c1 	bl	8004294 <DFSDM_GetChannelFromInstance>
 8004112:	4603      	mov	r3, r0
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0a0      	b.n	8004266 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fe fdc5 	bl	8002cb4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d125      	bne.n	8004188 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	791b      	ldrb	r3, [r3, #4]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d108      	bne.n	800417c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004196:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80041a6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80041ac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 020f 	bic.w	r2, r2, #15
 80041c4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80041ec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f002 0207 	and.w	r2, r2, #7
 8004218:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004244:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f81e 	bl	8004294 <DFSDM_GetChannelFromInstance>
 8004258:	4603      	mov	r3, r0
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40016000 	.word	0x40016000
 8004274:	40016020 	.word	0x40016020
 8004278:	40016040 	.word	0x40016040
 800427c:	40016060 	.word	0x40016060
 8004280:	20000464 	.word	0x20000464
 8004284:	20000468 	.word	0x20000468
 8004288:	20000478 	.word	0x20000478
 800428c:	2000047c 	.word	0x2000047c
 8004290:	40016400 	.word	0x40016400

08004294 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a24      	ldr	r2, [pc, #144]	; (8004330 <DFSDM_GetChannelFromInstance+0x9c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <DFSDM_GetChannelFromInstance+0x18>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <DFSDM_GetChannelFromInstance+0xa0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d102      	bne.n	80042b2 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e037      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a20      	ldr	r2, [pc, #128]	; (8004338 <DFSDM_GetChannelFromInstance+0xa4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <DFSDM_GetChannelFromInstance+0x2e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1f      	ldr	r2, [pc, #124]	; (800433c <DFSDM_GetChannelFromInstance+0xa8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d102      	bne.n	80042c8 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80042c2:	2301      	movs	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e02c      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <DFSDM_GetChannelFromInstance+0xac>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <DFSDM_GetChannelFromInstance+0x44>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <DFSDM_GetChannelFromInstance+0xb0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d102      	bne.n	80042de <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80042d8:	2302      	movs	r3, #2
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e021      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <DFSDM_GetChannelFromInstance+0xb4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <DFSDM_GetChannelFromInstance+0x5a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <DFSDM_GetChannelFromInstance+0xb8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d102      	bne.n	80042f4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80042ee:	2303      	movs	r3, #3
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e016      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <DFSDM_GetChannelFromInstance+0xbc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d102      	bne.n	8004302 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80042fc:	2304      	movs	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e00f      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a13      	ldr	r2, [pc, #76]	; (8004354 <DFSDM_GetChannelFromInstance+0xc0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d102      	bne.n	8004310 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800430a:	2305      	movs	r3, #5
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e008      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <DFSDM_GetChannelFromInstance+0xc4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d102      	bne.n	800431e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004318:	2306      	movs	r3, #6
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e001      	b.n	8004322 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800431e:	2307      	movs	r3, #7
 8004320:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8004322:	68fb      	ldr	r3, [r7, #12]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40016000 	.word	0x40016000
 8004334:	40016400 	.word	0x40016400
 8004338:	40016020 	.word	0x40016020
 800433c:	40016420 	.word	0x40016420
 8004340:	40016040 	.word	0x40016040
 8004344:	40016440 	.word	0x40016440
 8004348:	40016060 	.word	0x40016060
 800434c:	40016460 	.word	0x40016460
 8004350:	40016480 	.word	0x40016480
 8004354:	400164a0 	.word	0x400164a0
 8004358:	400164c0 	.word	0x400164c0

0800435c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d004      	beq.n	800437a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e00c      	b.n	8004394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2205      	movs	r2, #5
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e081      	b.n	80044b6 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe fd86 	bl	8002ed8 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	; 0x24
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004400:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	e006      	b.n	8004428 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d104      	bne.n	800443a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800445c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	ea42 0103 	orr.w	r1, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	021a      	lsls	r2, r3, #8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d138      	bne.n	8004546 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80044de:	2302      	movs	r3, #2
 80044e0:	e032      	b.n	8004548 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004510:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e165      	b.n	800483c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004570:	2201      	movs	r2, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	429a      	cmp	r2, r3
 800458a:	f040 8154 	bne.w	8004836 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d00b      	beq.n	80045ae <HAL_GPIO_Init+0x5a>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d007      	beq.n	80045ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045a2:	2b11      	cmp	r3, #17
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b12      	cmp	r3, #18
 80045ac:	d130      	bne.n	8004610 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e4:	2201      	movs	r2, #1
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 0201 	and.w	r2, r3, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	2203      	movs	r2, #3
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0xfc>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b12      	cmp	r3, #18
 800464e:	d123      	bne.n	8004698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	08da      	lsrs	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3208      	adds	r2, #8
 8004658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	220f      	movs	r2, #15
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	08da      	lsrs	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3208      	adds	r2, #8
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2203      	movs	r2, #3
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80ae 	beq.w	8004836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	4b5d      	ldr	r3, [pc, #372]	; (8004854 <HAL_GPIO_Init+0x300>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	4a5c      	ldr	r2, [pc, #368]	; (8004854 <HAL_GPIO_Init+0x300>)
 80046e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ea:	4b5a      	ldr	r3, [pc, #360]	; (8004854 <HAL_GPIO_Init+0x300>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046f6:	4a58      	ldr	r2, [pc, #352]	; (8004858 <HAL_GPIO_Init+0x304>)
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	089b      	lsrs	r3, r3, #2
 80046fc:	3302      	adds	r3, #2
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a4f      	ldr	r2, [pc, #316]	; (800485c <HAL_GPIO_Init+0x308>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d025      	beq.n	800476e <HAL_GPIO_Init+0x21a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a4e      	ldr	r2, [pc, #312]	; (8004860 <HAL_GPIO_Init+0x30c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d01f      	beq.n	800476a <HAL_GPIO_Init+0x216>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4d      	ldr	r2, [pc, #308]	; (8004864 <HAL_GPIO_Init+0x310>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d019      	beq.n	8004766 <HAL_GPIO_Init+0x212>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a4c      	ldr	r2, [pc, #304]	; (8004868 <HAL_GPIO_Init+0x314>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_GPIO_Init+0x20e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4b      	ldr	r2, [pc, #300]	; (800486c <HAL_GPIO_Init+0x318>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00d      	beq.n	800475e <HAL_GPIO_Init+0x20a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4a      	ldr	r2, [pc, #296]	; (8004870 <HAL_GPIO_Init+0x31c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <HAL_GPIO_Init+0x206>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a49      	ldr	r2, [pc, #292]	; (8004874 <HAL_GPIO_Init+0x320>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <HAL_GPIO_Init+0x202>
 8004752:	2306      	movs	r3, #6
 8004754:	e00c      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 8004756:	2307      	movs	r3, #7
 8004758:	e00a      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 800475a:	2305      	movs	r3, #5
 800475c:	e008      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 800475e:	2304      	movs	r3, #4
 8004760:	e006      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 8004762:	2303      	movs	r3, #3
 8004764:	e004      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 8004766:	2302      	movs	r3, #2
 8004768:	e002      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_GPIO_Init+0x21c>
 800476e:	2300      	movs	r3, #0
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	f002 0203 	and.w	r2, r2, #3
 8004776:	0092      	lsls	r2, r2, #2
 8004778:	4093      	lsls	r3, r2
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004780:	4935      	ldr	r1, [pc, #212]	; (8004858 <HAL_GPIO_Init+0x304>)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	3302      	adds	r3, #2
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800478e:	4b3a      	ldr	r3, [pc, #232]	; (8004878 <HAL_GPIO_Init+0x324>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b2:	4a31      	ldr	r2, [pc, #196]	; (8004878 <HAL_GPIO_Init+0x324>)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_GPIO_Init+0x324>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_GPIO_Init+0x324>)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <HAL_GPIO_Init+0x324>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4013      	ands	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004806:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <HAL_GPIO_Init+0x324>)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_GPIO_Init+0x324>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004830:	4a11      	ldr	r2, [pc, #68]	; (8004878 <HAL_GPIO_Init+0x324>)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	f67f ae96 	bls.w	8004570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	3724      	adds	r7, #36	; 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	40013800 	.word	0x40013800
 800485c:	40020000 	.word	0x40020000
 8004860:	40020400 	.word	0x40020400
 8004864:	40020800 	.word	0x40020800
 8004868:	40020c00 	.word	0x40020c00
 800486c:	40021000 	.word	0x40021000
 8004870:	40021400 	.word	0x40021400
 8004874:	40021800 	.word	0x40021800
 8004878:	40013c00 	.word	0x40013c00

0800487c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
 8004888:	4613      	mov	r3, r2
 800488a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800488c:	787b      	ldrb	r3, [r7, #1]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004898:	e003      	b.n	80048a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	041a      	lsls	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	619a      	str	r2, [r3, #24]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b0:	b08f      	sub	sp, #60	; 0x3c
 80048b2:	af0a      	add	r7, sp, #40	; 0x28
 80048b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e054      	b.n	800496a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f00b ff42 	bl	8010764 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2203      	movs	r2, #3
 80048e4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f005 ff02 	bl	800a708 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	687e      	ldr	r6, [r7, #4]
 800490c:	466d      	mov	r5, sp
 800490e:	f106 0410 	add.w	r4, r6, #16
 8004912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800491a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800491e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004922:	1d33      	adds	r3, r6, #4
 8004924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	f005 fe7c 	bl	800a624 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fef9 	bl	800a72a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	687e      	ldr	r6, [r7, #4]
 8004940:	466d      	mov	r5, sp
 8004942:	f106 0410 	add.w	r4, r6, #16
 8004946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800494c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800494e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004952:	e885 0003 	stmia.w	r5, {r0, r1}
 8004956:	1d33      	adds	r3, r6, #4
 8004958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f006 f80c 	bl	800a978 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004972 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004972:	b590      	push	{r4, r7, lr}
 8004974:	b089      	sub	sp, #36	; 0x24
 8004976:	af04      	add	r7, sp, #16
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	4608      	mov	r0, r1
 800497c:	4611      	mov	r1, r2
 800497e:	461a      	mov	r2, r3
 8004980:	4603      	mov	r3, r0
 8004982:	70fb      	strb	r3, [r7, #3]
 8004984:	460b      	mov	r3, r1
 8004986:	70bb      	strb	r3, [r7, #2]
 8004988:	4613      	mov	r3, r2
 800498a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_HCD_HC_Init+0x28>
 8004996:	2302      	movs	r3, #2
 8004998:	e07f      	b.n	8004a9a <HAL_HCD_HC_Init+0x128>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	440b      	add	r3, r1
 80049b0:	333d      	adds	r3, #61	; 0x3d
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	3338      	adds	r3, #56	; 0x38
 80049c6:	787a      	ldrb	r2, [r7, #1]
 80049c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	3340      	adds	r3, #64	; 0x40
 80049da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	440b      	add	r3, r1
 80049ec:	3339      	adds	r3, #57	; 0x39
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	440b      	add	r3, r1
 8004a00:	333f      	adds	r3, #63	; 0x3f
 8004a02:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	78bb      	ldrb	r3, [r7, #2]
 8004a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a10:	b2d8      	uxtb	r0, r3
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	333a      	adds	r3, #58	; 0x3a
 8004a20:	4602      	mov	r2, r0
 8004a22:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da0a      	bge.n	8004a42 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	440b      	add	r3, r1
 8004a3a:	333b      	adds	r3, #59	; 0x3b
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e009      	b.n	8004a56 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	440b      	add	r3, r1
 8004a50:	333b      	adds	r3, #59	; 0x3b
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	440b      	add	r3, r1
 8004a64:	333c      	adds	r3, #60	; 0x3c
 8004a66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a6a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	787c      	ldrb	r4, [r7, #1]
 8004a72:	78ba      	ldrb	r2, [r7, #2]
 8004a74:	78f9      	ldrb	r1, [r7, #3]
 8004a76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	4623      	mov	r3, r4
 8004a88:	f006 f8f2 	bl	800ac70 <USB_HC_Init>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd90      	pop	{r4, r7, pc}

08004aa2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_HCD_HC_Halt+0x1e>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e00f      	b.n	8004ae0 <HAL_HCD_HC_Halt+0x3e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f006 fb2c 	bl	800b12e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	4608      	mov	r0, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	70fb      	strb	r3, [r7, #3]
 8004afa:	460b      	mov	r3, r1
 8004afc:	70bb      	strb	r3, [r7, #2]
 8004afe:	4613      	mov	r3, r2
 8004b00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	333b      	adds	r3, #59	; 0x3b
 8004b12:	78ba      	ldrb	r2, [r7, #2]
 8004b14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	333f      	adds	r3, #63	; 0x3f
 8004b26:	787a      	ldrb	r2, [r7, #1]
 8004b28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b2a:	7c3b      	ldrb	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d114      	bne.n	8004b5a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3342      	adds	r3, #66	; 0x42
 8004b40:	2203      	movs	r2, #3
 8004b42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	440b      	add	r3, r1
 8004b52:	333d      	adds	r3, #61	; 0x3d
 8004b54:	7f3a      	ldrb	r2, [r7, #28]
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e009      	b.n	8004b6e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b5a:	78fa      	ldrb	r2, [r7, #3]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	440b      	add	r3, r1
 8004b68:	3342      	adds	r3, #66	; 0x42
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b6e:	787b      	ldrb	r3, [r7, #1]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	f200 80d6 	bhi.w	8004d22 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004d0d 	.word	0x08004d0d
 8004b84:	08004bf9 	.word	0x08004bf9
 8004b88:	08004c83 	.word	0x08004c83
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b8c:	7c3b      	ldrb	r3, [r7, #16]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	f040 80c9 	bne.w	8004d26 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004b94:	78bb      	ldrb	r3, [r7, #2]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80c5 	bne.w	8004d26 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004b9c:	8b3b      	ldrh	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	3351      	adds	r3, #81	; 0x51
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3351      	adds	r3, #81	; 0x51
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	440b      	add	r3, r1
 8004bda:	3342      	adds	r3, #66	; 0x42
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004be0:	e0a1      	b.n	8004d26 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	440b      	add	r3, r1
 8004bf0:	3342      	adds	r3, #66	; 0x42
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	701a      	strb	r2, [r3, #0]
      break;
 8004bf6:	e096      	b.n	8004d26 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004bf8:	78bb      	ldrb	r3, [r7, #2]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d120      	bne.n	8004c40 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3351      	adds	r3, #81	; 0x51
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	3342      	adds	r3, #66	; 0x42
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004c28:	e07e      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	3342      	adds	r3, #66	; 0x42
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	e073      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3350      	adds	r3, #80	; 0x50
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	3342      	adds	r3, #66	; 0x42
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
      break;
 8004c6a:	e05d      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	440b      	add	r3, r1
 8004c7a:	3342      	adds	r3, #66	; 0x42
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	701a      	strb	r2, [r3, #0]
      break;
 8004c80:	e052      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c82:	78bb      	ldrb	r3, [r7, #2]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d120      	bne.n	8004cca <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	440b      	add	r3, r1
 8004c96:	3351      	adds	r3, #81	; 0x51
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	440b      	add	r3, r1
 8004cac:	3342      	adds	r3, #66	; 0x42
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cb2:	e039      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3342      	adds	r3, #66	; 0x42
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	701a      	strb	r2, [r3, #0]
      break;
 8004cc8:	e02e      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3350      	adds	r3, #80	; 0x50
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	3342      	adds	r3, #66	; 0x42
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
      break;
 8004cf4:	e018      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	3342      	adds	r3, #66	; 0x42
 8004d06:	2202      	movs	r2, #2
 8004d08:	701a      	strb	r2, [r3, #0]
      break;
 8004d0a:	e00d      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	3342      	adds	r3, #66	; 0x42
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
      break;
 8004d20:	e002      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004d22:	bf00      	nop
 8004d24:	e000      	b.n	8004d28 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004d26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	440b      	add	r3, r1
 8004d36:	3344      	adds	r3, #68	; 0x44
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	8b39      	ldrh	r1, [r7, #24]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4403      	add	r3, r0
 8004d4c:	3348      	adds	r3, #72	; 0x48
 8004d4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	440b      	add	r3, r1
 8004d5e:	335c      	adds	r3, #92	; 0x5c
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	440b      	add	r3, r1
 8004d72:	334c      	adds	r3, #76	; 0x4c
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	3339      	adds	r3, #57	; 0x39
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	440b      	add	r3, r1
 8004d9a:	335d      	adds	r3, #93	; 0x5d
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	3338      	adds	r3, #56	; 0x38
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	18d1      	adds	r1, r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f006 f862 	bl	800ae84 <USB_HC_StartXfer>
 8004dc0:	4603      	mov	r3, r0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop

08004dcc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 fd85 	bl	800a8f2 <USB_GetMode>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	f040 80ef 	bne.w	8004fce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f005 fd69 	bl	800a8cc <USB_ReadInterrupts>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80e5 	beq.w	8004fcc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f005 fd60 	bl	800a8cc <USB_ReadInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e16:	d104      	bne.n	8004e22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f005 fd50 	bl	800a8cc <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e36:	d104      	bne.n	8004e42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f005 fd40 	bl	800a8cc <USB_ReadInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e56:	d104      	bne.n	8004e62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f005 fd30 	bl	800a8cc <USB_ReadInterrupts>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d103      	bne.n	8004e7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f005 fd22 	bl	800a8cc <USB_ReadInterrupts>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e92:	d115      	bne.n	8004ec0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d108      	bne.n	8004ec0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f00b fcd6 	bl	8010860 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f005 fe12 	bl	800aae4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 fd01 	bl	800a8cc <USB_ReadInterrupts>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed4:	d102      	bne.n	8004edc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 f968 	bl	80061ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f005 fcf3 	bl	800a8cc <USB_ReadInterrupts>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d106      	bne.n	8004efe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f00b fc99 	bl	8010828 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2208      	movs	r2, #8
 8004efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 fce2 	bl	800a8cc <USB_ReadInterrupts>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f12:	d138      	bne.n	8004f86 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f006 f8f7 	bl	800b10c <USB_HC_ReadInterrupt>
 8004f1e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e025      	b.n	8004f72 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f50:	d106      	bne.n	8004f60 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8cf 	bl	80050fc <HCD_HC_IN_IRQHandler>
 8004f5e:	e005      	b.n	8004f6c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fcfd 	bl	8005966 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d3d4      	bcc.n	8004f26 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f005 fc9e 	bl	800a8cc <USB_ReadInterrupts>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d101      	bne.n	8004f9e <HAL_HCD_IRQHandler+0x1d2>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_HCD_IRQHandler+0x1d4>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d014      	beq.n	8004fce <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0210 	bic.w	r2, r2, #16
 8004fb2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 f84b 	bl	8006050 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0210 	orr.w	r2, r2, #16
 8004fc8:	619a      	str	r2, [r3, #24]
 8004fca:	e000      	b.n	8004fce <HAL_HCD_IRQHandler+0x202>
      return;
 8004fcc:	bf00      	nop
    }
  }
}
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_HCD_Start+0x16>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e013      	b.n	8005012 <HAL_HCD_Start+0x3e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f005 fb75 	bl	800a6e6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f005 fdd2 	bl	800abac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_HCD_Stop+0x16>
 800502c:	2302      	movs	r3, #2
 800502e:	e00d      	b.n	800504c <HAL_HCD_Stop+0x32>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f006 f9b1 	bl	800b3a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f005 fd79 	bl	800ab58 <USB_ResetPort>
 8005066:	4603      	mov	r3, r0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	440b      	add	r3, r1
 800508a:	335c      	adds	r3, #92	; 0x5c
 800508c:	781b      	ldrb	r3, [r3, #0]
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	440b      	add	r3, r1
 80050b4:	334c      	adds	r3, #76	; 0x4c
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f005 fdbb 	bl	800ac4c <USB_GetCurrentFrame>
 80050d6:	4603      	mov	r3, r0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f005 fd96 	bl	800ac1e <USB_GetHostSpeed>
 80050f2:	4603      	mov	r3, r0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b04      	cmp	r3, #4
 800512a:	d119      	bne.n	8005160 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	461a      	mov	r2, r3
 800513a:	2304      	movs	r3, #4
 800513c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	440a      	add	r2, r1
 8005154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	60d3      	str	r3, [r2, #12]
 800515e:	e0ce      	b.n	80052fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d12c      	bne.n	80051d2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005184:	461a      	mov	r2, r3
 8005186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800518a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	440b      	add	r3, r1
 800519a:	335d      	adds	r3, #93	; 0x5d
 800519c:	2207      	movs	r2, #7
 800519e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ba:	f043 0302 	orr.w	r3, r3, #2
 80051be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f005 ffaf 	bl	800b12e <USB_HC_Halt>
 80051d0:	e095      	b.n	80052fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d109      	bne.n	80051fc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	2320      	movs	r3, #32
 80051f8:	6093      	str	r3, [r2, #8]
 80051fa:	e080      	b.n	80052fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b08      	cmp	r3, #8
 8005210:	d134      	bne.n	800527c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	440a      	add	r2, r1
 8005228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	440b      	add	r3, r1
 8005240:	335d      	adds	r3, #93	; 0x5d
 8005242:	2205      	movs	r2, #5
 8005244:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	461a      	mov	r2, r3
 8005254:	2310      	movs	r3, #16
 8005256:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	461a      	mov	r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f005 ff5a 	bl	800b12e <USB_HC_Halt>
 800527a:	e040      	b.n	80052fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d134      	bne.n	80052fe <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4413      	add	r3, r2
 800529c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f005 ff35 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d0:	461a      	mov	r2, r3
 80052d2:	2310      	movs	r3, #16
 80052d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	440b      	add	r3, r1
 80052e4:	335d      	adds	r3, #93	; 0x5d
 80052e6:	2208      	movs	r2, #8
 80052e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	461a      	mov	r2, r3
 80052f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005314:	d122      	bne.n	800535c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	440a      	add	r2, r1
 800532c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005330:	f043 0302 	orr.w	r3, r3, #2
 8005334:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f005 fef4 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005358:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800535a:	e300      	b.n	800595e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	f040 80fd 	bne.w	800556e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	440b      	add	r3, r1
 800538a:	3348      	adds	r3, #72	; 0x48
 800538c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	0159      	lsls	r1, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	440b      	add	r3, r1
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80053a0:	1ad1      	subs	r1, r2, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4403      	add	r3, r0
 80053b0:	334c      	adds	r3, #76	; 0x4c
 80053b2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	440b      	add	r3, r1
 80053c2:	335d      	adds	r3, #93	; 0x5d
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	440b      	add	r3, r1
 80053d6:	3358      	adds	r3, #88	; 0x58
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	461a      	mov	r2, r3
 80053ea:	2301      	movs	r3, #1
 80053ec:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	333f      	adds	r3, #63	; 0x3f
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	440b      	add	r3, r1
 8005412:	333f      	adds	r3, #63	; 0x3f
 8005414:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005416:	2b02      	cmp	r3, #2
 8005418:	d121      	bne.n	800545e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f005 fe72 	bl	800b12e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	461a      	mov	r2, r3
 8005458:	2310      	movs	r3, #16
 800545a:	6093      	str	r3, [r2, #8]
 800545c:	e070      	b.n	8005540 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	440b      	add	r3, r1
 800546c:	333f      	adds	r3, #63	; 0x3f
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b03      	cmp	r3, #3
 8005472:	d12a      	bne.n	80054ca <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	440a      	add	r2, r1
 800548a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800548e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005492:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	335c      	adds	r3, #92	; 0x5c
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	b2d8      	uxtb	r0, r3
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	440b      	add	r3, r1
 80054ba:	335c      	adds	r3, #92	; 0x5c
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	4601      	mov	r1, r0
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f00b f9da 	bl	801087c <HAL_HCD_HC_NotifyURBChange_Callback>
 80054c8:	e03a      	b.n	8005540 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	333f      	adds	r3, #63	; 0x3f
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d12f      	bne.n	8005540 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	335c      	adds	r3, #92	; 0x5c
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	3350      	adds	r3, #80	; 0x50
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2d8      	uxtb	r0, r3
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	440b      	add	r3, r1
 800551a:	3350      	adds	r3, #80	; 0x50
 800551c:	4602      	mov	r2, r0
 800551e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	b2d8      	uxtb	r0, r3
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	440b      	add	r3, r1
 8005532:	335c      	adds	r3, #92	; 0x5c
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	4601      	mov	r1, r0
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f00b f99e 	bl	801087c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	440b      	add	r3, r1
 800554e:	3350      	adds	r3, #80	; 0x50
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f083 0301 	eor.w	r3, r3, #1
 8005556:	b2d8      	uxtb	r0, r3
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	3350      	adds	r3, #80	; 0x50
 8005568:	4602      	mov	r2, r0
 800556a:	701a      	strb	r2, [r3, #0]
}
 800556c:	e1f7      	b.n	800595e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	f040 811a 	bne.w	80057ba <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a0:	f023 0302 	bic.w	r3, r3, #2
 80055a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	440b      	add	r3, r1
 80055b4:	335d      	adds	r3, #93	; 0x5d
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d10a      	bne.n	80055d2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	440b      	add	r3, r1
 80055ca:	335c      	adds	r3, #92	; 0x5c
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e0d9      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	440b      	add	r3, r1
 80055e0:	335d      	adds	r3, #93	; 0x5d
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d10a      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	440b      	add	r3, r1
 80055f6:	335c      	adds	r3, #92	; 0x5c
 80055f8:	2205      	movs	r2, #5
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e0c3      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	335d      	adds	r3, #93	; 0x5d
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b06      	cmp	r3, #6
 8005612:	d00a      	beq.n	800562a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	335d      	adds	r3, #93	; 0x5d
 8005624:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005626:	2b08      	cmp	r3, #8
 8005628:	d156      	bne.n	80056d8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	3358      	adds	r3, #88	; 0x58
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	1c59      	adds	r1, r3, #1
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4403      	add	r3, r0
 800564c:	3358      	adds	r3, #88	; 0x58
 800564e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	3358      	adds	r3, #88	; 0x58
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d914      	bls.n	8005690 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	440b      	add	r3, r1
 8005674:	3358      	adds	r3, #88	; 0x58
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	440b      	add	r3, r1
 8005688:	335c      	adds	r3, #92	; 0x5c
 800568a:	2204      	movs	r2, #4
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e009      	b.n	80056a4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	440b      	add	r3, r1
 800569e:	335c      	adds	r3, #92	; 0x5c
 80056a0:	2202      	movs	r2, #2
 80056a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	461a      	mov	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e056      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	335d      	adds	r3, #93	; 0x5d
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d123      	bne.n	8005736 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	335c      	adds	r3, #92	; 0x5c
 80056fe:	2202      	movs	r2, #2
 8005700:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005718:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005720:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e027      	b.n	8005786 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	335d      	adds	r3, #93	; 0x5d
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b07      	cmp	r3, #7
 800574a:	d11c      	bne.n	8005786 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	3358      	adds	r3, #88	; 0x58
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1c59      	adds	r1, r3, #1
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	4403      	add	r3, r0
 800576e:	3358      	adds	r3, #88	; 0x58
 8005770:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	335c      	adds	r3, #92	; 0x5c
 8005782:	2204      	movs	r2, #4
 8005784:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	461a      	mov	r2, r3
 8005794:	2302      	movs	r3, #2
 8005796:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	b2d8      	uxtb	r0, r3
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335c      	adds	r3, #92	; 0x5c
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	4601      	mov	r1, r0
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f00b f862 	bl	801087c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057b8:	e0d1      	b.n	800595e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d13e      	bne.n	800584e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	0151      	lsls	r1, r2, #5
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	440a      	add	r2, r1
 80057e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	440b      	add	r3, r1
 80057fe:	3358      	adds	r3, #88	; 0x58
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	1c59      	adds	r1, r3, #1
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4403      	add	r3, r0
 8005812:	3358      	adds	r3, #88	; 0x58
 8005814:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	440b      	add	r3, r1
 8005824:	335d      	adds	r3, #93	; 0x5d
 8005826:	2206      	movs	r2, #6
 8005828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f005 fc7a 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005846:	461a      	mov	r2, r3
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	6093      	str	r3, [r2, #8]
}
 800584c:	e087      	b.n	800595e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b10      	cmp	r3, #16
 8005862:	d17c      	bne.n	800595e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	333f      	adds	r3, #63	; 0x3f
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d122      	bne.n	80058c0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	3358      	adds	r3, #88	; 0x58
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4413      	add	r3, r2
 8005896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f005 fc38 	bl	800b12e <USB_HC_Halt>
 80058be:	e045      	b.n	800594c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	440b      	add	r3, r1
 80058ce:	333f      	adds	r3, #63	; 0x3f
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	440b      	add	r3, r1
 80058e4:	333f      	adds	r3, #63	; 0x3f
 80058e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d12f      	bne.n	800594c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	440b      	add	r3, r1
 80058fa:	3358      	adds	r3, #88	; 0x58
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d121      	bne.n	800594c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	440b      	add	r3, r1
 8005916:	335d      	adds	r3, #93	; 0x5d
 8005918:	2203      	movs	r2, #3
 800591a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4413      	add	r3, r2
 8005924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	440a      	add	r2, r1
 8005932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005936:	f043 0302 	orr.w	r3, r3, #2
 800593a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f005 fbf1 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4413      	add	r3, r2
 8005954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005958:	461a      	mov	r2, r3
 800595a:	2310      	movs	r3, #16
 800595c:	6093      	str	r3, [r2, #8]
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d119      	bne.n	80059ca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	461a      	mov	r2, r3
 80059a4:	2304      	movs	r3, #4
 80059a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80059c8:	e33e      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d141      	bne.n	8005a64 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	461a      	mov	r2, r3
 80059ee:	2320      	movs	r3, #32
 80059f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	333d      	adds	r3, #61	; 0x3d
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 831f 	bne.w	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	440b      	add	r3, r1
 8005a18:	333d      	adds	r3, #61	; 0x3d
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	335c      	adds	r3, #92	; 0x5c
 8005a2e:	2202      	movs	r2, #2
 8005a30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4c:	f043 0302 	orr.w	r3, r3, #2
 8005a50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f005 fb66 	bl	800b12e <USB_HC_Halt>
}
 8005a62:	e2f1      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d13f      	bne.n	8005afa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	335d      	adds	r3, #93	; 0x5d
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	440b      	add	r3, r1
 8005a9c:	333d      	adds	r3, #61	; 0x3d
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	440b      	add	r3, r1
 8005ab0:	3358      	adds	r3, #88	; 0x58
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f005 fb24 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	461a      	mov	r2, r3
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	6093      	str	r3, [r2, #8]
}
 8005af8:	e2a6      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b10:	d122      	bne.n	8005b58 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f005 faf6 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b54:	6093      	str	r3, [r2, #8]
}
 8005b56:	e277      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d135      	bne.n	8005bda <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3358      	adds	r3, #88	; 0x58
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f005 fabe 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	440b      	add	r3, r1
 8005bd2:	335d      	adds	r3, #93	; 0x5d
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
}
 8005bd8:	e236      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d12b      	bne.n	8005c48 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2308      	movs	r3, #8
 8005c00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f005 fa7e 	bl	800b12e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	440b      	add	r3, r1
 8005c40:	335d      	adds	r3, #93	; 0x5d
 8005c42:	2205      	movs	r2, #5
 8005c44:	701a      	strb	r2, [r3, #0]
}
 8005c46:	e1ff      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b10      	cmp	r3, #16
 8005c5c:	d155      	bne.n	8005d0a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3358      	adds	r3, #88	; 0x58
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	440b      	add	r3, r1
 8005c80:	335d      	adds	r3, #93	; 0x5d
 8005c82:	2203      	movs	r2, #3
 8005c84:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	440b      	add	r3, r1
 8005c94:	333d      	adds	r3, #61	; 0x3d
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d114      	bne.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	440b      	add	r3, r1
 8005caa:	333c      	adds	r3, #60	; 0x3c
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	440b      	add	r3, r1
 8005cc0:	333d      	adds	r3, #61	; 0x3d
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f005 fa1c 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d02:	461a      	mov	r2, r3
 8005d04:	2310      	movs	r3, #16
 8005d06:	6093      	str	r3, [r2, #8]
}
 8005d08:	e19e      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d12b      	bne.n	8005d78 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f005 f9ef 	bl	800b12e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	335d      	adds	r3, #93	; 0x5d
 8005d60:	2206      	movs	r2, #6
 8005d62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	461a      	mov	r2, r3
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	6093      	str	r3, [r2, #8]
}
 8005d76:	e167      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d135      	bne.n	8005dfc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005daa:	f043 0302 	orr.w	r3, r3, #2
 8005dae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	4611      	mov	r1, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f005 f9b7 	bl	800b12e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	461a      	mov	r2, r3
 8005dce:	2310      	movs	r3, #16
 8005dd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	461a      	mov	r2, r3
 8005de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	440b      	add	r3, r1
 8005df4:	335d      	adds	r3, #93	; 0x5d
 8005df6:	2208      	movs	r2, #8
 8005df8:	701a      	strb	r2, [r3, #0]
}
 8005dfa:	e125      	b.n	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	f040 811a 	bne.w	8006048 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e2e:	f023 0302 	bic.w	r3, r3, #2
 8005e32:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	335d      	adds	r3, #93	; 0x5d
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d137      	bne.n	8005eba <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	440b      	add	r3, r1
 8005e58:	335c      	adds	r3, #92	; 0x5c
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	440b      	add	r3, r1
 8005e6c:	333f      	adds	r3, #63	; 0x3f
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d00b      	beq.n	8005e8c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	440b      	add	r3, r1
 8005e82:	333f      	adds	r3, #63	; 0x3f
 8005e84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	f040 80c5 	bne.w	8006016 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	3351      	adds	r3, #81	; 0x51
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f083 0301 	eor.w	r3, r3, #1
 8005ea2:	b2d8      	uxtb	r0, r3
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3351      	adds	r3, #81	; 0x51
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e0ad      	b.n	8006016 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	335d      	adds	r3, #93	; 0x5d
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d10a      	bne.n	8005ee6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	335c      	adds	r3, #92	; 0x5c
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e097      	b.n	8006016 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	440b      	add	r3, r1
 8005ef4:	335d      	adds	r3, #93	; 0x5d
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d10a      	bne.n	8005f12 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	440b      	add	r3, r1
 8005f0a:	335c      	adds	r3, #92	; 0x5c
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	e081      	b.n	8006016 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	440b      	add	r3, r1
 8005f20:	335d      	adds	r3, #93	; 0x5d
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	d10a      	bne.n	8005f3e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	440b      	add	r3, r1
 8005f36:	335c      	adds	r3, #92	; 0x5c
 8005f38:	2205      	movs	r2, #5
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e06b      	b.n	8006016 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	440b      	add	r3, r1
 8005f4c:	335d      	adds	r3, #93	; 0x5d
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b06      	cmp	r3, #6
 8005f52:	d00a      	beq.n	8005f6a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	440b      	add	r3, r1
 8005f62:	335d      	adds	r3, #93	; 0x5d
 8005f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d155      	bne.n	8006016 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	440b      	add	r3, r1
 8005f78:	3358      	adds	r3, #88	; 0x58
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	1c59      	adds	r1, r3, #1
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4403      	add	r3, r0
 8005f8c:	3358      	adds	r3, #88	; 0x58
 8005f8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3358      	adds	r3, #88	; 0x58
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d914      	bls.n	8005fd0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3358      	adds	r3, #88	; 0x58
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	440b      	add	r3, r1
 8005fc8:	335c      	adds	r3, #92	; 0x5c
 8005fca:	2204      	movs	r2, #4
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e009      	b.n	8005fe4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	440b      	add	r3, r1
 8005fde:	335c      	adds	r3, #92	; 0x5c
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006002:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	461a      	mov	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	461a      	mov	r2, r3
 8006024:	2302      	movs	r3, #2
 8006026:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	b2d8      	uxtb	r0, r3
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	440b      	add	r3, r1
 800603a:	335c      	adds	r3, #92	; 0x5c
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	4601      	mov	r1, r0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f00a fc1a 	bl	801087c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006048:	bf00      	nop
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	0c5b      	lsrs	r3, r3, #17
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	091b      	lsrs	r3, r3, #4
 8006080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006084:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b02      	cmp	r3, #2
 800608a:	d004      	beq.n	8006096 <HCD_RXQLVL_IRQHandler+0x46>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b05      	cmp	r3, #5
 8006090:	f000 8082 	beq.w	8006198 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006094:	e083      	b.n	800619e <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d07f      	beq.n	800619c <HCD_RXQLVL_IRQHandler+0x14c>
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3344      	adds	r3, #68	; 0x44
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d074      	beq.n	800619c <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	440b      	add	r3, r1
 80060c4:	3344      	adds	r3, #68	; 0x44
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	b292      	uxth	r2, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	f004 fbd4 	bl	800a87a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	440b      	add	r3, r1
 80060e0:	3344      	adds	r3, #68	; 0x44
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	18d1      	adds	r1, r2, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4403      	add	r3, r0
 80060f6:	3344      	adds	r3, #68	; 0x44
 80060f8:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	440b      	add	r3, r1
 8006108:	334c      	adds	r3, #76	; 0x4c
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	18d1      	adds	r1, r2, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4403      	add	r3, r0
 800611e:	334c      	adds	r3, #76	; 0x4c
 8006120:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HCD_RXQLVL_IRQHandler+0x158>)
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d031      	beq.n	800619c <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006156:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	461a      	mov	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	3350      	adds	r3, #80	; 0x50
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2d8      	uxtb	r0, r3
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	440b      	add	r3, r1
 8006190:	3350      	adds	r3, #80	; 0x50
 8006192:	4602      	mov	r2, r0
 8006194:	701a      	strb	r2, [r3, #0]
      break;
 8006196:	e001      	b.n	800619c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 800619c:	bf00      	nop
  }
}
 800619e:	bf00      	nop
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	1ff80000 	.word	0x1ff80000

080061ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d10b      	bne.n	80061fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f00a fb28 	bl	8010844 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f043 0302 	orr.w	r3, r3, #2
 80061fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b08      	cmp	r3, #8
 8006204:	d132      	bne.n	800626c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f043 0308 	orr.w	r3, r3, #8
 800620c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b04      	cmp	r3, #4
 8006216:	d126      	bne.n	8006266 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d113      	bne.n	8006248 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006226:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800622a:	d106      	bne.n	800623a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f004 fc56 	bl	800aae4 <USB_InitFSLSPClkSel>
 8006238:	e011      	b.n	800625e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2101      	movs	r1, #1
 8006240:	4618      	mov	r0, r3
 8006242:	f004 fc4f 	bl	800aae4 <USB_InitFSLSPClkSel>
 8006246:	e00a      	b.n	800625e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d106      	bne.n	800625e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	461a      	mov	r2, r3
 8006258:	f64e 2360 	movw	r3, #60000	; 0xea60
 800625c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f00a fb1e 	bl	80108a0 <HAL_HCD_PortEnabled_Callback>
 8006264:	e002      	b.n	800626c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f00a fb28 	bl	80108bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d103      	bne.n	800627e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f043 0320 	orr.w	r3, r3, #32
 800627c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6013      	str	r3, [r2, #0]
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e154      	b.n	8006550 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a98      	ldr	r2, [pc, #608]	; (8006520 <HAL_I2S_Init+0x28c>)
 80062be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fc fe51 	bl	8002f68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062dc:	f023 030f 	bic.w	r3, r3, #15
 80062e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2202      	movs	r2, #2
 80062e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d06f      	beq.n	80063d2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80062fa:	2310      	movs	r3, #16
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e001      	b.n	8006304 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006300:	2320      	movs	r3, #32
 8006302:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b20      	cmp	r3, #32
 800630a:	d802      	bhi.n	8006312 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a83      	ldr	r2, [pc, #524]	; (8006524 <HAL_I2S_Init+0x290>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <HAL_I2S_Init+0x92>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a81      	ldr	r2, [pc, #516]	; (8006528 <HAL_I2S_Init+0x294>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d104      	bne.n	8006330 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006326:	2001      	movs	r0, #1
 8006328:	f001 f9c6 	bl	80076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	e003      	b.n	8006338 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006330:	2002      	movs	r0, #2
 8006332:	f001 f9c1 	bl	80076b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006336:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006340:	d125      	bne.n	800638e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d010      	beq.n	800636c <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	fbb2 f2f3 	udiv	r2, r2, r3
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	461a      	mov	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	3305      	adds	r3, #5
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	e01f      	b.n	80063ac <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	fbb2 f2f3 	udiv	r2, r2, r3
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	461a      	mov	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	3305      	adds	r3, #5
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	e00e      	b.n	80063ac <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	fbb2 f2f3 	udiv	r2, r2, r3
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	3305      	adds	r3, #5
 80063aa:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4a5f      	ldr	r2, [pc, #380]	; (800652c <HAL_I2S_Init+0x298>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	08db      	lsrs	r3, r3, #3
 80063b6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e003      	b.n	80063da <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80063d2:	2302      	movs	r3, #2
 80063d4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d902      	bls.n	80063e6 <HAL_I2S_Init+0x152>
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2bff      	cmp	r3, #255	; 0xff
 80063e4:	d907      	bls.n	80063f6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f043 0210 	orr.w	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0ac      	b.n	8006550 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	ea42 0103 	orr.w	r1, r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	430a      	orrs	r2, r1
 8006408:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006414:	f023 030f 	bic.w	r3, r3, #15
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6851      	ldr	r1, [r2, #4]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6892      	ldr	r2, [r2, #8]
 8006420:	4311      	orrs	r1, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68d2      	ldr	r2, [r2, #12]
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6992      	ldr	r2, [r2, #24]
 800642c:	430a      	orrs	r2, r1
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006438:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d003      	beq.n	800644a <HAL_I2S_Init+0x1b6>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2bb0      	cmp	r3, #176	; 0xb0
 8006448:	d107      	bne.n	800645a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006458:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d16e      	bne.n	8006540 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a32      	ldr	r2, [pc, #200]	; (8006530 <HAL_I2S_Init+0x29c>)
 8006466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2d      	ldr	r2, [pc, #180]	; (8006524 <HAL_I2S_Init+0x290>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_I2S_Init+0x1e2>
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <HAL_I2S_Init+0x2a0>)
 8006474:	e001      	b.n	800647a <HAL_I2S_Init+0x1e6>
 8006476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	4928      	ldr	r1, [pc, #160]	; (8006524 <HAL_I2S_Init+0x290>)
 8006482:	428a      	cmp	r2, r1
 8006484:	d101      	bne.n	800648a <HAL_I2S_Init+0x1f6>
 8006486:	4a2b      	ldr	r2, [pc, #172]	; (8006534 <HAL_I2S_Init+0x2a0>)
 8006488:	e001      	b.n	800648e <HAL_I2S_Init+0x1fa>
 800648a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800648e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006492:	f023 030f 	bic.w	r3, r3, #15
 8006496:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_I2S_Init+0x290>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_I2S_Init+0x212>
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <HAL_I2S_Init+0x2a0>)
 80064a4:	e001      	b.n	80064aa <HAL_I2S_Init+0x216>
 80064a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064aa:	2202      	movs	r2, #2
 80064ac:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <HAL_I2S_Init+0x290>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <HAL_I2S_Init+0x228>
 80064b8:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <HAL_I2S_Init+0x2a0>)
 80064ba:	e001      	b.n	80064c0 <HAL_I2S_Init+0x22c>
 80064bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064cc:	d003      	beq.n	80064d6 <HAL_I2S_Init+0x242>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80064d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	e001      	b.n	80064e2 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	b299      	uxth	r1, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80064f8:	4303      	orrs	r3, r0
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	430b      	orrs	r3, r1
 80064fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006500:	4313      	orrs	r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	897b      	ldrh	r3, [r7, #10]
 8006506:	4313      	orrs	r3, r2
 8006508:	b29b      	uxth	r3, r3
 800650a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800650e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a03      	ldr	r2, [pc, #12]	; (8006524 <HAL_I2S_Init+0x290>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10e      	bne.n	8006538 <HAL_I2S_Init+0x2a4>
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_I2S_Init+0x2a0>)
 800651c:	e00e      	b.n	800653c <HAL_I2S_Init+0x2a8>
 800651e:	bf00      	nop
 8006520:	0800664f 	.word	0x0800664f
 8006524:	40003800 	.word	0x40003800
 8006528:	40003c00 	.word	0x40003c00
 800652c:	cccccccd 	.word	0xcccccccd
 8006530:	08006765 	.word	0x08006765
 8006534:	40003400 	.word	0x40003400
 8006538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800653c:	897a      	ldrh	r2, [r7, #10]
 800653e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	881a      	ldrh	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10e      	bne.n	80065e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ffb8 	bl	8006558 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	b292      	uxth	r2, r2
 8006604:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	1c9a      	adds	r2, r3, #2
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10e      	bne.n	8006646 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006636:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ff93 	bl	800656c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b04      	cmp	r3, #4
 8006668:	d13a      	bne.n	80066e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d109      	bne.n	8006688 <I2S_IRQHandler+0x3a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d102      	bne.n	8006688 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff ffb4 	bl	80065f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d126      	bne.n	80066e0 <I2S_IRQHandler+0x92>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b20      	cmp	r3, #32
 800669e:	d11f      	bne.n	80066e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f043 0202 	orr.w	r2, r3, #2
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff ff50 	bl	8006580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d136      	bne.n	800675a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d109      	bne.n	800670a <I2S_IRQHandler+0xbc>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d102      	bne.n	800670a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff45 	bl	8006594 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b08      	cmp	r3, #8
 8006712:	d122      	bne.n	800675a <I2S_IRQHandler+0x10c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b20      	cmp	r3, #32
 8006720:	d11b      	bne.n	800675a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006730:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	f043 0204 	orr.w	r2, r3, #4
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ff13 	bl	8006580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4aa2      	ldr	r2, [pc, #648]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d101      	bne.n	8006782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800677e:	4ba2      	ldr	r3, [pc, #648]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006780:	e001      	b.n	8006786 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a9b      	ldr	r2, [pc, #620]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800679c:	4b9a      	ldr	r3, [pc, #616]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800679e:	e001      	b.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80067a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b0:	d004      	beq.n	80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 8099 	bne.w	80068ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d107      	bne.n	80067d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f925 	bl	8006a20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9c8 	bl	8006b80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d13a      	bne.n	8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d035      	beq.n	8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a7e      	ldr	r2, [pc, #504]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800680e:	4b7e      	ldr	r3, [pc, #504]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006810:	e001      	b.n	8006816 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4979      	ldr	r1, [pc, #484]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800681e:	428b      	cmp	r3, r1
 8006820:	d101      	bne.n	8006826 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006822:	4b79      	ldr	r3, [pc, #484]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006824:	e001      	b.n	800682a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800682e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800683e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	f043 0202 	orr.w	r2, r3, #2
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff fe88 	bl	8006580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b08      	cmp	r3, #8
 8006878:	f040 80be 	bne.w	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80b8 	beq.w	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006896:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a59      	ldr	r2, [pc, #356]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d101      	bne.n	80068a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80068a2:	4b59      	ldr	r3, [pc, #356]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068a4:	e001      	b.n	80068aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80068a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4954      	ldr	r1, [pc, #336]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068b2:	428b      	cmp	r3, r1
 80068b4:	d101      	bne.n	80068ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80068b6:	4b54      	ldr	r3, [pc, #336]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068b8:	e001      	b.n	80068be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80068ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068c4:	2300      	movs	r3, #0
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	f043 0204 	orr.w	r2, r3, #4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fe4a 	bl	8006580 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068ec:	e084      	b.n	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d107      	bne.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f8be 	bl	8006a84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b01      	cmp	r3, #1
 8006910:	d107      	bne.n	8006922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f8fd 	bl	8006b1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d12f      	bne.n	800698c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02a      	beq.n	800698c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006944:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2e      	ldr	r2, [pc, #184]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d101      	bne.n	8006954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006950:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006952:	e001      	b.n	8006958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4929      	ldr	r1, [pc, #164]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006960:	428b      	cmp	r3, r1
 8006962:	d101      	bne.n	8006968 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006966:	e001      	b.n	800696c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800696c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006970:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	f043 0202 	orr.w	r2, r3, #2
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fdfa 	bl	8006580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b08      	cmp	r3, #8
 8006994:	d131      	bne.n	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	d02c      	beq.n	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80069aa:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069ac:	e001      	b.n	80069b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80069ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4912      	ldr	r1, [pc, #72]	; (8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069ba:	428b      	cmp	r3, r1
 80069bc:	d101      	bne.n	80069c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80069be:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069c0:	e001      	b.n	80069c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80069c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e8:	f043 0204 	orr.w	r2, r3, #4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff fdc5 	bl	8006580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069f6:	e000      	b.n	80069fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069f8:	bf00      	nop
}
 80069fa:	bf00      	nop
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40003800 	.word	0x40003800
 8006a08:	40003400 	.word	0x40003400

08006a0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	1c99      	adds	r1, r3, #2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6251      	str	r1, [r2, #36]	; 0x24
 8006a32:	881a      	ldrh	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d113      	bne.n	8006a7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ffc9 	bl	8006a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	1c99      	adds	r1, r3, #2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6251      	str	r1, [r2, #36]	; 0x24
 8006a96:	8819      	ldrh	r1, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <I2SEx_TxISR_I2SExt+0x90>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <I2SEx_TxISR_I2SExt+0x22>
 8006aa2:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <I2SEx_TxISR_I2SExt+0x94>)
 8006aa4:	e001      	b.n	8006aaa <I2SEx_TxISR_I2SExt+0x26>
 8006aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aaa:	460a      	mov	r2, r1
 8006aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d121      	bne.n	8006b0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a12      	ldr	r2, [pc, #72]	; (8006b14 <I2SEx_TxISR_I2SExt+0x90>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <I2SEx_TxISR_I2SExt+0x50>
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <I2SEx_TxISR_I2SExt+0x94>)
 8006ad2:	e001      	b.n	8006ad8 <I2SEx_TxISR_I2SExt+0x54>
 8006ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	490d      	ldr	r1, [pc, #52]	; (8006b14 <I2SEx_TxISR_I2SExt+0x90>)
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	d101      	bne.n	8006ae8 <I2SEx_TxISR_I2SExt+0x64>
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <I2SEx_TxISR_I2SExt+0x94>)
 8006ae6:	e001      	b.n	8006aec <I2SEx_TxISR_I2SExt+0x68>
 8006ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006af0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff81 	bl	8006a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40003800 	.word	0x40003800
 8006b18:	40003400 	.word	0x40003400

08006b1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68d8      	ldr	r0, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	1c99      	adds	r1, r3, #2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b34:	b282      	uxth	r2, r0
 8006b36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d113      	bne.n	8006b78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff ff4a 	bl	8006a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a20      	ldr	r2, [pc, #128]	; (8006c10 <I2SEx_RxISR_I2SExt+0x90>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d101      	bne.n	8006b96 <I2SEx_RxISR_I2SExt+0x16>
 8006b92:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <I2SEx_RxISR_I2SExt+0x94>)
 8006b94:	e001      	b.n	8006b9a <I2SEx_RxISR_I2SExt+0x1a>
 8006b96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9a:	68d8      	ldr	r0, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	1c99      	adds	r1, r3, #2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006ba6:	b282      	uxth	r2, r0
 8006ba8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d121      	bne.n	8006c06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a12      	ldr	r2, [pc, #72]	; (8006c10 <I2SEx_RxISR_I2SExt+0x90>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d101      	bne.n	8006bd0 <I2SEx_RxISR_I2SExt+0x50>
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <I2SEx_RxISR_I2SExt+0x94>)
 8006bce:	e001      	b.n	8006bd4 <I2SEx_RxISR_I2SExt+0x54>
 8006bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	490d      	ldr	r1, [pc, #52]	; (8006c10 <I2SEx_RxISR_I2SExt+0x90>)
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	d101      	bne.n	8006be4 <I2SEx_RxISR_I2SExt+0x64>
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <I2SEx_RxISR_I2SExt+0x94>)
 8006be2:	e001      	b.n	8006be8 <I2SEx_RxISR_I2SExt+0x68>
 8006be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff ff03 	bl	8006a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40003800 	.word	0x40003800
 8006c14:	40003400 	.word	0x40003400

08006c18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c20:	f7fc fdf6 	bl	8003810 <HAL_GetTick>
 8006c24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e069      	b.n	8006d04 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10b      	bne.n	8006c54 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fc fa49 	bl	80030dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006c4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f85e 	bl	8006d10 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	021a      	lsls	r2, r3, #8
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	2120      	movs	r1, #32
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f856 	bl	8006d2c <QSPI_WaitFlagStateUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d137      	bne.n	8006cfa <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6852      	ldr	r2, [r2, #4]
 8006c9c:	0611      	lsls	r1, r2, #24
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68d2      	ldr	r2, [r2, #12]
 8006ca2:	4311      	orrs	r1, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	69d2      	ldr	r2, [r2, #28]
 8006ca8:	4311      	orrs	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6a12      	ldr	r2, [r2, #32]
 8006cae:	4311      	orrs	r1, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <HAL_QSPI_Init+0xf4>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6912      	ldr	r2, [r2, #16]
 8006cc6:	0411      	lsls	r1, r2, #16
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6952      	ldr	r2, [r2, #20]
 8006ccc:	4311      	orrs	r1, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6992      	ldr	r2, [r2, #24]
 8006cd2:	4311      	orrs	r1, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006d02:	7afb      	ldrb	r3, [r7, #11]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	ffe0f8fe 	.word	0xffe0f8fe

08006d10 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	603b      	str	r3, [r7, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d3c:	e01a      	b.n	8006d74 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d016      	beq.n	8006d74 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d46:	f7fc fd63 	bl	8003810 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d302      	bcc.n	8006d5c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d68:	f043 0201 	orr.w	r2, r3, #1
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e00e      	b.n	8006d92 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bf14      	ite	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	2300      	moveq	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d1d6      	bne.n	8006d3e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0cc      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006db0:	4b68      	ldr	r3, [pc, #416]	; (8006f54 <HAL_RCC_ClockConfig+0x1b8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d90c      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dbe:	4b65      	ldr	r3, [pc, #404]	; (8006f54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b63      	ldr	r3, [pc, #396]	; (8006f54 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0b8      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006df0:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e08:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4a52      	ldr	r2, [pc, #328]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e14:	4b50      	ldr	r3, [pc, #320]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	494d      	ldr	r1, [pc, #308]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d044      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d119      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e07f      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d003      	beq.n	8006e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d107      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5a:	4b3f      	ldr	r3, [pc, #252]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e06f      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e6a:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e067      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e7a:	4b37      	ldr	r3, [pc, #220]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f023 0203 	bic.w	r2, r3, #3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4934      	ldr	r1, [pc, #208]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e8c:	f7fc fcc0 	bl	8003810 <HAL_GetTick>
 8006e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e92:	e00a      	b.n	8006eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e94:	f7fc fcbc 	bl	8003810 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e04f      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 020c 	and.w	r2, r3, #12
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d1eb      	bne.n	8006e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ebc:	4b25      	ldr	r3, [pc, #148]	; (8006f54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d20c      	bcs.n	8006ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eca:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed2:	4b20      	ldr	r3, [pc, #128]	; (8006f54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e032      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ef0:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4916      	ldr	r1, [pc, #88]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f22:	f000 f821 	bl	8006f68 <HAL_RCC_GetSysClockFreq>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	490a      	ldr	r1, [pc, #40]	; (8006f5c <HAL_RCC_ClockConfig+0x1c0>)
 8006f34:	5ccb      	ldrb	r3, [r1, r3]
 8006f36:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3a:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <HAL_RCC_ClockConfig+0x1c4>)
 8006f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <HAL_RCC_ClockConfig+0x1c8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fc fafc 	bl	8003540 <HAL_InitTick>

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40023c00 	.word	0x40023c00
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	08012028 	.word	0x08012028
 8006f60:	20000000 	.word	0x20000000
 8006f64:	20000004 	.word	0x20000004

08006f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f68:	b5b0      	push	{r4, r5, r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6079      	str	r1, [r7, #4]
 8006f72:	2100      	movs	r1, #0
 8006f74:	60f9      	str	r1, [r7, #12]
 8006f76:	2100      	movs	r1, #0
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f7e:	4952      	ldr	r1, [pc, #328]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f80:	6889      	ldr	r1, [r1, #8]
 8006f82:	f001 010c 	and.w	r1, r1, #12
 8006f86:	2908      	cmp	r1, #8
 8006f88:	d00d      	beq.n	8006fa6 <HAL_RCC_GetSysClockFreq+0x3e>
 8006f8a:	2908      	cmp	r1, #8
 8006f8c:	f200 8094 	bhi.w	80070b8 <HAL_RCC_GetSysClockFreq+0x150>
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_RCC_GetSysClockFreq+0x32>
 8006f94:	2904      	cmp	r1, #4
 8006f96:	d003      	beq.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8006f98:	e08e      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f9a:	4b4c      	ldr	r3, [pc, #304]	; (80070cc <HAL_RCC_GetSysClockFreq+0x164>)
 8006f9c:	60bb      	str	r3, [r7, #8]
       break;
 8006f9e:	e08e      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fa0:	4b4b      	ldr	r3, [pc, #300]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006fa2:	60bb      	str	r3, [r7, #8]
      break;
 8006fa4:	e08b      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa6:	4948      	ldr	r1, [pc, #288]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fa8:	6849      	ldr	r1, [r1, #4]
 8006faa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006fae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fb0:	4945      	ldr	r1, [pc, #276]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fb2:	6849      	ldr	r1, [r1, #4]
 8006fb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d024      	beq.n	8007006 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fbc:	4942      	ldr	r1, [pc, #264]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fbe:	6849      	ldr	r1, [r1, #4]
 8006fc0:	0989      	lsrs	r1, r1, #6
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	f04f 0100 	mov.w	r1, #0
 8006fc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006fcc:	f04f 0500 	mov.w	r5, #0
 8006fd0:	ea00 0204 	and.w	r2, r0, r4
 8006fd4:	ea01 0305 	and.w	r3, r1, r5
 8006fd8:	493d      	ldr	r1, [pc, #244]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006fda:	fb01 f003 	mul.w	r0, r1, r3
 8006fde:	2100      	movs	r1, #0
 8006fe0:	fb01 f102 	mul.w	r1, r1, r2
 8006fe4:	1844      	adds	r4, r0, r1
 8006fe6:	493a      	ldr	r1, [pc, #232]	; (80070d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8006fe8:	fba2 0101 	umull	r0, r1, r2, r1
 8006fec:	1863      	adds	r3, r4, r1
 8006fee:	4619      	mov	r1, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	f7f9 fdf6 	bl	8000be8 <__aeabi_uldivmod>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4613      	mov	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e04a      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007006:	4b30      	ldr	r3, [pc, #192]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	099b      	lsrs	r3, r3, #6
 800700c:	461a      	mov	r2, r3
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007016:	f04f 0100 	mov.w	r1, #0
 800701a:	ea02 0400 	and.w	r4, r2, r0
 800701e:	ea03 0501 	and.w	r5, r3, r1
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	014b      	lsls	r3, r1, #5
 8007030:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007034:	0142      	lsls	r2, r0, #5
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	1b00      	subs	r0, r0, r4
 800703c:	eb61 0105 	sbc.w	r1, r1, r5
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	018b      	lsls	r3, r1, #6
 800704a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800704e:	0182      	lsls	r2, r0, #6
 8007050:	1a12      	subs	r2, r2, r0
 8007052:	eb63 0301 	sbc.w	r3, r3, r1
 8007056:	f04f 0000 	mov.w	r0, #0
 800705a:	f04f 0100 	mov.w	r1, #0
 800705e:	00d9      	lsls	r1, r3, #3
 8007060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007064:	00d0      	lsls	r0, r2, #3
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	1912      	adds	r2, r2, r4
 800706c:	eb45 0303 	adc.w	r3, r5, r3
 8007070:	f04f 0000 	mov.w	r0, #0
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	0299      	lsls	r1, r3, #10
 800707a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800707e:	0290      	lsls	r0, r2, #10
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4610      	mov	r0, r2
 8007086:	4619      	mov	r1, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	461a      	mov	r2, r3
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	f7f9 fdaa 	bl	8000be8 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4613      	mov	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	3301      	adds	r3, #1
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	60bb      	str	r3, [r7, #8]
      break;
 80070b6:	e002      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <HAL_RCC_GetSysClockFreq+0x164>)
 80070ba:	60bb      	str	r3, [r7, #8]
      break;
 80070bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070be:	68bb      	ldr	r3, [r7, #8]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bdb0      	pop	{r4, r5, r7, pc}
 80070c8:	40023800 	.word	0x40023800
 80070cc:	00f42400 	.word	0x00f42400
 80070d0:	017d7840 	.word	0x017d7840

080070d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d8:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80070da:	681b      	ldr	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000000 	.word	0x20000000

080070ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070f0:	f7ff fff0 	bl	80070d4 <HAL_RCC_GetHCLKFreq>
 80070f4:	4602      	mov	r2, r0
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	0a9b      	lsrs	r3, r3, #10
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	4903      	ldr	r1, [pc, #12]	; (8007110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007102:	5ccb      	ldrb	r3, [r1, r3]
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40023800 	.word	0x40023800
 8007110:	08012038 	.word	0x08012038

08007114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007118:	f7ff ffdc 	bl	80070d4 <HAL_RCC_GetHCLKFreq>
 800711c:	4602      	mov	r2, r0
 800711e:	4b05      	ldr	r3, [pc, #20]	; (8007134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	0b5b      	lsrs	r3, r3, #13
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4903      	ldr	r1, [pc, #12]	; (8007138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800712a:	5ccb      	ldrb	r3, [r1, r3]
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40023800 	.word	0x40023800
 8007138:	08012038 	.word	0x08012038

0800713c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	220f      	movs	r2, #15
 800714a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800714c:	4b12      	ldr	r3, [pc, #72]	; (8007198 <HAL_RCC_GetClockConfig+0x5c>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0203 	and.w	r2, r3, #3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007158:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <HAL_RCC_GetClockConfig+0x5c>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <HAL_RCC_GetClockConfig+0x5c>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <HAL_RCC_GetClockConfig+0x5c>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <HAL_RCC_GetClockConfig+0x60>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 020f 	and.w	r2, r3, #15
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	601a      	str	r2, [r3, #0]
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800
 800719c:	40023c00 	.word	0x40023c00

080071a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d010      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80071c4:	4b7a      	ldr	r3, [pc, #488]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80071c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	4977      	ldr	r1, [pc, #476]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80071e2:	2301      	movs	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d010      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80071f2:	4b6f      	ldr	r3, [pc, #444]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80071f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	496b      	ldr	r1, [pc, #428]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007210:	2301      	movs	r3, #1
 8007212:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d022      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007220:	4b63      	ldr	r3, [pc, #396]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	4960      	ldr	r1, [pc, #384]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800723e:	2301      	movs	r3, #1
 8007240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800724a:	d10c      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800724c:	4b58      	ldr	r3, [pc, #352]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800724e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007252:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	3b01      	subs	r3, #1
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	4954      	ldr	r1, [pc, #336]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d022      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007272:	4b4f      	ldr	r3, [pc, #316]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007278:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	494b      	ldr	r1, [pc, #300]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007290:	2301      	movs	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800729c:	d10c      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800729e:	4b44      	ldr	r3, [pc, #272]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80072a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	493f      	ldr	r1, [pc, #252]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 808a 	beq.w	80073da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	4a38      	ldr	r2, [pc, #224]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80072d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d4:	6413      	str	r3, [r2, #64]	; 0x40
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80072e2:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a33      	ldr	r2, [pc, #204]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80072e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072ee:	f7fc fa8f 	bl	8003810 <HAL_GetTick>
 80072f2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072f4:	e008      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072f6:	f7fc fa8b 	bl	8003810 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e1d1      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007308:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0f0      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007314:	4b26      	ldr	r3, [pc, #152]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d02f      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	429a      	cmp	r2, r3
 8007330:	d028      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007332:	4b1f      	ldr	r3, [pc, #124]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800733c:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800733e:	2201      	movs	r2, #1
 8007340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007342:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007348:	4a19      	ldr	r2, [pc, #100]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800734e:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b01      	cmp	r3, #1
 8007358:	d114      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800735a:	f7fc fa59 	bl	8003810 <HAL_GetTick>
 800735e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007360:	e00a      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007362:	f7fc fa55 	bl	8003810 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007370:	4293      	cmp	r3, r2
 8007372:	d901      	bls.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e199      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007378:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0ee      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007390:	d114      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007392:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a6:	4902      	ldr	r1, [pc, #8]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	608b      	str	r3, [r1, #8]
 80073ac:	e00c      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800
 80073b4:	40007000 	.word	0x40007000
 80073b8:	42470e40 	.word	0x42470e40
 80073bc:	4b89      	ldr	r3, [pc, #548]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4a88      	ldr	r2, [pc, #544]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073c6:	6093      	str	r3, [r2, #8]
 80073c8:	4b86      	ldr	r3, [pc, #536]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d4:	4983      	ldr	r1, [pc, #524]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80073ec:	4b7e      	ldr	r3, [pc, #504]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80073ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80073fc:	4b79      	ldr	r3, [pc, #484]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	4976      	ldr	r1, [pc, #472]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800740c:	4313      	orrs	r3, r2
 800740e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d011      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800741e:	4b71      	ldr	r3, [pc, #452]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007424:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	496d      	ldr	r1, [pc, #436]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800743c:	d101      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800743e:	2301      	movs	r3, #1
 8007440:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800744e:	4b65      	ldr	r3, [pc, #404]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007454:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	4961      	ldr	r1, [pc, #388]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d004      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b80      	cmp	r3, #128	; 0x80
 8007470:	f040 80c6 	bne.w	8007600 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007474:	4b5d      	ldr	r3, [pc, #372]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800747a:	f7fc f9c9 	bl	8003810 <HAL_GetTick>
 800747e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007480:	e008      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007482:	f7fc f9c5 	bl	8003810 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e10b      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007494:	4b53      	ldr	r3, [pc, #332]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f0      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80074a0:	4a53      	ldr	r2, [pc, #332]	; (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d023      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d019      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e4:	d00e      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d019      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d115      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007502:	d110      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	019b      	lsls	r3, r3, #6
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	061b      	lsls	r3, r3, #24
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	071b      	lsls	r3, r3, #28
 800751e:	4931      	ldr	r1, [pc, #196]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007542:	2b00      	cmp	r3, #0
 8007544:	d026      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d122      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800754e:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007554:	0e1b      	lsrs	r3, r3, #24
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	019b      	lsls	r3, r3, #6
 8007566:	431a      	orrs	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	061b      	lsls	r3, r3, #24
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	071b      	lsls	r3, r3, #28
 8007574:	491b      	ldr	r1, [pc, #108]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007576:	4313      	orrs	r3, r2
 8007578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800757c:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800757e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007582:	f023 021f 	bic.w	r2, r3, #31
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	3b01      	subs	r3, #1
 800758c:	4915      	ldr	r1, [pc, #84]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800758e:	4313      	orrs	r3, r2
 8007590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759c:	2b00      	cmp	r3, #0
 800759e:	d010      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	019b      	lsls	r3, r3, #6
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	071b      	lsls	r3, r3, #28
 80075ba:	490a      	ldr	r1, [pc, #40]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80075c4:	2201      	movs	r2, #1
 80075c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075c8:	f7fc f922 	bl	8003810 <HAL_GetTick>
 80075cc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075ce:	e011      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075d0:	f7fc f91e 	bl	8003810 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d90a      	bls.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e064      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80075e2:	bf00      	nop
 80075e4:	40023800 	.word	0x40023800
 80075e8:	424711e0 	.word	0x424711e0
 80075ec:	42470068 	.word	0x42470068
 80075f0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075f4:	4b2f      	ldr	r3, [pc, #188]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0e7      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00a      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800760c:	4b29      	ldr	r3, [pc, #164]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800760e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761a:	4926      	ldr	r1, [pc, #152]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800762e:	4b21      	ldr	r3, [pc, #132]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007634:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	491d      	ldr	r1, [pc, #116]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007650:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007656:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765e:	4915      	ldr	r1, [pc, #84]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007660:	4313      	orrs	r3, r2
 8007662:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007672:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007678:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	490c      	ldr	r1, [pc, #48]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007682:	4313      	orrs	r3, r2
 8007684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00a      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800769a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a2:	4904      	ldr	r1, [pc, #16]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40023800 	.word	0x40023800

080076b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d004      	beq.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	f000 80a1 	beq.w	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80076de:	e13f      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80076e0:	4ba3      	ldr	r3, [pc, #652]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80076e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80076f2:	f000 8084 	beq.w	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80076fc:	f200 808c 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007706:	d04f      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800770e:	f200 8083 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d006      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800771e:	d17b      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007720:	4b94      	ldr	r3, [pc, #592]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007722:	617b      	str	r3, [r7, #20]
          break;
 8007724:	e07b      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007726:	4b92      	ldr	r3, [pc, #584]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007734:	d109      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007736:	4b8e      	ldr	r3, [pc, #568]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007740:	4a8c      	ldr	r2, [pc, #560]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007742:	fbb2 f3f3 	udiv	r3, r2, r3
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	e019      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800774a:	4b89      	ldr	r3, [pc, #548]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007756:	d109      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007758:	4b85      	ldr	r3, [pc, #532]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800775a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007762:	4a85      	ldr	r2, [pc, #532]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	e008      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800776c:	4b80      	ldr	r3, [pc, #512]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800776e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007776:	4a81      	ldr	r2, [pc, #516]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800777e:	4b7c      	ldr	r3, [pc, #496]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007784:	099b      	lsrs	r3, r3, #6
 8007786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	fb02 f303 	mul.w	r3, r2, r3
 8007790:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007792:	4b77      	ldr	r3, [pc, #476]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007798:	0f1b      	lsrs	r3, r3, #28
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	617b      	str	r3, [r7, #20]
          break;
 80077a6:	e03a      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077a8:	4b71      	ldr	r3, [pc, #452]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077b4:	d108      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077b6:	4b6e      	ldr	r3, [pc, #440]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077be:	4a6e      	ldr	r2, [pc, #440]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c4:	613b      	str	r3, [r7, #16]
 80077c6:	e007      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077c8:	4b69      	ldr	r3, [pc, #420]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d0:	4a6a      	ldr	r2, [pc, #424]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80077d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d6:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80077d8:	4b65      	ldr	r3, [pc, #404]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	099b      	lsrs	r3, r3, #6
 80077de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	fb02 f303 	mul.w	r3, r2, r3
 80077e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80077ea:	4b61      	ldr	r3, [pc, #388]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	0f1b      	lsrs	r3, r3, #28
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fa:	617b      	str	r3, [r7, #20]
          break;
 80077fc:	e00f      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077fe:	4b5c      	ldr	r3, [pc, #368]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800780a:	d102      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800780c:	4b5a      	ldr	r3, [pc, #360]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800780e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007810:	e005      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8007812:	4b5a      	ldr	r3, [pc, #360]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007814:	617b      	str	r3, [r7, #20]
          break;
 8007816:	e002      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
          break;
 800781c:	bf00      	nop
        }
      }
      break;
 800781e:	e09f      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007820:	4b53      	ldr	r3, [pc, #332]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007826:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007832:	f000 8084 	beq.w	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800783c:	f200 808c 	bhi.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007846:	d04f      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784e:	f200 8083 	bhi.w	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800785e:	d17b      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007860:	4b44      	ldr	r3, [pc, #272]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007862:	617b      	str	r3, [r7, #20]
          break;
 8007864:	e07b      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007866:	4b42      	ldr	r3, [pc, #264]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007874:	d109      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007876:	4b3e      	ldr	r3, [pc, #248]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007880:	4a3c      	ldr	r2, [pc, #240]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007882:	fbb2 f3f3 	udiv	r3, r2, r3
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	e019      	b.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800788a:	4b39      	ldr	r3, [pc, #228]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007896:	d109      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007898:	4b35      	ldr	r3, [pc, #212]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a2:	4a35      	ldr	r2, [pc, #212]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e008      	b.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078ac:	4b30      	ldr	r3, [pc, #192]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b6:	4a31      	ldr	r2, [pc, #196]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078be:	4b2c      	ldr	r3, [pc, #176]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c4:	099b      	lsrs	r3, r3, #6
 80078c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80078d2:	4b27      	ldr	r3, [pc, #156]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	0f1b      	lsrs	r3, r3, #28
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	617b      	str	r3, [r7, #20]
          break;
 80078e6:	e03a      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078e8:	4b21      	ldr	r3, [pc, #132]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f4:	d108      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078f6:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078fe:	4a1e      	ldr	r2, [pc, #120]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e007      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007908:	4b19      	ldr	r3, [pc, #100]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007910:	4a1a      	ldr	r2, [pc, #104]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007918:	4b15      	ldr	r3, [pc, #84]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	099b      	lsrs	r3, r3, #6
 800791e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	fb02 f303 	mul.w	r3, r2, r3
 8007928:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	0f1b      	lsrs	r3, r3, #28
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	fbb2 f3f3 	udiv	r3, r2, r3
 800793a:	617b      	str	r3, [r7, #20]
          break;
 800793c:	e00f      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800794a:	d102      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800794e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007950:	e005      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8007952:	4b0a      	ldr	r3, [pc, #40]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007954:	617b      	str	r3, [r7, #20]
          break;
 8007956:	e002      	b.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
          break;
 800795c:	bf00      	nop
        }
      }
      break;
 800795e:	bf00      	nop
    }
  }
  return frequency;
 8007960:	697b      	ldr	r3, [r7, #20]
}
 8007962:	4618      	mov	r0, r3
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40023800 	.word	0x40023800
 8007974:	00bb8000 	.word	0x00bb8000
 8007978:	017d7840 	.word	0x017d7840
 800797c:	00f42400 	.word	0x00f42400

08007980 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d075      	beq.n	8007a84 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007998:	4ba2      	ldr	r3, [pc, #648]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 030c 	and.w	r3, r3, #12
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d00c      	beq.n	80079be <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079a4:	4b9f      	ldr	r3, [pc, #636]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d112      	bne.n	80079d6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079b0:	4b9c      	ldr	r3, [pc, #624]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079bc:	d10b      	bne.n	80079d6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079be:	4b99      	ldr	r3, [pc, #612]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d05b      	beq.n	8007a82 <HAL_RCC_OscConfig+0x102>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d157      	bne.n	8007a82 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e20b      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079de:	d106      	bne.n	80079ee <HAL_RCC_OscConfig+0x6e>
 80079e0:	4b90      	ldr	r3, [pc, #576]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a8f      	ldr	r2, [pc, #572]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	e01d      	b.n	8007a2a <HAL_RCC_OscConfig+0xaa>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079f6:	d10c      	bne.n	8007a12 <HAL_RCC_OscConfig+0x92>
 80079f8:	4b8a      	ldr	r3, [pc, #552]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a89      	ldr	r2, [pc, #548]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 80079fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4b87      	ldr	r3, [pc, #540]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a86      	ldr	r2, [pc, #536]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	e00b      	b.n	8007a2a <HAL_RCC_OscConfig+0xaa>
 8007a12:	4b84      	ldr	r3, [pc, #528]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a83      	ldr	r2, [pc, #524]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	4b81      	ldr	r3, [pc, #516]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a80      	ldr	r2, [pc, #512]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d013      	beq.n	8007a5a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a32:	f7fb feed 	bl	8003810 <HAL_GetTick>
 8007a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a3a:	f7fb fee9 	bl	8003810 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b64      	cmp	r3, #100	; 0x64
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e1d0      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4c:	4b75      	ldr	r3, [pc, #468]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <HAL_RCC_OscConfig+0xba>
 8007a58:	e014      	b.n	8007a84 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5a:	f7fb fed9 	bl	8003810 <HAL_GetTick>
 8007a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a60:	e008      	b.n	8007a74 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a62:	f7fb fed5 	bl	8003810 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b64      	cmp	r3, #100	; 0x64
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e1bc      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a74:	4b6b      	ldr	r3, [pc, #428]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f0      	bne.n	8007a62 <HAL_RCC_OscConfig+0xe2>
 8007a80:	e000      	b.n	8007a84 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d063      	beq.n	8007b58 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007a90:	4b64      	ldr	r3, [pc, #400]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 030c 	and.w	r3, r3, #12
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a9c:	4b61      	ldr	r3, [pc, #388]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d11c      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aa8:	4b5e      	ldr	r3, [pc, #376]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d116      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_RCC_OscConfig+0x14c>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d001      	beq.n	8007acc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e190      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007acc:	4b55      	ldr	r3, [pc, #340]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4952      	ldr	r1, [pc, #328]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ae0:	e03a      	b.n	8007b58 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d020      	beq.n	8007b2c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aea:	4b4f      	ldr	r3, [pc, #316]	; (8007c28 <HAL_RCC_OscConfig+0x2a8>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af0:	f7fb fe8e 	bl	8003810 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007af8:	f7fb fe8a 	bl	8003810 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e171      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b0a:	4b46      	ldr	r3, [pc, #280]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0f0      	beq.n	8007af8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b16:	4b43      	ldr	r3, [pc, #268]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	493f      	ldr	r1, [pc, #252]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	600b      	str	r3, [r1, #0]
 8007b2a:	e015      	b.n	8007b58 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b2c:	4b3e      	ldr	r3, [pc, #248]	; (8007c28 <HAL_RCC_OscConfig+0x2a8>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b32:	f7fb fe6d 	bl	8003810 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b38:	e008      	b.n	8007b4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b3a:	f7fb fe69 	bl	8003810 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e150      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b4c:	4b35      	ldr	r3, [pc, #212]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f0      	bne.n	8007b3a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d030      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d016      	beq.n	8007b9a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b6c:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <HAL_RCC_OscConfig+0x2ac>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b72:	f7fb fe4d 	bl	8003810 <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b7a:	f7fb fe49 	bl	8003810 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e130      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b8c:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0f0      	beq.n	8007b7a <HAL_RCC_OscConfig+0x1fa>
 8007b98:	e015      	b.n	8007bc6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9a:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <HAL_RCC_OscConfig+0x2ac>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba0:	f7fb fe36 	bl	8003810 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ba8:	f7fb fe32 	bl	8003810 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e119      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bba:	4b1a      	ldr	r3, [pc, #104]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f0      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 809f 	beq.w	8007d12 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd8:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10f      	bne.n	8007c04 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	4a0d      	ldr	r2, [pc, #52]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <HAL_RCC_OscConfig+0x2a4>)
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c04:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <HAL_RCC_OscConfig+0x2b0>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d120      	bne.n	8007c52 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <HAL_RCC_OscConfig+0x2b0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a06      	ldr	r2, [pc, #24]	; (8007c30 <HAL_RCC_OscConfig+0x2b0>)
 8007c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c1c:	f7fb fdf8 	bl	8003810 <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c22:	e010      	b.n	8007c46 <HAL_RCC_OscConfig+0x2c6>
 8007c24:	40023800 	.word	0x40023800
 8007c28:	42470000 	.word	0x42470000
 8007c2c:	42470e80 	.word	0x42470e80
 8007c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c34:	f7fb fdec 	bl	8003810 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e0d3      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c46:	4b6c      	ldr	r3, [pc, #432]	; (8007df8 <HAL_RCC_OscConfig+0x478>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0f0      	beq.n	8007c34 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d106      	bne.n	8007c68 <HAL_RCC_OscConfig+0x2e8>
 8007c5a:	4b68      	ldr	r3, [pc, #416]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5e:	4a67      	ldr	r2, [pc, #412]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c60:	f043 0301 	orr.w	r3, r3, #1
 8007c64:	6713      	str	r3, [r2, #112]	; 0x70
 8007c66:	e01c      	b.n	8007ca2 <HAL_RCC_OscConfig+0x322>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b05      	cmp	r3, #5
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCC_OscConfig+0x30a>
 8007c70:	4b62      	ldr	r3, [pc, #392]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c74:	4a61      	ldr	r2, [pc, #388]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c7c:	4b5f      	ldr	r3, [pc, #380]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c80:	4a5e      	ldr	r2, [pc, #376]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6713      	str	r3, [r2, #112]	; 0x70
 8007c88:	e00b      	b.n	8007ca2 <HAL_RCC_OscConfig+0x322>
 8007c8a:	4b5c      	ldr	r3, [pc, #368]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8e:	4a5b      	ldr	r2, [pc, #364]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	6713      	str	r3, [r2, #112]	; 0x70
 8007c96:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	4a58      	ldr	r2, [pc, #352]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007c9c:	f023 0304 	bic.w	r3, r3, #4
 8007ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d015      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007caa:	f7fb fdb1 	bl	8003810 <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb0:	e00a      	b.n	8007cc8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cb2:	f7fb fdad 	bl	8003810 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e092      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc8:	4b4c      	ldr	r3, [pc, #304]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0ee      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x332>
 8007cd4:	e014      	b.n	8007d00 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd6:	f7fb fd9b 	bl	8003810 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fb fd97 	bl	8003810 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e07c      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf4:	4b41      	ldr	r3, [pc, #260]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1ee      	bne.n	8007cde <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d105      	bne.n	8007d12 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d06:	4b3d      	ldr	r3, [pc, #244]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	4a3c      	ldr	r2, [pc, #240]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d068      	beq.n	8007dec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d1a:	4b38      	ldr	r3, [pc, #224]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b08      	cmp	r3, #8
 8007d24:	d060      	beq.n	8007de8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d145      	bne.n	8007dba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d2e:	4b34      	ldr	r3, [pc, #208]	; (8007e00 <HAL_RCC_OscConfig+0x480>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fb fd6c 	bl	8003810 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d3c:	f7fb fd68 	bl	8003810 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e04f      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d4e:	4b2b      	ldr	r3, [pc, #172]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f0      	bne.n	8007d3c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	019b      	lsls	r3, r3, #6
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	085b      	lsrs	r3, r3, #1
 8007d72:	3b01      	subs	r3, #1
 8007d74:	041b      	lsls	r3, r3, #16
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	061b      	lsls	r3, r3, #24
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	071b      	lsls	r3, r3, #28
 8007d86:	491d      	ldr	r1, [pc, #116]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d8c:	4b1c      	ldr	r3, [pc, #112]	; (8007e00 <HAL_RCC_OscConfig+0x480>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d92:	f7fb fd3d 	bl	8003810 <HAL_GetTick>
 8007d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d98:	e008      	b.n	8007dac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d9a:	f7fb fd39 	bl	8003810 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e020      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dac:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d0f0      	beq.n	8007d9a <HAL_RCC_OscConfig+0x41a>
 8007db8:	e018      	b.n	8007dec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dba:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <HAL_RCC_OscConfig+0x480>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fb fd26 	bl	8003810 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dc8:	f7fb fd22 	bl	8003810 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e009      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dda:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <HAL_RCC_OscConfig+0x47c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f0      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x448>
 8007de6:	e001      	b.n	8007dec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40007000 	.word	0x40007000
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	42470060 	.word	0x42470060

08007e04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e022      	b.n	8007e5c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d105      	bne.n	8007e2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fb fa21 	bl	8003270 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2203      	movs	r2, #3
 8007e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f814 	bl	8007e64 <HAL_SD_InitCard>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e00a      	b.n	8007e5c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e64:	b5b0      	push	{r4, r5, r7, lr}
 8007e66:	b08e      	sub	sp, #56	; 0x38
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007e80:	2376      	movs	r3, #118	; 0x76
 8007e82:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681d      	ldr	r5, [r3, #0]
 8007e88:	466c      	mov	r4, sp
 8007e8a:	f107 0314 	add.w	r3, r7, #20
 8007e8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e96:	f107 0308 	add.w	r3, r7, #8
 8007e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f001 ff39 	bl	8009d14 <SDIO_Init>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e031      	b.n	8007f18 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007eb4:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <HAL_SD_InitCard+0xbc>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 ff60 	bl	8009d84 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007ec4:	4b16      	ldr	r3, [pc, #88]	; (8007f20 <HAL_SD_InitCard+0xbc>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb16 	bl	80084fc <SD_PowerON>
 8007ed0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e013      	b.n	8007f18 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fa37 	bl	8008364 <SD_InitCard>
 8007ef6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3728      	adds	r7, #40	; 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8007f20:	422580a0 	.word	0x422580a0

08007f24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f32:	0f9b      	lsrs	r3, r3, #30
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f3e:	0e9b      	lsrs	r3, r3, #26
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f50:	0e1b      	lsrs	r3, r3, #24
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0303 	and.w	r3, r3, #3
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f84:	0d1b      	lsrs	r3, r3, #20
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa2:	0bdb      	lsrs	r3, r3, #15
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb4:	0b9b      	lsrs	r3, r3, #14
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc6:	0b5b      	lsrs	r3, r3, #13
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd8:	0b1b      	lsrs	r3, r3, #12
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d163      	bne.n	80080bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff8:	009a      	lsls	r2, r3, #2
 8007ffa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ffe:	4013      	ands	r3, r2
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008004:	0f92      	lsrs	r2, r2, #30
 8008006:	431a      	orrs	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008010:	0edb      	lsrs	r3, r3, #27
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	b2da      	uxtb	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008022:	0e1b      	lsrs	r3, r3, #24
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	b2da      	uxtb	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008034:	0d5b      	lsrs	r3, r3, #21
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	b2da      	uxtb	r2, r3
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008046:	0c9b      	lsrs	r3, r3, #18
 8008048:	b2db      	uxtb	r3, r3
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	0bdb      	lsrs	r3, r3, #15
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	7e1b      	ldrb	r3, [r3, #24]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	3302      	adds	r3, #2
 800807c:	2201      	movs	r2, #1
 800807e:	fa02 f303 	lsl.w	r3, r2, r3
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008086:	fb02 f203 	mul.w	r2, r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	7a1b      	ldrb	r3, [r3, #8]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	2201      	movs	r2, #1
 800809a:	409a      	lsls	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80080a8:	0a52      	lsrs	r2, r2, #9
 80080aa:	fb02 f203 	mul.w	r2, r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b8:	661a      	str	r2, [r3, #96]	; 0x60
 80080ba:	e031      	b.n	8008120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d11d      	bne.n	8008100 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0c1b      	lsrs	r3, r3, #16
 80080d4:	431a      	orrs	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	3301      	adds	r3, #1
 80080e0:	029a      	lsls	r2, r3, #10
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	661a      	str	r2, [r3, #96]	; 0x60
 80080fe:	e00f      	b.n	8008120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a58      	ldr	r2, [pc, #352]	; (8008268 <HAL_SD_GetCardCSD+0x344>)
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e09d      	b.n	800825c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008124:	0b9b      	lsrs	r3, r3, #14
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	b2da      	uxtb	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008136:	09db      	lsrs	r3, r3, #7
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814e:	b2da      	uxtb	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008158:	0fdb      	lsrs	r3, r3, #31
 800815a:	b2da      	uxtb	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008164:	0f5b      	lsrs	r3, r3, #29
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 0303 	and.w	r3, r3, #3
 800816c:	b2da      	uxtb	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	0e9b      	lsrs	r3, r3, #26
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	b2da      	uxtb	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	0d9b      	lsrs	r3, r3, #22
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	0d5b      	lsrs	r3, r3, #21
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	0bdb      	lsrs	r3, r3, #15
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	0b9b      	lsrs	r3, r3, #14
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	0b5b      	lsrs	r3, r3, #13
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	0b1b      	lsrs	r3, r3, #12
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	0a9b      	lsrs	r3, r3, #10
 800821c:	b2db      	uxtb	r3, r3
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	b2da      	uxtb	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	004005ff 	.word	0x004005ff

0800826c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800826c:	b5b0      	push	{r4, r5, r7, lr}
 800826e:	b08e      	sub	sp, #56	; 0x38
 8008270:	af04      	add	r7, sp, #16
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2203      	movs	r2, #3
 800827a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008282:	2b03      	cmp	r3, #3
 8008284:	d02e      	beq.n	80082e4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828c:	d106      	bne.n	800829c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
 800829a:	e029      	b.n	80082f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a2:	d10a      	bne.n	80082ba <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f9b7 	bl	8008618 <SD_WideBus_Enable>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38
 80082b8:	e01a      	b.n	80082f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f9f4 	bl	80086ae <SD_WideBus_Disable>
 80082c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
 80082d4:	e00c      	b.n	80082f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
 80082e2:	e005      	b.n	80082f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d009      	beq.n	800830c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a18      	ldr	r2, [pc, #96]	; (8008360 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e024      	b.n	8008356 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681d      	ldr	r5, [r3, #0]
 8008332:	466c      	mov	r4, sp
 8008334:	f107 0318 	add.w	r3, r7, #24
 8008338:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800833c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008340:	f107 030c 	add.w	r3, r7, #12
 8008344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008346:	4628      	mov	r0, r5
 8008348:	f001 fce4 	bl	8009d14 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3728      	adds	r7, #40	; 0x28
 800835a:	46bd      	mov	sp, r7
 800835c:	bdb0      	pop	{r4, r5, r7, pc}
 800835e:	bf00      	nop
 8008360:	004005ff 	.word	0x004005ff

08008364 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008364:	b5b0      	push	{r4, r5, r7, lr}
 8008366:	b094      	sub	sp, #80	; 0x50
 8008368:	af04      	add	r7, sp, #16
 800836a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800836c:	2301      	movs	r3, #1
 800836e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fd14 	bl	8009da2 <SDIO_GetPowerState>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008380:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008384:	e0b6      	b.n	80084f4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	2b03      	cmp	r3, #3
 800838c:	d02f      	beq.n	80083ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f001 fe93 	bl	800a0be <SDMMC_CmdSendCID>
 8008398:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800839a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80083a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a2:	e0a7      	b.n	80084f4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 fd3e 	bl	8009e2c <SDIO_GetResponse>
 80083b0:	4602      	mov	r2, r0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2104      	movs	r1, #4
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 fd35 	bl	8009e2c <SDIO_GetResponse>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2108      	movs	r1, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 fd2c 	bl	8009e2c <SDIO_GetResponse>
 80083d4:	4602      	mov	r2, r0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	210c      	movs	r1, #12
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fd23 	bl	8009e2c <SDIO_GetResponse>
 80083e6:	4602      	mov	r2, r0
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d00d      	beq.n	8008412 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f107 020e 	add.w	r2, r7, #14
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fe99 	bl	800a138 <SDMMC_CmdSetRelAdd>
 8008406:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <SD_InitCard+0xae>
    {
      return errorstate;
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	e070      	b.n	80084f4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008416:	2b03      	cmp	r3, #3
 8008418:	d036      	beq.n	8008488 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800841a:	89fb      	ldrh	r3, [r7, #14]
 800841c:	461a      	mov	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f001 fe63 	bl	800a0fa <SDMMC_CmdSendCSD>
 8008434:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <SD_InitCard+0xdc>
    {
      return errorstate;
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	e059      	b.n	80084f4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fcf0 	bl	8009e2c <SDIO_GetResponse>
 800844c:	4602      	mov	r2, r0
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2104      	movs	r1, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fce7 	bl	8009e2c <SDIO_GetResponse>
 800845e:	4602      	mov	r2, r0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2108      	movs	r1, #8
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fcde 	bl	8009e2c <SDIO_GetResponse>
 8008470:	4602      	mov	r2, r0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	210c      	movs	r1, #12
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fcd5 	bl	8009e2c <SDIO_GetResponse>
 8008482:	4602      	mov	r2, r0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2104      	movs	r1, #4
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fccc 	bl	8009e2c <SDIO_GetResponse>
 8008494:	4603      	mov	r3, r0
 8008496:	0d1a      	lsrs	r2, r3, #20
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fd3e 	bl	8007f24 <HAL_SD_GetCardCSD>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084b2:	e01f      	b.n	80084f4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6819      	ldr	r1, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084bc:	041b      	lsls	r3, r3, #16
 80084be:	461a      	mov	r2, r3
 80084c0:	f04f 0300 	mov.w	r3, #0
 80084c4:	4608      	mov	r0, r1
 80084c6:	f001 fd12 	bl	8009eee <SDMMC_CmdSelDesel>
 80084ca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <SD_InitCard+0x172>
  {
    return errorstate;
 80084d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d4:	e00e      	b.n	80084f4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681d      	ldr	r5, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	466c      	mov	r4, sp
 80084de:	f103 0210 	add.w	r2, r3, #16
 80084e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80084e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084e8:	3304      	adds	r3, #4
 80084ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084ec:	4628      	mov	r0, r5
 80084ee:	f001 fc11 	bl	8009d14 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3740      	adds	r7, #64	; 0x40
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bdb0      	pop	{r4, r5, r7, pc}

080084fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fd0d 	bl	8009f34 <SDMMC_CmdGoIdleState>
 800851a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	e072      	b.n	800860c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fd20 	bl	8009f70 <SDMMC_CmdOperCond>
 8008530:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00d      	beq.n	8008554 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f001 fcf6 	bl	8009f34 <SDMMC_CmdGoIdleState>
 8008548:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d004      	beq.n	800855a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	e05b      	b.n	800860c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855e:	2b01      	cmp	r3, #1
 8008560:	d137      	bne.n	80085d2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f001 fd20 	bl	8009fae <SDMMC_CmdAppCommand>
 800856e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d02d      	beq.n	80085d2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008576:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800857a:	e047      	b.n	800860c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f001 fd13 	bl	8009fae <SDMMC_CmdAppCommand>
 8008588:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <SD_PowerON+0x98>
    {
      return errorstate;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	e03b      	b.n	800860c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	491e      	ldr	r1, [pc, #120]	; (8008614 <SD_PowerON+0x118>)
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fd29 	bl	8009ff2 <SDMMC_CmdAppOperCommand>
 80085a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085ac:	e02e      	b.n	800860c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fc39 	bl	8009e2c <SDIO_GetResponse>
 80085ba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	0fdb      	lsrs	r3, r3, #31
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <SD_PowerON+0xcc>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <SD_PowerON+0xce>
 80085c8:	2300      	movs	r3, #0
 80085ca:	613b      	str	r3, [r7, #16]

    count++;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085d8:	4293      	cmp	r3, r2
 80085da:	d802      	bhi.n	80085e2 <SD_PowerON+0xe6>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0cc      	beq.n	800857c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d902      	bls.n	80085f2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085f0:	e00c      	b.n	800860c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	645a      	str	r2, [r3, #68]	; 0x44
 8008602:	e002      	b.n	800860a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	c1100000 	.word	0xc1100000

08008618 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	2300      	movs	r3, #0
 8008626:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f001 fbfc 	bl	8009e2c <SDIO_GetResponse>
 8008634:	4603      	mov	r3, r0
 8008636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800863e:	d102      	bne.n	8008646 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008644:	e02f      	b.n	80086a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f879 	bl	8008744 <SD_FindSCR>
 8008652:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	e023      	b.n	80086a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01c      	beq.n	80086a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	041b      	lsls	r3, r3, #16
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f001 fc9a 	bl	8009fae <SDMMC_CmdAppCommand>
 800867a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	e00f      	b.n	80086a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2102      	movs	r1, #2
 800868c:	4618      	mov	r0, r3
 800868e:	f001 fcd3 	bl	800a038 <SDMMC_CmdBusWidth>
 8008692:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	e003      	b.n	80086a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800869e:	2300      	movs	r3, #0
 80086a0:	e001      	b.n	80086a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80086a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	2300      	movs	r3, #0
 80086bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2100      	movs	r1, #0
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 fbb1 	bl	8009e2c <SDIO_GetResponse>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086d4:	d102      	bne.n	80086dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086da:	e02f      	b.n	800873c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086dc:	f107 030c 	add.w	r3, r7, #12
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f82e 	bl	8008744 <SD_FindSCR>
 80086e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	e023      	b.n	800873c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01c      	beq.n	8008738 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f001 fc4f 	bl	8009fae <SDMMC_CmdAppCommand>
 8008710:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	e00f      	b.n	800873c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f001 fc88 	bl	800a038 <SDMMC_CmdBusWidth>
 8008728:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	e003      	b.n	800873c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008734:	2300      	movs	r3, #0
 8008736:	e001      	b.n	800873c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008738:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b08f      	sub	sp, #60	; 0x3c
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800874e:	f7fb f85f 	bl	8003810 <HAL_GetTick>
 8008752:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008758:	2300      	movs	r3, #0
 800875a:	60bb      	str	r3, [r7, #8]
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2108      	movs	r1, #8
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fb9d 	bl	8009eaa <SDMMC_CmdBlockLength>
 8008770:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	e0a9      	b.n	80088d0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f001 fc10 	bl	8009fae <SDMMC_CmdAppCommand>
 800878e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	e09a      	b.n	80088d0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80087a0:	2308      	movs	r3, #8
 80087a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80087a4:	2330      	movs	r3, #48	; 0x30
 80087a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80087a8:	2302      	movs	r3, #2
 80087aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80087b0:	2301      	movs	r3, #1
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f107 0210 	add.w	r2, r7, #16
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 fb47 	bl	8009e52 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f001 fc57 	bl	800a07c <SDMMC_CmdSendSCR>
 80087ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d022      	beq.n	800881c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	e07a      	b.n	80088d0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00e      	beq.n	8008806 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6819      	ldr	r1, [r3, #0]
 80087ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	f107 0208 	add.w	r2, r7, #8
 80087f4:	18d4      	adds	r4, r2, r3
 80087f6:	4608      	mov	r0, r1
 80087f8:	f001 fab7 	bl	8009d6a <SDIO_ReadFIFO>
 80087fc:	4603      	mov	r3, r0
 80087fe:	6023      	str	r3, [r4, #0]
      index++;
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	3301      	adds	r3, #1
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008806:	f7fb f803 	bl	8003810 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d102      	bne.n	800881c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008816:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800881a:	e059      	b.n	80088d0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008822:	f240 432a 	movw	r3, #1066	; 0x42a
 8008826:	4013      	ands	r3, r2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0d6      	beq.n	80087da <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2208      	movs	r2, #8
 8008840:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008842:	2308      	movs	r3, #8
 8008844:	e044      	b.n	80088d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2202      	movs	r2, #2
 800885a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800885c:	2302      	movs	r3, #2
 800885e:	e037      	b.n	80088d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2220      	movs	r2, #32
 8008874:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008876:	2320      	movs	r3, #32
 8008878:	e02a      	b.n	80088d0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008882:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	061a      	lsls	r2, r3, #24
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	021b      	lsls	r3, r3, #8
 800888c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008890:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	0a1b      	lsrs	r3, r3, #8
 8008896:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800889a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	0e1b      	lsrs	r3, r3, #24
 80088a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	601a      	str	r2, [r3, #0]
    scr++;
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	3304      	adds	r3, #4
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	061a      	lsls	r2, r3, #24
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0a1b      	lsrs	r3, r3, #8
 80088be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	0e1b      	lsrs	r3, r3, #24
 80088c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	373c      	adds	r7, #60	; 0x3c
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd90      	pop	{r4, r7, pc}

080088d8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e034      	b.n	8008958 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7fa fe12 	bl	800352c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3308      	adds	r3, #8
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f001 f8fa 	bl	8009b0c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	461a      	mov	r2, r3
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	f001 f962 	bl	8009bec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6858      	ldr	r0, [r3, #4]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	f001 f9ad 	bl	8009c94 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	6892      	ldr	r2, [r2, #8]
 8008942:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	6892      	ldr	r2, [r2, #8]
 800894e:	f041 0101 	orr.w	r1, r1, #1
 8008952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e01d      	b.n	80089ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f815 	bl	80089b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3304      	adds	r3, #4
 800899c:	4619      	mov	r1, r3
 800899e:	4610      	mov	r0, r2
 80089a0:	f000 f968 	bl	8008c74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f042 0201 	orr.w	r2, r2, #1
 80089e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b06      	cmp	r3, #6
 80089f2:	d007      	beq.n	8008a04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d122      	bne.n	8008a6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d11b      	bne.n	8008a6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f06f 0202 	mvn.w	r2, #2
 8008a3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f8ee 	bl	8008c36 <HAL_TIM_IC_CaptureCallback>
 8008a5a:	e005      	b.n	8008a68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f8e0 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8f1 	bl	8008c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d122      	bne.n	8008ac2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d11b      	bne.n	8008ac2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f06f 0204 	mvn.w	r2, #4
 8008a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f8c4 	bl	8008c36 <HAL_TIM_IC_CaptureCallback>
 8008aae:	e005      	b.n	8008abc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f8b6 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8c7 	bl	8008c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d122      	bne.n	8008b16 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d11b      	bne.n	8008b16 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f06f 0208 	mvn.w	r2, #8
 8008ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2204      	movs	r2, #4
 8008aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f89a 	bl	8008c36 <HAL_TIM_IC_CaptureCallback>
 8008b02:	e005      	b.n	8008b10 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f88c 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f89d 	bl	8008c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d122      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f003 0310 	and.w	r3, r3, #16
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d11b      	bne.n	8008b6a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f06f 0210 	mvn.w	r2, #16
 8008b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2208      	movs	r2, #8
 8008b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f870 	bl	8008c36 <HAL_TIM_IC_CaptureCallback>
 8008b56:	e005      	b.n	8008b64 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f862 	bl	8008c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f873 	bl	8008c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10e      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d107      	bne.n	8008b96 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f06f 0201 	mvn.w	r2, #1
 8008b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7f9 fa05 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba0:	2b80      	cmp	r3, #128	; 0x80
 8008ba2:	d10e      	bne.n	8008bc2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bae:	2b80      	cmp	r3, #128	; 0x80
 8008bb0:	d107      	bne.n	8008bc2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f903 	bl	8008dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d10e      	bne.n	8008bee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d107      	bne.n	8008bee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f838 	bl	8008c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b20      	cmp	r3, #32
 8008bfa:	d10e      	bne.n	8008c1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d107      	bne.n	8008c1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f06f 0220 	mvn.w	r2, #32
 8008c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f8cd 	bl	8008db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a40      	ldr	r2, [pc, #256]	; (8008d88 <TIM_Base_SetConfig+0x114>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d013      	beq.n	8008cb4 <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c92:	d00f      	beq.n	8008cb4 <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a3d      	ldr	r2, [pc, #244]	; (8008d8c <TIM_Base_SetConfig+0x118>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00b      	beq.n	8008cb4 <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a3c      	ldr	r2, [pc, #240]	; (8008d90 <TIM_Base_SetConfig+0x11c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d007      	beq.n	8008cb4 <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a3b      	ldr	r2, [pc, #236]	; (8008d94 <TIM_Base_SetConfig+0x120>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_Base_SetConfig+0x40>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a3a      	ldr	r2, [pc, #232]	; (8008d98 <TIM_Base_SetConfig+0x124>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d108      	bne.n	8008cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2f      	ldr	r2, [pc, #188]	; (8008d88 <TIM_Base_SetConfig+0x114>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d02b      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd4:	d027      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a2c      	ldr	r2, [pc, #176]	; (8008d8c <TIM_Base_SetConfig+0x118>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d023      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2b      	ldr	r2, [pc, #172]	; (8008d90 <TIM_Base_SetConfig+0x11c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d01f      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <TIM_Base_SetConfig+0x120>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d01b      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a29      	ldr	r2, [pc, #164]	; (8008d98 <TIM_Base_SetConfig+0x124>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d017      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a28      	ldr	r2, [pc, #160]	; (8008d9c <TIM_Base_SetConfig+0x128>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d013      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a27      	ldr	r2, [pc, #156]	; (8008da0 <TIM_Base_SetConfig+0x12c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00f      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <TIM_Base_SetConfig+0x130>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00b      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a25      	ldr	r2, [pc, #148]	; (8008da8 <TIM_Base_SetConfig+0x134>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d007      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a24      	ldr	r2, [pc, #144]	; (8008dac <TIM_Base_SetConfig+0x138>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d003      	beq.n	8008d26 <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a23      	ldr	r2, [pc, #140]	; (8008db0 <TIM_Base_SetConfig+0x13c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d108      	bne.n	8008d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a0a      	ldr	r2, [pc, #40]	; (8008d88 <TIM_Base_SetConfig+0x114>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d003      	beq.n	8008d6c <TIM_Base_SetConfig+0xf8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a0c      	ldr	r2, [pc, #48]	; (8008d98 <TIM_Base_SetConfig+0x124>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d103      	bne.n	8008d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	615a      	str	r2, [r3, #20]
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40010000 	.word	0x40010000
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40000c00 	.word	0x40000c00
 8008d98:	40010400 	.word	0x40010400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800
 8008da8:	40001800 	.word	0x40001800
 8008dac:	40001c00 	.word	0x40001c00
 8008db0:	40002000 	.word	0x40002000

08008db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e03f      	b.n	8008e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fa fa9c 	bl	8003340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2224      	movs	r2, #36	; 0x24
 8008e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fab3 	bl	800938c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695a      	ldr	r2, [r3, #20]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d140      	bne.n	8008f12 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_UART_Receive_IT+0x26>
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e039      	b.n	8008f14 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d101      	bne.n	8008eae <HAL_UART_Receive_IT+0x38>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e032      	b.n	8008f14 <HAL_UART_Receive_IT+0x9e>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	88fa      	ldrh	r2, [r7, #6]
 8008ec0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2222      	movs	r2, #34	; 0x22
 8008ed2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eec:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	695a      	ldr	r2, [r3, #20]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0201 	orr.w	r2, r2, #1
 8008efc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0220 	orr.w	r2, r2, #32
 8008f0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e000      	b.n	8008f14 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008f12:	2302      	movs	r3, #2
  }
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f003 030f 	and.w	r3, r3, #15
 8008f4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <HAL_UART_IRQHandler+0x52>
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f98c 	bl	8009288 <UART_Receive_IT>
      return;
 8008f70:	e0d0      	b.n	8009114 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80b0 	beq.w	80090da <HAL_UART_IRQHandler+0x1ba>
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <HAL_UART_IRQHandler+0x70>
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 80a5 	beq.w	80090da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x90>
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d005      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa8:	f043 0201 	orr.w	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_UART_IRQHandler+0xb0>
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc8:	f043 0202 	orr.w	r2, r3, #2
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <HAL_UART_IRQHandler+0xd0>
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe8:	f043 0204 	orr.w	r2, r3, #4
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f003 0308 	and.w	r3, r3, #8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00f      	beq.n	800901a <HAL_UART_IRQHandler+0xfa>
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <HAL_UART_IRQHandler+0xee>
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009012:	f043 0208 	orr.w	r2, r3, #8
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d077      	beq.n	8009112 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <HAL_UART_IRQHandler+0x11c>
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f926 	bl	8009288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009046:	2b40      	cmp	r3, #64	; 0x40
 8009048:	bf0c      	ite	eq
 800904a:	2301      	moveq	r3, #1
 800904c:	2300      	movne	r3, #0
 800904e:	b2db      	uxtb	r3, r3
 8009050:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d102      	bne.n	8009064 <HAL_UART_IRQHandler+0x144>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d031      	beq.n	80090c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f86f 	bl	8009148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009074:	2b40      	cmp	r3, #64	; 0x40
 8009076:	d123      	bne.n	80090c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695a      	ldr	r2, [r3, #20]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009086:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908c:	2b00      	cmp	r3, #0
 800908e:	d013      	beq.n	80090b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	4a21      	ldr	r2, [pc, #132]	; (800911c <HAL_UART_IRQHandler+0x1fc>)
 8009096:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909c:	4618      	mov	r0, r3
 800909e:	f7fb f95d 	bl	800435c <HAL_DMA_Abort_IT>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d016      	beq.n	80090d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80090b2:	4610      	mov	r0, r2
 80090b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b6:	e00e      	b.n	80090d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f83b 	bl	8009134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090be:	e00a      	b.n	80090d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f837 	bl	8009134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090c6:	e006      	b.n	80090d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f833 	bl	8009134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80090d4:	e01d      	b.n	8009112 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d6:	bf00      	nop
    return;
 80090d8:	e01b      	b.n	8009112 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <HAL_UART_IRQHandler+0x1d6>
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f85c 	bl	80091ac <UART_Transmit_IT>
    return;
 80090f4:	e00e      	b.n	8009114 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <HAL_UART_IRQHandler+0x1f4>
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d004      	beq.n	8009114 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f8a4 	bl	8009258 <UART_EndTransmit_IT>
    return;
 8009110:	e000      	b.n	8009114 <HAL_UART_IRQHandler+0x1f4>
    return;
 8009112:	bf00      	nop
  }
}
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	08009185 	.word	0x08009185

08009120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800915e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695a      	ldr	r2, [r3, #20]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0201 	bic.w	r2, r2, #1
 800916e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2220      	movs	r2, #32
 8009174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff ffc8 	bl	8009134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b21      	cmp	r3, #33	; 0x21
 80091be:	d144      	bne.n	800924a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c8:	d11a      	bne.n	8009200 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d105      	bne.n	80091f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	1c9a      	adds	r2, r3, #2
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	621a      	str	r2, [r3, #32]
 80091f2:	e00e      	b.n	8009212 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	621a      	str	r2, [r3, #32]
 80091fe:	e008      	b.n	8009212 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	1c59      	adds	r1, r3, #1
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	6211      	str	r1, [r2, #32]
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009216:	b29b      	uxth	r3, r3
 8009218:	3b01      	subs	r3, #1
 800921a:	b29b      	uxth	r3, r3
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	4619      	mov	r1, r3
 8009220:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10f      	bne.n	8009246 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800924a:	2302      	movs	r3, #2
  }
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800926e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ff51 	bl	8009120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b22      	cmp	r3, #34	; 0x22
 800929a:	d171      	bne.n	8009380 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a4:	d123      	bne.n	80092ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10e      	bne.n	80092d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	1c9a      	adds	r2, r3, #2
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	629a      	str	r2, [r3, #40]	; 0x28
 80092d0:	e029      	b.n	8009326 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	629a      	str	r2, [r3, #40]	; 0x28
 80092ec:	e01b      	b.n	8009326 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10a      	bne.n	800930c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6858      	ldr	r0, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009300:	1c59      	adds	r1, r3, #1
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6291      	str	r1, [r2, #40]	; 0x28
 8009306:	b2c2      	uxtb	r2, r0
 8009308:	701a      	strb	r2, [r3, #0]
 800930a:	e00c      	b.n	8009326 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	1c58      	adds	r0, r3, #1
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	6288      	str	r0, [r1, #40]	; 0x28
 800931e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29b      	uxth	r3, r3
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4619      	mov	r1, r3
 8009334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009336:	2b00      	cmp	r3, #0
 8009338:	d120      	bne.n	800937c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0220 	bic.w	r2, r2, #32
 8009348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	695a      	ldr	r2, [r3, #20]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0201 	bic.w	r2, r2, #1
 8009368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7f7 fde6 	bl	8000f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	e002      	b.n	8009382 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	b0bd      	sub	sp, #244	; 0xf4
 8009392:	af00      	add	r7, sp, #0
 8009394:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80093a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a8:	68d9      	ldr	r1, [r3, #12]
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	ea40 0301 	orr.w	r3, r0, r1
 80093b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	431a      	orrs	r2, r3
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80093d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80093e4:	f021 010c 	bic.w	r1, r1, #12
 80093e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093f2:	430b      	orrs	r3, r1
 80093f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009406:	6999      	ldr	r1, [r3, #24]
 8009408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	ea40 0301 	orr.w	r3, r0, r1
 8009412:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941e:	f040 81b6 	bne.w	800978e <UART_SetConfig+0x402>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	4b70      	ldr	r3, [pc, #448]	; (80095ec <UART_SetConfig+0x260>)
 800942a:	429a      	cmp	r2, r3
 800942c:	d012      	beq.n	8009454 <UART_SetConfig+0xc8>
 800942e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	4b6e      	ldr	r3, [pc, #440]	; (80095f0 <UART_SetConfig+0x264>)
 8009436:	429a      	cmp	r2, r3
 8009438:	d00c      	beq.n	8009454 <UART_SetConfig+0xc8>
 800943a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	4b6c      	ldr	r3, [pc, #432]	; (80095f4 <UART_SetConfig+0x268>)
 8009442:	429a      	cmp	r2, r3
 8009444:	d006      	beq.n	8009454 <UART_SetConfig+0xc8>
 8009446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b6a      	ldr	r3, [pc, #424]	; (80095f8 <UART_SetConfig+0x26c>)
 800944e:	429a      	cmp	r2, r3
 8009450:	f040 80d6 	bne.w	8009600 <UART_SetConfig+0x274>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009454:	f7fd fe5e 	bl	8007114 <HAL_RCC_GetPCLK2Freq>
 8009458:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800945c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009460:	461c      	mov	r4, r3
 8009462:	f04f 0500 	mov.w	r5, #0
 8009466:	4622      	mov	r2, r4
 8009468:	462b      	mov	r3, r5
 800946a:	1891      	adds	r1, r2, r2
 800946c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009470:	415b      	adcs	r3, r3
 8009472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009476:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800947a:	1912      	adds	r2, r2, r4
 800947c:	eb45 0303 	adc.w	r3, r5, r3
 8009480:	f04f 0000 	mov.w	r0, #0
 8009484:	f04f 0100 	mov.w	r1, #0
 8009488:	00d9      	lsls	r1, r3, #3
 800948a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800948e:	00d0      	lsls	r0, r2, #3
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	1911      	adds	r1, r2, r4
 8009496:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800949a:	416b      	adcs	r3, r5
 800949c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	1891      	adds	r1, r2, r2
 80094ae:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80094b2:	415b      	adcs	r3, r3
 80094b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80094bc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80094c0:	f7f7 fb92 	bl	8000be8 <__aeabi_uldivmod>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4b4c      	ldr	r3, [pc, #304]	; (80095fc <UART_SetConfig+0x270>)
 80094ca:	fba3 2302 	umull	r2, r3, r3, r2
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	011e      	lsls	r6, r3, #4
 80094d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094d6:	461c      	mov	r4, r3
 80094d8:	f04f 0500 	mov.w	r5, #0
 80094dc:	4622      	mov	r2, r4
 80094de:	462b      	mov	r3, r5
 80094e0:	1891      	adds	r1, r2, r2
 80094e2:	67b9      	str	r1, [r7, #120]	; 0x78
 80094e4:	415b      	adcs	r3, r3
 80094e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094ec:	1912      	adds	r2, r2, r4
 80094ee:	eb45 0303 	adc.w	r3, r5, r3
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	f04f 0100 	mov.w	r1, #0
 80094fa:	00d9      	lsls	r1, r3, #3
 80094fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009500:	00d0      	lsls	r0, r2, #3
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	1911      	adds	r1, r2, r4
 8009508:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800950c:	416b      	adcs	r3, r5
 800950e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	461a      	mov	r2, r3
 800951a:	f04f 0300 	mov.w	r3, #0
 800951e:	1891      	adds	r1, r2, r2
 8009520:	6739      	str	r1, [r7, #112]	; 0x70
 8009522:	415b      	adcs	r3, r3
 8009524:	677b      	str	r3, [r7, #116]	; 0x74
 8009526:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800952a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800952e:	f7f7 fb5b 	bl	8000be8 <__aeabi_uldivmod>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4b31      	ldr	r3, [pc, #196]	; (80095fc <UART_SetConfig+0x270>)
 8009538:	fba3 1302 	umull	r1, r3, r3, r2
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	2164      	movs	r1, #100	; 0x64
 8009540:	fb01 f303 	mul.w	r3, r1, r3
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	3332      	adds	r3, #50	; 0x32
 800954a:	4a2c      	ldr	r2, [pc, #176]	; (80095fc <UART_SetConfig+0x270>)
 800954c:	fba2 2303 	umull	r2, r3, r2, r3
 8009550:	095b      	lsrs	r3, r3, #5
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009558:	441e      	add	r6, r3
 800955a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800955e:	4618      	mov	r0, r3
 8009560:	f04f 0100 	mov.w	r1, #0
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	1894      	adds	r4, r2, r2
 800956a:	66bc      	str	r4, [r7, #104]	; 0x68
 800956c:	415b      	adcs	r3, r3
 800956e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009570:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009574:	1812      	adds	r2, r2, r0
 8009576:	eb41 0303 	adc.w	r3, r1, r3
 800957a:	f04f 0400 	mov.w	r4, #0
 800957e:	f04f 0500 	mov.w	r5, #0
 8009582:	00dd      	lsls	r5, r3, #3
 8009584:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009588:	00d4      	lsls	r4, r2, #3
 800958a:	4622      	mov	r2, r4
 800958c:	462b      	mov	r3, r5
 800958e:	1814      	adds	r4, r2, r0
 8009590:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009594:	414b      	adcs	r3, r1
 8009596:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800959a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	461a      	mov	r2, r3
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	1891      	adds	r1, r2, r2
 80095a8:	6639      	str	r1, [r7, #96]	; 0x60
 80095aa:	415b      	adcs	r3, r3
 80095ac:	667b      	str	r3, [r7, #100]	; 0x64
 80095ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80095b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80095b6:	f7f7 fb17 	bl	8000be8 <__aeabi_uldivmod>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <UART_SetConfig+0x270>)
 80095c0:	fba3 1302 	umull	r1, r3, r3, r2
 80095c4:	095b      	lsrs	r3, r3, #5
 80095c6:	2164      	movs	r1, #100	; 0x64
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	3332      	adds	r3, #50	; 0x32
 80095d2:	4a0a      	ldr	r2, [pc, #40]	; (80095fc <UART_SetConfig+0x270>)
 80095d4:	fba2 2303 	umull	r2, r3, r2, r3
 80095d8:	095b      	lsrs	r3, r3, #5
 80095da:	f003 0207 	and.w	r2, r3, #7
 80095de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4432      	add	r2, r6
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	e288      	b.n	8009afc <UART_SetConfig+0x770>
 80095ea:	bf00      	nop
 80095ec:	40011000 	.word	0x40011000
 80095f0:	40011400 	.word	0x40011400
 80095f4:	40011800 	.word	0x40011800
 80095f8:	40011c00 	.word	0x40011c00
 80095fc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009600:	f7fd fd74 	bl	80070ec <HAL_RCC_GetPCLK1Freq>
 8009604:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800960c:	461c      	mov	r4, r3
 800960e:	f04f 0500 	mov.w	r5, #0
 8009612:	4622      	mov	r2, r4
 8009614:	462b      	mov	r3, r5
 8009616:	1891      	adds	r1, r2, r2
 8009618:	65b9      	str	r1, [r7, #88]	; 0x58
 800961a:	415b      	adcs	r3, r3
 800961c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800961e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009622:	1912      	adds	r2, r2, r4
 8009624:	eb45 0303 	adc.w	r3, r5, r3
 8009628:	f04f 0000 	mov.w	r0, #0
 800962c:	f04f 0100 	mov.w	r1, #0
 8009630:	00d9      	lsls	r1, r3, #3
 8009632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009636:	00d0      	lsls	r0, r2, #3
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	1911      	adds	r1, r2, r4
 800963e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009642:	416b      	adcs	r3, r5
 8009644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	461a      	mov	r2, r3
 8009650:	f04f 0300 	mov.w	r3, #0
 8009654:	1891      	adds	r1, r2, r2
 8009656:	6539      	str	r1, [r7, #80]	; 0x50
 8009658:	415b      	adcs	r3, r3
 800965a:	657b      	str	r3, [r7, #84]	; 0x54
 800965c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009660:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009664:	f7f7 fac0 	bl	8000be8 <__aeabi_uldivmod>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4bb9      	ldr	r3, [pc, #740]	; (8009954 <UART_SetConfig+0x5c8>)
 800966e:	fba3 2302 	umull	r2, r3, r3, r2
 8009672:	095b      	lsrs	r3, r3, #5
 8009674:	011e      	lsls	r6, r3, #4
 8009676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800967a:	461c      	mov	r4, r3
 800967c:	f04f 0500 	mov.w	r5, #0
 8009680:	4622      	mov	r2, r4
 8009682:	462b      	mov	r3, r5
 8009684:	1891      	adds	r1, r2, r2
 8009686:	64b9      	str	r1, [r7, #72]	; 0x48
 8009688:	415b      	adcs	r3, r3
 800968a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800968c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009690:	1912      	adds	r2, r2, r4
 8009692:	eb45 0303 	adc.w	r3, r5, r3
 8009696:	f04f 0000 	mov.w	r0, #0
 800969a:	f04f 0100 	mov.w	r1, #0
 800969e:	00d9      	lsls	r1, r3, #3
 80096a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80096a4:	00d0      	lsls	r0, r2, #3
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	1911      	adds	r1, r2, r4
 80096ac:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80096b0:	416b      	adcs	r3, r5
 80096b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	461a      	mov	r2, r3
 80096be:	f04f 0300 	mov.w	r3, #0
 80096c2:	1891      	adds	r1, r2, r2
 80096c4:	6439      	str	r1, [r7, #64]	; 0x40
 80096c6:	415b      	adcs	r3, r3
 80096c8:	647b      	str	r3, [r7, #68]	; 0x44
 80096ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80096d2:	f7f7 fa89 	bl	8000be8 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4b9e      	ldr	r3, [pc, #632]	; (8009954 <UART_SetConfig+0x5c8>)
 80096dc:	fba3 1302 	umull	r1, r3, r3, r2
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	2164      	movs	r1, #100	; 0x64
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	3332      	adds	r3, #50	; 0x32
 80096ee:	4a99      	ldr	r2, [pc, #612]	; (8009954 <UART_SetConfig+0x5c8>)
 80096f0:	fba2 2303 	umull	r2, r3, r2, r3
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096fc:	441e      	add	r6, r3
 80096fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009702:	4618      	mov	r0, r3
 8009704:	f04f 0100 	mov.w	r1, #0
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	1894      	adds	r4, r2, r2
 800970e:	63bc      	str	r4, [r7, #56]	; 0x38
 8009710:	415b      	adcs	r3, r3
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009718:	1812      	adds	r2, r2, r0
 800971a:	eb41 0303 	adc.w	r3, r1, r3
 800971e:	f04f 0400 	mov.w	r4, #0
 8009722:	f04f 0500 	mov.w	r5, #0
 8009726:	00dd      	lsls	r5, r3, #3
 8009728:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800972c:	00d4      	lsls	r4, r2, #3
 800972e:	4622      	mov	r2, r4
 8009730:	462b      	mov	r3, r5
 8009732:	1814      	adds	r4, r2, r0
 8009734:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009738:	414b      	adcs	r3, r1
 800973a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800973e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	461a      	mov	r2, r3
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	1891      	adds	r1, r2, r2
 800974c:	6339      	str	r1, [r7, #48]	; 0x30
 800974e:	415b      	adcs	r3, r3
 8009750:	637b      	str	r3, [r7, #52]	; 0x34
 8009752:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800975a:	f7f7 fa45 	bl	8000be8 <__aeabi_uldivmod>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4b7c      	ldr	r3, [pc, #496]	; (8009954 <UART_SetConfig+0x5c8>)
 8009764:	fba3 1302 	umull	r1, r3, r3, r2
 8009768:	095b      	lsrs	r3, r3, #5
 800976a:	2164      	movs	r1, #100	; 0x64
 800976c:	fb01 f303 	mul.w	r3, r1, r3
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	3332      	adds	r3, #50	; 0x32
 8009776:	4a77      	ldr	r2, [pc, #476]	; (8009954 <UART_SetConfig+0x5c8>)
 8009778:	fba2 2303 	umull	r2, r3, r2, r3
 800977c:	095b      	lsrs	r3, r3, #5
 800977e:	f003 0207 	and.w	r2, r3, #7
 8009782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4432      	add	r2, r6
 800978a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800978c:	e1b6      	b.n	8009afc <UART_SetConfig+0x770>
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	4b70      	ldr	r3, [pc, #448]	; (8009958 <UART_SetConfig+0x5cc>)
 8009796:	429a      	cmp	r2, r3
 8009798:	d012      	beq.n	80097c0 <UART_SetConfig+0x434>
 800979a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	4b6e      	ldr	r3, [pc, #440]	; (800995c <UART_SetConfig+0x5d0>)
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d00c      	beq.n	80097c0 <UART_SetConfig+0x434>
 80097a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	4b6c      	ldr	r3, [pc, #432]	; (8009960 <UART_SetConfig+0x5d4>)
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d006      	beq.n	80097c0 <UART_SetConfig+0x434>
 80097b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4b6a      	ldr	r3, [pc, #424]	; (8009964 <UART_SetConfig+0x5d8>)
 80097ba:	429a      	cmp	r2, r3
 80097bc:	f040 80d4 	bne.w	8009968 <UART_SetConfig+0x5dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80097c0:	f7fd fca8 	bl	8007114 <HAL_RCC_GetPCLK2Freq>
 80097c4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097cc:	461c      	mov	r4, r3
 80097ce:	f04f 0500 	mov.w	r5, #0
 80097d2:	4622      	mov	r2, r4
 80097d4:	462b      	mov	r3, r5
 80097d6:	1891      	adds	r1, r2, r2
 80097d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80097da:	415b      	adcs	r3, r3
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097e2:	1912      	adds	r2, r2, r4
 80097e4:	eb45 0303 	adc.w	r3, r5, r3
 80097e8:	f04f 0000 	mov.w	r0, #0
 80097ec:	f04f 0100 	mov.w	r1, #0
 80097f0:	00d9      	lsls	r1, r3, #3
 80097f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097f6:	00d0      	lsls	r0, r2, #3
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	eb12 0a04 	adds.w	sl, r2, r4
 8009800:	eb43 0b05 	adc.w	fp, r3, r5
 8009804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	4618      	mov	r0, r3
 800980c:	f04f 0100 	mov.w	r1, #0
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	008b      	lsls	r3, r1, #2
 800981a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800981e:	0082      	lsls	r2, r0, #2
 8009820:	4650      	mov	r0, sl
 8009822:	4659      	mov	r1, fp
 8009824:	f7f7 f9e0 	bl	8000be8 <__aeabi_uldivmod>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4b49      	ldr	r3, [pc, #292]	; (8009954 <UART_SetConfig+0x5c8>)
 800982e:	fba3 2302 	umull	r2, r3, r3, r2
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	011e      	lsls	r6, r3, #4
 8009836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800983a:	4618      	mov	r0, r3
 800983c:	f04f 0100 	mov.w	r1, #0
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	1894      	adds	r4, r2, r2
 8009846:	623c      	str	r4, [r7, #32]
 8009848:	415b      	adcs	r3, r3
 800984a:	627b      	str	r3, [r7, #36]	; 0x24
 800984c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009850:	1812      	adds	r2, r2, r0
 8009852:	eb41 0303 	adc.w	r3, r1, r3
 8009856:	f04f 0400 	mov.w	r4, #0
 800985a:	f04f 0500 	mov.w	r5, #0
 800985e:	00dd      	lsls	r5, r3, #3
 8009860:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009864:	00d4      	lsls	r4, r2, #3
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	1814      	adds	r4, r2, r0
 800986c:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009870:	414b      	adcs	r3, r1
 8009872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	4618      	mov	r0, r3
 800987e:	f04f 0100 	mov.w	r1, #0
 8009882:	f04f 0200 	mov.w	r2, #0
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	008b      	lsls	r3, r1, #2
 800988c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009890:	0082      	lsls	r2, r0, #2
 8009892:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009896:	f7f7 f9a7 	bl	8000be8 <__aeabi_uldivmod>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	4b2d      	ldr	r3, [pc, #180]	; (8009954 <UART_SetConfig+0x5c8>)
 80098a0:	fba3 1302 	umull	r1, r3, r3, r2
 80098a4:	095b      	lsrs	r3, r3, #5
 80098a6:	2164      	movs	r1, #100	; 0x64
 80098a8:	fb01 f303 	mul.w	r3, r1, r3
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	3332      	adds	r3, #50	; 0x32
 80098b2:	4a28      	ldr	r2, [pc, #160]	; (8009954 <UART_SetConfig+0x5c8>)
 80098b4:	fba2 2303 	umull	r2, r3, r2, r3
 80098b8:	095b      	lsrs	r3, r3, #5
 80098ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098be:	441e      	add	r6, r3
 80098c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80098c4:	4618      	mov	r0, r3
 80098c6:	f04f 0100 	mov.w	r1, #0
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	1894      	adds	r4, r2, r2
 80098d0:	61bc      	str	r4, [r7, #24]
 80098d2:	415b      	adcs	r3, r3
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098da:	1812      	adds	r2, r2, r0
 80098dc:	eb41 0303 	adc.w	r3, r1, r3
 80098e0:	f04f 0400 	mov.w	r4, #0
 80098e4:	f04f 0500 	mov.w	r5, #0
 80098e8:	00dd      	lsls	r5, r3, #3
 80098ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098ee:	00d4      	lsls	r4, r2, #3
 80098f0:	4622      	mov	r2, r4
 80098f2:	462b      	mov	r3, r5
 80098f4:	1814      	adds	r4, r2, r0
 80098f6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80098fa:	414b      	adcs	r3, r1
 80098fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4618      	mov	r0, r3
 8009908:	f04f 0100 	mov.w	r1, #0
 800990c:	f04f 0200 	mov.w	r2, #0
 8009910:	f04f 0300 	mov.w	r3, #0
 8009914:	008b      	lsls	r3, r1, #2
 8009916:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800991a:	0082      	lsls	r2, r0, #2
 800991c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009920:	f7f7 f962 	bl	8000be8 <__aeabi_uldivmod>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <UART_SetConfig+0x5c8>)
 800992a:	fba3 1302 	umull	r1, r3, r3, r2
 800992e:	095b      	lsrs	r3, r3, #5
 8009930:	2164      	movs	r1, #100	; 0x64
 8009932:	fb01 f303 	mul.w	r3, r1, r3
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	3332      	adds	r3, #50	; 0x32
 800993c:	4a05      	ldr	r2, [pc, #20]	; (8009954 <UART_SetConfig+0x5c8>)
 800993e:	fba2 2303 	umull	r2, r3, r2, r3
 8009942:	095b      	lsrs	r3, r3, #5
 8009944:	f003 020f 	and.w	r2, r3, #15
 8009948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4432      	add	r2, r6
 8009950:	609a      	str	r2, [r3, #8]
 8009952:	e0d3      	b.n	8009afc <UART_SetConfig+0x770>
 8009954:	51eb851f 	.word	0x51eb851f
 8009958:	40011000 	.word	0x40011000
 800995c:	40011400 	.word	0x40011400
 8009960:	40011800 	.word	0x40011800
 8009964:	40011c00 	.word	0x40011c00
      pclk = HAL_RCC_GetPCLK1Freq();
 8009968:	f7fd fbc0 	bl	80070ec <HAL_RCC_GetPCLK1Freq>
 800996c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009974:	461c      	mov	r4, r3
 8009976:	f04f 0500 	mov.w	r5, #0
 800997a:	4622      	mov	r2, r4
 800997c:	462b      	mov	r3, r5
 800997e:	1891      	adds	r1, r2, r2
 8009980:	6139      	str	r1, [r7, #16]
 8009982:	415b      	adcs	r3, r3
 8009984:	617b      	str	r3, [r7, #20]
 8009986:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800998a:	1912      	adds	r2, r2, r4
 800998c:	eb45 0303 	adc.w	r3, r5, r3
 8009990:	f04f 0000 	mov.w	r0, #0
 8009994:	f04f 0100 	mov.w	r1, #0
 8009998:	00d9      	lsls	r1, r3, #3
 800999a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800999e:	00d0      	lsls	r0, r2, #3
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	eb12 0804 	adds.w	r8, r2, r4
 80099a8:	eb43 0905 	adc.w	r9, r3, r5
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f04f 0100 	mov.w	r1, #0
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	f04f 0300 	mov.w	r3, #0
 80099c0:	008b      	lsls	r3, r1, #2
 80099c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099c6:	0082      	lsls	r2, r0, #2
 80099c8:	4640      	mov	r0, r8
 80099ca:	4649      	mov	r1, r9
 80099cc:	f7f7 f90c 	bl	8000be8 <__aeabi_uldivmod>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4b4c      	ldr	r3, [pc, #304]	; (8009b08 <UART_SetConfig+0x77c>)
 80099d6:	fba3 2302 	umull	r2, r3, r3, r2
 80099da:	095b      	lsrs	r3, r3, #5
 80099dc:	011e      	lsls	r6, r3, #4
 80099de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099e2:	4618      	mov	r0, r3
 80099e4:	f04f 0100 	mov.w	r1, #0
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	1894      	adds	r4, r2, r2
 80099ee:	60bc      	str	r4, [r7, #8]
 80099f0:	415b      	adcs	r3, r3
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099f8:	1812      	adds	r2, r2, r0
 80099fa:	eb41 0303 	adc.w	r3, r1, r3
 80099fe:	f04f 0400 	mov.w	r4, #0
 8009a02:	f04f 0500 	mov.w	r5, #0
 8009a06:	00dd      	lsls	r5, r3, #3
 8009a08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a0c:	00d4      	lsls	r4, r2, #3
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	1814      	adds	r4, r2, r0
 8009a14:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009a18:	414b      	adcs	r3, r1
 8009a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f04f 0100 	mov.w	r1, #0
 8009a2a:	f04f 0200 	mov.w	r2, #0
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	008b      	lsls	r3, r1, #2
 8009a34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a38:	0082      	lsls	r2, r0, #2
 8009a3a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a3e:	f7f7 f8d3 	bl	8000be8 <__aeabi_uldivmod>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4b30      	ldr	r3, [pc, #192]	; (8009b08 <UART_SetConfig+0x77c>)
 8009a48:	fba3 1302 	umull	r1, r3, r3, r2
 8009a4c:	095b      	lsrs	r3, r3, #5
 8009a4e:	2164      	movs	r1, #100	; 0x64
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	3332      	adds	r3, #50	; 0x32
 8009a5a:	4a2b      	ldr	r2, [pc, #172]	; (8009b08 <UART_SetConfig+0x77c>)
 8009a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a60:	095b      	lsrs	r3, r3, #5
 8009a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a66:	441e      	add	r6, r3
 8009a68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f04f 0100 	mov.w	r1, #0
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	1894      	adds	r4, r2, r2
 8009a78:	603c      	str	r4, [r7, #0]
 8009a7a:	415b      	adcs	r3, r3
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a82:	1812      	adds	r2, r2, r0
 8009a84:	eb41 0303 	adc.w	r3, r1, r3
 8009a88:	f04f 0400 	mov.w	r4, #0
 8009a8c:	f04f 0500 	mov.w	r5, #0
 8009a90:	00dd      	lsls	r5, r3, #3
 8009a92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a96:	00d4      	lsls	r4, r2, #3
 8009a98:	4622      	mov	r2, r4
 8009a9a:	462b      	mov	r3, r5
 8009a9c:	1814      	adds	r4, r2, r0
 8009a9e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009aa2:	414b      	adcs	r3, r1
 8009aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f04f 0100 	mov.w	r1, #0
 8009ab4:	f04f 0200 	mov.w	r2, #0
 8009ab8:	f04f 0300 	mov.w	r3, #0
 8009abc:	008b      	lsls	r3, r1, #2
 8009abe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ac2:	0082      	lsls	r2, r0, #2
 8009ac4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009ac8:	f7f7 f88e 	bl	8000be8 <__aeabi_uldivmod>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <UART_SetConfig+0x77c>)
 8009ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ad6:	095b      	lsrs	r3, r3, #5
 8009ad8:	2164      	movs	r1, #100	; 0x64
 8009ada:	fb01 f303 	mul.w	r3, r1, r3
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	011b      	lsls	r3, r3, #4
 8009ae2:	3332      	adds	r3, #50	; 0x32
 8009ae4:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <UART_SetConfig+0x77c>)
 8009ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	f003 020f 	and.w	r2, r3, #15
 8009af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4432      	add	r2, r6
 8009af8:	609a      	str	r2, [r3, #8]
}
 8009afa:	e7ff      	b.n	8009afc <UART_SetConfig+0x770>
 8009afc:	bf00      	nop
 8009afe:	37f4      	adds	r7, #244	; 0xf4
 8009b00:	46bd      	mov	sp, r7
 8009b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b06:	bf00      	nop
 8009b08:	51eb851f 	.word	0x51eb851f

08009b0c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b24:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4b2f      	ldr	r3, [pc, #188]	; (8009be8 <FSMC_NORSRAM_Init+0xdc>)
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009b36:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009b3c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009b42:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009b48:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8009b4e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009b54:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009b5a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009b60:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009b66:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8009b6c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8009b72:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8009b78:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8009b7e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2b08      	cmp	r3, #8
 8009b8c:	d103      	bne.n	8009b96 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b94:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68f9      	ldr	r1, [r7, #12]
 8009b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009baa:	d10a      	bne.n	8009bc2 <FSMC_NORSRAM_Init+0xb6>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d006      	beq.n	8009bc2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d006      	beq.n	8009bd8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	ffc00480 	.word	0xffc00480

08009bec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c06:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009c0e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009c1a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009c22:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009c2a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009c34:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	3b02      	subs	r3, #2
 8009c3c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009c3e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009c44:	4313      	orrs	r3, r2
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6979      	ldr	r1, [r7, #20]
 8009c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c64:	d10e      	bne.n	8009c84 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c6e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	051b      	lsls	r3, r3, #20
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cac:	d122      	bne.n	8009cf4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009cca:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009cd2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009cda:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009ce0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6979      	ldr	r1, [r7, #20]
 8009cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009cf2:	e005      	b.n	8009d00 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	cff00000 	.word	0xcff00000

08009d14 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d14:	b084      	sub	sp, #16
 8009d16:	b480      	push	{r7}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	f107 001c 	add.w	r0, r7, #28
 8009d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009d2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009d2e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009d32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009d36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009d3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009d3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009d4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	b004      	add	sp, #16
 8009d68:	4770      	bx	lr

08009d6a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2203      	movs	r2, #3
 8009d90:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009d92:	2002      	movs	r0, #2
 8009d94:	f7f9 fd48 	bl	8003828 <HAL_Delay>
  
  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0303 	and.w	r3, r3, #3
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ddc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009de2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009de8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009df8:	f023 030f 	bic.w	r3, r3, #15
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	b2db      	uxtb	r3, r3
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3314      	adds	r3, #20
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	4413      	add	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
}  
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e78:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009e7e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009e84:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	431a      	orrs	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0

}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b088      	sub	sp, #32
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009eb8:	2310      	movs	r3, #16
 8009eba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff74 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eda:	2110      	movs	r1, #16
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f975 	bl	800a1cc <SDMMC_GetCmdResp1>
 8009ee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee4:	69fb      	ldr	r3, [r7, #28]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b08a      	sub	sp, #40	; 0x28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009efe:	2307      	movs	r3, #7
 8009f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f02:	2340      	movs	r3, #64	; 0x40
 8009f04:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f06:	2300      	movs	r3, #0
 8009f08:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f10:	f107 0310 	add.w	r3, r7, #16
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff ff51 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f20:	2107      	movs	r1, #7
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f952 	bl	800a1cc <SDMMC_GetCmdResp1>
 8009f28:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3728      	adds	r7, #40	; 0x28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009f44:	2300      	movs	r3, #0
 8009f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff ff30 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f90c 	bl	800a17c <SDMMC_GetCmdError>
 8009f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f66:	69fb      	ldr	r3, [r7, #28]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3720      	adds	r7, #32
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009f78:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009f7e:	2308      	movs	r3, #8
 8009f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff ff11 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 faf5 	bl	800a58c <SDMMC_GetCmdResp7>
 8009fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b088      	sub	sp, #32
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009fbc:	2337      	movs	r3, #55	; 0x37
 8009fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fc0:	2340      	movs	r3, #64	; 0x40
 8009fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fef2 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fde:	2137      	movs	r1, #55	; 0x37
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f8f3 	bl	800a1cc <SDMMC_GetCmdResp1>
 8009fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b088      	sub	sp, #32
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a008:	2329      	movs	r3, #41	; 0x29
 800a00a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a00c:	2340      	movs	r3, #64	; 0x40
 800a00e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a018:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a01a:	f107 0308 	add.w	r3, r7, #8
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7ff fecc 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa02 	bl	800a430 <SDMMC_GetCmdResp3>
 800a02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a02e:	69fb      	ldr	r3, [r7, #28]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b088      	sub	sp, #32
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a046:	2306      	movs	r3, #6
 800a048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a04a:	2340      	movs	r3, #64	; 0x40
 800a04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a058:	f107 0308 	add.w	r3, r7, #8
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fead 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a064:	f241 3288 	movw	r2, #5000	; 0x1388
 800a068:	2106      	movs	r1, #6
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f8ae 	bl	800a1cc <SDMMC_GetCmdResp1>
 800a070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a072:	69fb      	ldr	r3, [r7, #28]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a088:	2333      	movs	r3, #51	; 0x33
 800a08a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a08c:	2340      	movs	r3, #64	; 0x40
 800a08e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a098:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09a:	f107 0308 	add.w	r3, r7, #8
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fe8c 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0aa:	2133      	movs	r1, #51	; 0x33
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f88d 	bl	800a1cc <SDMMC_GetCmdResp1>
 800a0b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b088      	sub	sp, #32
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a0ce:	23c0      	movs	r3, #192	; 0xc0
 800a0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0dc:	f107 0308 	add.w	r3, r7, #8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff fe6b 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f95b 	bl	800a3a4 <SDMMC_GetCmdResp2>
 800a0ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a108:	2309      	movs	r3, #9
 800a10a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a10c:	23c0      	movs	r3, #192	; 0xc0
 800a10e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a118:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff fe4c 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f93c 	bl	800a3a4 <SDMMC_GetCmdResp2>
 800a12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a12e:	69fb      	ldr	r3, [r7, #28]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a146:	2303      	movs	r3, #3
 800a148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a14e:	2300      	movs	r3, #0
 800a150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a156:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fe2d 	bl	8009dbe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	2103      	movs	r1, #3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f99b 	bl	800a4a4 <SDMMC_GetCmdResp6>
 800a16e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a170:	69fb      	ldr	r3, [r7, #28]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a17c:	b490      	push	{r4, r7}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a184:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <SDMMC_GetCmdError+0x48>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a0f      	ldr	r2, [pc, #60]	; (800a1c8 <SDMMC_GetCmdError+0x4c>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	0a5b      	lsrs	r3, r3, #9
 800a190:	f241 3288 	movw	r2, #5000	; 0x1388
 800a194:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a198:	4623      	mov	r3, r4
 800a19a:	1e5c      	subs	r4, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a4:	e009      	b.n	800a1ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f2      	beq.n	800a198 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	22c5      	movs	r2, #197	; 0xc5
 800a1b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bc90      	pop	{r4, r7}
 800a1c2:	4770      	bx	lr
 800a1c4:	20000000 	.word	0x20000000
 800a1c8:	10624dd3 	.word	0x10624dd3

0800a1cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a1cc:	b590      	push	{r4, r7, lr}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a1da:	4b6f      	ldr	r3, [pc, #444]	; (800a398 <SDMMC_GetCmdResp1+0x1cc>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a6f      	ldr	r2, [pc, #444]	; (800a39c <SDMMC_GetCmdResp1+0x1d0>)
 800a1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e4:	0a5b      	lsrs	r3, r3, #9
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	1e5c      	subs	r4, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1f8:	e0c9      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0f0      	beq.n	800a1ec <SDMMC_GetCmdResp1+0x20>
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1eb      	bne.n	800a1ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d004      	beq.n	800a22a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2204      	movs	r2, #4
 800a224:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a226:	2304      	movs	r3, #4
 800a228:	e0b1      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d004      	beq.n	800a240 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e0a6      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	22c5      	movs	r2, #197	; 0xc5
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff fde3 	bl	8009e12 <SDIO_GetCommandResponse>
 800a24c:	4603      	mov	r3, r0
 800a24e:	461a      	mov	r2, r3
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	4293      	cmp	r3, r2
 800a254:	d001      	beq.n	800a25a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a256:	2301      	movs	r3, #1
 800a258:	e099      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a25a:	2100      	movs	r1, #0
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff fde5 	bl	8009e2c <SDIO_GetResponse>
 800a262:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	4b4e      	ldr	r3, [pc, #312]	; (800a3a0 <SDMMC_GetCmdResp1+0x1d4>)
 800a268:	4013      	ands	r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a26e:	2300      	movs	r3, #0
 800a270:	e08d      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	da02      	bge.n	800a27e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a27c:	e087      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a288:	2340      	movs	r3, #64	; 0x40
 800a28a:	e080      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	e079      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2a8:	e071      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b8:	e069      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a2c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2c8:	e061      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2d8:	e059      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2e8:	e051      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2f8:	e049      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a308:	e041      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a318:	e039      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a328:	e031      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a334:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a338:	e029      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a344:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a348:	e021      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a354:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a358:	e019      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a368:	e011      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a378:	e009      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a384:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a388:	e001      	b.n	800a38e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a38a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a38e:	4618      	mov	r0, r3
 800a390:	371c      	adds	r7, #28
 800a392:	46bd      	mov	sp, r7
 800a394:	bd90      	pop	{r4, r7, pc}
 800a396:	bf00      	nop
 800a398:	20000000 	.word	0x20000000
 800a39c:	10624dd3 	.word	0x10624dd3
 800a3a0:	fdffe008 	.word	0xfdffe008

0800a3a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a3a4:	b490      	push	{r4, r7}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3ac:	4b1e      	ldr	r3, [pc, #120]	; (800a428 <SDMMC_GetCmdResp2+0x84>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a1e      	ldr	r2, [pc, #120]	; (800a42c <SDMMC_GetCmdResp2+0x88>)
 800a3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b6:	0a5b      	lsrs	r3, r3, #9
 800a3b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	1e5c      	subs	r4, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d102      	bne.n	800a3ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3cc:	e026      	b.n	800a41c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0f0      	beq.n	800a3c0 <SDMMC_GetCmdResp2+0x1c>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1eb      	bne.n	800a3c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d004      	beq.n	800a3fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2204      	movs	r2, #4
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3fa:	2304      	movs	r3, #4
 800a3fc:	e00e      	b.n	800a41c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d004      	beq.n	800a414 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a410:	2301      	movs	r3, #1
 800a412:	e003      	b.n	800a41c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	22c5      	movs	r2, #197	; 0xc5
 800a418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bc90      	pop	{r4, r7}
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000000 	.word	0x20000000
 800a42c:	10624dd3 	.word	0x10624dd3

0800a430 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a430:	b490      	push	{r4, r7}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a438:	4b18      	ldr	r3, [pc, #96]	; (800a49c <SDMMC_GetCmdResp3+0x6c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a18      	ldr	r2, [pc, #96]	; (800a4a0 <SDMMC_GetCmdResp3+0x70>)
 800a43e:	fba2 2303 	umull	r2, r3, r2, r3
 800a442:	0a5b      	lsrs	r3, r3, #9
 800a444:	f241 3288 	movw	r2, #5000	; 0x1388
 800a448:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a44c:	4623      	mov	r3, r4
 800a44e:	1e5c      	subs	r4, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a458:	e01b      	b.n	800a492 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0f0      	beq.n	800a44c <SDMMC_GetCmdResp3+0x1c>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1eb      	bne.n	800a44c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d004      	beq.n	800a48a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2204      	movs	r2, #4
 800a484:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a486:	2304      	movs	r3, #4
 800a488:	e003      	b.n	800a492 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	22c5      	movs	r2, #197	; 0xc5
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bc90      	pop	{r4, r7}
 800a49a:	4770      	bx	lr
 800a49c:	20000000 	.word	0x20000000
 800a4a0:	10624dd3 	.word	0x10624dd3

0800a4a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a4a4:	b590      	push	{r4, r7, lr}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4b2:	4b34      	ldr	r3, [pc, #208]	; (800a584 <SDMMC_GetCmdResp6+0xe0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a34      	ldr	r2, [pc, #208]	; (800a588 <SDMMC_GetCmdResp6+0xe4>)
 800a4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4bc:	0a5b      	lsrs	r3, r3, #9
 800a4be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a4c6:	4623      	mov	r3, r4
 800a4c8:	1e5c      	subs	r4, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d102      	bne.n	800a4d4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4d2:	e052      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0f0      	beq.n	800a4c6 <SDMMC_GetCmdResp6+0x22>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1eb      	bne.n	800a4c6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f2:	f003 0304 	and.w	r3, r3, #4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d004      	beq.n	800a504 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a500:	2304      	movs	r3, #4
 800a502:	e03a      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d004      	beq.n	800a51a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2201      	movs	r2, #1
 800a514:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a516:	2301      	movs	r3, #1
 800a518:	e02f      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff fc79 	bl	8009e12 <SDIO_GetCommandResponse>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	7afb      	ldrb	r3, [r7, #11]
 800a526:	4293      	cmp	r3, r2
 800a528:	d001      	beq.n	800a52e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e025      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	22c5      	movs	r2, #197	; 0xc5
 800a532:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fc78 	bl	8009e2c <SDIO_GetResponse>
 800a53c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	0c1b      	lsrs	r3, r3, #16
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a552:	2300      	movs	r3, #0
 800a554:	e011      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a564:	e009      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a574:	e001      	b.n	800a57a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd90      	pop	{r4, r7, pc}
 800a582:	bf00      	nop
 800a584:	20000000 	.word	0x20000000
 800a588:	10624dd3 	.word	0x10624dd3

0800a58c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a58c:	b490      	push	{r4, r7}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a594:	4b21      	ldr	r3, [pc, #132]	; (800a61c <SDMMC_GetCmdResp7+0x90>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a21      	ldr	r2, [pc, #132]	; (800a620 <SDMMC_GetCmdResp7+0x94>)
 800a59a:	fba2 2303 	umull	r2, r3, r2, r3
 800a59e:	0a5b      	lsrs	r3, r3, #9
 800a5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	1e5c      	subs	r4, r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5b4:	e02c      	b.n	800a610 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0f0      	beq.n	800a5a8 <SDMMC_GetCmdResp7+0x1c>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1eb      	bne.n	800a5a8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2204      	movs	r2, #4
 800a5e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5e2:	2304      	movs	r3, #4
 800a5e4:	e014      	b.n	800a610 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e009      	b.n	800a610 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2240      	movs	r2, #64	; 0x40
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a60e:	2300      	movs	r3, #0
  
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bc90      	pop	{r4, r7}
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	20000000 	.word	0x20000000
 800a620:	10624dd3 	.word	0x10624dd3

0800a624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a624:	b084      	sub	sp, #16
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	f107 001c 	add.w	r0, r7, #28
 800a632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d122      	bne.n	800a682 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a666:	2b01      	cmp	r3, #1
 800a668:	d105      	bne.n	800a676 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f94a 	bl	800a910 <USB_CoreReset>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
 800a680:	e01a      	b.n	800a6b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f93e 	bl	800a910 <USB_CoreReset>
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	639a      	str	r2, [r3, #56]	; 0x38
 800a6aa:	e005      	b.n	800a6b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d10b      	bne.n	800a6d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f043 0206 	orr.w	r2, r3, #6
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f043 0220 	orr.w	r2, r3, #32
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6e2:	b004      	add	sp, #16
 800a6e4:	4770      	bx	lr

0800a6e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f043 0201 	orr.w	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f023 0201 	bic.w	r2, r3, #1
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	460b      	mov	r3, r1
 800a734:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d106      	bne.n	800a756 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60da      	str	r2, [r3, #12]
 800a754:	e00b      	b.n	800a76e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d106      	bne.n	800a76a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	60da      	str	r2, [r3, #12]
 800a768:	e001      	b.n	800a76e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e003      	b.n	800a776 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a76e:	2032      	movs	r0, #50	; 0x32
 800a770:	f7f9 f85a 	bl	8003828 <HAL_Delay>

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	019b      	lsls	r3, r3, #6
 800a792:	f043 0220 	orr.w	r2, r3, #32
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4a09      	ldr	r2, [pc, #36]	; (800a7c8 <USB_FlushTxFifo+0x48>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d901      	bls.n	800a7ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e006      	b.n	800a7ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	d0f0      	beq.n	800a79a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	00030d40 	.word	0x00030d40

0800a7cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	4a09      	ldr	r2, [pc, #36]	; (800a80c <USB_FlushRxFifo+0x40>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d901      	bls.n	800a7f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e006      	b.n	800a7fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f003 0310 	and.w	r3, r3, #16
 800a7f8:	2b10      	cmp	r3, #16
 800a7fa:	d0f0      	beq.n	800a7de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	00030d40 	.word	0x00030d40

0800a810 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a810:	b480      	push	{r7}
 800a812:	b089      	sub	sp, #36	; 0x24
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4611      	mov	r1, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	460b      	mov	r3, r1
 800a820:	71fb      	strb	r3, [r7, #7]
 800a822:	4613      	mov	r3, r2
 800a824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a82e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a832:	2b00      	cmp	r3, #0
 800a834:	d11a      	bne.n	800a86c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a836:	88bb      	ldrh	r3, [r7, #4]
 800a838:	3303      	adds	r3, #3
 800a83a:	089b      	lsrs	r3, r3, #2
 800a83c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a83e:	2300      	movs	r3, #0
 800a840:	61bb      	str	r3, [r7, #24]
 800a842:	e00f      	b.n	800a864 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	031a      	lsls	r2, r3, #12
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a850:	461a      	mov	r2, r3
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	3304      	adds	r3, #4
 800a85c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	3301      	adds	r3, #1
 800a862:	61bb      	str	r3, [r7, #24]
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d3eb      	bcc.n	800a844 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3724      	adds	r7, #36	; 0x24
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b089      	sub	sp, #36	; 0x24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	60b9      	str	r1, [r7, #8]
 800a884:	4613      	mov	r3, r2
 800a886:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a890:	88fb      	ldrh	r3, [r7, #6]
 800a892:	3303      	adds	r3, #3
 800a894:	089b      	lsrs	r3, r3, #2
 800a896:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a898:	2300      	movs	r3, #0
 800a89a:	61bb      	str	r3, [r7, #24]
 800a89c:	e00b      	b.n	800a8b6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	61bb      	str	r3, [r7, #24]
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d3ef      	bcc.n	800a89e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a8be:	69fb      	ldr	r3, [r7, #28]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3724      	adds	r7, #36	; 0x24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b083      	sub	sp, #12
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	60fb      	str	r3, [r7, #12]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4a13      	ldr	r2, [pc, #76]	; (800a974 <USB_CoreReset+0x64>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d901      	bls.n	800a92e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e01b      	b.n	800a966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	daf2      	bge.n	800a91c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f043 0201 	orr.w	r2, r3, #1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3301      	adds	r3, #1
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4a09      	ldr	r2, [pc, #36]	; (800a974 <USB_CoreReset+0x64>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d901      	bls.n	800a958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e006      	b.n	800a966 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b01      	cmp	r3, #1
 800a962:	d0f0      	beq.n	800a946 <USB_CoreReset+0x36>

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	00030d40 	.word	0x00030d40

0800a978 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a978:	b084      	sub	sp, #16
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	f107 001c 	add.w	r0, r7, #28
 800a986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a994:	461a      	mov	r2, r3
 800a996:	2300      	movs	r3, #0
 800a998:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d018      	beq.n	800a9f0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d10a      	bne.n	800a9da <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9d2:	f043 0304 	orr.w	r3, r3, #4
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	e014      	b.n	800aa04 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9e8:	f023 0304 	bic.w	r3, r3, #4
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	e009      	b.n	800aa04 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9fe:	f023 0304 	bic.w	r3, r3, #4
 800aa02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800aa04:	2110      	movs	r1, #16
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff feba 	bl	800a780 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff fedd 	bl	800a7cc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e015      	b.n	800aa44 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa24:	461a      	mov	r2, r3
 800aa26:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa38:	461a      	mov	r2, r3
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3301      	adds	r3, #1
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d3e5      	bcc.n	800aa18 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f8ac 	bl	800abac <USB_DriveVbus>

  HAL_Delay(200U);
 800aa54:	20c8      	movs	r0, #200	; 0xc8
 800aa56:	f7f8 fee7 	bl	8003828 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a14      	ldr	r2, [pc, #80]	; (800aad0 <USB_HostInit+0x158>)
 800aa80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a13      	ldr	r2, [pc, #76]	; (800aad4 <USB_HostInit+0x15c>)
 800aa86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800aa8a:	e009      	b.n	800aaa0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2280      	movs	r2, #128	; 0x80
 800aa90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a10      	ldr	r2, [pc, #64]	; (800aad8 <USB_HostInit+0x160>)
 800aa96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a10      	ldr	r2, [pc, #64]	; (800aadc <USB_HostInit+0x164>)
 800aa9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d105      	bne.n	800aab2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f043 0210 	orr.w	r2, r3, #16
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	699a      	ldr	r2, [r3, #24]
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <USB_HostInit+0x168>)
 800aab8:	4313      	orrs	r3, r2
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaca:	b004      	add	sp, #16
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	01000200 	.word	0x01000200
 800aad4:	00e00300 	.word	0x00e00300
 800aad8:	00600080 	.word	0x00600080
 800aadc:	004000e0 	.word	0x004000e0
 800aae0:	a3200008 	.word	0xa3200008

0800aae4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab02:	f023 0303 	bic.w	r3, r3, #3
 800ab06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	68f9      	ldr	r1, [r7, #12]
 800ab18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d107      	bne.n	800ab36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ab32:	6053      	str	r3, [r2, #4]
 800ab34:	e009      	b.n	800ab4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ab36:	78fb      	ldrb	r3, [r7, #3]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d106      	bne.n	800ab4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab42:	461a      	mov	r2, r3
 800ab44:	f241 7370 	movw	r3, #6000	; 0x1770
 800ab48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ab78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ab88:	2064      	movs	r0, #100	; 0x64
 800ab8a:	f7f8 fe4d 	bl	8003828 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ab96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ab9c:	200a      	movs	r0, #10
 800ab9e:	f7f8 fe43 	bl	8003828 <HAL_Delay>

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800abd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d109      	bne.n	800abf0 <USB_DriveVbus+0x44>
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d106      	bne.n	800abf0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800abea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfa:	d109      	bne.n	800ac10 <USB_DriveVbus+0x64>
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	0c5b      	lsrs	r3, r3, #17
 800ac3c:	f003 0303 	and.w	r3, r3, #3
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	b29b      	uxth	r3, r3
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
	...

0800ac70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	4608      	mov	r0, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	70fb      	strb	r3, [r7, #3]
 800ac82:	460b      	mov	r3, r1
 800ac84:	70bb      	strb	r3, [r7, #2]
 800ac86:	4613      	mov	r3, r2
 800ac88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ac92:	78fb      	ldrb	r3, [r7, #3]
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f04f 33ff 	mov.w	r3, #4294967295
 800aca4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aca6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d87e      	bhi.n	800adac <USB_HC_Init+0x13c>
 800acae:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <USB_HC_Init+0x44>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800acc5 	.word	0x0800acc5
 800acb8:	0800ad6f 	.word	0x0800ad6f
 800acbc:	0800acc5 	.word	0x0800acc5
 800acc0:	0800ad31 	.word	0x0800ad31
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	461a      	mov	r2, r3
 800acd2:	f240 439d 	movw	r3, #1181	; 0x49d
 800acd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800acd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	da10      	bge.n	800ad02 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	78fa      	ldrb	r2, [r7, #3]
 800acf0:	0151      	lsls	r1, r2, #5
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	440a      	add	r2, r1
 800acf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfe:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ad00:	e057      	b.n	800adb2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d051      	beq.n	800adb2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	78fa      	ldrb	r2, [r7, #3]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ad2c:	60d3      	str	r3, [r2, #12]
      break;
 800ad2e:	e040      	b.n	800adb2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f240 639d 	movw	r3, #1693	; 0x69d
 800ad42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da34      	bge.n	800adb6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	78fa      	ldrb	r2, [r7, #3]
 800ad5c:	0151      	lsls	r1, r2, #5
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	440a      	add	r2, r1
 800ad62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad6a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ad6c:	e023      	b.n	800adb6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f240 2325 	movw	r3, #549	; 0x225
 800ad80:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	da17      	bge.n	800adba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	78fa      	ldrb	r2, [r7, #3]
 800ad9a:	0151      	lsls	r1, r2, #5
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	440a      	add	r2, r1
 800ada0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ada4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ada8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800adaa:	e006      	b.n	800adba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	75fb      	strb	r3, [r7, #23]
      break;
 800adb0:	e004      	b.n	800adbc <USB_HC_Init+0x14c>
      break;
 800adb2:	bf00      	nop
 800adb4:	e002      	b.n	800adbc <USB_HC_Init+0x14c>
      break;
 800adb6:	bf00      	nop
 800adb8:	e000      	b.n	800adbc <USB_HC_Init+0x14c>
      break;
 800adba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	f003 030f 	and.w	r3, r3, #15
 800adca:	2101      	movs	r1, #1
 800adcc:	fa01 f303 	lsl.w	r3, r1, r3
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800add6:	4313      	orrs	r3, r2
 800add8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ade6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800adea:	2b00      	cmp	r3, #0
 800adec:	da03      	bge.n	800adf6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800adee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	e001      	b.n	800adfa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800adfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d103      	bne.n	800ae0a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ae02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e001      	b.n	800ae0e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae0e:	787b      	ldrb	r3, [r7, #1]
 800ae10:	059b      	lsls	r3, r3, #22
 800ae12:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae16:	78bb      	ldrb	r3, [r7, #2]
 800ae18:	02db      	lsls	r3, r3, #11
 800ae1a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae24:	049b      	lsls	r3, r3, #18
 800ae26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae38:	78fb      	ldrb	r3, [r7, #3]
 800ae3a:	0159      	lsls	r1, r3, #5
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	440b      	add	r3, r1
 800ae40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae44:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae4a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ae4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d10f      	bne.n	800ae74 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ae54:	78fb      	ldrb	r3, [r7, #3]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	78fa      	ldrb	r2, [r7, #3]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae72:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop

0800ae84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08c      	sub	sp, #48	; 0x30
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ae9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aea0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d028      	beq.n	800af00 <USB_HC_StartXfer+0x7c>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	791b      	ldrb	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d124      	bne.n	800af00 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10b      	bne.n	800aed4 <USB_HC_StartXfer+0x50>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	795b      	ldrb	r3, [r3, #5]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d107      	bne.n	800aed4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	4619      	mov	r1, r3
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fa2e 	bl	800b32c <USB_DoPing>
      return HAL_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	e113      	b.n	800b0fc <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d112      	bne.n	800af00 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	69fa      	ldr	r2, [r7, #28]
 800aeea:	0151      	lsls	r1, r2, #5
 800aeec:	6a3a      	ldr	r2, [r7, #32]
 800aeee:	440a      	add	r2, r1
 800aef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aef4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800aef8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2200      	movs	r2, #0
 800aefe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d018      	beq.n	800af3a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	8912      	ldrh	r2, [r2, #8]
 800af10:	4413      	add	r3, r2
 800af12:	3b01      	subs	r3, #1
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	8912      	ldrh	r2, [r2, #8]
 800af18:	fbb3 f3f2 	udiv	r3, r3, r2
 800af1c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800af1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af20:	8b7b      	ldrh	r3, [r7, #26]
 800af22:	429a      	cmp	r2, r3
 800af24:	d90b      	bls.n	800af3e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800af26:	8b7b      	ldrh	r3, [r7, #26]
 800af28:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800af2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	8912      	ldrh	r2, [r2, #8]
 800af30:	fb02 f203 	mul.w	r2, r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	611a      	str	r2, [r3, #16]
 800af38:	e001      	b.n	800af3e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800af3a:	2301      	movs	r3, #1
 800af3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	78db      	ldrb	r3, [r3, #3]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d006      	beq.n	800af54 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800af46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	8912      	ldrh	r2, [r2, #8]
 800af4c:	fb02 f203 	mul.w	r2, r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af5e:	04d9      	lsls	r1, r3, #19
 800af60:	4b68      	ldr	r3, [pc, #416]	; (800b104 <USB_HC_StartXfer+0x280>)
 800af62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	7a9b      	ldrb	r3, [r3, #10]
 800af6a:	075b      	lsls	r3, r3, #29
 800af6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af70:	69f9      	ldr	r1, [r7, #28]
 800af72:	0148      	lsls	r0, r1, #5
 800af74:	6a39      	ldr	r1, [r7, #32]
 800af76:	4401      	add	r1, r0
 800af78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d009      	beq.n	800af9a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	68d9      	ldr	r1, [r3, #12]
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	015a      	lsls	r2, r3, #5
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	4413      	add	r3, r2
 800af92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af96:	460a      	mov	r2, r1
 800af98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bf0c      	ite	eq
 800afaa:	2301      	moveq	r3, #1
 800afac:	2300      	movne	r3, #0
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	69fa      	ldr	r2, [r7, #28]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	6a3a      	ldr	r2, [r7, #32]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afd0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	7e7b      	ldrb	r3, [r7, #25]
 800afe2:	075b      	lsls	r3, r3, #29
 800afe4:	69f9      	ldr	r1, [r7, #28]
 800afe6:	0148      	lsls	r0, r1, #5
 800afe8:	6a39      	ldr	r1, [r7, #32]
 800afea:	4401      	add	r1, r0
 800afec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aff0:	4313      	orrs	r3, r2
 800aff2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	4413      	add	r3, r2
 800affc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a41      	ldr	r2, [pc, #260]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b004:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b006:	4b40      	ldr	r3, [pc, #256]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b00e:	4a3e      	ldr	r2, [pc, #248]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b010:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	78db      	ldrb	r3, [r3, #3]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d006      	beq.n	800b028 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b01a:	4b3b      	ldr	r3, [pc, #236]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b022:	4a39      	ldr	r2, [pc, #228]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b024:	6013      	str	r3, [r2, #0]
 800b026:	e005      	b.n	800b034 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b028:	4b37      	ldr	r3, [pc, #220]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b030:	4a35      	ldr	r2, [pc, #212]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b032:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b034:	4b34      	ldr	r3, [pc, #208]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b03c:	4a32      	ldr	r2, [pc, #200]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b03e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	4413      	add	r3, r2
 800b048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b2e      	ldr	r3, [pc, #184]	; (800b108 <USB_HC_StartXfer+0x284>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	e04e      	b.n	800b0fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	78db      	ldrb	r3, [r3, #3]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d149      	bne.n	800b0fa <USB_HC_StartXfer+0x276>
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d045      	beq.n	800b0fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	79db      	ldrb	r3, [r3, #7]
 800b072:	2b03      	cmp	r3, #3
 800b074:	d830      	bhi.n	800b0d8 <USB_HC_StartXfer+0x254>
 800b076:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <USB_HC_StartXfer+0x1f8>)
 800b078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07c:	0800b08d 	.word	0x0800b08d
 800b080:	0800b0b1 	.word	0x0800b0b1
 800b084:	0800b08d 	.word	0x0800b08d
 800b088:	0800b0b1 	.word	0x0800b0b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	3303      	adds	r3, #3
 800b092:	089b      	lsrs	r3, r3, #2
 800b094:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b096:	8afa      	ldrh	r2, [r7, #22]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d91c      	bls.n	800b0dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	f043 0220 	orr.w	r2, r3, #32
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	619a      	str	r2, [r3, #24]
        }
        break;
 800b0ae:	e015      	b.n	800b0dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	3303      	adds	r3, #3
 800b0b6:	089b      	lsrs	r3, r3, #2
 800b0b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b0ba:	8afa      	ldrh	r2, [r7, #22]
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d90a      	bls.n	800b0e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b0d6:	e003      	b.n	800b0e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b0d8:	bf00      	nop
 800b0da:	e002      	b.n	800b0e2 <USB_HC_StartXfer+0x25e>
        break;
 800b0dc:	bf00      	nop
 800b0de:	e000      	b.n	800b0e2 <USB_HC_StartXfer+0x25e>
        break;
 800b0e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	68d9      	ldr	r1, [r3, #12]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	785a      	ldrb	r2, [r3, #1]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	9000      	str	r0, [sp, #0]
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff fb8b 	bl	800a810 <USB_WritePacket>
  }

  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3728      	adds	r7, #40	; 0x28
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	1ff80000 	.word	0x1ff80000
 800b108:	2000049c 	.word	0x2000049c

0800b10c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	b29b      	uxth	r3, r3
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b12e:	b480      	push	{r7}
 800b130:	b087      	sub	sp, #28
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	0c9b      	lsrs	r3, r3, #18
 800b156:	f003 0303 	and.w	r3, r3, #3
 800b15a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <USB_HC_Halt+0x3a>
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2b02      	cmp	r3, #2
 800b166:	d16c      	bne.n	800b242 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	0151      	lsls	r1, r2, #5
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	440a      	add	r2, r1
 800b17e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b186:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d143      	bne.n	800b21c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b200:	d81d      	bhi.n	800b23e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b218:	d0ec      	beq.n	800b1f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b21a:	e080      	b.n	800b31e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	4413      	add	r3, r2
 800b224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	0151      	lsls	r1, r2, #5
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	440a      	add	r2, r1
 800b232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b23a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b23c:	e06f      	b.n	800b31e <USB_HC_Halt+0x1f0>
          break;
 800b23e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b240:	e06d      	b.n	800b31e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	0151      	lsls	r1, r2, #5
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	440a      	add	r2, r1
 800b258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b25c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b260:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d143      	bne.n	800b2fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	0151      	lsls	r1, r2, #5
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	440a      	add	r2, r1
 800b288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b28c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b290:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	0151      	lsls	r1, r2, #5
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	440a      	add	r2, r1
 800b2a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	0151      	lsls	r1, r2, #5
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	440a      	add	r2, r1
 800b2c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2de:	d81d      	bhi.n	800b31c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2f6:	d0ec      	beq.n	800b2d2 <USB_HC_Halt+0x1a4>
 800b2f8:	e011      	b.n	800b31e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	0151      	lsls	r1, r2, #5
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	440a      	add	r2, r1
 800b310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b318:	6013      	str	r3, [r2, #0]
 800b31a:	e000      	b.n	800b31e <USB_HC_Halt+0x1f0>
          break;
 800b31c:	bf00      	nop
    }
  }

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b33c:	78fb      	ldrb	r3, [r7, #3]
 800b33e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b340:	2301      	movs	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	04da      	lsls	r2, r3, #19
 800b348:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <USB_DoPing+0x74>)
 800b34a:	4013      	ands	r3, r2
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	0151      	lsls	r1, r2, #5
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	440a      	add	r2, r1
 800b354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b35c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	4413      	add	r3, r2
 800b366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b374:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b37c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	4413      	add	r3, r2
 800b386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b38a:	461a      	mov	r2, r3
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	1ff80000 	.word	0x1ff80000

0800b3a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff f9a7 	bl	800a708 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b3ba:	2110      	movs	r1, #16
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff f9df 	bl	800a780 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fa02 	bl	800a7cc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	e01f      	b.n	800b40e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b402:	461a      	mov	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	3301      	adds	r3, #1
 800b40c:	613b      	str	r3, [r7, #16]
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b0f      	cmp	r3, #15
 800b412:	d9dc      	bls.n	800b3ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b414:	2300      	movs	r3, #0
 800b416:	613b      	str	r3, [r7, #16]
 800b418:	e034      	b.n	800b484 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b430:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b438:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b440:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b44e:	461a      	mov	r2, r3
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	3301      	adds	r3, #1
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b460:	d80c      	bhi.n	800b47c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b478:	d0ec      	beq.n	800b454 <USB_StopHost+0xb0>
 800b47a:	e000      	b.n	800b47e <USB_StopHost+0xda>
        break;
 800b47c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	3301      	adds	r3, #1
 800b482:	613b      	str	r3, [r7, #16]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b0f      	cmp	r3, #15
 800b488:	d9c7      	bls.n	800b41a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b490:	461a      	mov	r2, r3
 800b492:	f04f 33ff 	mov.w	r3, #4294967295
 800b496:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff f920 	bl	800a6e6 <USB_EnableGlobalInt>

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b4b0:	b590      	push	{r4, r7, lr}
 800b4b2:	b089      	sub	sp, #36	; 0x24
 800b4b4:	af04      	add	r7, sp, #16
 800b4b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	2102      	movs	r1, #2
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fcb2 	bl	800be28 <USBH_FindInterface>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	2bff      	cmp	r3, #255	; 0xff
 800b4cc:	d002      	beq.n	800b4d4 <USBH_CDC_InterfaceInit+0x24>
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d901      	bls.n	800b4d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e13d      	b.n	800b754 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fc87 	bl	800bdf0 <USBH_SelectInterface>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e131      	b.n	800b754 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b4f6:	2050      	movs	r0, #80	; 0x50
 800b4f8:	f006 fbee 	bl	8011cd8 <malloc>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b506:	69db      	ldr	r3, [r3, #28]
 800b508:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d101      	bne.n	800b514 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b510:	2302      	movs	r3, #2
 800b512:	e11f      	b.n	800b754 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b514:	2250      	movs	r2, #80	; 0x50
 800b516:	2100      	movs	r1, #0
 800b518:	68b8      	ldr	r0, [r7, #8]
 800b51a:	f006 fc15 	bl	8011d48 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	211a      	movs	r1, #26
 800b524:	fb01 f303 	mul.w	r3, r1, r3
 800b528:	4413      	add	r3, r2
 800b52a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b25b      	sxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	da15      	bge.n	800b562 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	211a      	movs	r1, #26
 800b53c:	fb01 f303 	mul.w	r3, r1, r3
 800b540:	4413      	add	r3, r2
 800b542:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b546:	781a      	ldrb	r2, [r3, #0]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	211a      	movs	r1, #26
 800b552:	fb01 f303 	mul.w	r3, r1, r3
 800b556:	4413      	add	r3, r2
 800b558:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b55c:	881a      	ldrh	r2, [r3, #0]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	785b      	ldrb	r3, [r3, #1]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f002 f88c 	bl	800d686 <USBH_AllocPipe>
 800b56e:	4603      	mov	r3, r0
 800b570:	461a      	mov	r2, r3
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	7819      	ldrb	r1, [r3, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	7858      	ldrb	r0, [r3, #1]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	8952      	ldrh	r2, [r2, #10]
 800b58e:	9202      	str	r2, [sp, #8]
 800b590:	2203      	movs	r2, #3
 800b592:	9201      	str	r2, [sp, #4]
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	4623      	mov	r3, r4
 800b598:	4602      	mov	r2, r0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f002 f844 	bl	800d628 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f005 fb05 	bl	8010bb8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	210a      	movs	r1, #10
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fc37 	bl	800be28 <USBH_FindInterface>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	2bff      	cmp	r3, #255	; 0xff
 800b5c2:	d002      	beq.n	800b5ca <USBH_CDC_InterfaceInit+0x11a>
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d901      	bls.n	800b5ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	e0c2      	b.n	800b754 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	211a      	movs	r1, #26
 800b5d4:	fb01 f303 	mul.w	r3, r1, r3
 800b5d8:	4413      	add	r3, r2
 800b5da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	b25b      	sxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	da16      	bge.n	800b614 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	211a      	movs	r1, #26
 800b5ec:	fb01 f303 	mul.w	r3, r1, r3
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	211a      	movs	r1, #26
 800b602:	fb01 f303 	mul.w	r3, r1, r3
 800b606:	4413      	add	r3, r2
 800b608:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b60c:	881a      	ldrh	r2, [r3, #0]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	835a      	strh	r2, [r3, #26]
 800b612:	e015      	b.n	800b640 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	211a      	movs	r1, #26
 800b61a:	fb01 f303 	mul.w	r3, r1, r3
 800b61e:	4413      	add	r3, r2
 800b620:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b624:	781a      	ldrb	r2, [r3, #0]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b62a:	7bfb      	ldrb	r3, [r7, #15]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	211a      	movs	r1, #26
 800b630:	fb01 f303 	mul.w	r3, r1, r3
 800b634:	4413      	add	r3, r2
 800b636:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b63a:	881a      	ldrh	r2, [r3, #0]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	211a      	movs	r1, #26
 800b646:	fb01 f303 	mul.w	r3, r1, r3
 800b64a:	4413      	add	r3, r2
 800b64c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	b25b      	sxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	da16      	bge.n	800b686 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	211a      	movs	r1, #26
 800b65e:	fb01 f303 	mul.w	r3, r1, r3
 800b662:	4413      	add	r3, r2
 800b664:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b668:	781a      	ldrb	r2, [r3, #0]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	211a      	movs	r1, #26
 800b674:	fb01 f303 	mul.w	r3, r1, r3
 800b678:	4413      	add	r3, r2
 800b67a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b67e:	881a      	ldrh	r2, [r3, #0]
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	835a      	strh	r2, [r3, #26]
 800b684:	e015      	b.n	800b6b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	211a      	movs	r1, #26
 800b68c:	fb01 f303 	mul.w	r3, r1, r3
 800b690:	4413      	add	r3, r2
 800b692:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b696:	781a      	ldrb	r2, [r3, #0]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	211a      	movs	r1, #26
 800b6a2:	fb01 f303 	mul.w	r3, r1, r3
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b6ac:	881a      	ldrh	r2, [r3, #0]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	7b9b      	ldrb	r3, [r3, #14]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f001 ffe4 	bl	800d686 <USBH_AllocPipe>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	7bdb      	ldrb	r3, [r3, #15]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 ffda 	bl	800d686 <USBH_AllocPipe>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	7b59      	ldrb	r1, [r3, #13]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	7b98      	ldrb	r0, [r3, #14]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	8b12      	ldrh	r2, [r2, #24]
 800b6f2:	9202      	str	r2, [sp, #8]
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	9201      	str	r2, [sp, #4]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	4623      	mov	r3, r4
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f001 ff92 	bl	800d628 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	7b19      	ldrb	r1, [r3, #12]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	7bd8      	ldrb	r0, [r3, #15]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	8b52      	ldrh	r2, [r2, #26]
 800b71c:	9202      	str	r2, [sp, #8]
 800b71e:	2202      	movs	r2, #2
 800b720:	9201      	str	r2, [sp, #4]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	4623      	mov	r3, r4
 800b726:	4602      	mov	r2, r0
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f001 ff7d 	bl	800d628 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	7b5b      	ldrb	r3, [r3, #13]
 800b73a:	2200      	movs	r2, #0
 800b73c:	4619      	mov	r1, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f005 fa3a 	bl	8010bb8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	7b1b      	ldrb	r3, [r3, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f005 fa33 	bl	8010bb8 <USBH_LL_SetToggle>

  return USBH_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd90      	pop	{r4, r7, pc}

0800b75c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00e      	beq.n	800b794 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f001 ff72 	bl	800d666 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 ff9d 	bl	800d6c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	7b1b      	ldrb	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00e      	beq.n	800b7ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	7b1b      	ldrb	r3, [r3, #12]
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 ff5f 	bl	800d666 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	7b1b      	ldrb	r3, [r3, #12]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f001 ff8a 	bl	800d6c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7b5b      	ldrb	r3, [r3, #13]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00e      	beq.n	800b7e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	7b5b      	ldrb	r3, [r3, #13]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 ff4c 	bl	800d666 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	7b5b      	ldrb	r3, [r3, #13]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f001 ff77 	bl	800d6c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7e6:	69db      	ldr	r3, [r3, #28]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00b      	beq.n	800b804 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f006 fa77 	bl	8011ce8 <free>
    phost->pActiveClass->pData = 0U;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b800:	2200      	movs	r2, #0
 800b802:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	3340      	adds	r3, #64	; 0x40
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f8b1 	bl	800b98e <GetLineCoding>
 800b82c:	4603      	mov	r3, r0
 800b82e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d105      	bne.n	800b842 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b83c:	2102      	movs	r1, #2
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b842:	7afb      	ldrb	r3, [r7, #11]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b854:	2301      	movs	r3, #1
 800b856:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b862:	69db      	ldr	r3, [r3, #28]
 800b864:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	d877      	bhi.n	800b960 <USBH_CDC_Process+0x114>
 800b870:	a201      	add	r2, pc, #4	; (adr r2, 800b878 <USBH_CDC_Process+0x2c>)
 800b872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b876:	bf00      	nop
 800b878:	0800b88d 	.word	0x0800b88d
 800b87c:	0800b893 	.word	0x0800b893
 800b880:	0800b8c3 	.word	0x0800b8c3
 800b884:	0800b937 	.word	0x0800b937
 800b888:	0800b945 	.word	0x0800b945
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	73fb      	strb	r3, [r7, #15]
      break;
 800b890:	e06d      	b.n	800b96e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f897 	bl	800b9cc <SetLineCoding>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d104      	bne.n	800b8b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b8b0:	e058      	b.n	800b964 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d055      	beq.n	800b964 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b8c0:	e050      	b.n	800b964 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	3340      	adds	r3, #64	; 0x40
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f860 	bl	800b98e <GetLineCoding>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d126      	bne.n	800b926 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ea:	791b      	ldrb	r3, [r3, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d13b      	bne.n	800b968 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d133      	bne.n	800b968 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d12b      	bne.n	800b968 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b918:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d124      	bne.n	800b968 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f982 	bl	800bc28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b924:	e020      	b.n	800b968 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d01d      	beq.n	800b968 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2204      	movs	r2, #4
 800b930:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b934:	e018      	b.n	800b968 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f867 	bl	800ba0a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f8f6 	bl	800bb2e <CDC_ProcessReception>
      break;
 800b942:	e014      	b.n	800b96e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b944:	2100      	movs	r1, #0
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f001 f94d 	bl	800cbe6 <USBH_ClrFeature>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10a      	bne.n	800b96c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b95e:	e005      	b.n	800b96c <USBH_CDC_Process+0x120>

    default:
      break;
 800b960:	bf00      	nop
 800b962:	e004      	b.n	800b96e <USBH_CDC_Process+0x122>
      break;
 800b964:	bf00      	nop
 800b966:	e002      	b.n	800b96e <USBH_CDC_Process+0x122>
      break;
 800b968:	bf00      	nop
 800b96a:	e000      	b.n	800b96e <USBH_CDC_Process+0x122>
      break;
 800b96c:	bf00      	nop

  }

  return status;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	22a1      	movs	r2, #161	; 0xa1
 800b99c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2221      	movs	r2, #33	; 0x21
 800b9a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2207      	movs	r2, #7
 800b9b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	2207      	movs	r2, #7
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 faf2 	bl	800cfa6 <USBH_CtlReq>
 800b9c2:	4603      	mov	r3, r0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2221      	movs	r2, #33	; 0x21
 800b9da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2207      	movs	r2, #7
 800b9f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2207      	movs	r2, #7
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f001 fad3 	bl	800cfa6 <USBH_CtlReq>
 800ba00:	4603      	mov	r3, r0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b086      	sub	sp, #24
 800ba0e:	af02      	add	r7, sp, #8
 800ba10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d002      	beq.n	800ba30 <CDC_ProcessTransmission+0x26>
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d023      	beq.n	800ba76 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ba2e:	e07a      	b.n	800bb26 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	8b12      	ldrh	r2, [r2, #24]
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d90b      	bls.n	800ba54 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	69d9      	ldr	r1, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	8b1a      	ldrh	r2, [r3, #24]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	7b5b      	ldrb	r3, [r3, #13]
 800ba48:	2001      	movs	r0, #1
 800ba4a:	9000      	str	r0, [sp, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 fda8 	bl	800d5a2 <USBH_BulkSendData>
 800ba52:	e00b      	b.n	800ba6c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	7b5b      	ldrb	r3, [r3, #13]
 800ba62:	2001      	movs	r0, #1
 800ba64:	9000      	str	r0, [sp, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 fd9b 	bl	800d5a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2202      	movs	r2, #2
 800ba70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba74:	e057      	b.n	800bb26 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	7b5b      	ldrb	r3, [r3, #13]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f005 f871 	bl	8010b64 <USBH_LL_GetURBState>
 800ba82:	4603      	mov	r3, r0
 800ba84:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ba86:	7afb      	ldrb	r3, [r7, #11]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d136      	bne.n	800bafa <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	8b12      	ldrh	r2, [r2, #24]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d90e      	bls.n	800bab6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	8b12      	ldrh	r2, [r2, #24]
 800baa0:	1a9a      	subs	r2, r3, r2
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	8b12      	ldrh	r2, [r2, #24]
 800baae:	441a      	add	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	61da      	str	r2, [r3, #28]
 800bab4:	e002      	b.n	800babc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800bacc:	e006      	b.n	800badc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f892 	bl	800bc00 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2204      	movs	r2, #4
 800bae0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800baf0:	2300      	movs	r3, #0
 800baf2:	2200      	movs	r2, #0
 800baf4:	f001 fff6 	bl	800dae4 <osMessageQueuePut>
      break;
 800baf8:	e014      	b.n	800bb24 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800bafa:	7afb      	ldrb	r3, [r7, #11]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d111      	bne.n	800bb24 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f001 ffe0 	bl	800dae4 <osMessageQueuePut>
      break;
 800bb24:	bf00      	nop
  }
}
 800bb26:	bf00      	nop
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d002      	beq.n	800bb54 <CDC_ProcessReception+0x26>
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d00e      	beq.n	800bb70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bb52:	e051      	b.n	800bbf8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	6a19      	ldr	r1, [r3, #32]
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	8b5a      	ldrh	r2, [r3, #26]
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	7b1b      	ldrb	r3, [r3, #12]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f001 fd43 	bl	800d5ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	2204      	movs	r2, #4
 800bb6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bb6e:	e043      	b.n	800bbf8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	7b1b      	ldrb	r3, [r3, #12]
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f004 fff4 	bl	8010b64 <USBH_LL_GetURBState>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bb80:	7cfb      	ldrb	r3, [r7, #19]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d137      	bne.n	800bbf6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	7b1b      	ldrb	r3, [r3, #12]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f004 ff57 	bl	8010a40 <USBH_LL_GetLastXferSize>
 800bb92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d016      	beq.n	800bbcc <CDC_ProcessReception+0x9e>
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	8b5b      	ldrh	r3, [r3, #26]
 800bba2:	461a      	mov	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d910      	bls.n	800bbcc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	1ad2      	subs	r2, r2, r3
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6a1a      	ldr	r2, [r3, #32]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	441a      	add	r2, r3
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800bbca:	e006      	b.n	800bbda <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f81d 	bl	800bc14 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2204      	movs	r2, #4
 800bbde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f001 ff77 	bl	800dae4 <osMessageQueuePut>
      break;
 800bbf6:	bf00      	nop
  }
}
 800bbf8:	bf00      	nop
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4613      	mov	r3, r2
 800bc48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bc50:	2302      	movs	r3, #2
 800bc52:	e044      	b.n	800bcde <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	79fa      	ldrb	r2, [r7, #7]
 800bc58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f000 f841 	bl	800bcf4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800bca0:	2200      	movs	r2, #0
 800bca2:	2104      	movs	r1, #4
 800bca4:	2010      	movs	r0, #16
 800bca6:	f001 fe97 	bl	800d9d8 <osMessageQueueNew>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800bcb2:	4b0d      	ldr	r3, [pc, #52]	; (800bce8 <USBH_Init+0xac>)
 800bcb4:	4a0d      	ldr	r2, [pc, #52]	; (800bcec <USBH_Init+0xb0>)
 800bcb6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800bcb8:	4b0b      	ldr	r3, [pc, #44]	; (800bce8 <USBH_Init+0xac>)
 800bcba:	2280      	movs	r2, #128	; 0x80
 800bcbc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800bcbe:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <USBH_Init+0xac>)
 800bcc0:	2218      	movs	r2, #24
 800bcc2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800bcc4:	4a08      	ldr	r2, [pc, #32]	; (800bce8 <USBH_Init+0xac>)
 800bcc6:	68f9      	ldr	r1, [r7, #12]
 800bcc8:	4809      	ldr	r0, [pc, #36]	; (800bcf0 <USBH_Init+0xb4>)
 800bcca:	f001 fdb1 	bl	800d830 <osThreadNew>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f004 fdfe 	bl	80108d8 <USBH_LL_Init>

  return USBH_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20004dfc 	.word	0x20004dfc
 800bcec:	08011fbc 	.word	0x08011fbc
 800bcf0:	0800c95d 	.word	0x0800c95d

0800bcf4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	e009      	b.n	800bd1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	33e0      	adds	r3, #224	; 0xe0
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	2200      	movs	r2, #0
 800bd12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3301      	adds	r3, #1
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b0e      	cmp	r3, #14
 800bd1e:	d9f2      	bls.n	800bd06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bd20:	2300      	movs	r3, #0
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	e009      	b.n	800bd3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bd30:	2200      	movs	r2, #0
 800bd32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3301      	adds	r3, #1
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd40:	d3f1      	bcc.n	800bd26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2240      	movs	r2, #64	; 0x40
 800bd66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d016      	beq.n	800bdde <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10e      	bne.n	800bdd8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bdc0:	1c59      	adds	r1, r3, #1
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	33de      	adds	r3, #222	; 0xde
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	73fb      	strb	r3, [r7, #15]
 800bdd6:	e004      	b.n	800bde2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bdd8:	2302      	movs	r3, #2
 800bdda:	73fb      	strb	r3, [r7, #15]
 800bddc:	e001      	b.n	800bde2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bdde:	2302      	movs	r3, #2
 800bde0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800be06:	78fa      	ldrb	r2, [r7, #3]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d204      	bcs.n	800be16 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	78fa      	ldrb	r2, [r7, #3]
 800be10:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800be14:	e001      	b.n	800be1a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800be16:	2302      	movs	r3, #2
 800be18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800be28:	b480      	push	{r7}
 800be2a:	b087      	sub	sp, #28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	4608      	mov	r0, r1
 800be32:	4611      	mov	r1, r2
 800be34:	461a      	mov	r2, r3
 800be36:	4603      	mov	r3, r0
 800be38:	70fb      	strb	r3, [r7, #3]
 800be3a:	460b      	mov	r3, r1
 800be3c:	70bb      	strb	r3, [r7, #2]
 800be3e:	4613      	mov	r3, r2
 800be40:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800be50:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800be52:	e025      	b.n	800bea0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	221a      	movs	r2, #26
 800be58:	fb02 f303 	mul.w	r3, r2, r3
 800be5c:	3308      	adds	r3, #8
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	3302      	adds	r3, #2
 800be64:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	795b      	ldrb	r3, [r3, #5]
 800be6a:	78fa      	ldrb	r2, [r7, #3]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d002      	beq.n	800be76 <USBH_FindInterface+0x4e>
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	2bff      	cmp	r3, #255	; 0xff
 800be74:	d111      	bne.n	800be9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800be7a:	78ba      	ldrb	r2, [r7, #2]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d002      	beq.n	800be86 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800be80:	78bb      	ldrb	r3, [r7, #2]
 800be82:	2bff      	cmp	r3, #255	; 0xff
 800be84:	d109      	bne.n	800be9a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800be8a:	787a      	ldrb	r2, [r7, #1]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d002      	beq.n	800be96 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800be90:	787b      	ldrb	r3, [r7, #1]
 800be92:	2bff      	cmp	r3, #255	; 0xff
 800be94:	d101      	bne.n	800be9a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	e006      	b.n	800bea8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	3301      	adds	r3, #1
 800be9e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d9d6      	bls.n	800be54 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bea6:	23ff      	movs	r3, #255	; 0xff
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	371c      	adds	r7, #28
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f004 fd47 	bl	8010950 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bec2:	2101      	movs	r1, #1
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f004 fe60 	bl	8010b8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af04      	add	r7, sp, #16
 800beda:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bedc:	2302      	movs	r3, #2
 800bede:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b01      	cmp	r3, #1
 800beee:	d102      	bne.n	800bef6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2203      	movs	r2, #3
 800bef4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	b2db      	uxtb	r3, r3
 800befc:	2b0b      	cmp	r3, #11
 800befe:	f200 823c 	bhi.w	800c37a <USBH_Process+0x4a6>
 800bf02:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <USBH_Process+0x34>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf39 	.word	0x0800bf39
 800bf0c:	0800bf87 	.word	0x0800bf87
 800bf10:	0800c00b 	.word	0x0800c00b
 800bf14:	0800c2f9 	.word	0x0800c2f9
 800bf18:	0800c37b 	.word	0x0800c37b
 800bf1c:	0800c0cb 	.word	0x0800c0cb
 800bf20:	0800c283 	.word	0x0800c283
 800bf24:	0800c11d 	.word	0x0800c11d
 800bf28:	0800c159 	.word	0x0800c159
 800bf2c:	0800c193 	.word	0x0800c193
 800bf30:	0800c1db 	.word	0x0800c1db
 800bf34:	0800c2e1 	.word	0x0800c2e1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 821c 	beq.w	800c37e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bf4c:	20c8      	movs	r0, #200	; 0xc8
 800bf4e:	f004 fe66 	bl	8010c1e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f004 fd59 	bl	8010a0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f001 fdb0 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bf84:	e1fb      	b.n	800c37e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d107      	bne.n	800bfa0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	e025      	b.n	800bfec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bfa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfaa:	d914      	bls.n	800bfd6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d903      	bls.n	800bfce <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	220d      	movs	r2, #13
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	e00e      	b.n	800bfec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]
 800bfd4:	e00a      	b.n	800bfec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bfdc:	f103 020a 	add.w	r2, r3, #10
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bfe6:	200a      	movs	r0, #10
 800bfe8:	f004 fe19 	bl	8010c1e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c000:	2300      	movs	r3, #0
 800c002:	2200      	movs	r2, #0
 800c004:	f001 fd6e 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c008:	e1c0      	b.n	800c38c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c010:	2b00      	cmp	r3, #0
 800c012:	d005      	beq.n	800c020 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c01a:	2104      	movs	r1, #4
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c020:	2064      	movs	r0, #100	; 0x64
 800c022:	f004 fdfc 	bl	8010c1e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f004 fcc8 	bl	80109bc <USBH_LL_GetSpeed>
 800c02c:	4603      	mov	r3, r0
 800c02e:	461a      	mov	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2205      	movs	r2, #5
 800c03a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c03c:	2100      	movs	r1, #0
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f001 fb21 	bl	800d686 <USBH_AllocPipe>
 800c044:	4603      	mov	r3, r0
 800c046:	461a      	mov	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c04c:	2180      	movs	r1, #128	; 0x80
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f001 fb19 	bl	800d686 <USBH_AllocPipe>
 800c054:	4603      	mov	r3, r0
 800c056:	461a      	mov	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	7919      	ldrb	r1, [r3, #4]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c070:	b292      	uxth	r2, r2
 800c072:	9202      	str	r2, [sp, #8]
 800c074:	2200      	movs	r2, #0
 800c076:	9201      	str	r2, [sp, #4]
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	4603      	mov	r3, r0
 800c07c:	2280      	movs	r2, #128	; 0x80
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fad2 	bl	800d628 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7959      	ldrb	r1, [r3, #5]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c098:	b292      	uxth	r2, r2
 800c09a:	9202      	str	r2, [sp, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	9201      	str	r2, [sp, #4]
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 fabe 	bl	800d628 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f001 fd0e 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c0c8:	e160      	b.n	800c38c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f964 	bl	800c398 <USBH_HandleEnum>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f040 8152 	bne.w	800c382 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d103      	bne.n	800c0f8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2208      	movs	r2, #8
 800c0f4:	701a      	strb	r2, [r3, #0]
 800c0f6:	e002      	b.n	800c0fe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2207      	movs	r2, #7
 800c0fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2205      	movs	r2, #5
 800c102:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c112:	2300      	movs	r3, #0
 800c114:	2200      	movs	r2, #0
 800c116:	f001 fce5 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c11a:	e132      	b.n	800c382 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 812f 	beq.w	800c386 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c12e:	2101      	movs	r1, #1
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2208      	movs	r2, #8
 800c138:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2205      	movs	r2, #5
 800c13e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c14e:	2300      	movs	r3, #0
 800c150:	2200      	movs	r2, #0
 800c152:	f001 fcc7 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c156:	e116      	b.n	800c386 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fcf8 	bl	800cb58 <USBH_SetCfg>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d102      	bne.n	800c174 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2209      	movs	r2, #9
 800c172:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c188:	2300      	movs	r3, #0
 800c18a:	2200      	movs	r2, #0
 800c18c:	f001 fcaa 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c190:	e0fc      	b.n	800c38c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c198:	f003 0320 	and.w	r3, r3, #32
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00a      	beq.n	800c1b6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c1a0:	2101      	movs	r1, #1
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fcfb 	bl	800cb9e <USBH_SetFeature>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	e002      	b.n	800c1bc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	220a      	movs	r2, #10
 800c1ba:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f001 fc86 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c1d8:	e0d8      	b.n	800c38c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d03f      	beq.n	800c264 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	73fb      	strb	r3, [r7, #15]
 800c1f0:	e016      	b.n	800c220 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c1f2:	7bfa      	ldrb	r2, [r7, #15]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	32de      	adds	r2, #222	; 0xde
 800c1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fc:	791a      	ldrb	r2, [r3, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c204:	429a      	cmp	r2, r3
 800c206:	d108      	bne.n	800c21a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c208:	7bfa      	ldrb	r2, [r7, #15]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	32de      	adds	r2, #222	; 0xde
 800c20e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c218:	e005      	b.n	800c226 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	3301      	adds	r3, #1
 800c21e:	73fb      	strb	r3, [r7, #15]
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0e5      	beq.n	800c1f2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d016      	beq.n	800c25e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	4798      	blx	r3
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d109      	bne.n	800c256 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2206      	movs	r2, #6
 800c246:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c24e:	2103      	movs	r1, #3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	4798      	blx	r3
 800c254:	e006      	b.n	800c264 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	220d      	movs	r2, #13
 800c25a:	701a      	strb	r2, [r3, #0]
 800c25c:	e002      	b.n	800c264 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	220d      	movs	r2, #13
 800c262:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2205      	movs	r2, #5
 800c268:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c278:	2300      	movs	r3, #0
 800c27a:	2200      	movs	r2, #0
 800c27c:	f001 fc32 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c280:	e084      	b.n	800c38c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d017      	beq.n	800c2bc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	4798      	blx	r3
 800c298:	4603      	mov	r3, r0
 800c29a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d103      	bne.n	800c2ac <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	220b      	movs	r2, #11
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	e00a      	b.n	800c2c2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d106      	bne.n	800c2c2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	220d      	movs	r2, #13
 800c2b8:	701a      	strb	r2, [r3, #0]
 800c2ba:	e002      	b.n	800c2c2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	220d      	movs	r2, #13
 800c2c0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2205      	movs	r2, #5
 800c2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f001 fc03 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c2de:	e055      	b.n	800c38c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d04f      	beq.n	800c38a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	4798      	blx	r3
      }
      break;
 800c2f6:	e048      	b.n	800c38a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff fcf7 	bl	800bcf4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c334:	2105      	movs	r1, #5
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c340:	b2db      	uxtb	r3, r3
 800c342:	2b01      	cmp	r3, #1
 800c344:	d107      	bne.n	800c356 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fdb0 	bl	800beb4 <USBH_Start>
 800c354:	e002      	b.n	800c35c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f004 fafa 	bl	8010950 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c370:	2300      	movs	r3, #0
 800c372:	2200      	movs	r2, #0
 800c374:	f001 fbb6 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      break;
 800c378:	e008      	b.n	800c38c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c37a:	bf00      	nop
 800c37c:	e006      	b.n	800c38c <USBH_Process+0x4b8>
      break;
 800c37e:	bf00      	nop
 800c380:	e004      	b.n	800c38c <USBH_Process+0x4b8>
      break;
 800c382:	bf00      	nop
 800c384:	e002      	b.n	800c38c <USBH_Process+0x4b8>
    break;
 800c386:	bf00      	nop
 800c388:	e000      	b.n	800c38c <USBH_Process+0x4b8>
      break;
 800c38a:	bf00      	nop
  }
  return USBH_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop

0800c398 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af04      	add	r7, sp, #16
 800c39e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	785b      	ldrb	r3, [r3, #1]
 800c3ac:	2b07      	cmp	r3, #7
 800c3ae:	f200 8208 	bhi.w	800c7c2 <USBH_HandleEnum+0x42a>
 800c3b2:	a201      	add	r2, pc, #4	; (adr r2, 800c3b8 <USBH_HandleEnum+0x20>)
 800c3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b8:	0800c3d9 	.word	0x0800c3d9
 800c3bc:	0800c497 	.word	0x0800c497
 800c3c0:	0800c501 	.word	0x0800c501
 800c3c4:	0800c58f 	.word	0x0800c58f
 800c3c8:	0800c5f9 	.word	0x0800c5f9
 800c3cc:	0800c669 	.word	0x0800c669
 800c3d0:	0800c705 	.word	0x0800c705
 800c3d4:	0800c783 	.word	0x0800c783
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c3d8:	2108      	movs	r1, #8
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 faec 	bl	800c9b8 <USBH_Get_DevDesc>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d130      	bne.n	800c44c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7919      	ldrb	r1, [r3, #4]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c40e:	b292      	uxth	r2, r2
 800c410:	9202      	str	r2, [sp, #8]
 800c412:	2200      	movs	r2, #0
 800c414:	9201      	str	r2, [sp, #4]
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	4603      	mov	r3, r0
 800c41a:	2280      	movs	r2, #128	; 0x80
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f001 f903 	bl	800d628 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7959      	ldrb	r1, [r3, #5]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c436:	b292      	uxth	r2, r2
 800c438:	9202      	str	r2, [sp, #8]
 800c43a:	2200      	movs	r2, #0
 800c43c:	9201      	str	r2, [sp, #4]
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	4603      	mov	r3, r0
 800c442:	2200      	movs	r2, #0
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f001 f8ef 	bl	800d628 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c44a:	e1bc      	b.n	800c7c6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	2b03      	cmp	r3, #3
 800c450:	f040 81b9 	bne.w	800c7c6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c45a:	3301      	adds	r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d903      	bls.n	800c476 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	220d      	movs	r2, #13
 800c472:	701a      	strb	r2, [r3, #0]
      break;
 800c474:	e1a7      	b.n	800c7c6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	795b      	ldrb	r3, [r3, #5]
 800c47a:	4619      	mov	r1, r3
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f001 f923 	bl	800d6c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	791b      	ldrb	r3, [r3, #4]
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f001 f91d 	bl	800d6c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	701a      	strb	r2, [r3, #0]
      break;
 800c494:	e197      	b.n	800c7c6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c496:	2112      	movs	r1, #18
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa8d 	bl	800c9b8 <USBH_Get_DevDesc>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c4ae:	e18c      	b.n	800c7ca <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4b0:	7bbb      	ldrb	r3, [r7, #14]
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	f040 8189 	bne.w	800c7ca <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c4be:	3301      	adds	r3, #1
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d903      	bls.n	800c4da <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	220d      	movs	r2, #13
 800c4d6:	701a      	strb	r2, [r3, #0]
      break;
 800c4d8:	e177      	b.n	800c7ca <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	795b      	ldrb	r3, [r3, #5]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 f8f1 	bl	800d6c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	791b      	ldrb	r3, [r3, #4]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f001 f8eb 	bl	800d6c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	701a      	strb	r2, [r3, #0]
      break;
 800c4fe:	e164      	b.n	800c7ca <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c500:	2101      	movs	r1, #1
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb04 	bl	800cb10 <USBH_SetAddress>
 800c508:	4603      	mov	r3, r0
 800c50a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d132      	bne.n	800c578 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c512:	2002      	movs	r0, #2
 800c514:	f004 fb83 	bl	8010c1e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2203      	movs	r2, #3
 800c524:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7919      	ldrb	r1, [r3, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c53a:	b292      	uxth	r2, r2
 800c53c:	9202      	str	r2, [sp, #8]
 800c53e:	2200      	movs	r2, #0
 800c540:	9201      	str	r2, [sp, #4]
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	4603      	mov	r3, r0
 800c546:	2280      	movs	r2, #128	; 0x80
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f001 f86d 	bl	800d628 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	7959      	ldrb	r1, [r3, #5]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c562:	b292      	uxth	r2, r2
 800c564:	9202      	str	r2, [sp, #8]
 800c566:	2200      	movs	r2, #0
 800c568:	9201      	str	r2, [sp, #4]
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	4603      	mov	r3, r0
 800c56e:	2200      	movs	r2, #0
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f001 f859 	bl	800d628 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c576:	e12a      	b.n	800c7ce <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	f040 8127 	bne.w	800c7ce <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	220d      	movs	r2, #13
 800c584:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	705a      	strb	r2, [r3, #1]
      break;
 800c58c:	e11f      	b.n	800c7ce <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c58e:	2109      	movs	r1, #9
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa39 	bl	800ca08 <USBH_Get_CfgDesc>
 800c596:	4603      	mov	r3, r0
 800c598:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d103      	bne.n	800c5a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c5a6:	e114      	b.n	800c7d2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	f040 8111 	bne.w	800c7d2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d903      	bls.n	800c5d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	220d      	movs	r2, #13
 800c5ce:	701a      	strb	r2, [r3, #0]
      break;
 800c5d0:	e0ff      	b.n	800c7d2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	795b      	ldrb	r3, [r3, #5]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 f875 	bl	800d6c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	791b      	ldrb	r3, [r3, #4]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f001 f86f 	bl	800d6c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
      break;
 800c5f6:	e0ec      	b.n	800c7d2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fa01 	bl	800ca08 <USBH_Get_CfgDesc>
 800c606:	4603      	mov	r3, r0
 800c608:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d103      	bne.n	800c618 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2205      	movs	r2, #5
 800c614:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c616:	e0de      	b.n	800c7d6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	f040 80db 	bne.w	800c7d6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c626:	3301      	adds	r3, #1
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c636:	2b03      	cmp	r3, #3
 800c638:	d903      	bls.n	800c642 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	220d      	movs	r2, #13
 800c63e:	701a      	strb	r2, [r3, #0]
      break;
 800c640:	e0c9      	b.n	800c7d6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	795b      	ldrb	r3, [r3, #5]
 800c646:	4619      	mov	r1, r3
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f001 f83d 	bl	800d6c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	791b      	ldrb	r3, [r3, #4]
 800c652:	4619      	mov	r1, r3
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f001 f837 	bl	800d6c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
      break;
 800c666:	e0b6      	b.n	800c7d6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d036      	beq.n	800c6e0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c67e:	23ff      	movs	r3, #255	; 0xff
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f9e5 	bl	800ca50 <USBH_Get_StringDesc>
 800c686:	4603      	mov	r3, r0
 800c688:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d111      	bne.n	800c6b4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2206      	movs	r2, #6
 800c694:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2205      	movs	r2, #5
 800c69a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f001 fa19 	bl	800dae4 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c6b2:	e092      	b.n	800c7da <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	f040 808f 	bne.w	800c7da <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2206      	movs	r2, #6
 800c6c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2205      	movs	r2, #5
 800c6c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f001 fa03 	bl	800dae4 <osMessageQueuePut>
      break;
 800c6de:	e07c      	b.n	800c7da <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2206      	movs	r2, #6
 800c6e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2205      	movs	r2, #5
 800c6ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f001 f9f1 	bl	800dae4 <osMessageQueuePut>
      break;
 800c702:	e06a      	b.n	800c7da <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d027      	beq.n	800c75e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c71a:	23ff      	movs	r3, #255	; 0xff
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f997 	bl	800ca50 <USBH_Get_StringDesc>
 800c722:	4603      	mov	r3, r0
 800c724:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c726:	7bbb      	ldrb	r3, [r7, #14]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d103      	bne.n	800c734 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2207      	movs	r2, #7
 800c730:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c732:	e054      	b.n	800c7de <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	2b03      	cmp	r3, #3
 800c738:	d151      	bne.n	800c7de <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2207      	movs	r2, #7
 800c73e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2205      	movs	r2, #5
 800c744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c754:	2300      	movs	r3, #0
 800c756:	2200      	movs	r2, #0
 800c758:	f001 f9c4 	bl	800dae4 <osMessageQueuePut>
      break;
 800c75c:	e03f      	b.n	800c7de <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2207      	movs	r2, #7
 800c762:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2205      	movs	r2, #5
 800c768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c778:	2300      	movs	r3, #0
 800c77a:	2200      	movs	r2, #0
 800c77c:	f001 f9b2 	bl	800dae4 <osMessageQueuePut>
      break;
 800c780:	e02d      	b.n	800c7de <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d017      	beq.n	800c7bc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c798:	23ff      	movs	r3, #255	; 0xff
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f958 	bl	800ca50 <USBH_Get_StringDesc>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c7ae:	e018      	b.n	800c7e2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d115      	bne.n	800c7e2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ba:	e012      	b.n	800c7e2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c0:	e00f      	b.n	800c7e2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800c7c2:	bf00      	nop
 800c7c4:	e00e      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7c6:	bf00      	nop
 800c7c8:	e00c      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7ca:	bf00      	nop
 800c7cc:	e00a      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7ce:	bf00      	nop
 800c7d0:	e008      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7d2:	bf00      	nop
 800c7d4:	e006      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7d6:	bf00      	nop
 800c7d8:	e004      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7da:	bf00      	nop
 800c7dc:	e002      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7de:	bf00      	nop
 800c7e0:	e000      	b.n	800c7e4 <USBH_HandleEnum+0x44c>
      break;
 800c7e2:	bf00      	nop
  }
  return Status;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop

0800c7f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c802:	bf00      	nop
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f804 	bl	800c832 <USBH_HandleSof>
}
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b082      	sub	sp, #8
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b0b      	cmp	r3, #11
 800c842:	d10a      	bne.n	800c85a <USBH_HandleSof+0x28>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d005      	beq.n	800c85a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	4798      	blx	r3
  }
}
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b082      	sub	sp, #8
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c886:	2300      	movs	r3, #0
 800c888:	2200      	movs	r2, #0
 800c88a:	f001 f92b 	bl	800dae4 <osMessageQueuePut>
#endif
#endif

  return;
 800c88e:	bf00      	nop
}
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c8a6:	bf00      	nop
}
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f001 f8fb 	bl	800dae4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f004 f834 	bl	8010986 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	791b      	ldrb	r3, [r3, #4]
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fecf 	bl	800d6c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	795b      	ldrb	r3, [r3, #5]
 800c92e:	4619      	mov	r1, r3
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fec9 	bl	800d6c8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c94a:	2300      	movs	r3, #0
 800c94c:	2200      	movs	r2, #0
 800c94e:	f001 f8c9 	bl	800dae4 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c970:	f04f 33ff 	mov.w	r3, #4294967295
 800c974:	2200      	movs	r2, #0
 800c976:	f001 f929 	bl	800dbcc <osMessageQueueGet>
 800c97a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1f0      	bne.n	800c964 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff faa6 	bl	800bed4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c988:	e7ec      	b.n	800c964 <USBH_Process_OS+0x8>

0800c98a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f001 f89b 	bl	800dae4 <osMessageQueuePut>
#endif

  return USBH_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c9ca:	78fb      	ldrb	r3, [r7, #3]
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f864 	bl	800caa6 <USBH_GetDescriptor>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	73fb      	strb	r3, [r7, #15]
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c9f4:	78fa      	ldrb	r2, [r7, #3]
 800c9f6:	b292      	uxth	r2, r2
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	f000 f918 	bl	800cc2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af02      	add	r7, sp, #8
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	460b      	mov	r3, r1
 800ca12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	331c      	adds	r3, #28
 800ca18:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ca1a:	887b      	ldrh	r3, [r7, #2]
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca24:	2100      	movs	r1, #0
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f83d 	bl	800caa6 <USBH_GetDescriptor>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	72fb      	strb	r3, [r7, #11]
 800ca30:	7afb      	ldrb	r3, [r7, #11]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d107      	bne.n	800ca46 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ca3c:	887a      	ldrh	r2, [r7, #2]
 800ca3e:	68f9      	ldr	r1, [r7, #12]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 f964 	bl	800cd0e <USBH_ParseCfgDesc>
  }

  return status;
 800ca46:	7afb      	ldrb	r3, [r7, #11]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af02      	add	r7, sp, #8
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	607a      	str	r2, [r7, #4]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	72fb      	strb	r3, [r7, #11]
 800ca60:	4613      	mov	r3, r2
 800ca62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ca64:	7afb      	ldrb	r3, [r7, #11]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ca6c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ca74:	893b      	ldrh	r3, [r7, #8]
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f000 f812 	bl	800caa6 <USBH_GetDescriptor>
 800ca82:	4603      	mov	r3, r0
 800ca84:	75fb      	strb	r3, [r7, #23]
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d107      	bne.n	800ca9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ca92:	893a      	ldrh	r2, [r7, #8]
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fa37 	bl	800cf0a <USBH_ParseStringDesc>
  }

  return status;
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	72fb      	strb	r3, [r7, #11]
 800cab4:	4613      	mov	r3, r2
 800cab6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	789b      	ldrb	r3, [r3, #2]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d11c      	bne.n	800cafa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cac0:	7afb      	ldrb	r3, [r7, #11]
 800cac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2206      	movs	r2, #6
 800cad0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	893a      	ldrh	r2, [r7, #8]
 800cad6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cad8:	893b      	ldrh	r3, [r7, #8]
 800cada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cae2:	d104      	bne.n	800caee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f240 4209 	movw	r2, #1033	; 0x409
 800caea:	829a      	strh	r2, [r3, #20]
 800caec:	e002      	b.n	800caf4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	8b3a      	ldrh	r2, [r7, #24]
 800caf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cafa:	8b3b      	ldrh	r3, [r7, #24]
 800cafc:	461a      	mov	r2, r3
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f000 fa50 	bl	800cfa6 <USBH_CtlReq>
 800cb06:	4603      	mov	r3, r0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	789b      	ldrb	r3, [r3, #2]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d10f      	bne.n	800cb44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2205      	movs	r2, #5
 800cb2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cb44:	2200      	movs	r2, #0
 800cb46:	2100      	movs	r1, #0
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fa2c 	bl	800cfa6 <USBH_CtlReq>
 800cb4e:	4603      	mov	r3, r0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	460b      	mov	r3, r1
 800cb62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	789b      	ldrb	r3, [r3, #2]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d10e      	bne.n	800cb8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2209      	movs	r2, #9
 800cb76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	887a      	ldrh	r2, [r7, #2]
 800cb7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fa09 	bl	800cfa6 <USBH_CtlReq>
 800cb94:	4603      	mov	r3, r0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	460b      	mov	r3, r1
 800cba8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	789b      	ldrb	r3, [r3, #2]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d10f      	bne.n	800cbd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2203      	movs	r2, #3
 800cbbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cbbe:	78fb      	ldrb	r3, [r7, #3]
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f9e5 	bl	800cfa6 <USBH_CtlReq>
 800cbdc:	4603      	mov	r3, r0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b082      	sub	sp, #8
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	460b      	mov	r3, r1
 800cbf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	789b      	ldrb	r3, [r3, #2]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d10f      	bne.n	800cc1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2202      	movs	r2, #2
 800cbfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cc0c:	78fb      	ldrb	r3, [r7, #3]
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f9c1 	bl	800cfa6 <USBH_CtlReq>
 800cc24:	4603      	mov	r3, r0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b085      	sub	sp, #20
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	60f8      	str	r0, [r7, #12]
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	781a      	ldrb	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	785a      	ldrb	r2, [r3, #1]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	3302      	adds	r3, #2
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	3303      	adds	r3, #3
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	021b      	lsls	r3, r3, #8
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4313      	orrs	r3, r2
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	791a      	ldrb	r2, [r3, #4]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	795a      	ldrb	r2, [r3, #5]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	799a      	ldrb	r2, [r3, #6]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	79da      	ldrb	r2, [r3, #7]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cc88:	88fb      	ldrh	r3, [r7, #6]
 800cc8a:	2b08      	cmp	r3, #8
 800cc8c:	d939      	bls.n	800cd02 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	3308      	adds	r3, #8
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	3309      	adds	r3, #9
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	021b      	lsls	r3, r3, #8
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	4313      	orrs	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	330a      	adds	r3, #10
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	330b      	adds	r3, #11
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	330c      	adds	r3, #12
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	330d      	adds	r3, #13
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	021b      	lsls	r3, r3, #8
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	7b9a      	ldrb	r2, [r3, #14]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	7bda      	ldrb	r2, [r3, #15]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	7c1a      	ldrb	r2, [r3, #16]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	7c5a      	ldrb	r2, [r3, #17]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	745a      	strb	r2, [r3, #17]
  }
}
 800cd02:	bf00      	nop
 800cd04:	3714      	adds	r7, #20
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b08a      	sub	sp, #40	; 0x28
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	60f8      	str	r0, [r7, #12]
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cd20:	2300      	movs	r3, #0
 800cd22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	781a      	ldrb	r2, [r3, #0]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	785a      	ldrb	r2, [r3, #1]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	3302      	adds	r3, #2
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3303      	adds	r3, #3
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	4313      	orrs	r3, r2
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	791a      	ldrb	r2, [r3, #4]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	795a      	ldrb	r2, [r3, #5]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	799a      	ldrb	r2, [r3, #6]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	79da      	ldrb	r2, [r3, #7]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	7a1a      	ldrb	r2, [r3, #8]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cd84:	88fb      	ldrh	r3, [r7, #6]
 800cd86:	2b09      	cmp	r3, #9
 800cd88:	d95f      	bls.n	800ce4a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cd8a:	2309      	movs	r3, #9
 800cd8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cd92:	e051      	b.n	800ce38 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cd94:	f107 0316 	add.w	r3, r7, #22
 800cd98:	4619      	mov	r1, r3
 800cd9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd9c:	f000 f8e8 	bl	800cf70 <USBH_GetNextDesc>
 800cda0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	785b      	ldrb	r3, [r3, #1]
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	d146      	bne.n	800ce38 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cdaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdae:	221a      	movs	r2, #26
 800cdb0:	fb02 f303 	mul.w	r3, r2, r3
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	4413      	add	r3, r2
 800cdba:	3302      	adds	r3, #2
 800cdbc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cdbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdc0:	69f8      	ldr	r0, [r7, #28]
 800cdc2:	f000 f846 	bl	800ce52 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cdd0:	e022      	b.n	800ce18 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cdd2:	f107 0316 	add.w	r3, r7, #22
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdda:	f000 f8c9 	bl	800cf70 <USBH_GetNextDesc>
 800cdde:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde2:	785b      	ldrb	r3, [r3, #1]
 800cde4:	2b05      	cmp	r3, #5
 800cde6:	d117      	bne.n	800ce18 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cde8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cdf0:	3201      	adds	r2, #1
 800cdf2:	00d2      	lsls	r2, r2, #3
 800cdf4:	211a      	movs	r1, #26
 800cdf6:	fb01 f303 	mul.w	r3, r1, r3
 800cdfa:	4413      	add	r3, r2
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	4413      	add	r3, r2
 800ce02:	3304      	adds	r3, #4
 800ce04:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ce06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce08:	69b8      	ldr	r0, [r7, #24]
 800ce0a:	f000 f851 	bl	800ceb0 <USBH_ParseEPDesc>
            ep_ix++;
 800ce0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ce12:	3301      	adds	r3, #1
 800ce14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	791b      	ldrb	r3, [r3, #4]
 800ce1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d204      	bcs.n	800ce2e <USBH_ParseCfgDesc+0x120>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	885a      	ldrh	r2, [r3, #2]
 800ce28:	8afb      	ldrh	r3, [r7, #22]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d8d1      	bhi.n	800cdd2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ce2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce32:	3301      	adds	r3, #1
 800ce34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ce38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d804      	bhi.n	800ce4a <USBH_ParseCfgDesc+0x13c>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	885a      	ldrh	r2, [r3, #2]
 800ce44:	8afb      	ldrh	r3, [r7, #22]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d8a4      	bhi.n	800cd94 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ce4a:	bf00      	nop
 800ce4c:	3728      	adds	r7, #40	; 0x28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781a      	ldrb	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	785a      	ldrb	r2, [r3, #1]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	789a      	ldrb	r2, [r3, #2]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	78da      	ldrb	r2, [r3, #3]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	791a      	ldrb	r2, [r3, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	795a      	ldrb	r2, [r3, #5]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	799a      	ldrb	r2, [r3, #6]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	79da      	ldrb	r2, [r3, #7]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	7a1a      	ldrb	r2, [r3, #8]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	721a      	strb	r2, [r3, #8]
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781a      	ldrb	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	785a      	ldrb	r2, [r3, #1]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	789a      	ldrb	r2, [r3, #2]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	78da      	ldrb	r2, [r3, #3]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	3304      	adds	r3, #4
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	3305      	adds	r3, #5
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	021b      	lsls	r3, r3, #8
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	4313      	orrs	r3, r2
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	799a      	ldrb	r2, [r3, #6]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	719a      	strb	r2, [r3, #6]
}
 800cefe:	bf00      	nop
 800cf00:	370c      	adds	r7, #12
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	b087      	sub	sp, #28
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	4613      	mov	r3, r2
 800cf16:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	2b03      	cmp	r3, #3
 800cf20:	d120      	bne.n	800cf64 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	1e9a      	subs	r2, r3, #2
 800cf28:	88fb      	ldrh	r3, [r7, #6]
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	bf28      	it	cs
 800cf2e:	4613      	movcs	r3, r2
 800cf30:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3302      	adds	r3, #2
 800cf36:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cf38:	2300      	movs	r3, #0
 800cf3a:	82fb      	strh	r3, [r7, #22]
 800cf3c:	e00b      	b.n	800cf56 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cf3e:	8afb      	ldrh	r3, [r7, #22]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	4413      	add	r3, r2
 800cf44:	781a      	ldrb	r2, [r3, #0]
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cf50:	8afb      	ldrh	r3, [r7, #22]
 800cf52:	3302      	adds	r3, #2
 800cf54:	82fb      	strh	r3, [r7, #22]
 800cf56:	8afa      	ldrh	r2, [r7, #22]
 800cf58:	8abb      	ldrh	r3, [r7, #20]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d3ef      	bcc.n	800cf3e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	2200      	movs	r2, #0
 800cf62:	701a      	strb	r2, [r3, #0]
  }
}
 800cf64:	bf00      	nop
 800cf66:	371c      	adds	r7, #28
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	881a      	ldrh	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4413      	add	r3, r2
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4413      	add	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf98:	68fb      	ldr	r3, [r7, #12]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b086      	sub	sp, #24
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	789b      	ldrb	r3, [r3, #2]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d002      	beq.n	800cfc6 <USBH_CtlReq+0x20>
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d01d      	beq.n	800d000 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800cfc4:	e043      	b.n	800d04e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	88fa      	ldrh	r2, [r7, #6]
 800cfd0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2203      	movs	r2, #3
 800cfe6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cff6:	2300      	movs	r3, #0
 800cff8:	2200      	movs	r2, #0
 800cffa:	f000 fd73 	bl	800dae4 <osMessageQueuePut>
      break;
 800cffe:	e026      	b.n	800d04e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f000 f829 	bl	800d058 <USBH_HandleControl>
 800d006:	4603      	mov	r3, r0
 800d008:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d00a:	7dfb      	ldrb	r3, [r7, #23]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <USBH_CtlReq+0x70>
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	2b03      	cmp	r3, #3
 800d014:	d106      	bne.n	800d024 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2201      	movs	r2, #1
 800d01a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	761a      	strb	r2, [r3, #24]
 800d022:	e005      	b.n	800d030 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	2b02      	cmp	r3, #2
 800d028:	d102      	bne.n	800d030 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2201      	movs	r2, #1
 800d02e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2203      	movs	r2, #3
 800d034:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d044:	2300      	movs	r3, #0
 800d046:	2200      	movs	r2, #0
 800d048:	f000 fd4c 	bl	800dae4 <osMessageQueuePut>
      break;
 800d04c:	bf00      	nop
  }
  return status;
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3718      	adds	r7, #24
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d060:	2301      	movs	r3, #1
 800d062:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d064:	2300      	movs	r3, #0
 800d066:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7e1b      	ldrb	r3, [r3, #24]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	2b0a      	cmp	r3, #10
 800d070:	f200 8229 	bhi.w	800d4c6 <USBH_HandleControl+0x46e>
 800d074:	a201      	add	r2, pc, #4	; (adr r2, 800d07c <USBH_HandleControl+0x24>)
 800d076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07a:	bf00      	nop
 800d07c:	0800d0a9 	.word	0x0800d0a9
 800d080:	0800d0c3 	.word	0x0800d0c3
 800d084:	0800d165 	.word	0x0800d165
 800d088:	0800d18b 	.word	0x0800d18b
 800d08c:	0800d217 	.word	0x0800d217
 800d090:	0800d241 	.word	0x0800d241
 800d094:	0800d303 	.word	0x0800d303
 800d098:	0800d325 	.word	0x0800d325
 800d09c:	0800d3b7 	.word	0x0800d3b7
 800d0a0:	0800d3dd 	.word	0x0800d3dd
 800d0a4:	0800d46f 	.word	0x0800d46f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f103 0110 	add.w	r1, r3, #16
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	795b      	ldrb	r3, [r3, #5]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fa17 	bl	800d4e8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2202      	movs	r2, #2
 800d0be:	761a      	strb	r2, [r3, #24]
      break;
 800d0c0:	e20c      	b.n	800d4dc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	795b      	ldrb	r3, [r3, #5]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f003 fd4b 	bl	8010b64 <USBH_LL_GetURBState>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d12c      	bne.n	800d132 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	7c1b      	ldrb	r3, [r3, #16]
 800d0dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d0e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	8adb      	ldrh	r3, [r3, #22]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00a      	beq.n	800d100 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d0ea:	7b7b      	ldrb	r3, [r7, #13]
 800d0ec:	2b80      	cmp	r3, #128	; 0x80
 800d0ee:	d103      	bne.n	800d0f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	761a      	strb	r2, [r3, #24]
 800d0f6:	e00d      	b.n	800d114 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2205      	movs	r2, #5
 800d0fc:	761a      	strb	r2, [r3, #24]
 800d0fe:	e009      	b.n	800d114 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d100:	7b7b      	ldrb	r3, [r7, #13]
 800d102:	2b80      	cmp	r3, #128	; 0x80
 800d104:	d103      	bne.n	800d10e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2209      	movs	r2, #9
 800d10a:	761a      	strb	r2, [r3, #24]
 800d10c:	e002      	b.n	800d114 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2207      	movs	r2, #7
 800d112:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2203      	movs	r2, #3
 800d118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d128:	2300      	movs	r3, #0
 800d12a:	2200      	movs	r2, #0
 800d12c:	f000 fcda 	bl	800dae4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d130:	e1cb      	b.n	800d4ca <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d132:	7bbb      	ldrb	r3, [r7, #14]
 800d134:	2b04      	cmp	r3, #4
 800d136:	d003      	beq.n	800d140 <USBH_HandleControl+0xe8>
 800d138:	7bbb      	ldrb	r3, [r7, #14]
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	f040 81c5 	bne.w	800d4ca <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	220b      	movs	r2, #11
 800d144:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2203      	movs	r2, #3
 800d14a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d15a:	2300      	movs	r3, #0
 800d15c:	2200      	movs	r2, #0
 800d15e:	f000 fcc1 	bl	800dae4 <osMessageQueuePut>
      break;
 800d162:	e1b2      	b.n	800d4ca <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6899      	ldr	r1, [r3, #8]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	899a      	ldrh	r2, [r3, #12]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	791b      	ldrb	r3, [r3, #4]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f9f2 	bl	800d566 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2204      	movs	r2, #4
 800d186:	761a      	strb	r2, [r3, #24]
      break;
 800d188:	e1a8      	b.n	800d4dc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	791b      	ldrb	r3, [r3, #4]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f003 fce7 	bl	8010b64 <USBH_LL_GetURBState>
 800d196:	4603      	mov	r3, r0
 800d198:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d110      	bne.n	800d1c2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2209      	movs	r2, #9
 800d1a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2203      	movs	r2, #3
 800d1aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f000 fc91 	bl	800dae4 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
 800d1c4:	2b05      	cmp	r3, #5
 800d1c6:	d110      	bne.n	800d1ea <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2203      	movs	r2, #3
 800d1d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f000 fc7e 	bl	800dae4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d1e8:	e171      	b.n	800d4ce <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d1ea:	7bbb      	ldrb	r3, [r7, #14]
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	f040 816e 	bne.w	800d4ce <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	220b      	movs	r2, #11
 800d1f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2203      	movs	r2, #3
 800d1fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d20c:	2300      	movs	r3, #0
 800d20e:	2200      	movs	r2, #0
 800d210:	f000 fc68 	bl	800dae4 <osMessageQueuePut>
      break;
 800d214:	e15b      	b.n	800d4ce <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6899      	ldr	r1, [r3, #8]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	899a      	ldrh	r2, [r3, #12]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	795b      	ldrb	r3, [r3, #5]
 800d222:	2001      	movs	r0, #1
 800d224:	9000      	str	r0, [sp, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f978 	bl	800d51c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d232:	b29a      	uxth	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2206      	movs	r2, #6
 800d23c:	761a      	strb	r2, [r3, #24]
      break;
 800d23e:	e14d      	b.n	800d4dc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	795b      	ldrb	r3, [r3, #5]
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f003 fc8c 	bl	8010b64 <USBH_LL_GetURBState>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d111      	bne.n	800d27a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2207      	movs	r2, #7
 800d25a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2203      	movs	r2, #3
 800d260:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d270:	2300      	movs	r3, #0
 800d272:	2200      	movs	r2, #0
 800d274:	f000 fc36 	bl	800dae4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d278:	e12b      	b.n	800d4d2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d27a:	7bbb      	ldrb	r3, [r7, #14]
 800d27c:	2b05      	cmp	r3, #5
 800d27e:	d113      	bne.n	800d2a8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	220c      	movs	r2, #12
 800d284:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d286:	2303      	movs	r3, #3
 800d288:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2203      	movs	r2, #3
 800d28e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d29e:	2300      	movs	r3, #0
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f000 fc1f 	bl	800dae4 <osMessageQueuePut>
      break;
 800d2a6:	e114      	b.n	800d4d2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d111      	bne.n	800d2d2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2205      	movs	r2, #5
 800d2b2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2203      	movs	r2, #3
 800d2b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f000 fc0a 	bl	800dae4 <osMessageQueuePut>
      break;
 800d2d0:	e0ff      	b.n	800d4d2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d2d2:	7bbb      	ldrb	r3, [r7, #14]
 800d2d4:	2b04      	cmp	r3, #4
 800d2d6:	f040 80fc 	bne.w	800d4d2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	220b      	movs	r2, #11
 800d2de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2203      	movs	r2, #3
 800d2e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f000 fbf2 	bl	800dae4 <osMessageQueuePut>
      break;
 800d300:	e0e7      	b.n	800d4d2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	791b      	ldrb	r3, [r3, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	2100      	movs	r1, #0
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f92b 	bl	800d566 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d316:	b29a      	uxth	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2208      	movs	r2, #8
 800d320:	761a      	strb	r2, [r3, #24]

      break;
 800d322:	e0db      	b.n	800d4dc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	791b      	ldrb	r3, [r3, #4]
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f003 fc1a 	bl	8010b64 <USBH_LL_GetURBState>
 800d330:	4603      	mov	r3, r0
 800d332:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d113      	bne.n	800d362 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	220d      	movs	r2, #13
 800d33e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2203      	movs	r2, #3
 800d348:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d358:	2300      	movs	r3, #0
 800d35a:	2200      	movs	r2, #0
 800d35c:	f000 fbc2 	bl	800dae4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d360:	e0b9      	b.n	800d4d6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d362:	7bbb      	ldrb	r3, [r7, #14]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d111      	bne.n	800d38c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	220b      	movs	r2, #11
 800d36c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2203      	movs	r2, #3
 800d372:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d382:	2300      	movs	r3, #0
 800d384:	2200      	movs	r2, #0
 800d386:	f000 fbad 	bl	800dae4 <osMessageQueuePut>
      break;
 800d38a:	e0a4      	b.n	800d4d6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d38c:	7bbb      	ldrb	r3, [r7, #14]
 800d38e:	2b05      	cmp	r3, #5
 800d390:	f040 80a1 	bne.w	800d4d6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d394:	2303      	movs	r3, #3
 800d396:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2203      	movs	r2, #3
 800d39c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f000 fb98 	bl	800dae4 <osMessageQueuePut>
      break;
 800d3b4:	e08f      	b.n	800d4d6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	795b      	ldrb	r3, [r3, #5]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	9200      	str	r2, [sp, #0]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f8aa 	bl	800d51c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	220a      	movs	r2, #10
 800d3d8:	761a      	strb	r2, [r3, #24]
      break;
 800d3da:	e07f      	b.n	800d4dc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	795b      	ldrb	r3, [r3, #5]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f003 fbbe 	bl	8010b64 <USBH_LL_GetURBState>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d113      	bne.n	800d41a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	220d      	movs	r2, #13
 800d3fa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2203      	movs	r2, #3
 800d400:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d410:	2300      	movs	r3, #0
 800d412:	2200      	movs	r2, #0
 800d414:	f000 fb66 	bl	800dae4 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d418:	e05f      	b.n	800d4da <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d111      	bne.n	800d444 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2209      	movs	r2, #9
 800d424:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2203      	movs	r2, #3
 800d42a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d43a:	2300      	movs	r3, #0
 800d43c:	2200      	movs	r2, #0
 800d43e:	f000 fb51 	bl	800dae4 <osMessageQueuePut>
      break;
 800d442:	e04a      	b.n	800d4da <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	2b04      	cmp	r3, #4
 800d448:	d147      	bne.n	800d4da <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	220b      	movs	r2, #11
 800d44e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2203      	movs	r2, #3
 800d454:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d464:	2300      	movs	r3, #0
 800d466:	2200      	movs	r2, #0
 800d468:	f000 fb3c 	bl	800dae4 <osMessageQueuePut>
      break;
 800d46c:	e035      	b.n	800d4da <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7e5b      	ldrb	r3, [r3, #25]
 800d472:	3301      	adds	r3, #1
 800d474:	b2da      	uxtb	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	765a      	strb	r2, [r3, #25]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7e5b      	ldrb	r3, [r3, #25]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d806      	bhi.n	800d490 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d48e:	e025      	b.n	800d4dc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d496:	2106      	movs	r1, #6
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	795b      	ldrb	r3, [r3, #5]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f90d 	bl	800d6c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	791b      	ldrb	r3, [r3, #4]
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 f907 	bl	800d6c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d4c4:	e00a      	b.n	800d4dc <USBH_HandleControl+0x484>

    default:
      break;
 800d4c6:	bf00      	nop
 800d4c8:	e008      	b.n	800d4dc <USBH_HandleControl+0x484>
      break;
 800d4ca:	bf00      	nop
 800d4cc:	e006      	b.n	800d4dc <USBH_HandleControl+0x484>
      break;
 800d4ce:	bf00      	nop
 800d4d0:	e004      	b.n	800d4dc <USBH_HandleControl+0x484>
      break;
 800d4d2:	bf00      	nop
 800d4d4:	e002      	b.n	800d4dc <USBH_HandleControl+0x484>
      break;
 800d4d6:	bf00      	nop
 800d4d8:	e000      	b.n	800d4dc <USBH_HandleControl+0x484>
      break;
 800d4da:	bf00      	nop
  }

  return status;
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop

0800d4e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af04      	add	r7, sp, #16
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d4f6:	79f9      	ldrb	r1, [r7, #7]
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	9303      	str	r3, [sp, #12]
 800d4fc:	2308      	movs	r3, #8
 800d4fe:	9302      	str	r3, [sp, #8]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	9301      	str	r3, [sp, #4]
 800d504:	2300      	movs	r3, #0
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	2300      	movs	r3, #0
 800d50a:	2200      	movs	r2, #0
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f003 faf8 	bl	8010b02 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d512:	2300      	movs	r3, #0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af04      	add	r7, sp, #16
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	4611      	mov	r1, r2
 800d528:	461a      	mov	r2, r3
 800d52a:	460b      	mov	r3, r1
 800d52c:	80fb      	strh	r3, [r7, #6]
 800d52e:	4613      	mov	r3, r2
 800d530:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d001      	beq.n	800d540 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d53c:	2300      	movs	r3, #0
 800d53e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d540:	7979      	ldrb	r1, [r7, #5]
 800d542:	7e3b      	ldrb	r3, [r7, #24]
 800d544:	9303      	str	r3, [sp, #12]
 800d546:	88fb      	ldrh	r3, [r7, #6]
 800d548:	9302      	str	r3, [sp, #8]
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	2301      	movs	r3, #1
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	2300      	movs	r3, #0
 800d554:	2200      	movs	r2, #0
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f003 fad3 	bl	8010b02 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b088      	sub	sp, #32
 800d56a:	af04      	add	r7, sp, #16
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	4611      	mov	r1, r2
 800d572:	461a      	mov	r2, r3
 800d574:	460b      	mov	r3, r1
 800d576:	80fb      	strh	r3, [r7, #6]
 800d578:	4613      	mov	r3, r2
 800d57a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d57c:	7979      	ldrb	r1, [r7, #5]
 800d57e:	2300      	movs	r3, #0
 800d580:	9303      	str	r3, [sp, #12]
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	9302      	str	r3, [sp, #8]
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	9301      	str	r3, [sp, #4]
 800d58a:	2301      	movs	r3, #1
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	2300      	movs	r3, #0
 800d590:	2201      	movs	r2, #1
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f003 fab5 	bl	8010b02 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d598:	2300      	movs	r3, #0

}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b088      	sub	sp, #32
 800d5a6:	af04      	add	r7, sp, #16
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	60b9      	str	r1, [r7, #8]
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	80fb      	strh	r3, [r7, #6]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d001      	beq.n	800d5c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d5c6:	7979      	ldrb	r1, [r7, #5]
 800d5c8:	7e3b      	ldrb	r3, [r7, #24]
 800d5ca:	9303      	str	r3, [sp, #12]
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	9302      	str	r3, [sp, #8]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	2302      	movs	r3, #2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f003 fa90 	bl	8010b02 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af04      	add	r7, sp, #16
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	80fb      	strh	r3, [r7, #6]
 800d5fe:	4613      	mov	r3, r2
 800d600:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d602:	7979      	ldrb	r1, [r7, #5]
 800d604:	2300      	movs	r3, #0
 800d606:	9303      	str	r3, [sp, #12]
 800d608:	88fb      	ldrh	r3, [r7, #6]
 800d60a:	9302      	str	r3, [sp, #8]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	9301      	str	r3, [sp, #4]
 800d610:	2301      	movs	r3, #1
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	2302      	movs	r3, #2
 800d616:	2201      	movs	r2, #1
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f003 fa72 	bl	8010b02 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af04      	add	r7, sp, #16
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	4608      	mov	r0, r1
 800d632:	4611      	mov	r1, r2
 800d634:	461a      	mov	r2, r3
 800d636:	4603      	mov	r3, r0
 800d638:	70fb      	strb	r3, [r7, #3]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70bb      	strb	r3, [r7, #2]
 800d63e:	4613      	mov	r3, r2
 800d640:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d642:	7878      	ldrb	r0, [r7, #1]
 800d644:	78ba      	ldrb	r2, [r7, #2]
 800d646:	78f9      	ldrb	r1, [r7, #3]
 800d648:	8b3b      	ldrh	r3, [r7, #24]
 800d64a:	9302      	str	r3, [sp, #8]
 800d64c:	7d3b      	ldrb	r3, [r7, #20]
 800d64e:	9301      	str	r3, [sp, #4]
 800d650:	7c3b      	ldrb	r3, [r7, #16]
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	4603      	mov	r3, r0
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f003 fa05 	bl	8010a66 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	460b      	mov	r3, r1
 800d670:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d672:	78fb      	ldrb	r3, [r7, #3]
 800d674:	4619      	mov	r1, r3
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f003 fa24 	bl	8010ac4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	460b      	mov	r3, r1
 800d690:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f836 	bl	800d704 <USBH_GetFreePipe>
 800d698:	4603      	mov	r3, r0
 800d69a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d69c:	89fb      	ldrh	r3, [r7, #14]
 800d69e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d00a      	beq.n	800d6bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d6a6:	78fa      	ldrb	r2, [r7, #3]
 800d6a8:	89fb      	ldrh	r3, [r7, #14]
 800d6aa:	f003 030f 	and.w	r3, r3, #15
 800d6ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	33e0      	adds	r3, #224	; 0xe0
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	440b      	add	r3, r1
 800d6ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d6bc:	89fb      	ldrh	r3, [r7, #14]
 800d6be:	b2db      	uxtb	r3, r3
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	2b0a      	cmp	r3, #10
 800d6d8:	d80d      	bhi.n	800d6f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d6da:	78fb      	ldrb	r3, [r7, #3]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	33e0      	adds	r3, #224	; 0xe0
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	78fb      	ldrb	r3, [r7, #3]
 800d6e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	33e0      	adds	r3, #224	; 0xe0
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	440b      	add	r3, r1
 800d6f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d710:	2300      	movs	r3, #0
 800d712:	73fb      	strb	r3, [r7, #15]
 800d714:	e00f      	b.n	800d736 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	33e0      	adds	r3, #224	; 0xe0
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4413      	add	r3, r2
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d102      	bne.n	800d730 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	e007      	b.n	800d740 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	3301      	adds	r3, #1
 800d734:	73fb      	strb	r3, [r7, #15]
 800d736:	7bfb      	ldrb	r3, [r7, #15]
 800d738:	2b0a      	cmp	r3, #10
 800d73a:	d9ec      	bls.n	800d716 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d73c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d740:	4618      	mov	r0, r3
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d74c:	b480      	push	{r7}
 800d74e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d750:	bf00      	nop
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
	...

0800d75c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d762:	f3ef 8305 	mrs	r3, IPSR
 800d766:	60bb      	str	r3, [r7, #8]
  return(result);
 800d768:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10f      	bne.n	800d78e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d76e:	f3ef 8310 	mrs	r3, PRIMASK
 800d772:	607b      	str	r3, [r7, #4]
  return(result);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d105      	bne.n	800d786 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d77a:	f3ef 8311 	mrs	r3, BASEPRI
 800d77e:	603b      	str	r3, [r7, #0]
  return(result);
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d007      	beq.n	800d796 <osKernelInitialize+0x3a>
 800d786:	4b0e      	ldr	r3, [pc, #56]	; (800d7c0 <osKernelInitialize+0x64>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d103      	bne.n	800d796 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d78e:	f06f 0305 	mvn.w	r3, #5
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e00c      	b.n	800d7b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d796:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <osKernelInitialize+0x64>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d105      	bne.n	800d7aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d79e:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <osKernelInitialize+0x64>)
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	e002      	b.n	800d7b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3714      	adds	r7, #20
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	200004a0 	.word	0x200004a0

0800d7c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7ca:	f3ef 8305 	mrs	r3, IPSR
 800d7ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d10f      	bne.n	800d7f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d7da:	607b      	str	r3, [r7, #4]
  return(result);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d7e6:	603b      	str	r3, [r7, #0]
  return(result);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d007      	beq.n	800d7fe <osKernelStart+0x3a>
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <osKernelStart+0x68>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	d103      	bne.n	800d7fe <osKernelStart+0x3a>
    stat = osErrorISR;
 800d7f6:	f06f 0305 	mvn.w	r3, #5
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	e010      	b.n	800d820 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d7fe:	4b0b      	ldr	r3, [pc, #44]	; (800d82c <osKernelStart+0x68>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d109      	bne.n	800d81a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d806:	f7ff ffa1 	bl	800d74c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d80a:	4b08      	ldr	r3, [pc, #32]	; (800d82c <osKernelStart+0x68>)
 800d80c:	2202      	movs	r2, #2
 800d80e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d810:	f001 fab4 	bl	800ed7c <vTaskStartScheduler>
      stat = osOK;
 800d814:	2300      	movs	r3, #0
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	e002      	b.n	800d820 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d81a:	f04f 33ff 	mov.w	r3, #4294967295
 800d81e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d820:	68fb      	ldr	r3, [r7, #12]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	200004a0 	.word	0x200004a0

0800d830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d830:	b580      	push	{r7, lr}
 800d832:	b090      	sub	sp, #64	; 0x40
 800d834:	af04      	add	r7, sp, #16
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d840:	f3ef 8305 	mrs	r3, IPSR
 800d844:	61fb      	str	r3, [r7, #28]
  return(result);
 800d846:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f040 808f 	bne.w	800d96c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d84e:	f3ef 8310 	mrs	r3, PRIMASK
 800d852:	61bb      	str	r3, [r7, #24]
  return(result);
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d105      	bne.n	800d866 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d85a:	f3ef 8311 	mrs	r3, BASEPRI
 800d85e:	617b      	str	r3, [r7, #20]
  return(result);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <osThreadNew+0x3e>
 800d866:	4b44      	ldr	r3, [pc, #272]	; (800d978 <osThreadNew+0x148>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d07e      	beq.n	800d96c <osThreadNew+0x13c>
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d07b      	beq.n	800d96c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d874:	2380      	movs	r3, #128	; 0x80
 800d876:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d878:	2318      	movs	r3, #24
 800d87a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d87c:	2300      	movs	r3, #0
 800d87e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d880:	f04f 33ff 	mov.w	r3, #4294967295
 800d884:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d045      	beq.n	800d918 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <osThreadNew+0x6a>
        name = attr->name;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d008      	beq.n	800d8c0 <osThreadNew+0x90>
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b0:	2b38      	cmp	r3, #56	; 0x38
 800d8b2:	d805      	bhi.n	800d8c0 <osThreadNew+0x90>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	f003 0301 	and.w	r3, r3, #1
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <osThreadNew+0x94>
        return (NULL);
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	e054      	b.n	800d96e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	089b      	lsrs	r3, r3, #2
 800d8d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00e      	beq.n	800d8fa <osThreadNew+0xca>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	2b5b      	cmp	r3, #91	; 0x5b
 800d8e2:	d90a      	bls.n	800d8fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d006      	beq.n	800d8fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <osThreadNew+0xca>
        mem = 1;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	623b      	str	r3, [r7, #32]
 800d8f8:	e010      	b.n	800d91c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	689b      	ldr	r3, [r3, #8]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10c      	bne.n	800d91c <osThreadNew+0xec>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d108      	bne.n	800d91c <osThreadNew+0xec>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d104      	bne.n	800d91c <osThreadNew+0xec>
          mem = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	623b      	str	r3, [r7, #32]
 800d916:	e001      	b.n	800d91c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d110      	bne.n	800d944 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d92a:	9202      	str	r2, [sp, #8]
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f001 f849 	bl	800e9d0 <xTaskCreateStatic>
 800d93e:	4603      	mov	r3, r0
 800d940:	613b      	str	r3, [r7, #16]
 800d942:	e013      	b.n	800d96c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d110      	bne.n	800d96c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	f107 0310 	add.w	r3, r7, #16
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f001 f894 	bl	800ea8a <xTaskCreate>
 800d962:	4603      	mov	r3, r0
 800d964:	2b01      	cmp	r3, #1
 800d966:	d001      	beq.n	800d96c <osThreadNew+0x13c>
          hTask = NULL;
 800d968:	2300      	movs	r3, #0
 800d96a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d96c:	693b      	ldr	r3, [r7, #16]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3730      	adds	r7, #48	; 0x30
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	200004a0 	.word	0x200004a0

0800d97c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b086      	sub	sp, #24
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d984:	f3ef 8305 	mrs	r3, IPSR
 800d988:	613b      	str	r3, [r7, #16]
  return(result);
 800d98a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10f      	bne.n	800d9b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d990:	f3ef 8310 	mrs	r3, PRIMASK
 800d994:	60fb      	str	r3, [r7, #12]
  return(result);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d105      	bne.n	800d9a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d99c:	f3ef 8311 	mrs	r3, BASEPRI
 800d9a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d007      	beq.n	800d9b8 <osDelay+0x3c>
 800d9a8:	4b0a      	ldr	r3, [pc, #40]	; (800d9d4 <osDelay+0x58>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d103      	bne.n	800d9b8 <osDelay+0x3c>
    stat = osErrorISR;
 800d9b0:	f06f 0305 	mvn.w	r3, #5
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e007      	b.n	800d9c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f001 f9a6 	bl	800ed14 <vTaskDelay>
    }
  }

  return (stat);
 800d9c8:	697b      	ldr	r3, [r7, #20]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	200004a0 	.word	0x200004a0

0800d9d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08c      	sub	sp, #48	; 0x30
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9e8:	f3ef 8305 	mrs	r3, IPSR
 800d9ec:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d16f      	bne.n	800dad4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9f8:	617b      	str	r3, [r7, #20]
  return(result);
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d105      	bne.n	800da0c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da00:	f3ef 8311 	mrs	r3, BASEPRI
 800da04:	613b      	str	r3, [r7, #16]
  return(result);
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <osMessageQueueNew+0x3c>
 800da0c:	4b34      	ldr	r3, [pc, #208]	; (800dae0 <osMessageQueueNew+0x108>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b02      	cmp	r3, #2
 800da12:	d05f      	beq.n	800dad4 <osMessageQueueNew+0xfc>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d05c      	beq.n	800dad4 <osMessageQueueNew+0xfc>
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d059      	beq.n	800dad4 <osMessageQueueNew+0xfc>
    mem = -1;
 800da20:	f04f 33ff 	mov.w	r3, #4294967295
 800da24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d029      	beq.n	800da80 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d012      	beq.n	800da5a <osMessageQueueNew+0x82>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	2b4f      	cmp	r3, #79	; 0x4f
 800da3a:	d90e      	bls.n	800da5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	695a      	ldr	r2, [r3, #20]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	fb01 f303 	mul.w	r3, r1, r3
 800da50:	429a      	cmp	r2, r3
 800da52:	d302      	bcc.n	800da5a <osMessageQueueNew+0x82>
        mem = 1;
 800da54:	2301      	movs	r3, #1
 800da56:	623b      	str	r3, [r7, #32]
 800da58:	e014      	b.n	800da84 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d110      	bne.n	800da84 <osMessageQueueNew+0xac>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d10c      	bne.n	800da84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d108      	bne.n	800da84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	695b      	ldr	r3, [r3, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d104      	bne.n	800da84 <osMessageQueueNew+0xac>
          mem = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	623b      	str	r3, [r7, #32]
 800da7e:	e001      	b.n	800da84 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800da84:	6a3b      	ldr	r3, [r7, #32]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d10b      	bne.n	800daa2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	691a      	ldr	r2, [r3, #16]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	2100      	movs	r1, #0
 800da94:	9100      	str	r1, [sp, #0]
 800da96:	68b9      	ldr	r1, [r7, #8]
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f000 fa59 	bl	800df50 <xQueueGenericCreateStatic>
 800da9e:	6278      	str	r0, [r7, #36]	; 0x24
 800daa0:	e008      	b.n	800dab4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d105      	bne.n	800dab4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800daa8:	2200      	movs	r2, #0
 800daaa:	68b9      	ldr	r1, [r7, #8]
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f000 fac7 	bl	800e040 <xQueueGenericCreate>
 800dab2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00c      	beq.n	800dad4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	61fb      	str	r3, [r7, #28]
 800dac6:	e001      	b.n	800dacc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800dac8:	2300      	movs	r3, #0
 800daca:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800dacc:	69f9      	ldr	r1, [r7, #28]
 800dace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dad0:	f000 ff20 	bl	800e914 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3728      	adds	r7, #40	; 0x28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	200004a0 	.word	0x200004a0

0800dae4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08a      	sub	sp, #40	; 0x28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dafc:	f3ef 8305 	mrs	r3, IPSR
 800db00:	61fb      	str	r3, [r7, #28]
  return(result);
 800db02:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800db04:	2b00      	cmp	r3, #0
 800db06:	d10f      	bne.n	800db28 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db08:	f3ef 8310 	mrs	r3, PRIMASK
 800db0c:	61bb      	str	r3, [r7, #24]
  return(result);
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d105      	bne.n	800db20 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db14:	f3ef 8311 	mrs	r3, BASEPRI
 800db18:	617b      	str	r3, [r7, #20]
  return(result);
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d02c      	beq.n	800db7a <osMessageQueuePut+0x96>
 800db20:	4b28      	ldr	r3, [pc, #160]	; (800dbc4 <osMessageQueuePut+0xe0>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d128      	bne.n	800db7a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db28:	6a3b      	ldr	r3, [r7, #32]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d005      	beq.n	800db3a <osMessageQueuePut+0x56>
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <osMessageQueuePut+0x56>
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800db3a:	f06f 0303 	mvn.w	r3, #3
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db40:	e039      	b.n	800dbb6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800db42:	2300      	movs	r3, #0
 800db44:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800db46:	f107 0210 	add.w	r2, r7, #16
 800db4a:	2300      	movs	r3, #0
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	6a38      	ldr	r0, [r7, #32]
 800db50:	f000 fbd8 	bl	800e304 <xQueueGenericSendFromISR>
 800db54:	4603      	mov	r3, r0
 800db56:	2b01      	cmp	r3, #1
 800db58:	d003      	beq.n	800db62 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800db5a:	f06f 0302 	mvn.w	r3, #2
 800db5e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db60:	e029      	b.n	800dbb6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d026      	beq.n	800dbb6 <osMessageQueuePut+0xd2>
 800db68:	4b17      	ldr	r3, [pc, #92]	; (800dbc8 <osMessageQueuePut+0xe4>)
 800db6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db78:	e01d      	b.n	800dbb6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d002      	beq.n	800db86 <osMessageQueuePut+0xa2>
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800db86:	f06f 0303 	mvn.w	r3, #3
 800db8a:	627b      	str	r3, [r7, #36]	; 0x24
 800db8c:	e014      	b.n	800dbb8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db8e:	2300      	movs	r3, #0
 800db90:	683a      	ldr	r2, [r7, #0]
 800db92:	68b9      	ldr	r1, [r7, #8]
 800db94:	6a38      	ldr	r0, [r7, #32]
 800db96:	f000 fab7 	bl	800e108 <xQueueGenericSend>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d00b      	beq.n	800dbb8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800dba6:	f06f 0301 	mvn.w	r3, #1
 800dbaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dbac:	e004      	b.n	800dbb8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800dbae:	f06f 0302 	mvn.w	r3, #2
 800dbb2:	627b      	str	r3, [r7, #36]	; 0x24
 800dbb4:	e000      	b.n	800dbb8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbb6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3728      	adds	r7, #40	; 0x28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	200004a0 	.word	0x200004a0
 800dbc8:	e000ed04 	.word	0xe000ed04

0800dbcc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b08a      	sub	sp, #40	; 0x28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
 800dbd8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe2:	f3ef 8305 	mrs	r3, IPSR
 800dbe6:	61fb      	str	r3, [r7, #28]
  return(result);
 800dbe8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10f      	bne.n	800dc0e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbee:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf2:	61bb      	str	r3, [r7, #24]
  return(result);
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d105      	bne.n	800dc06 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbfa:	f3ef 8311 	mrs	r3, BASEPRI
 800dbfe:	617b      	str	r3, [r7, #20]
  return(result);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d02c      	beq.n	800dc60 <osMessageQueueGet+0x94>
 800dc06:	4b28      	ldr	r3, [pc, #160]	; (800dca8 <osMessageQueueGet+0xdc>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d128      	bne.n	800dc60 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d005      	beq.n	800dc20 <osMessageQueueGet+0x54>
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <osMessageQueueGet+0x54>
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d003      	beq.n	800dc28 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800dc20:	f06f 0303 	mvn.w	r3, #3
 800dc24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc26:	e038      	b.n	800dc9a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dc2c:	f107 0310 	add.w	r3, r7, #16
 800dc30:	461a      	mov	r2, r3
 800dc32:	68b9      	ldr	r1, [r7, #8]
 800dc34:	6a38      	ldr	r0, [r7, #32]
 800dc36:	f000 fcdd 	bl	800e5f4 <xQueueReceiveFromISR>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d003      	beq.n	800dc48 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800dc40:	f06f 0302 	mvn.w	r3, #2
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc46:	e028      	b.n	800dc9a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d025      	beq.n	800dc9a <osMessageQueueGet+0xce>
 800dc4e:	4b17      	ldr	r3, [pc, #92]	; (800dcac <osMessageQueueGet+0xe0>)
 800dc50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc5e:	e01c      	b.n	800dc9a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d002      	beq.n	800dc6c <osMessageQueueGet+0xa0>
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d103      	bne.n	800dc74 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dc6c:	f06f 0303 	mvn.w	r3, #3
 800dc70:	627b      	str	r3, [r7, #36]	; 0x24
 800dc72:	e013      	b.n	800dc9c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc74:	683a      	ldr	r2, [r7, #0]
 800dc76:	68b9      	ldr	r1, [r7, #8]
 800dc78:	6a38      	ldr	r0, [r7, #32]
 800dc7a:	f000 fbdb 	bl	800e434 <xQueueReceive>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d00b      	beq.n	800dc9c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dc8a:	f06f 0301 	mvn.w	r3, #1
 800dc8e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc90:	e004      	b.n	800dc9c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dc92:	f06f 0302 	mvn.w	r3, #2
 800dc96:	627b      	str	r3, [r7, #36]	; 0x24
 800dc98:	e000      	b.n	800dc9c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc9a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3728      	adds	r7, #40	; 0x28
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	200004a0 	.word	0x200004a0
 800dcac:	e000ed04 	.word	0xe000ed04

0800dcb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4a07      	ldr	r2, [pc, #28]	; (800dcdc <vApplicationGetIdleTaskMemory+0x2c>)
 800dcc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	4a06      	ldr	r2, [pc, #24]	; (800dce0 <vApplicationGetIdleTaskMemory+0x30>)
 800dcc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2280      	movs	r2, #128	; 0x80
 800dccc:	601a      	str	r2, [r3, #0]
}
 800dcce:	bf00      	nop
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	200004a4 	.word	0x200004a4
 800dce0:	20000500 	.word	0x20000500

0800dce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4a07      	ldr	r2, [pc, #28]	; (800dd10 <vApplicationGetTimerTaskMemory+0x2c>)
 800dcf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	4a06      	ldr	r2, [pc, #24]	; (800dd14 <vApplicationGetTimerTaskMemory+0x30>)
 800dcfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd02:	601a      	str	r2, [r3, #0]
}
 800dd04:	bf00      	nop
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20000700 	.word	0x20000700
 800dd14:	2000075c 	.word	0x2000075c

0800dd18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f103 0208 	add.w	r2, r3, #8
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f103 0208 	add.w	r2, r3, #8
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f103 0208 	add.w	r2, r3, #8
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd72:	b480      	push	{r7}
 800dd74:	b085      	sub	sp, #20
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	689a      	ldr	r2, [r3, #8]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	683a      	ldr	r2, [r7, #0]
 800dd96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	1c5a      	adds	r2, r3, #1
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	601a      	str	r2, [r3, #0]
}
 800ddae:	bf00      	nop
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd0:	d103      	bne.n	800ddda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	e00c      	b.n	800ddf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	3308      	adds	r3, #8
 800ddde:	60fb      	str	r3, [r7, #12]
 800dde0:	e002      	b.n	800dde8 <vListInsert+0x2e>
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d2f6      	bcs.n	800dde2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	601a      	str	r2, [r3, #0]
}
 800de20:	bf00      	nop
 800de22:	3714      	adds	r7, #20
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6892      	ldr	r2, [r2, #8]
 800de42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	6852      	ldr	r2, [r2, #4]
 800de4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	429a      	cmp	r2, r3
 800de56:	d103      	bne.n	800de60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	1e5a      	subs	r2, r3, #1
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3714      	adds	r7, #20
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800deaa:	f002 f90b 	bl	80100c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb6:	68f9      	ldr	r1, [r7, #12]
 800deb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800deba:	fb01 f303 	mul.w	r3, r1, r3
 800debe:	441a      	add	r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deda:	3b01      	subs	r3, #1
 800dedc:	68f9      	ldr	r1, [r7, #12]
 800dede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dee0:	fb01 f303 	mul.w	r3, r1, r3
 800dee4:	441a      	add	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	22ff      	movs	r2, #255	; 0xff
 800deee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	22ff      	movs	r2, #255	; 0xff
 800def6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d114      	bne.n	800df2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d01a      	beq.n	800df3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3310      	adds	r3, #16
 800df0c:	4618      	mov	r0, r3
 800df0e:	f001 f9bf 	bl	800f290 <xTaskRemoveFromEventList>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d012      	beq.n	800df3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df18:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <xQueueGenericReset+0xcc>)
 800df1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df1e:	601a      	str	r2, [r3, #0]
 800df20:	f3bf 8f4f 	dsb	sy
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	e009      	b.n	800df3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3310      	adds	r3, #16
 800df2e:	4618      	mov	r0, r3
 800df30:	f7ff fef2 	bl	800dd18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3324      	adds	r3, #36	; 0x24
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff feed 	bl	800dd18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df3e:	f002 f8f1 	bl	8010124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df42:	2301      	movs	r3, #1
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	e000ed04 	.word	0xe000ed04

0800df50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08e      	sub	sp, #56	; 0x38
 800df54:	af02      	add	r7, sp, #8
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d10a      	bne.n	800df7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800df64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df68:	f383 8811 	msr	BASEPRI, r3
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df76:	bf00      	nop
 800df78:	e7fe      	b.n	800df78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10a      	bne.n	800df96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <xQueueGenericCreateStatic+0x52>
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <xQueueGenericCreateStatic+0x56>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e000      	b.n	800dfa8 <xQueueGenericCreateStatic+0x58>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10a      	bne.n	800dfc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	623b      	str	r3, [r7, #32]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d102      	bne.n	800dfce <xQueueGenericCreateStatic+0x7e>
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d101      	bne.n	800dfd2 <xQueueGenericCreateStatic+0x82>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e000      	b.n	800dfd4 <xQueueGenericCreateStatic+0x84>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	61fb      	str	r3, [r7, #28]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dfee:	2350      	movs	r3, #80	; 0x50
 800dff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	2b50      	cmp	r3, #80	; 0x50
 800dff6:	d00a      	beq.n	800e00e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	61bb      	str	r3, [r7, #24]
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e00e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00d      	beq.n	800e036 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e022:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	4613      	mov	r3, r2
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 f845 	bl	800e0c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e038:	4618      	mov	r0, r3
 800e03a:	3730      	adds	r7, #48	; 0x30
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e040:	b580      	push	{r7, lr}
 800e042:	b08a      	sub	sp, #40	; 0x28
 800e044:	af02      	add	r7, sp, #8
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	4613      	mov	r3, r2
 800e04c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d10a      	bne.n	800e06a <xQueueGenericCreate+0x2a>
	__asm volatile
 800e054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	613b      	str	r3, [r7, #16]
}
 800e066:	bf00      	nop
 800e068:	e7fe      	b.n	800e068 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d102      	bne.n	800e076 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e070:	2300      	movs	r3, #0
 800e072:	61fb      	str	r3, [r7, #28]
 800e074:	e004      	b.n	800e080 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	fb02 f303 	mul.w	r3, r2, r3
 800e07e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	3350      	adds	r3, #80	; 0x50
 800e084:	4618      	mov	r0, r3
 800e086:	f002 f93f 	bl	8010308 <pvPortMalloc>
 800e08a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d011      	beq.n	800e0b6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	3350      	adds	r3, #80	; 0x50
 800e09a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0a4:	79fa      	ldrb	r2, [r7, #7]
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	68b9      	ldr	r1, [r7, #8]
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f000 f805 	bl	800e0c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0b6:	69bb      	ldr	r3, [r7, #24]
	}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d103      	bne.n	800e0dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	69ba      	ldr	r2, [r7, #24]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	e002      	b.n	800e0e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e0ee:	2101      	movs	r1, #1
 800e0f0:	69b8      	ldr	r0, [r7, #24]
 800e0f2:	f7ff fec5 	bl	800de80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	78fa      	ldrb	r2, [r7, #3]
 800e0fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e0fe:	bf00      	nop
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08e      	sub	sp, #56	; 0x38
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e116:	2300      	movs	r3, #0
 800e118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xQueueGenericSend+0x32>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <xQueueGenericSend+0x40>
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <xQueueGenericSend+0x44>
 800e148:	2301      	movs	r3, #1
 800e14a:	e000      	b.n	800e14e <xQueueGenericSend+0x46>
 800e14c:	2300      	movs	r3, #0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10a      	bne.n	800e168 <xQueueGenericSend+0x60>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e164:	bf00      	nop
 800e166:	e7fe      	b.n	800e166 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d103      	bne.n	800e176 <xQueueGenericSend+0x6e>
 800e16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <xQueueGenericSend+0x72>
 800e176:	2301      	movs	r3, #1
 800e178:	e000      	b.n	800e17c <xQueueGenericSend+0x74>
 800e17a:	2300      	movs	r3, #0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10a      	bne.n	800e196 <xQueueGenericSend+0x8e>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	623b      	str	r3, [r7, #32]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e196:	f001 fa39 	bl	800f60c <xTaskGetSchedulerState>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d102      	bne.n	800e1a6 <xQueueGenericSend+0x9e>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <xQueueGenericSend+0xa2>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <xQueueGenericSend+0xa4>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	61fb      	str	r3, [r7, #28]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e1c6:	f001 ff7d 	bl	80100c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d302      	bcc.n	800e1dc <xQueueGenericSend+0xd4>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d129      	bne.n	800e230 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	68b9      	ldr	r1, [r7, #8]
 800e1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1e2:	f000 fa87 	bl	800e6f4 <prvCopyDataToQueue>
 800e1e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d010      	beq.n	800e212 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	3324      	adds	r3, #36	; 0x24
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 f84b 	bl	800f290 <xTaskRemoveFromEventList>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d013      	beq.n	800e228 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e200:	4b3f      	ldr	r3, [pc, #252]	; (800e300 <xQueueGenericSend+0x1f8>)
 800e202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	e00a      	b.n	800e228 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d007      	beq.n	800e228 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e218:	4b39      	ldr	r3, [pc, #228]	; (800e300 <xQueueGenericSend+0x1f8>)
 800e21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e228:	f001 ff7c 	bl	8010124 <vPortExitCritical>
				return pdPASS;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e063      	b.n	800e2f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d103      	bne.n	800e23e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e236:	f001 ff75 	bl	8010124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e23a:	2300      	movs	r3, #0
 800e23c:	e05c      	b.n	800e2f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e240:	2b00      	cmp	r3, #0
 800e242:	d106      	bne.n	800e252 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e244:	f107 0314 	add.w	r3, r7, #20
 800e248:	4618      	mov	r0, r3
 800e24a:	f001 f885 	bl	800f358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e24e:	2301      	movs	r3, #1
 800e250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e252:	f001 ff67 	bl	8010124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e256:	f000 fdf7 	bl	800ee48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e25a:	f001 ff33 	bl	80100c4 <vPortEnterCritical>
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e264:	b25b      	sxtb	r3, r3
 800e266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26a:	d103      	bne.n	800e274 <xQueueGenericSend+0x16c>
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e27a:	b25b      	sxtb	r3, r3
 800e27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e280:	d103      	bne.n	800e28a <xQueueGenericSend+0x182>
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	2200      	movs	r2, #0
 800e286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e28a:	f001 ff4b 	bl	8010124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e28e:	1d3a      	adds	r2, r7, #4
 800e290:	f107 0314 	add.w	r3, r7, #20
 800e294:	4611      	mov	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f001 f874 	bl	800f384 <xTaskCheckForTimeOut>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d124      	bne.n	800e2ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2a4:	f000 fb1e 	bl	800e8e4 <prvIsQueueFull>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d018      	beq.n	800e2e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	3310      	adds	r3, #16
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 ff9a 	bl	800f1f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2be:	f000 faa9 	bl	800e814 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e2c2:	f000 fdcf 	bl	800ee64 <xTaskResumeAll>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f47f af7c 	bne.w	800e1c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <xQueueGenericSend+0x1f8>)
 800e2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	e772      	b.n	800e1c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2e2:	f000 fa97 	bl	800e814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e2e6:	f000 fdbd 	bl	800ee64 <xTaskResumeAll>
 800e2ea:	e76c      	b.n	800e1c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2ee:	f000 fa91 	bl	800e814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e2f2:	f000 fdb7 	bl	800ee64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3738      	adds	r7, #56	; 0x38
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	e000ed04 	.word	0xe000ed04

0800e304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b08e      	sub	sp, #56	; 0x38
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10a      	bne.n	800e332 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e32e:	bf00      	nop
 800e330:	e7fe      	b.n	800e330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d103      	bne.n	800e340 <xQueueGenericSendFromISR+0x3c>
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <xQueueGenericSendFromISR+0x40>
 800e340:	2301      	movs	r3, #1
 800e342:	e000      	b.n	800e346 <xQueueGenericSendFromISR+0x42>
 800e344:	2300      	movs	r3, #0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10a      	bne.n	800e360 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	623b      	str	r3, [r7, #32]
}
 800e35c:	bf00      	nop
 800e35e:	e7fe      	b.n	800e35e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d103      	bne.n	800e36e <xQueueGenericSendFromISR+0x6a>
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	d101      	bne.n	800e372 <xQueueGenericSendFromISR+0x6e>
 800e36e:	2301      	movs	r3, #1
 800e370:	e000      	b.n	800e374 <xQueueGenericSendFromISR+0x70>
 800e372:	2300      	movs	r3, #0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	61fb      	str	r3, [r7, #28]
}
 800e38a:	bf00      	nop
 800e38c:	e7fe      	b.n	800e38c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e38e:	f001 ff7b 	bl	8010288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e392:	f3ef 8211 	mrs	r2, BASEPRI
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	61ba      	str	r2, [r7, #24]
 800e3a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e3aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d302      	bcc.n	800e3c0 <xQueueGenericSendFromISR+0xbc>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d12c      	bne.n	800e41a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3d0:	f000 f990 	bl	800e6f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e3d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3dc:	d112      	bne.n	800e404 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d016      	beq.n	800e414 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e8:	3324      	adds	r3, #36	; 0x24
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 ff50 	bl	800f290 <xTaskRemoveFromEventList>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00e      	beq.n	800e414 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00b      	beq.n	800e414 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2201      	movs	r2, #1
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	e007      	b.n	800e414 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e404:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e408:	3301      	adds	r3, #1
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	b25a      	sxtb	r2, r3
 800e40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e414:	2301      	movs	r3, #1
 800e416:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e418:	e001      	b.n	800e41e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	637b      	str	r3, [r7, #52]	; 0x34
 800e41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e420:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e428:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3738      	adds	r7, #56	; 0x38
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08c      	sub	sp, #48	; 0x30
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e440:	2300      	movs	r3, #0
 800e442:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10a      	bne.n	800e464 <xQueueReceive+0x30>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	623b      	str	r3, [r7, #32]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d103      	bne.n	800e472 <xQueueReceive+0x3e>
 800e46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <xQueueReceive+0x42>
 800e472:	2301      	movs	r3, #1
 800e474:	e000      	b.n	800e478 <xQueueReceive+0x44>
 800e476:	2300      	movs	r3, #0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d10a      	bne.n	800e492 <xQueueReceive+0x5e>
	__asm volatile
 800e47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e480:	f383 8811 	msr	BASEPRI, r3
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	61fb      	str	r3, [r7, #28]
}
 800e48e:	bf00      	nop
 800e490:	e7fe      	b.n	800e490 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e492:	f001 f8bb 	bl	800f60c <xTaskGetSchedulerState>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <xQueueReceive+0x6e>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <xQueueReceive+0x72>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <xQueueReceive+0x74>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10a      	bne.n	800e4c2 <xQueueReceive+0x8e>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	61bb      	str	r3, [r7, #24]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4c2:	f001 fdff 	bl	80100c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d01f      	beq.n	800e512 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e4d2:	68b9      	ldr	r1, [r7, #8]
 800e4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4d6:	f000 f977 	bl	800e7c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	1e5a      	subs	r2, r3, #1
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00f      	beq.n	800e50a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	3310      	adds	r3, #16
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fece 	bl	800f290 <xTaskRemoveFromEventList>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d007      	beq.n	800e50a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e4fa:	4b3d      	ldr	r3, [pc, #244]	; (800e5f0 <xQueueReceive+0x1bc>)
 800e4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e500:	601a      	str	r2, [r3, #0]
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e50a:	f001 fe0b 	bl	8010124 <vPortExitCritical>
				return pdPASS;
 800e50e:	2301      	movs	r3, #1
 800e510:	e069      	b.n	800e5e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d103      	bne.n	800e520 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e518:	f001 fe04 	bl	8010124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e51c:	2300      	movs	r3, #0
 800e51e:	e062      	b.n	800e5e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	4618      	mov	r0, r3
 800e52c:	f000 ff14 	bl	800f358 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e530:	2301      	movs	r3, #1
 800e532:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e534:	f001 fdf6 	bl	8010124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e538:	f000 fc86 	bl	800ee48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e53c:	f001 fdc2 	bl	80100c4 <vPortEnterCritical>
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e546:	b25b      	sxtb	r3, r3
 800e548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54c:	d103      	bne.n	800e556 <xQueueReceive+0x122>
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	2200      	movs	r2, #0
 800e552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e562:	d103      	bne.n	800e56c <xQueueReceive+0x138>
 800e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e566:	2200      	movs	r2, #0
 800e568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e56c:	f001 fdda 	bl	8010124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e570:	1d3a      	adds	r2, r7, #4
 800e572:	f107 0310 	add.w	r3, r7, #16
 800e576:	4611      	mov	r1, r2
 800e578:	4618      	mov	r0, r3
 800e57a:	f000 ff03 	bl	800f384 <xTaskCheckForTimeOut>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d123      	bne.n	800e5cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e586:	f000 f997 	bl	800e8b8 <prvIsQueueEmpty>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d017      	beq.n	800e5c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	3324      	adds	r3, #36	; 0x24
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	4611      	mov	r1, r2
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 fe29 	bl	800f1f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5a0:	f000 f938 	bl	800e814 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5a4:	f000 fc5e 	bl	800ee64 <xTaskResumeAll>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d189      	bne.n	800e4c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e5ae:	4b10      	ldr	r3, [pc, #64]	; (800e5f0 <xQueueReceive+0x1bc>)
 800e5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b4:	601a      	str	r2, [r3, #0]
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	e780      	b.n	800e4c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5c2:	f000 f927 	bl	800e814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5c6:	f000 fc4d 	bl	800ee64 <xTaskResumeAll>
 800e5ca:	e77a      	b.n	800e4c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ce:	f000 f921 	bl	800e814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5d2:	f000 fc47 	bl	800ee64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5d8:	f000 f96e 	bl	800e8b8 <prvIsQueueEmpty>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f43f af6f 	beq.w	800e4c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3730      	adds	r7, #48	; 0x30
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	e000ed04 	.word	0xe000ed04

0800e5f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b08e      	sub	sp, #56	; 0x38
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10a      	bne.n	800e620 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	623b      	str	r3, [r7, #32]
}
 800e61c:	bf00      	nop
 800e61e:	e7fe      	b.n	800e61e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d103      	bne.n	800e62e <xQueueReceiveFromISR+0x3a>
 800e626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d101      	bne.n	800e632 <xQueueReceiveFromISR+0x3e>
 800e62e:	2301      	movs	r3, #1
 800e630:	e000      	b.n	800e634 <xQueueReceiveFromISR+0x40>
 800e632:	2300      	movs	r3, #0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10a      	bne.n	800e64e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	61fb      	str	r3, [r7, #28]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e64e:	f001 fe1b 	bl	8010288 <vPortValidateInterruptPriority>
	__asm volatile
 800e652:	f3ef 8211 	mrs	r2, BASEPRI
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	61ba      	str	r2, [r7, #24]
 800e668:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e66a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e66c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	2b00      	cmp	r3, #0
 800e678:	d02f      	beq.n	800e6da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e684:	68b9      	ldr	r1, [r7, #8]
 800e686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e688:	f000 f89e 	bl	800e7c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68e:	1e5a      	subs	r2, r3, #1
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d112      	bne.n	800e6c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d016      	beq.n	800e6d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	3310      	adds	r3, #16
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 fdf0 	bl	800f290 <xTaskRemoveFromEventList>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00e      	beq.n	800e6d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00b      	beq.n	800e6d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	e007      	b.n	800e6d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	b25a      	sxtb	r2, r3
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	637b      	str	r3, [r7, #52]	; 0x34
 800e6d8:	e001      	b.n	800e6de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	f383 8811 	msr	BASEPRI, r3
}
 800e6e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3738      	adds	r7, #56	; 0x38
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e700:	2300      	movs	r3, #0
 800e702:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10d      	bne.n	800e72e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d14d      	bne.n	800e7b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	4618      	mov	r0, r3
 800e720:	f000 ff92 	bl	800f648 <xTaskPriorityDisinherit>
 800e724:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	609a      	str	r2, [r3, #8]
 800e72c:	e043      	b.n	800e7b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d119      	bne.n	800e768 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6858      	ldr	r0, [r3, #4]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e73c:	461a      	mov	r2, r3
 800e73e:	68b9      	ldr	r1, [r7, #8]
 800e740:	f003 fada 	bl	8011cf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74c:	441a      	add	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d32b      	bcc.n	800e7b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	605a      	str	r2, [r3, #4]
 800e766:	e026      	b.n	800e7b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	68d8      	ldr	r0, [r3, #12]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e770:	461a      	mov	r2, r3
 800e772:	68b9      	ldr	r1, [r7, #8]
 800e774:	f003 fac0 	bl	8011cf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	68da      	ldr	r2, [r3, #12]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e780:	425b      	negs	r3, r3
 800e782:	441a      	add	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	68da      	ldr	r2, [r3, #12]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d207      	bcs.n	800e7a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	689a      	ldr	r2, [r3, #8]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79c:	425b      	negs	r3, r3
 800e79e:	441a      	add	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d105      	bne.n	800e7b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	1c5a      	adds	r2, r3, #1
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e7be:	697b      	ldr	r3, [r7, #20]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d018      	beq.n	800e80c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	68da      	ldr	r2, [r3, #12]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e2:	441a      	add	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68da      	ldr	r2, [r3, #12]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d303      	bcc.n	800e7fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68d9      	ldr	r1, [r3, #12]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e804:	461a      	mov	r2, r3
 800e806:	6838      	ldr	r0, [r7, #0]
 800e808:	f003 fa76 	bl	8011cf8 <memcpy>
	}
}
 800e80c:	bf00      	nop
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e81c:	f001 fc52 	bl	80100c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e826:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e828:	e011      	b.n	800e84e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d012      	beq.n	800e858 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3324      	adds	r3, #36	; 0x24
 800e836:	4618      	mov	r0, r3
 800e838:	f000 fd2a 	bl	800f290 <xTaskRemoveFromEventList>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e842:	f000 fe01 	bl	800f448 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e846:	7bfb      	ldrb	r3, [r7, #15]
 800e848:	3b01      	subs	r3, #1
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e852:	2b00      	cmp	r3, #0
 800e854:	dce9      	bgt.n	800e82a <prvUnlockQueue+0x16>
 800e856:	e000      	b.n	800e85a <prvUnlockQueue+0x46>
					break;
 800e858:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	22ff      	movs	r2, #255	; 0xff
 800e85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e862:	f001 fc5f 	bl	8010124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e866:	f001 fc2d 	bl	80100c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e870:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e872:	e011      	b.n	800e898 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d012      	beq.n	800e8a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3310      	adds	r3, #16
 800e880:	4618      	mov	r0, r3
 800e882:	f000 fd05 	bl	800f290 <xTaskRemoveFromEventList>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d001      	beq.n	800e890 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e88c:	f000 fddc 	bl	800f448 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e890:	7bbb      	ldrb	r3, [r7, #14]
 800e892:	3b01      	subs	r3, #1
 800e894:	b2db      	uxtb	r3, r3
 800e896:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dce9      	bgt.n	800e874 <prvUnlockQueue+0x60>
 800e8a0:	e000      	b.n	800e8a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	22ff      	movs	r2, #255	; 0xff
 800e8a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e8ac:	f001 fc3a 	bl	8010124 <vPortExitCritical>
}
 800e8b0:	bf00      	nop
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8c0:	f001 fc00 	bl	80100c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d102      	bne.n	800e8d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	e001      	b.n	800e8d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8d6:	f001 fc25 	bl	8010124 <vPortExitCritical>

	return xReturn;
 800e8da:	68fb      	ldr	r3, [r7, #12]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8ec:	f001 fbea 	bl	80100c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d102      	bne.n	800e902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	e001      	b.n	800e906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e902:	2300      	movs	r3, #0
 800e904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e906:	f001 fc0d 	bl	8010124 <vPortExitCritical>

	return xReturn;
 800e90a:	68fb      	ldr	r3, [r7, #12]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e91e:	2300      	movs	r3, #0
 800e920:	60fb      	str	r3, [r7, #12]
 800e922:	e014      	b.n	800e94e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e924:	4a0f      	ldr	r2, [pc, #60]	; (800e964 <vQueueAddToRegistry+0x50>)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d10b      	bne.n	800e948 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e930:	490c      	ldr	r1, [pc, #48]	; (800e964 <vQueueAddToRegistry+0x50>)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e93a:	4a0a      	ldr	r2, [pc, #40]	; (800e964 <vQueueAddToRegistry+0x50>)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	00db      	lsls	r3, r3, #3
 800e940:	4413      	add	r3, r2
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e946:	e006      	b.n	800e956 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	3301      	adds	r3, #1
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2b07      	cmp	r3, #7
 800e952:	d9e7      	bls.n	800e924 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e954:	bf00      	nop
 800e956:	bf00      	nop
 800e958:	3714      	adds	r7, #20
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	20004e20 	.word	0x20004e20

0800e968 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e978:	f001 fba4 	bl	80100c4 <vPortEnterCritical>
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e982:	b25b      	sxtb	r3, r3
 800e984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e988:	d103      	bne.n	800e992 <vQueueWaitForMessageRestricted+0x2a>
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e99e:	d103      	bne.n	800e9a8 <vQueueWaitForMessageRestricted+0x40>
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9a8:	f001 fbbc 	bl	8010124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d106      	bne.n	800e9c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	3324      	adds	r3, #36	; 0x24
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 fc3b 	bl	800f238 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9c2:	6978      	ldr	r0, [r7, #20]
 800e9c4:	f7ff ff26 	bl	800e814 <prvUnlockQueue>
	}
 800e9c8:	bf00      	nop
 800e9ca:	3718      	adds	r7, #24
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08e      	sub	sp, #56	; 0x38
 800e9d4:	af04      	add	r7, sp, #16
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
 800e9dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10a      	bne.n	800e9fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	623b      	str	r3, [r7, #32]
}
 800e9f6:	bf00      	nop
 800e9f8:	e7fe      	b.n	800e9f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10a      	bne.n	800ea16 <xTaskCreateStatic+0x46>
	__asm volatile
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	61fb      	str	r3, [r7, #28]
}
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea16:	235c      	movs	r3, #92	; 0x5c
 800ea18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b5c      	cmp	r3, #92	; 0x5c
 800ea1e:	d00a      	beq.n	800ea36 <xTaskCreateStatic+0x66>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	61bb      	str	r3, [r7, #24]
}
 800ea32:	bf00      	nop
 800ea34:	e7fe      	b.n	800ea34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d01e      	beq.n	800ea7c <xTaskCreateStatic+0xac>
 800ea3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d01b      	beq.n	800ea7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	2202      	movs	r2, #2
 800ea52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea56:	2300      	movs	r3, #0
 800ea58:	9303      	str	r3, [sp, #12]
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	9302      	str	r3, [sp, #8]
 800ea5e:	f107 0314 	add.w	r3, r7, #20
 800ea62:	9301      	str	r3, [sp, #4]
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	9300      	str	r3, [sp, #0]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	68b9      	ldr	r1, [r7, #8]
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 f850 	bl	800eb14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea76:	f000 f8dd 	bl	800ec34 <prvAddNewTaskToReadyList>
 800ea7a:	e001      	b.n	800ea80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ea80:	697b      	ldr	r3, [r7, #20]
	}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3728      	adds	r7, #40	; 0x28
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b08c      	sub	sp, #48	; 0x30
 800ea8e:	af04      	add	r7, sp, #16
 800ea90:	60f8      	str	r0, [r7, #12]
 800ea92:	60b9      	str	r1, [r7, #8]
 800ea94:	603b      	str	r3, [r7, #0]
 800ea96:	4613      	mov	r3, r2
 800ea98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea9a:	88fb      	ldrh	r3, [r7, #6]
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f001 fc32 	bl	8010308 <pvPortMalloc>
 800eaa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00e      	beq.n	800eaca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eaac:	205c      	movs	r0, #92	; 0x5c
 800eaae:	f001 fc2b 	bl	8010308 <pvPortMalloc>
 800eab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d003      	beq.n	800eac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	631a      	str	r2, [r3, #48]	; 0x30
 800eac0:	e005      	b.n	800eace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eac2:	6978      	ldr	r0, [r7, #20]
 800eac4:	f001 fce4 	bl	8010490 <vPortFree>
 800eac8:	e001      	b.n	800eace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d017      	beq.n	800eb04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eadc:	88fa      	ldrh	r2, [r7, #6]
 800eade:	2300      	movs	r3, #0
 800eae0:	9303      	str	r3, [sp, #12]
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	9302      	str	r3, [sp, #8]
 800eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	68b9      	ldr	r1, [r7, #8]
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f000 f80e 	bl	800eb14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eaf8:	69f8      	ldr	r0, [r7, #28]
 800eafa:	f000 f89b 	bl	800ec34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eafe:	2301      	movs	r3, #1
 800eb00:	61bb      	str	r3, [r7, #24]
 800eb02:	e002      	b.n	800eb0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295
 800eb08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb0a:	69bb      	ldr	r3, [r7, #24]
	}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3720      	adds	r7, #32
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b088      	sub	sp, #32
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	21a5      	movs	r1, #165	; 0xa5
 800eb2e:	f003 f90b 	bl	8011d48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	f023 0307 	bic.w	r3, r3, #7
 800eb4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	f003 0307 	and.w	r3, r3, #7
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00a      	beq.n	800eb6c <prvInitialiseNewTask+0x58>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	617b      	str	r3, [r7, #20]
}
 800eb68:	bf00      	nop
 800eb6a:	e7fe      	b.n	800eb6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d01f      	beq.n	800ebb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb72:	2300      	movs	r3, #0
 800eb74:	61fb      	str	r3, [r7, #28]
 800eb76:	e012      	b.n	800eb9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	7819      	ldrb	r1, [r3, #0]
 800eb80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	4413      	add	r3, r2
 800eb86:	3334      	adds	r3, #52	; 0x34
 800eb88:	460a      	mov	r2, r1
 800eb8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	4413      	add	r3, r2
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d006      	beq.n	800eba6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	61fb      	str	r3, [r7, #28]
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	2b0f      	cmp	r3, #15
 800eba2:	d9e9      	bls.n	800eb78 <prvInitialiseNewTask+0x64>
 800eba4:	e000      	b.n	800eba8 <prvInitialiseNewTask+0x94>
			{
				break;
 800eba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ebb0:	e003      	b.n	800ebba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	2b37      	cmp	r3, #55	; 0x37
 800ebbe:	d901      	bls.n	800ebc4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ebc0:	2337      	movs	r3, #55	; 0x37
 800ebc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ebc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	3304      	adds	r3, #4
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff f8bc 	bl	800dd58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe2:	3318      	adds	r3, #24
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7ff f8b7 	bl	800dd58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	2200      	movs	r2, #0
 800ec04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	68f9      	ldr	r1, [r7, #12]
 800ec12:	69b8      	ldr	r0, [r7, #24]
 800ec14:	f001 f928 	bl	800fe68 <pxPortInitialiseStack>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec2a:	bf00      	nop
 800ec2c:	3720      	adds	r7, #32
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
	...

0800ec34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ec3c:	f001 fa42 	bl	80100c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ec40:	4b2d      	ldr	r3, [pc, #180]	; (800ecf8 <prvAddNewTaskToReadyList+0xc4>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3301      	adds	r3, #1
 800ec46:	4a2c      	ldr	r2, [pc, #176]	; (800ecf8 <prvAddNewTaskToReadyList+0xc4>)
 800ec48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec4a:	4b2c      	ldr	r3, [pc, #176]	; (800ecfc <prvAddNewTaskToReadyList+0xc8>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d109      	bne.n	800ec66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec52:	4a2a      	ldr	r2, [pc, #168]	; (800ecfc <prvAddNewTaskToReadyList+0xc8>)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec58:	4b27      	ldr	r3, [pc, #156]	; (800ecf8 <prvAddNewTaskToReadyList+0xc4>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d110      	bne.n	800ec82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ec60:	f000 fc16 	bl	800f490 <prvInitialiseTaskLists>
 800ec64:	e00d      	b.n	800ec82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ec66:	4b26      	ldr	r3, [pc, #152]	; (800ed00 <prvAddNewTaskToReadyList+0xcc>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d109      	bne.n	800ec82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ec6e:	4b23      	ldr	r3, [pc, #140]	; (800ecfc <prvAddNewTaskToReadyList+0xc8>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d802      	bhi.n	800ec82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ec7c:	4a1f      	ldr	r2, [pc, #124]	; (800ecfc <prvAddNewTaskToReadyList+0xc8>)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ec82:	4b20      	ldr	r3, [pc, #128]	; (800ed04 <prvAddNewTaskToReadyList+0xd0>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3301      	adds	r3, #1
 800ec88:	4a1e      	ldr	r2, [pc, #120]	; (800ed04 <prvAddNewTaskToReadyList+0xd0>)
 800ec8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec8c:	4b1d      	ldr	r3, [pc, #116]	; (800ed04 <prvAddNewTaskToReadyList+0xd0>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec98:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <prvAddNewTaskToReadyList+0xd4>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d903      	bls.n	800eca8 <prvAddNewTaskToReadyList+0x74>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca4:	4a18      	ldr	r2, [pc, #96]	; (800ed08 <prvAddNewTaskToReadyList+0xd4>)
 800eca6:	6013      	str	r3, [r2, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecac:	4613      	mov	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4413      	add	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4a15      	ldr	r2, [pc, #84]	; (800ed0c <prvAddNewTaskToReadyList+0xd8>)
 800ecb6:	441a      	add	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	f7ff f857 	bl	800dd72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ecc4:	f001 fa2e 	bl	8010124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ecc8:	4b0d      	ldr	r3, [pc, #52]	; (800ed00 <prvAddNewTaskToReadyList+0xcc>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00e      	beq.n	800ecee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ecd0:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <prvAddNewTaskToReadyList+0xc8>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d207      	bcs.n	800ecee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ecde:	4b0c      	ldr	r3, [pc, #48]	; (800ed10 <prvAddNewTaskToReadyList+0xdc>)
 800ece0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecee:	bf00      	nop
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20001030 	.word	0x20001030
 800ecfc:	20000b5c 	.word	0x20000b5c
 800ed00:	2000103c 	.word	0x2000103c
 800ed04:	2000104c 	.word	0x2000104c
 800ed08:	20001038 	.word	0x20001038
 800ed0c:	20000b60 	.word	0x20000b60
 800ed10:	e000ed04 	.word	0xe000ed04

0800ed14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d017      	beq.n	800ed56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed26:	4b13      	ldr	r3, [pc, #76]	; (800ed74 <vTaskDelay+0x60>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00a      	beq.n	800ed44 <vTaskDelay+0x30>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	60bb      	str	r3, [r7, #8]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed44:	f000 f880 	bl	800ee48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed48:	2100      	movs	r1, #0
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 fcea 	bl	800f724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed50:	f000 f888 	bl	800ee64 <xTaskResumeAll>
 800ed54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d107      	bne.n	800ed6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ed5c:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <vTaskDelay+0x64>)
 800ed5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	f3bf 8f4f 	dsb	sy
 800ed68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed6c:	bf00      	nop
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	20001058 	.word	0x20001058
 800ed78:	e000ed04 	.word	0xe000ed04

0800ed7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08a      	sub	sp, #40	; 0x28
 800ed80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed86:	2300      	movs	r3, #0
 800ed88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed8a:	463a      	mov	r2, r7
 800ed8c:	1d39      	adds	r1, r7, #4
 800ed8e:	f107 0308 	add.w	r3, r7, #8
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fe ff8c 	bl	800dcb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68ba      	ldr	r2, [r7, #8]
 800ed9e:	9202      	str	r2, [sp, #8]
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	2300      	movs	r3, #0
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	2300      	movs	r3, #0
 800eda8:	460a      	mov	r2, r1
 800edaa:	4921      	ldr	r1, [pc, #132]	; (800ee30 <vTaskStartScheduler+0xb4>)
 800edac:	4821      	ldr	r0, [pc, #132]	; (800ee34 <vTaskStartScheduler+0xb8>)
 800edae:	f7ff fe0f 	bl	800e9d0 <xTaskCreateStatic>
 800edb2:	4603      	mov	r3, r0
 800edb4:	4a20      	ldr	r2, [pc, #128]	; (800ee38 <vTaskStartScheduler+0xbc>)
 800edb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800edb8:	4b1f      	ldr	r3, [pc, #124]	; (800ee38 <vTaskStartScheduler+0xbc>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d002      	beq.n	800edc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800edc0:	2301      	movs	r3, #1
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	e001      	b.n	800edca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d102      	bne.n	800edd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800edd0:	f000 fcfc 	bl	800f7cc <xTimerCreateTimerTask>
 800edd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d116      	bne.n	800ee0a <vTaskStartScheduler+0x8e>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	613b      	str	r3, [r7, #16]
}
 800edee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800edf0:	4b12      	ldr	r3, [pc, #72]	; (800ee3c <vTaskStartScheduler+0xc0>)
 800edf2:	f04f 32ff 	mov.w	r2, #4294967295
 800edf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800edf8:	4b11      	ldr	r3, [pc, #68]	; (800ee40 <vTaskStartScheduler+0xc4>)
 800edfa:	2201      	movs	r2, #1
 800edfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800edfe:	4b11      	ldr	r3, [pc, #68]	; (800ee44 <vTaskStartScheduler+0xc8>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee04:	f001 f8bc 	bl	800ff80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee08:	e00e      	b.n	800ee28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee10:	d10a      	bne.n	800ee28 <vTaskStartScheduler+0xac>
	__asm volatile
 800ee12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee16:	f383 8811 	msr	BASEPRI, r3
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	60fb      	str	r3, [r7, #12]
}
 800ee24:	bf00      	nop
 800ee26:	e7fe      	b.n	800ee26 <vTaskStartScheduler+0xaa>
}
 800ee28:	bf00      	nop
 800ee2a:	3718      	adds	r7, #24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	08011fc8 	.word	0x08011fc8
 800ee34:	0800f461 	.word	0x0800f461
 800ee38:	20001054 	.word	0x20001054
 800ee3c:	20001050 	.word	0x20001050
 800ee40:	2000103c 	.word	0x2000103c
 800ee44:	20001034 	.word	0x20001034

0800ee48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ee48:	b480      	push	{r7}
 800ee4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ee4c:	4b04      	ldr	r3, [pc, #16]	; (800ee60 <vTaskSuspendAll+0x18>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3301      	adds	r3, #1
 800ee52:	4a03      	ldr	r2, [pc, #12]	; (800ee60 <vTaskSuspendAll+0x18>)
 800ee54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ee56:	bf00      	nop
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	20001058 	.word	0x20001058

0800ee64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ee72:	4b42      	ldr	r3, [pc, #264]	; (800ef7c <xTaskResumeAll+0x118>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10a      	bne.n	800ee90 <xTaskResumeAll+0x2c>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	603b      	str	r3, [r7, #0]
}
 800ee8c:	bf00      	nop
 800ee8e:	e7fe      	b.n	800ee8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee90:	f001 f918 	bl	80100c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee94:	4b39      	ldr	r3, [pc, #228]	; (800ef7c <xTaskResumeAll+0x118>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	4a38      	ldr	r2, [pc, #224]	; (800ef7c <xTaskResumeAll+0x118>)
 800ee9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee9e:	4b37      	ldr	r3, [pc, #220]	; (800ef7c <xTaskResumeAll+0x118>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d162      	bne.n	800ef6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eea6:	4b36      	ldr	r3, [pc, #216]	; (800ef80 <xTaskResumeAll+0x11c>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d05e      	beq.n	800ef6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eeae:	e02f      	b.n	800ef10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeb0:	4b34      	ldr	r3, [pc, #208]	; (800ef84 <xTaskResumeAll+0x120>)
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	3318      	adds	r3, #24
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fe ffb5 	bl	800de2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	3304      	adds	r3, #4
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fe ffb0 	bl	800de2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed0:	4b2d      	ldr	r3, [pc, #180]	; (800ef88 <xTaskResumeAll+0x124>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d903      	bls.n	800eee0 <xTaskResumeAll+0x7c>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eedc:	4a2a      	ldr	r2, [pc, #168]	; (800ef88 <xTaskResumeAll+0x124>)
 800eede:	6013      	str	r3, [r2, #0]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee4:	4613      	mov	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4413      	add	r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	4a27      	ldr	r2, [pc, #156]	; (800ef8c <xTaskResumeAll+0x128>)
 800eeee:	441a      	add	r2, r3
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3304      	adds	r3, #4
 800eef4:	4619      	mov	r1, r3
 800eef6:	4610      	mov	r0, r2
 800eef8:	f7fe ff3b 	bl	800dd72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef00:	4b23      	ldr	r3, [pc, #140]	; (800ef90 <xTaskResumeAll+0x12c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d302      	bcc.n	800ef10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ef0a:	4b22      	ldr	r3, [pc, #136]	; (800ef94 <xTaskResumeAll+0x130>)
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef10:	4b1c      	ldr	r3, [pc, #112]	; (800ef84 <xTaskResumeAll+0x120>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1cb      	bne.n	800eeb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef1e:	f000 fb55 	bl	800f5cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ef22:	4b1d      	ldr	r3, [pc, #116]	; (800ef98 <xTaskResumeAll+0x134>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d010      	beq.n	800ef50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ef2e:	f000 f847 	bl	800efc0 <xTaskIncrementTick>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d002      	beq.n	800ef3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ef38:	4b16      	ldr	r3, [pc, #88]	; (800ef94 <xTaskResumeAll+0x130>)
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3b01      	subs	r3, #1
 800ef42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1f1      	bne.n	800ef2e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ef4a:	4b13      	ldr	r3, [pc, #76]	; (800ef98 <xTaskResumeAll+0x134>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ef50:	4b10      	ldr	r3, [pc, #64]	; (800ef94 <xTaskResumeAll+0x130>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d009      	beq.n	800ef6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ef5c:	4b0f      	ldr	r3, [pc, #60]	; (800ef9c <xTaskResumeAll+0x138>)
 800ef5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	f3bf 8f4f 	dsb	sy
 800ef68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef6c:	f001 f8da 	bl	8010124 <vPortExitCritical>

	return xAlreadyYielded;
 800ef70:	68bb      	ldr	r3, [r7, #8]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20001058 	.word	0x20001058
 800ef80:	20001030 	.word	0x20001030
 800ef84:	20000ff0 	.word	0x20000ff0
 800ef88:	20001038 	.word	0x20001038
 800ef8c:	20000b60 	.word	0x20000b60
 800ef90:	20000b5c 	.word	0x20000b5c
 800ef94:	20001044 	.word	0x20001044
 800ef98:	20001040 	.word	0x20001040
 800ef9c:	e000ed04 	.word	0xe000ed04

0800efa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800efa6:	4b05      	ldr	r3, [pc, #20]	; (800efbc <xTaskGetTickCount+0x1c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800efac:	687b      	ldr	r3, [r7, #4]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	370c      	adds	r7, #12
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	20001034 	.word	0x20001034

0800efc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800efc6:	2300      	movs	r3, #0
 800efc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efca:	4b4f      	ldr	r3, [pc, #316]	; (800f108 <xTaskIncrementTick+0x148>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f040 8089 	bne.w	800f0e6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800efd4:	4b4d      	ldr	r3, [pc, #308]	; (800f10c <xTaskIncrementTick+0x14c>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3301      	adds	r3, #1
 800efda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800efdc:	4a4b      	ldr	r2, [pc, #300]	; (800f10c <xTaskIncrementTick+0x14c>)
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d120      	bne.n	800f02a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800efe8:	4b49      	ldr	r3, [pc, #292]	; (800f110 <xTaskIncrementTick+0x150>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00a      	beq.n	800f008 <xTaskIncrementTick+0x48>
	__asm volatile
 800eff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff6:	f383 8811 	msr	BASEPRI, r3
 800effa:	f3bf 8f6f 	isb	sy
 800effe:	f3bf 8f4f 	dsb	sy
 800f002:	603b      	str	r3, [r7, #0]
}
 800f004:	bf00      	nop
 800f006:	e7fe      	b.n	800f006 <xTaskIncrementTick+0x46>
 800f008:	4b41      	ldr	r3, [pc, #260]	; (800f110 <xTaskIncrementTick+0x150>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	60fb      	str	r3, [r7, #12]
 800f00e:	4b41      	ldr	r3, [pc, #260]	; (800f114 <xTaskIncrementTick+0x154>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4a3f      	ldr	r2, [pc, #252]	; (800f110 <xTaskIncrementTick+0x150>)
 800f014:	6013      	str	r3, [r2, #0]
 800f016:	4a3f      	ldr	r2, [pc, #252]	; (800f114 <xTaskIncrementTick+0x154>)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	4b3e      	ldr	r3, [pc, #248]	; (800f118 <xTaskIncrementTick+0x158>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	3301      	adds	r3, #1
 800f022:	4a3d      	ldr	r2, [pc, #244]	; (800f118 <xTaskIncrementTick+0x158>)
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	f000 fad1 	bl	800f5cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f02a:	4b3c      	ldr	r3, [pc, #240]	; (800f11c <xTaskIncrementTick+0x15c>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	693a      	ldr	r2, [r7, #16]
 800f030:	429a      	cmp	r2, r3
 800f032:	d349      	bcc.n	800f0c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f034:	4b36      	ldr	r3, [pc, #216]	; (800f110 <xTaskIncrementTick+0x150>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d104      	bne.n	800f048 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f03e:	4b37      	ldr	r3, [pc, #220]	; (800f11c <xTaskIncrementTick+0x15c>)
 800f040:	f04f 32ff 	mov.w	r2, #4294967295
 800f044:	601a      	str	r2, [r3, #0]
					break;
 800f046:	e03f      	b.n	800f0c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f048:	4b31      	ldr	r3, [pc, #196]	; (800f110 <xTaskIncrementTick+0x150>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d203      	bcs.n	800f068 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f060:	4a2e      	ldr	r2, [pc, #184]	; (800f11c <xTaskIncrementTick+0x15c>)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f066:	e02f      	b.n	800f0c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	3304      	adds	r3, #4
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fe fedd 	bl	800de2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f076:	2b00      	cmp	r3, #0
 800f078:	d004      	beq.n	800f084 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	3318      	adds	r3, #24
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fe fed4 	bl	800de2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f088:	4b25      	ldr	r3, [pc, #148]	; (800f120 <xTaskIncrementTick+0x160>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d903      	bls.n	800f098 <xTaskIncrementTick+0xd8>
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f094:	4a22      	ldr	r2, [pc, #136]	; (800f120 <xTaskIncrementTick+0x160>)
 800f096:	6013      	str	r3, [r2, #0]
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	4a1f      	ldr	r2, [pc, #124]	; (800f124 <xTaskIncrementTick+0x164>)
 800f0a6:	441a      	add	r2, r3
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3304      	adds	r3, #4
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	4610      	mov	r0, r2
 800f0b0:	f7fe fe5f 	bl	800dd72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b8:	4b1b      	ldr	r3, [pc, #108]	; (800f128 <xTaskIncrementTick+0x168>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d3b8      	bcc.n	800f034 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0c6:	e7b5      	b.n	800f034 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f0c8:	4b17      	ldr	r3, [pc, #92]	; (800f128 <xTaskIncrementTick+0x168>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ce:	4915      	ldr	r1, [pc, #84]	; (800f124 <xTaskIncrementTick+0x164>)
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	4413      	add	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	440b      	add	r3, r1
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d907      	bls.n	800f0f0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	e004      	b.n	800f0f0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f0e6:	4b11      	ldr	r3, [pc, #68]	; (800f12c <xTaskIncrementTick+0x16c>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	4a0f      	ldr	r2, [pc, #60]	; (800f12c <xTaskIncrementTick+0x16c>)
 800f0ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f0f0:	4b0f      	ldr	r3, [pc, #60]	; (800f130 <xTaskIncrementTick+0x170>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f0fc:	697b      	ldr	r3, [r7, #20]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3718      	adds	r7, #24
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	20001058 	.word	0x20001058
 800f10c:	20001034 	.word	0x20001034
 800f110:	20000fe8 	.word	0x20000fe8
 800f114:	20000fec 	.word	0x20000fec
 800f118:	20001048 	.word	0x20001048
 800f11c:	20001050 	.word	0x20001050
 800f120:	20001038 	.word	0x20001038
 800f124:	20000b60 	.word	0x20000b60
 800f128:	20000b5c 	.word	0x20000b5c
 800f12c:	20001040 	.word	0x20001040
 800f130:	20001044 	.word	0x20001044

0800f134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f134:	b480      	push	{r7}
 800f136:	b085      	sub	sp, #20
 800f138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f13a:	4b28      	ldr	r3, [pc, #160]	; (800f1dc <vTaskSwitchContext+0xa8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f142:	4b27      	ldr	r3, [pc, #156]	; (800f1e0 <vTaskSwitchContext+0xac>)
 800f144:	2201      	movs	r2, #1
 800f146:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f148:	e041      	b.n	800f1ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f14a:	4b25      	ldr	r3, [pc, #148]	; (800f1e0 <vTaskSwitchContext+0xac>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f150:	4b24      	ldr	r3, [pc, #144]	; (800f1e4 <vTaskSwitchContext+0xb0>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	60fb      	str	r3, [r7, #12]
 800f156:	e010      	b.n	800f17a <vTaskSwitchContext+0x46>
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10a      	bne.n	800f174 <vTaskSwitchContext+0x40>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	607b      	str	r3, [r7, #4]
}
 800f170:	bf00      	nop
 800f172:	e7fe      	b.n	800f172 <vTaskSwitchContext+0x3e>
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	3b01      	subs	r3, #1
 800f178:	60fb      	str	r3, [r7, #12]
 800f17a:	491b      	ldr	r1, [pc, #108]	; (800f1e8 <vTaskSwitchContext+0xb4>)
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	4613      	mov	r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	440b      	add	r3, r1
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d0e4      	beq.n	800f158 <vTaskSwitchContext+0x24>
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	4613      	mov	r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	4413      	add	r3, r2
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	4a13      	ldr	r2, [pc, #76]	; (800f1e8 <vTaskSwitchContext+0xb4>)
 800f19a:	4413      	add	r3, r2
 800f19c:	60bb      	str	r3, [r7, #8]
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	605a      	str	r2, [r3, #4]
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	685a      	ldr	r2, [r3, #4]
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d104      	bne.n	800f1be <vTaskSwitchContext+0x8a>
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	605a      	str	r2, [r3, #4]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	4a09      	ldr	r2, [pc, #36]	; (800f1ec <vTaskSwitchContext+0xb8>)
 800f1c6:	6013      	str	r3, [r2, #0]
 800f1c8:	4a06      	ldr	r2, [pc, #24]	; (800f1e4 <vTaskSwitchContext+0xb0>)
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6013      	str	r3, [r2, #0]
}
 800f1ce:	bf00      	nop
 800f1d0:	3714      	adds	r7, #20
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	20001058 	.word	0x20001058
 800f1e0:	20001044 	.word	0x20001044
 800f1e4:	20001038 	.word	0x20001038
 800f1e8:	20000b60 	.word	0x20000b60
 800f1ec:	20000b5c 	.word	0x20000b5c

0800f1f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10a      	bne.n	800f216 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	60fb      	str	r3, [r7, #12]
}
 800f212:	bf00      	nop
 800f214:	e7fe      	b.n	800f214 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f216:	4b07      	ldr	r3, [pc, #28]	; (800f234 <vTaskPlaceOnEventList+0x44>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3318      	adds	r3, #24
 800f21c:	4619      	mov	r1, r3
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7fe fdcb 	bl	800ddba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f224:	2101      	movs	r1, #1
 800f226:	6838      	ldr	r0, [r7, #0]
 800f228:	f000 fa7c 	bl	800f724 <prvAddCurrentTaskToDelayedList>
}
 800f22c:	bf00      	nop
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	20000b5c 	.word	0x20000b5c

0800f238 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d10a      	bne.n	800f260 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	617b      	str	r3, [r7, #20]
}
 800f25c:	bf00      	nop
 800f25e:	e7fe      	b.n	800f25e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f260:	4b0a      	ldr	r3, [pc, #40]	; (800f28c <vTaskPlaceOnEventListRestricted+0x54>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3318      	adds	r3, #24
 800f266:	4619      	mov	r1, r3
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7fe fd82 	bl	800dd72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f274:	f04f 33ff 	mov.w	r3, #4294967295
 800f278:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	68b8      	ldr	r0, [r7, #8]
 800f27e:	f000 fa51 	bl	800f724 <prvAddCurrentTaskToDelayedList>
	}
 800f282:	bf00      	nop
 800f284:	3718      	adds	r7, #24
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	20000b5c 	.word	0x20000b5c

0800f290 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10a      	bne.n	800f2bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2aa:	f383 8811 	msr	BASEPRI, r3
 800f2ae:	f3bf 8f6f 	isb	sy
 800f2b2:	f3bf 8f4f 	dsb	sy
 800f2b6:	60fb      	str	r3, [r7, #12]
}
 800f2b8:	bf00      	nop
 800f2ba:	e7fe      	b.n	800f2ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	3318      	adds	r3, #24
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe fdb3 	bl	800de2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2c6:	4b1e      	ldr	r3, [pc, #120]	; (800f340 <xTaskRemoveFromEventList+0xb0>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d11d      	bne.n	800f30a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fdaa 	bl	800de2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2dc:	4b19      	ldr	r3, [pc, #100]	; (800f344 <xTaskRemoveFromEventList+0xb4>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d903      	bls.n	800f2ec <xTaskRemoveFromEventList+0x5c>
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e8:	4a16      	ldr	r2, [pc, #88]	; (800f344 <xTaskRemoveFromEventList+0xb4>)
 800f2ea:	6013      	str	r3, [r2, #0]
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4413      	add	r3, r2
 800f2f6:	009b      	lsls	r3, r3, #2
 800f2f8:	4a13      	ldr	r2, [pc, #76]	; (800f348 <xTaskRemoveFromEventList+0xb8>)
 800f2fa:	441a      	add	r2, r3
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	3304      	adds	r3, #4
 800f300:	4619      	mov	r1, r3
 800f302:	4610      	mov	r0, r2
 800f304:	f7fe fd35 	bl	800dd72 <vListInsertEnd>
 800f308:	e005      	b.n	800f316 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	3318      	adds	r3, #24
 800f30e:	4619      	mov	r1, r3
 800f310:	480e      	ldr	r0, [pc, #56]	; (800f34c <xTaskRemoveFromEventList+0xbc>)
 800f312:	f7fe fd2e 	bl	800dd72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31a:	4b0d      	ldr	r3, [pc, #52]	; (800f350 <xTaskRemoveFromEventList+0xc0>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f320:	429a      	cmp	r2, r3
 800f322:	d905      	bls.n	800f330 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f324:	2301      	movs	r3, #1
 800f326:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f328:	4b0a      	ldr	r3, [pc, #40]	; (800f354 <xTaskRemoveFromEventList+0xc4>)
 800f32a:	2201      	movs	r2, #1
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	e001      	b.n	800f334 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f330:	2300      	movs	r3, #0
 800f332:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f334:	697b      	ldr	r3, [r7, #20]
}
 800f336:	4618      	mov	r0, r3
 800f338:	3718      	adds	r7, #24
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	20001058 	.word	0x20001058
 800f344:	20001038 	.word	0x20001038
 800f348:	20000b60 	.word	0x20000b60
 800f34c:	20000ff0 	.word	0x20000ff0
 800f350:	20000b5c 	.word	0x20000b5c
 800f354:	20001044 	.word	0x20001044

0800f358 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f360:	4b06      	ldr	r3, [pc, #24]	; (800f37c <vTaskInternalSetTimeOutState+0x24>)
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f368:	4b05      	ldr	r3, [pc, #20]	; (800f380 <vTaskInternalSetTimeOutState+0x28>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	605a      	str	r2, [r3, #4]
}
 800f370:	bf00      	nop
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr
 800f37c:	20001048 	.word	0x20001048
 800f380:	20001034 	.word	0x20001034

0800f384 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b088      	sub	sp, #32
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d10a      	bne.n	800f3aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	613b      	str	r3, [r7, #16]
}
 800f3a6:	bf00      	nop
 800f3a8:	e7fe      	b.n	800f3a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d10a      	bne.n	800f3c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b4:	f383 8811 	msr	BASEPRI, r3
 800f3b8:	f3bf 8f6f 	isb	sy
 800f3bc:	f3bf 8f4f 	dsb	sy
 800f3c0:	60fb      	str	r3, [r7, #12]
}
 800f3c2:	bf00      	nop
 800f3c4:	e7fe      	b.n	800f3c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f3c6:	f000 fe7d 	bl	80100c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f3ca:	4b1d      	ldr	r3, [pc, #116]	; (800f440 <xTaskCheckForTimeOut+0xbc>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	69ba      	ldr	r2, [r7, #24]
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e2:	d102      	bne.n	800f3ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	61fb      	str	r3, [r7, #28]
 800f3e8:	e023      	b.n	800f432 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	4b15      	ldr	r3, [pc, #84]	; (800f444 <xTaskCheckForTimeOut+0xc0>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d007      	beq.n	800f406 <xTaskCheckForTimeOut+0x82>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	69ba      	ldr	r2, [r7, #24]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d302      	bcc.n	800f406 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f400:	2301      	movs	r3, #1
 800f402:	61fb      	str	r3, [r7, #28]
 800f404:	e015      	b.n	800f432 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	697a      	ldr	r2, [r7, #20]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d20b      	bcs.n	800f428 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	1ad2      	subs	r2, r2, r3
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7ff ff9b 	bl	800f358 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f422:	2300      	movs	r3, #0
 800f424:	61fb      	str	r3, [r7, #28]
 800f426:	e004      	b.n	800f432 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	2200      	movs	r2, #0
 800f42c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f42e:	2301      	movs	r3, #1
 800f430:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f432:	f000 fe77 	bl	8010124 <vPortExitCritical>

	return xReturn;
 800f436:	69fb      	ldr	r3, [r7, #28]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3720      	adds	r7, #32
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	20001034 	.word	0x20001034
 800f444:	20001048 	.word	0x20001048

0800f448 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f448:	b480      	push	{r7}
 800f44a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f44c:	4b03      	ldr	r3, [pc, #12]	; (800f45c <vTaskMissedYield+0x14>)
 800f44e:	2201      	movs	r2, #1
 800f450:	601a      	str	r2, [r3, #0]
}
 800f452:	bf00      	nop
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr
 800f45c:	20001044 	.word	0x20001044

0800f460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f468:	f000 f852 	bl	800f510 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f46c:	4b06      	ldr	r3, [pc, #24]	; (800f488 <prvIdleTask+0x28>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d9f9      	bls.n	800f468 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f474:	4b05      	ldr	r3, [pc, #20]	; (800f48c <prvIdleTask+0x2c>)
 800f476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f484:	e7f0      	b.n	800f468 <prvIdleTask+0x8>
 800f486:	bf00      	nop
 800f488:	20000b60 	.word	0x20000b60
 800f48c:	e000ed04 	.word	0xe000ed04

0800f490 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f496:	2300      	movs	r3, #0
 800f498:	607b      	str	r3, [r7, #4]
 800f49a:	e00c      	b.n	800f4b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4a12      	ldr	r2, [pc, #72]	; (800f4f0 <prvInitialiseTaskLists+0x60>)
 800f4a8:	4413      	add	r3, r2
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fe fc34 	bl	800dd18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	607b      	str	r3, [r7, #4]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b37      	cmp	r3, #55	; 0x37
 800f4ba:	d9ef      	bls.n	800f49c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f4bc:	480d      	ldr	r0, [pc, #52]	; (800f4f4 <prvInitialiseTaskLists+0x64>)
 800f4be:	f7fe fc2b 	bl	800dd18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4c2:	480d      	ldr	r0, [pc, #52]	; (800f4f8 <prvInitialiseTaskLists+0x68>)
 800f4c4:	f7fe fc28 	bl	800dd18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4c8:	480c      	ldr	r0, [pc, #48]	; (800f4fc <prvInitialiseTaskLists+0x6c>)
 800f4ca:	f7fe fc25 	bl	800dd18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f4ce:	480c      	ldr	r0, [pc, #48]	; (800f500 <prvInitialiseTaskLists+0x70>)
 800f4d0:	f7fe fc22 	bl	800dd18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f4d4:	480b      	ldr	r0, [pc, #44]	; (800f504 <prvInitialiseTaskLists+0x74>)
 800f4d6:	f7fe fc1f 	bl	800dd18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f4da:	4b0b      	ldr	r3, [pc, #44]	; (800f508 <prvInitialiseTaskLists+0x78>)
 800f4dc:	4a05      	ldr	r2, [pc, #20]	; (800f4f4 <prvInitialiseTaskLists+0x64>)
 800f4de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f4e0:	4b0a      	ldr	r3, [pc, #40]	; (800f50c <prvInitialiseTaskLists+0x7c>)
 800f4e2:	4a05      	ldr	r2, [pc, #20]	; (800f4f8 <prvInitialiseTaskLists+0x68>)
 800f4e4:	601a      	str	r2, [r3, #0]
}
 800f4e6:	bf00      	nop
 800f4e8:	3708      	adds	r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20000b60 	.word	0x20000b60
 800f4f4:	20000fc0 	.word	0x20000fc0
 800f4f8:	20000fd4 	.word	0x20000fd4
 800f4fc:	20000ff0 	.word	0x20000ff0
 800f500:	20001004 	.word	0x20001004
 800f504:	2000101c 	.word	0x2000101c
 800f508:	20000fe8 	.word	0x20000fe8
 800f50c:	20000fec 	.word	0x20000fec

0800f510 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f516:	e019      	b.n	800f54c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f518:	f000 fdd4 	bl	80100c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f51c:	4b10      	ldr	r3, [pc, #64]	; (800f560 <prvCheckTasksWaitingTermination+0x50>)
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3304      	adds	r3, #4
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fe fc7f 	bl	800de2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f52e:	4b0d      	ldr	r3, [pc, #52]	; (800f564 <prvCheckTasksWaitingTermination+0x54>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	3b01      	subs	r3, #1
 800f534:	4a0b      	ldr	r2, [pc, #44]	; (800f564 <prvCheckTasksWaitingTermination+0x54>)
 800f536:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f538:	4b0b      	ldr	r3, [pc, #44]	; (800f568 <prvCheckTasksWaitingTermination+0x58>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	4a0a      	ldr	r2, [pc, #40]	; (800f568 <prvCheckTasksWaitingTermination+0x58>)
 800f540:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f542:	f000 fdef 	bl	8010124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f000 f810 	bl	800f56c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f54c:	4b06      	ldr	r3, [pc, #24]	; (800f568 <prvCheckTasksWaitingTermination+0x58>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1e1      	bne.n	800f518 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f554:	bf00      	nop
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	20001004 	.word	0x20001004
 800f564:	20001030 	.word	0x20001030
 800f568:	20001018 	.word	0x20001018

0800f56c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d108      	bne.n	800f590 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f582:	4618      	mov	r0, r3
 800f584:	f000 ff84 	bl	8010490 <vPortFree>
				vPortFree( pxTCB );
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 ff81 	bl	8010490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f58e:	e018      	b.n	800f5c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f596:	2b01      	cmp	r3, #1
 800f598:	d103      	bne.n	800f5a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 ff78 	bl	8010490 <vPortFree>
	}
 800f5a0:	e00f      	b.n	800f5c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d00a      	beq.n	800f5c2 <prvDeleteTCB+0x56>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	60fb      	str	r3, [r7, #12]
}
 800f5be:	bf00      	nop
 800f5c0:	e7fe      	b.n	800f5c0 <prvDeleteTCB+0x54>
	}
 800f5c2:	bf00      	nop
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
	...

0800f5cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5d2:	4b0c      	ldr	r3, [pc, #48]	; (800f604 <prvResetNextTaskUnblockTime+0x38>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d104      	bne.n	800f5e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f5dc:	4b0a      	ldr	r3, [pc, #40]	; (800f608 <prvResetNextTaskUnblockTime+0x3c>)
 800f5de:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f5e4:	e008      	b.n	800f5f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5e6:	4b07      	ldr	r3, [pc, #28]	; (800f604 <prvResetNextTaskUnblockTime+0x38>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	4a04      	ldr	r2, [pc, #16]	; (800f608 <prvResetNextTaskUnblockTime+0x3c>)
 800f5f6:	6013      	str	r3, [r2, #0]
}
 800f5f8:	bf00      	nop
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	20000fe8 	.word	0x20000fe8
 800f608:	20001050 	.word	0x20001050

0800f60c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f612:	4b0b      	ldr	r3, [pc, #44]	; (800f640 <xTaskGetSchedulerState+0x34>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d102      	bne.n	800f620 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f61a:	2301      	movs	r3, #1
 800f61c:	607b      	str	r3, [r7, #4]
 800f61e:	e008      	b.n	800f632 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f620:	4b08      	ldr	r3, [pc, #32]	; (800f644 <xTaskGetSchedulerState+0x38>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d102      	bne.n	800f62e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f628:	2302      	movs	r3, #2
 800f62a:	607b      	str	r3, [r7, #4]
 800f62c:	e001      	b.n	800f632 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f62e:	2300      	movs	r3, #0
 800f630:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f632:	687b      	ldr	r3, [r7, #4]
	}
 800f634:	4618      	mov	r0, r3
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr
 800f640:	2000103c 	.word	0x2000103c
 800f644:	20001058 	.word	0x20001058

0800f648 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f654:	2300      	movs	r3, #0
 800f656:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d056      	beq.n	800f70c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f65e:	4b2e      	ldr	r3, [pc, #184]	; (800f718 <xTaskPriorityDisinherit+0xd0>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	429a      	cmp	r2, r3
 800f666:	d00a      	beq.n	800f67e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66c:	f383 8811 	msr	BASEPRI, r3
 800f670:	f3bf 8f6f 	isb	sy
 800f674:	f3bf 8f4f 	dsb	sy
 800f678:	60fb      	str	r3, [r7, #12]
}
 800f67a:	bf00      	nop
 800f67c:	e7fe      	b.n	800f67c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10a      	bne.n	800f69c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	60bb      	str	r3, [r7, #8]
}
 800f698:	bf00      	nop
 800f69a:	e7fe      	b.n	800f69a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6a0:	1e5a      	subs	r2, r3, #1
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d02c      	beq.n	800f70c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d128      	bne.n	800f70c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3304      	adds	r3, #4
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe fbb4 	bl	800de2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6dc:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <xTaskPriorityDisinherit+0xd4>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d903      	bls.n	800f6ec <xTaskPriorityDisinherit+0xa4>
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e8:	4a0c      	ldr	r2, [pc, #48]	; (800f71c <xTaskPriorityDisinherit+0xd4>)
 800f6ea:	6013      	str	r3, [r2, #0]
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	4413      	add	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4a09      	ldr	r2, [pc, #36]	; (800f720 <xTaskPriorityDisinherit+0xd8>)
 800f6fa:	441a      	add	r2, r3
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	3304      	adds	r3, #4
 800f700:	4619      	mov	r1, r3
 800f702:	4610      	mov	r0, r2
 800f704:	f7fe fb35 	bl	800dd72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f708:	2301      	movs	r3, #1
 800f70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f70c:	697b      	ldr	r3, [r7, #20]
	}
 800f70e:	4618      	mov	r0, r3
 800f710:	3718      	adds	r7, #24
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	20000b5c 	.word	0x20000b5c
 800f71c:	20001038 	.word	0x20001038
 800f720:	20000b60 	.word	0x20000b60

0800f724 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f72e:	4b21      	ldr	r3, [pc, #132]	; (800f7b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f734:	4b20      	ldr	r3, [pc, #128]	; (800f7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	3304      	adds	r3, #4
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fb76 	bl	800de2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f746:	d10a      	bne.n	800f75e <prvAddCurrentTaskToDelayedList+0x3a>
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d007      	beq.n	800f75e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f74e:	4b1a      	ldr	r3, [pc, #104]	; (800f7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	3304      	adds	r3, #4
 800f754:	4619      	mov	r1, r3
 800f756:	4819      	ldr	r0, [pc, #100]	; (800f7bc <prvAddCurrentTaskToDelayedList+0x98>)
 800f758:	f7fe fb0b 	bl	800dd72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f75c:	e026      	b.n	800f7ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4413      	add	r3, r2
 800f764:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f766:	4b14      	ldr	r3, [pc, #80]	; (800f7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	429a      	cmp	r2, r3
 800f774:	d209      	bcs.n	800f78a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f776:	4b12      	ldr	r3, [pc, #72]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	4b0f      	ldr	r3, [pc, #60]	; (800f7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	3304      	adds	r3, #4
 800f780:	4619      	mov	r1, r3
 800f782:	4610      	mov	r0, r2
 800f784:	f7fe fb19 	bl	800ddba <vListInsert>
}
 800f788:	e010      	b.n	800f7ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f78a:	4b0e      	ldr	r3, [pc, #56]	; (800f7c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	4b0a      	ldr	r3, [pc, #40]	; (800f7b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3304      	adds	r3, #4
 800f794:	4619      	mov	r1, r3
 800f796:	4610      	mov	r0, r2
 800f798:	f7fe fb0f 	bl	800ddba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f79c:	4b0a      	ldr	r3, [pc, #40]	; (800f7c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d202      	bcs.n	800f7ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f7a6:	4a08      	ldr	r2, [pc, #32]	; (800f7c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	6013      	str	r3, [r2, #0]
}
 800f7ac:	bf00      	nop
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	20001034 	.word	0x20001034
 800f7b8:	20000b5c 	.word	0x20000b5c
 800f7bc:	2000101c 	.word	0x2000101c
 800f7c0:	20000fec 	.word	0x20000fec
 800f7c4:	20000fe8 	.word	0x20000fe8
 800f7c8:	20001050 	.word	0x20001050

0800f7cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b08a      	sub	sp, #40	; 0x28
 800f7d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f7d6:	f000 fb07 	bl	800fde8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f7da:	4b1c      	ldr	r3, [pc, #112]	; (800f84c <xTimerCreateTimerTask+0x80>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d021      	beq.n	800f826 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f7ea:	1d3a      	adds	r2, r7, #4
 800f7ec:	f107 0108 	add.w	r1, r7, #8
 800f7f0:	f107 030c 	add.w	r3, r7, #12
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe fa75 	bl	800dce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f7fa:	6879      	ldr	r1, [r7, #4]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	9202      	str	r2, [sp, #8]
 800f802:	9301      	str	r3, [sp, #4]
 800f804:	2302      	movs	r3, #2
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	2300      	movs	r3, #0
 800f80a:	460a      	mov	r2, r1
 800f80c:	4910      	ldr	r1, [pc, #64]	; (800f850 <xTimerCreateTimerTask+0x84>)
 800f80e:	4811      	ldr	r0, [pc, #68]	; (800f854 <xTimerCreateTimerTask+0x88>)
 800f810:	f7ff f8de 	bl	800e9d0 <xTaskCreateStatic>
 800f814:	4603      	mov	r3, r0
 800f816:	4a10      	ldr	r2, [pc, #64]	; (800f858 <xTimerCreateTimerTask+0x8c>)
 800f818:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f81a:	4b0f      	ldr	r3, [pc, #60]	; (800f858 <xTimerCreateTimerTask+0x8c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f822:	2301      	movs	r3, #1
 800f824:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10a      	bne.n	800f842 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	613b      	str	r3, [r7, #16]
}
 800f83e:	bf00      	nop
 800f840:	e7fe      	b.n	800f840 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f842:	697b      	ldr	r3, [r7, #20]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	2000108c 	.word	0x2000108c
 800f850:	08011fd0 	.word	0x08011fd0
 800f854:	0800f991 	.word	0x0800f991
 800f858:	20001090 	.word	0x20001090

0800f85c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08a      	sub	sp, #40	; 0x28
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10a      	bne.n	800f88a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	f383 8811 	msr	BASEPRI, r3
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	623b      	str	r3, [r7, #32]
}
 800f886:	bf00      	nop
 800f888:	e7fe      	b.n	800f888 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f88a:	4b1a      	ldr	r3, [pc, #104]	; (800f8f4 <xTimerGenericCommand+0x98>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d02a      	beq.n	800f8e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2b05      	cmp	r3, #5
 800f8a2:	dc18      	bgt.n	800f8d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f8a4:	f7ff feb2 	bl	800f60c <xTaskGetSchedulerState>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	d109      	bne.n	800f8c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f8ae:	4b11      	ldr	r3, [pc, #68]	; (800f8f4 <xTimerGenericCommand+0x98>)
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	f107 0110 	add.w	r1, r7, #16
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ba:	f7fe fc25 	bl	800e108 <xQueueGenericSend>
 800f8be:	6278      	str	r0, [r7, #36]	; 0x24
 800f8c0:	e012      	b.n	800f8e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8c2:	4b0c      	ldr	r3, [pc, #48]	; (800f8f4 <xTimerGenericCommand+0x98>)
 800f8c4:	6818      	ldr	r0, [r3, #0]
 800f8c6:	f107 0110 	add.w	r1, r7, #16
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f7fe fc1b 	bl	800e108 <xQueueGenericSend>
 800f8d2:	6278      	str	r0, [r7, #36]	; 0x24
 800f8d4:	e008      	b.n	800f8e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8d6:	4b07      	ldr	r3, [pc, #28]	; (800f8f4 <xTimerGenericCommand+0x98>)
 800f8d8:	6818      	ldr	r0, [r3, #0]
 800f8da:	f107 0110 	add.w	r1, r7, #16
 800f8de:	2300      	movs	r3, #0
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	f7fe fd0f 	bl	800e304 <xQueueGenericSendFromISR>
 800f8e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3728      	adds	r7, #40	; 0x28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	2000108c 	.word	0x2000108c

0800f8f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b088      	sub	sp, #32
 800f8fc:	af02      	add	r7, sp, #8
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f902:	4b22      	ldr	r3, [pc, #136]	; (800f98c <prvProcessExpiredTimer+0x94>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	3304      	adds	r3, #4
 800f910:	4618      	mov	r0, r3
 800f912:	f7fe fa8b 	bl	800de2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d022      	beq.n	800f96a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	699a      	ldr	r2, [r3, #24]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	18d1      	adds	r1, r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	6978      	ldr	r0, [r7, #20]
 800f932:	f000 f8d1 	bl	800fad8 <prvInsertTimerInActiveList>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01f      	beq.n	800f97c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f93c:	2300      	movs	r3, #0
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	2300      	movs	r3, #0
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	2100      	movs	r1, #0
 800f946:	6978      	ldr	r0, [r7, #20]
 800f948:	f7ff ff88 	bl	800f85c <xTimerGenericCommand>
 800f94c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d113      	bne.n	800f97c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	60fb      	str	r3, [r7, #12]
}
 800f966:	bf00      	nop
 800f968:	e7fe      	b.n	800f968 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f970:	f023 0301 	bic.w	r3, r3, #1
 800f974:	b2da      	uxtb	r2, r3
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	6a1b      	ldr	r3, [r3, #32]
 800f980:	6978      	ldr	r0, [r7, #20]
 800f982:	4798      	blx	r3
}
 800f984:	bf00      	nop
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	20001084 	.word	0x20001084

0800f990 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f998:	f107 0308 	add.w	r3, r7, #8
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 f857 	bl	800fa50 <prvGetNextExpireTime>
 800f9a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 f803 	bl	800f9b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f9ae:	f000 f8d5 	bl	800fb5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9b2:	e7f1      	b.n	800f998 <prvTimerTask+0x8>

0800f9b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f9be:	f7ff fa43 	bl	800ee48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9c2:	f107 0308 	add.w	r3, r7, #8
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 f866 	bl	800fa98 <prvSampleTimeNow>
 800f9cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d130      	bne.n	800fa36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10a      	bne.n	800f9f0 <prvProcessTimerOrBlockTask+0x3c>
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d806      	bhi.n	800f9f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f9e2:	f7ff fa3f 	bl	800ee64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f9e6:	68f9      	ldr	r1, [r7, #12]
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7ff ff85 	bl	800f8f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f9ee:	e024      	b.n	800fa3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d008      	beq.n	800fa08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f9f6:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <prvProcessTimerOrBlockTask+0x90>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <prvProcessTimerOrBlockTask+0x50>
 800fa00:	2301      	movs	r3, #1
 800fa02:	e000      	b.n	800fa06 <prvProcessTimerOrBlockTask+0x52>
 800fa04:	2300      	movs	r3, #0
 800fa06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa08:	4b0f      	ldr	r3, [pc, #60]	; (800fa48 <prvProcessTimerOrBlockTask+0x94>)
 800fa0a:	6818      	ldr	r0, [r3, #0]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	683a      	ldr	r2, [r7, #0]
 800fa14:	4619      	mov	r1, r3
 800fa16:	f7fe ffa7 	bl	800e968 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa1a:	f7ff fa23 	bl	800ee64 <xTaskResumeAll>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10a      	bne.n	800fa3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa24:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <prvProcessTimerOrBlockTask+0x98>)
 800fa26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa2a:	601a      	str	r2, [r3, #0]
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	f3bf 8f6f 	isb	sy
}
 800fa34:	e001      	b.n	800fa3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fa36:	f7ff fa15 	bl	800ee64 <xTaskResumeAll>
}
 800fa3a:	bf00      	nop
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	20001088 	.word	0x20001088
 800fa48:	2000108c 	.word	0x2000108c
 800fa4c:	e000ed04 	.word	0xe000ed04

0800fa50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fa50:	b480      	push	{r7}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa58:	4b0e      	ldr	r3, [pc, #56]	; (800fa94 <prvGetNextExpireTime+0x44>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d101      	bne.n	800fa66 <prvGetNextExpireTime+0x16>
 800fa62:	2201      	movs	r2, #1
 800fa64:	e000      	b.n	800fa68 <prvGetNextExpireTime+0x18>
 800fa66:	2200      	movs	r2, #0
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d105      	bne.n	800fa80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa74:	4b07      	ldr	r3, [pc, #28]	; (800fa94 <prvGetNextExpireTime+0x44>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	e001      	b.n	800fa84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fa80:	2300      	movs	r3, #0
 800fa82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fa84:	68fb      	ldr	r3, [r7, #12]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr
 800fa92:	bf00      	nop
 800fa94:	20001084 	.word	0x20001084

0800fa98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800faa0:	f7ff fa7e 	bl	800efa0 <xTaskGetTickCount>
 800faa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800faa6:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <prvSampleTimeNow+0x3c>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	429a      	cmp	r2, r3
 800faae:	d205      	bcs.n	800fabc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fab0:	f000 f936 	bl	800fd20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	e002      	b.n	800fac2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fac2:	4a04      	ldr	r2, [pc, #16]	; (800fad4 <prvSampleTimeNow+0x3c>)
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fac8:	68fb      	ldr	r3, [r7, #12]
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	20001094 	.word	0x20001094

0800fad8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d812      	bhi.n	800fb24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	1ad2      	subs	r2, r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	699b      	ldr	r3, [r3, #24]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d302      	bcc.n	800fb12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	617b      	str	r3, [r7, #20]
 800fb10:	e01b      	b.n	800fb4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb12:	4b10      	ldr	r3, [pc, #64]	; (800fb54 <prvInsertTimerInActiveList+0x7c>)
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3304      	adds	r3, #4
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	f7fe f94c 	bl	800ddba <vListInsert>
 800fb22:	e012      	b.n	800fb4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d206      	bcs.n	800fb3a <prvInsertTimerInActiveList+0x62>
 800fb2c:	68ba      	ldr	r2, [r7, #8]
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d302      	bcc.n	800fb3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb34:	2301      	movs	r3, #1
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e007      	b.n	800fb4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb3a:	4b07      	ldr	r3, [pc, #28]	; (800fb58 <prvInsertTimerInActiveList+0x80>)
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3304      	adds	r3, #4
 800fb42:	4619      	mov	r1, r3
 800fb44:	4610      	mov	r0, r2
 800fb46:	f7fe f938 	bl	800ddba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fb4a:	697b      	ldr	r3, [r7, #20]
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3718      	adds	r7, #24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20001088 	.word	0x20001088
 800fb58:	20001084 	.word	0x20001084

0800fb5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08e      	sub	sp, #56	; 0x38
 800fb60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb62:	e0ca      	b.n	800fcfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	da18      	bge.n	800fb9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb6a:	1d3b      	adds	r3, r7, #4
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d10a      	bne.n	800fb8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	61fb      	str	r3, [r7, #28]
}
 800fb88:	bf00      	nop
 800fb8a:	e7fe      	b.n	800fb8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb92:	6850      	ldr	r0, [r2, #4]
 800fb94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb96:	6892      	ldr	r2, [r2, #8]
 800fb98:	4611      	mov	r1, r2
 800fb9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f2c0 80aa 	blt.w	800fcf8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbaa:	695b      	ldr	r3, [r3, #20]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d004      	beq.n	800fbba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7fe f939 	bl	800de2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbba:	463b      	mov	r3, r7
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff ff6b 	bl	800fa98 <prvSampleTimeNow>
 800fbc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b09      	cmp	r3, #9
 800fbc8:	f200 8097 	bhi.w	800fcfa <prvProcessReceivedCommands+0x19e>
 800fbcc:	a201      	add	r2, pc, #4	; (adr r2, 800fbd4 <prvProcessReceivedCommands+0x78>)
 800fbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd2:	bf00      	nop
 800fbd4:	0800fbfd 	.word	0x0800fbfd
 800fbd8:	0800fbfd 	.word	0x0800fbfd
 800fbdc:	0800fbfd 	.word	0x0800fbfd
 800fbe0:	0800fc71 	.word	0x0800fc71
 800fbe4:	0800fc85 	.word	0x0800fc85
 800fbe8:	0800fccf 	.word	0x0800fccf
 800fbec:	0800fbfd 	.word	0x0800fbfd
 800fbf0:	0800fbfd 	.word	0x0800fbfd
 800fbf4:	0800fc71 	.word	0x0800fc71
 800fbf8:	0800fc85 	.word	0x0800fc85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc02:	f043 0301 	orr.w	r3, r3, #1
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fc0e:	68ba      	ldr	r2, [r7, #8]
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	699b      	ldr	r3, [r3, #24]
 800fc14:	18d1      	adds	r1, r2, r3
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc1c:	f7ff ff5c 	bl	800fad8 <prvInsertTimerInActiveList>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d069      	beq.n	800fcfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	6a1b      	ldr	r3, [r3, #32]
 800fc2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc34:	f003 0304 	and.w	r3, r3, #4
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d05e      	beq.n	800fcfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc3c:	68ba      	ldr	r2, [r7, #8]
 800fc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc40:	699b      	ldr	r3, [r3, #24]
 800fc42:	441a      	add	r2, r3
 800fc44:	2300      	movs	r3, #0
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc4e:	f7ff fe05 	bl	800f85c <xTimerGenericCommand>
 800fc52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fc54:	6a3b      	ldr	r3, [r7, #32]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d14f      	bne.n	800fcfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	61bb      	str	r3, [r7, #24]
}
 800fc6c:	bf00      	nop
 800fc6e:	e7fe      	b.n	800fc6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc76:	f023 0301 	bic.w	r3, r3, #1
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fc82:	e03a      	b.n	800fcfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc8a:	f043 0301 	orr.w	r3, r3, #1
 800fc8e:	b2da      	uxtb	r2, r3
 800fc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9e:	699b      	ldr	r3, [r3, #24]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d10a      	bne.n	800fcba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca8:	f383 8811 	msr	BASEPRI, r3
 800fcac:	f3bf 8f6f 	isb	sy
 800fcb0:	f3bf 8f4f 	dsb	sy
 800fcb4:	617b      	str	r3, [r7, #20]
}
 800fcb6:	bf00      	nop
 800fcb8:	e7fe      	b.n	800fcb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbc:	699a      	ldr	r2, [r3, #24]
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc0:	18d1      	adds	r1, r2, r3
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcc8:	f7ff ff06 	bl	800fad8 <prvInsertTimerInActiveList>
					break;
 800fccc:	e015      	b.n	800fcfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcd4:	f003 0302 	and.w	r3, r3, #2
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d103      	bne.n	800fce4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcde:	f000 fbd7 	bl	8010490 <vPortFree>
 800fce2:	e00a      	b.n	800fcfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcea:	f023 0301 	bic.w	r3, r3, #1
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fcf6:	e000      	b.n	800fcfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fcf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcfa:	4b08      	ldr	r3, [pc, #32]	; (800fd1c <prvProcessReceivedCommands+0x1c0>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	1d39      	adds	r1, r7, #4
 800fd00:	2200      	movs	r2, #0
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fe fb96 	bl	800e434 <xQueueReceive>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f47f af2a 	bne.w	800fb64 <prvProcessReceivedCommands+0x8>
	}
}
 800fd10:	bf00      	nop
 800fd12:	bf00      	nop
 800fd14:	3730      	adds	r7, #48	; 0x30
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	2000108c 	.word	0x2000108c

0800fd20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b088      	sub	sp, #32
 800fd24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd26:	e048      	b.n	800fdba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd28:	4b2d      	ldr	r3, [pc, #180]	; (800fde0 <prvSwitchTimerLists+0xc0>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd32:	4b2b      	ldr	r3, [pc, #172]	; (800fde0 <prvSwitchTimerLists+0xc0>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	3304      	adds	r3, #4
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fe f873 	bl	800de2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd54:	f003 0304 	and.w	r3, r3, #4
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d02e      	beq.n	800fdba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	699b      	ldr	r3, [r3, #24]
 800fd60:	693a      	ldr	r2, [r7, #16]
 800fd62:	4413      	add	r3, r2
 800fd64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fd66:	68ba      	ldr	r2, [r7, #8]
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d90e      	bls.n	800fd8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd7a:	4b19      	ldr	r3, [pc, #100]	; (800fde0 <prvSwitchTimerLists+0xc0>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	3304      	adds	r3, #4
 800fd82:	4619      	mov	r1, r3
 800fd84:	4610      	mov	r0, r2
 800fd86:	f7fe f818 	bl	800ddba <vListInsert>
 800fd8a:	e016      	b.n	800fdba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2300      	movs	r3, #0
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	2100      	movs	r1, #0
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	f7ff fd60 	bl	800f85c <xTimerGenericCommand>
 800fd9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d10a      	bne.n	800fdba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	603b      	str	r3, [r7, #0]
}
 800fdb6:	bf00      	nop
 800fdb8:	e7fe      	b.n	800fdb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdba:	4b09      	ldr	r3, [pc, #36]	; (800fde0 <prvSwitchTimerLists+0xc0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1b1      	bne.n	800fd28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fdc4:	4b06      	ldr	r3, [pc, #24]	; (800fde0 <prvSwitchTimerLists+0xc0>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fdca:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <prvSwitchTimerLists+0xc4>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a04      	ldr	r2, [pc, #16]	; (800fde0 <prvSwitchTimerLists+0xc0>)
 800fdd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fdd2:	4a04      	ldr	r2, [pc, #16]	; (800fde4 <prvSwitchTimerLists+0xc4>)
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	6013      	str	r3, [r2, #0]
}
 800fdd8:	bf00      	nop
 800fdda:	3718      	adds	r7, #24
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	20001084 	.word	0x20001084
 800fde4:	20001088 	.word	0x20001088

0800fde8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fdee:	f000 f969 	bl	80100c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fdf2:	4b15      	ldr	r3, [pc, #84]	; (800fe48 <prvCheckForValidListAndQueue+0x60>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d120      	bne.n	800fe3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fdfa:	4814      	ldr	r0, [pc, #80]	; (800fe4c <prvCheckForValidListAndQueue+0x64>)
 800fdfc:	f7fd ff8c 	bl	800dd18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fe00:	4813      	ldr	r0, [pc, #76]	; (800fe50 <prvCheckForValidListAndQueue+0x68>)
 800fe02:	f7fd ff89 	bl	800dd18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fe06:	4b13      	ldr	r3, [pc, #76]	; (800fe54 <prvCheckForValidListAndQueue+0x6c>)
 800fe08:	4a10      	ldr	r2, [pc, #64]	; (800fe4c <prvCheckForValidListAndQueue+0x64>)
 800fe0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fe0c:	4b12      	ldr	r3, [pc, #72]	; (800fe58 <prvCheckForValidListAndQueue+0x70>)
 800fe0e:	4a10      	ldr	r2, [pc, #64]	; (800fe50 <prvCheckForValidListAndQueue+0x68>)
 800fe10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fe12:	2300      	movs	r3, #0
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	4b11      	ldr	r3, [pc, #68]	; (800fe5c <prvCheckForValidListAndQueue+0x74>)
 800fe18:	4a11      	ldr	r2, [pc, #68]	; (800fe60 <prvCheckForValidListAndQueue+0x78>)
 800fe1a:	2110      	movs	r1, #16
 800fe1c:	200a      	movs	r0, #10
 800fe1e:	f7fe f897 	bl	800df50 <xQueueGenericCreateStatic>
 800fe22:	4603      	mov	r3, r0
 800fe24:	4a08      	ldr	r2, [pc, #32]	; (800fe48 <prvCheckForValidListAndQueue+0x60>)
 800fe26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe28:	4b07      	ldr	r3, [pc, #28]	; (800fe48 <prvCheckForValidListAndQueue+0x60>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d005      	beq.n	800fe3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe30:	4b05      	ldr	r3, [pc, #20]	; (800fe48 <prvCheckForValidListAndQueue+0x60>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	490b      	ldr	r1, [pc, #44]	; (800fe64 <prvCheckForValidListAndQueue+0x7c>)
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fe fd6c 	bl	800e914 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe3c:	f000 f972 	bl	8010124 <vPortExitCritical>
}
 800fe40:	bf00      	nop
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	2000108c 	.word	0x2000108c
 800fe4c:	2000105c 	.word	0x2000105c
 800fe50:	20001070 	.word	0x20001070
 800fe54:	20001084 	.word	0x20001084
 800fe58:	20001088 	.word	0x20001088
 800fe5c:	20001138 	.word	0x20001138
 800fe60:	20001098 	.word	0x20001098
 800fe64:	08011fd8 	.word	0x08011fd8

0800fe68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	3b04      	subs	r3, #4
 800fe78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	3b04      	subs	r3, #4
 800fe86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	f023 0201 	bic.w	r2, r3, #1
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	3b04      	subs	r3, #4
 800fe96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe98:	4a0c      	ldr	r2, [pc, #48]	; (800fecc <pxPortInitialiseStack+0x64>)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	3b14      	subs	r3, #20
 800fea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	3b04      	subs	r3, #4
 800feae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f06f 0202 	mvn.w	r2, #2
 800feb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	3b20      	subs	r3, #32
 800febc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800febe:	68fb      	ldr	r3, [r7, #12]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	0800fed1 	.word	0x0800fed1

0800fed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fed0:	b480      	push	{r7}
 800fed2:	b085      	sub	sp, #20
 800fed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fed6:	2300      	movs	r3, #0
 800fed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800feda:	4b12      	ldr	r3, [pc, #72]	; (800ff24 <prvTaskExitError+0x54>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee2:	d00a      	beq.n	800fefa <prvTaskExitError+0x2a>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	60fb      	str	r3, [r7, #12]
}
 800fef6:	bf00      	nop
 800fef8:	e7fe      	b.n	800fef8 <prvTaskExitError+0x28>
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	60bb      	str	r3, [r7, #8]
}
 800ff0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ff0e:	bf00      	nop
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d0fc      	beq.n	800ff10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ff16:	bf00      	nop
 800ff18:	bf00      	nop
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	2000002c 	.word	0x2000002c
	...

0800ff30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff30:	4b07      	ldr	r3, [pc, #28]	; (800ff50 <pxCurrentTCBConst2>)
 800ff32:	6819      	ldr	r1, [r3, #0]
 800ff34:	6808      	ldr	r0, [r1, #0]
 800ff36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3a:	f380 8809 	msr	PSP, r0
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f04f 0000 	mov.w	r0, #0
 800ff46:	f380 8811 	msr	BASEPRI, r0
 800ff4a:	4770      	bx	lr
 800ff4c:	f3af 8000 	nop.w

0800ff50 <pxCurrentTCBConst2>:
 800ff50:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff54:	bf00      	nop
 800ff56:	bf00      	nop

0800ff58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff58:	4808      	ldr	r0, [pc, #32]	; (800ff7c <prvPortStartFirstTask+0x24>)
 800ff5a:	6800      	ldr	r0, [r0, #0]
 800ff5c:	6800      	ldr	r0, [r0, #0]
 800ff5e:	f380 8808 	msr	MSP, r0
 800ff62:	f04f 0000 	mov.w	r0, #0
 800ff66:	f380 8814 	msr	CONTROL, r0
 800ff6a:	b662      	cpsie	i
 800ff6c:	b661      	cpsie	f
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	df00      	svc	0
 800ff78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff7a:	bf00      	nop
 800ff7c:	e000ed08 	.word	0xe000ed08

0800ff80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ff86:	4b46      	ldr	r3, [pc, #280]	; (80100a0 <xPortStartScheduler+0x120>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a46      	ldr	r2, [pc, #280]	; (80100a4 <xPortStartScheduler+0x124>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d10a      	bne.n	800ffa6 <xPortStartScheduler+0x26>
	__asm volatile
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	613b      	str	r3, [r7, #16]
}
 800ffa2:	bf00      	nop
 800ffa4:	e7fe      	b.n	800ffa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ffa6:	4b3e      	ldr	r3, [pc, #248]	; (80100a0 <xPortStartScheduler+0x120>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a3f      	ldr	r2, [pc, #252]	; (80100a8 <xPortStartScheduler+0x128>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d10a      	bne.n	800ffc6 <xPortStartScheduler+0x46>
	__asm volatile
 800ffb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb4:	f383 8811 	msr	BASEPRI, r3
 800ffb8:	f3bf 8f6f 	isb	sy
 800ffbc:	f3bf 8f4f 	dsb	sy
 800ffc0:	60fb      	str	r3, [r7, #12]
}
 800ffc2:	bf00      	nop
 800ffc4:	e7fe      	b.n	800ffc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ffc6:	4b39      	ldr	r3, [pc, #228]	; (80100ac <xPortStartScheduler+0x12c>)
 800ffc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	22ff      	movs	r2, #255	; 0xff
 800ffd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	4b31      	ldr	r3, [pc, #196]	; (80100b0 <xPortStartScheduler+0x130>)
 800ffec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ffee:	4b31      	ldr	r3, [pc, #196]	; (80100b4 <xPortStartScheduler+0x134>)
 800fff0:	2207      	movs	r2, #7
 800fff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fff4:	e009      	b.n	801000a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fff6:	4b2f      	ldr	r3, [pc, #188]	; (80100b4 <xPortStartScheduler+0x134>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3b01      	subs	r3, #1
 800fffc:	4a2d      	ldr	r2, [pc, #180]	; (80100b4 <xPortStartScheduler+0x134>)
 800fffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	b2db      	uxtb	r3, r3
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	b2db      	uxtb	r3, r3
 8010008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801000a:	78fb      	ldrb	r3, [r7, #3]
 801000c:	b2db      	uxtb	r3, r3
 801000e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010012:	2b80      	cmp	r3, #128	; 0x80
 8010014:	d0ef      	beq.n	800fff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010016:	4b27      	ldr	r3, [pc, #156]	; (80100b4 <xPortStartScheduler+0x134>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f1c3 0307 	rsb	r3, r3, #7
 801001e:	2b04      	cmp	r3, #4
 8010020:	d00a      	beq.n	8010038 <xPortStartScheduler+0xb8>
	__asm volatile
 8010022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	60bb      	str	r3, [r7, #8]
}
 8010034:	bf00      	nop
 8010036:	e7fe      	b.n	8010036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010038:	4b1e      	ldr	r3, [pc, #120]	; (80100b4 <xPortStartScheduler+0x134>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	021b      	lsls	r3, r3, #8
 801003e:	4a1d      	ldr	r2, [pc, #116]	; (80100b4 <xPortStartScheduler+0x134>)
 8010040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010042:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <xPortStartScheduler+0x134>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801004a:	4a1a      	ldr	r2, [pc, #104]	; (80100b4 <xPortStartScheduler+0x134>)
 801004c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	b2da      	uxtb	r2, r3
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010056:	4b18      	ldr	r3, [pc, #96]	; (80100b8 <xPortStartScheduler+0x138>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a17      	ldr	r2, [pc, #92]	; (80100b8 <xPortStartScheduler+0x138>)
 801005c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010062:	4b15      	ldr	r3, [pc, #84]	; (80100b8 <xPortStartScheduler+0x138>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4a14      	ldr	r2, [pc, #80]	; (80100b8 <xPortStartScheduler+0x138>)
 8010068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801006c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801006e:	f000 f8dd 	bl	801022c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010072:	4b12      	ldr	r3, [pc, #72]	; (80100bc <xPortStartScheduler+0x13c>)
 8010074:	2200      	movs	r2, #0
 8010076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010078:	f000 f8fc 	bl	8010274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801007c:	4b10      	ldr	r3, [pc, #64]	; (80100c0 <xPortStartScheduler+0x140>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a0f      	ldr	r2, [pc, #60]	; (80100c0 <xPortStartScheduler+0x140>)
 8010082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010088:	f7ff ff66 	bl	800ff58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801008c:	f7ff f852 	bl	800f134 <vTaskSwitchContext>
	prvTaskExitError();
 8010090:	f7ff ff1e 	bl	800fed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3718      	adds	r7, #24
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	e000ed00 	.word	0xe000ed00
 80100a4:	410fc271 	.word	0x410fc271
 80100a8:	410fc270 	.word	0x410fc270
 80100ac:	e000e400 	.word	0xe000e400
 80100b0:	20001188 	.word	0x20001188
 80100b4:	2000118c 	.word	0x2000118c
 80100b8:	e000ed20 	.word	0xe000ed20
 80100bc:	2000002c 	.word	0x2000002c
 80100c0:	e000ef34 	.word	0xe000ef34

080100c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
	__asm volatile
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	607b      	str	r3, [r7, #4]
}
 80100dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100de:	4b0f      	ldr	r3, [pc, #60]	; (801011c <vPortEnterCritical+0x58>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3301      	adds	r3, #1
 80100e4:	4a0d      	ldr	r2, [pc, #52]	; (801011c <vPortEnterCritical+0x58>)
 80100e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80100e8:	4b0c      	ldr	r3, [pc, #48]	; (801011c <vPortEnterCritical+0x58>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d10f      	bne.n	8010110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80100f0:	4b0b      	ldr	r3, [pc, #44]	; (8010120 <vPortEnterCritical+0x5c>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00a      	beq.n	8010110 <vPortEnterCritical+0x4c>
	__asm volatile
 80100fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	603b      	str	r3, [r7, #0]
}
 801010c:	bf00      	nop
 801010e:	e7fe      	b.n	801010e <vPortEnterCritical+0x4a>
	}
}
 8010110:	bf00      	nop
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	2000002c 	.word	0x2000002c
 8010120:	e000ed04 	.word	0xe000ed04

08010124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801012a:	4b12      	ldr	r3, [pc, #72]	; (8010174 <vPortExitCritical+0x50>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d10a      	bne.n	8010148 <vPortExitCritical+0x24>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	607b      	str	r3, [r7, #4]
}
 8010144:	bf00      	nop
 8010146:	e7fe      	b.n	8010146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010148:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <vPortExitCritical+0x50>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	3b01      	subs	r3, #1
 801014e:	4a09      	ldr	r2, [pc, #36]	; (8010174 <vPortExitCritical+0x50>)
 8010150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010152:	4b08      	ldr	r3, [pc, #32]	; (8010174 <vPortExitCritical+0x50>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d105      	bne.n	8010166 <vPortExitCritical+0x42>
 801015a:	2300      	movs	r3, #0
 801015c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	f383 8811 	msr	BASEPRI, r3
}
 8010164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010166:	bf00      	nop
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	2000002c 	.word	0x2000002c
	...

08010180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010180:	f3ef 8009 	mrs	r0, PSP
 8010184:	f3bf 8f6f 	isb	sy
 8010188:	4b15      	ldr	r3, [pc, #84]	; (80101e0 <pxCurrentTCBConst>)
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	f01e 0f10 	tst.w	lr, #16
 8010190:	bf08      	it	eq
 8010192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019a:	6010      	str	r0, [r2, #0]
 801019c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80101a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80101a4:	f380 8811 	msr	BASEPRI, r0
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	f3bf 8f6f 	isb	sy
 80101b0:	f7fe ffc0 	bl	800f134 <vTaskSwitchContext>
 80101b4:	f04f 0000 	mov.w	r0, #0
 80101b8:	f380 8811 	msr	BASEPRI, r0
 80101bc:	bc09      	pop	{r0, r3}
 80101be:	6819      	ldr	r1, [r3, #0]
 80101c0:	6808      	ldr	r0, [r1, #0]
 80101c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c6:	f01e 0f10 	tst.w	lr, #16
 80101ca:	bf08      	it	eq
 80101cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80101d0:	f380 8809 	msr	PSP, r0
 80101d4:	f3bf 8f6f 	isb	sy
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop
 80101dc:	f3af 8000 	nop.w

080101e0 <pxCurrentTCBConst>:
 80101e0:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop

080101e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
	__asm volatile
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	607b      	str	r3, [r7, #4]
}
 8010200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010202:	f7fe fedd 	bl	800efc0 <xTaskIncrementTick>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d003      	beq.n	8010214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801020c:	4b06      	ldr	r3, [pc, #24]	; (8010228 <SysTick_Handler+0x40>)
 801020e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010212:	601a      	str	r2, [r3, #0]
 8010214:	2300      	movs	r3, #0
 8010216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	f383 8811 	msr	BASEPRI, r3
}
 801021e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010220:	bf00      	nop
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	e000ed04 	.word	0xe000ed04

0801022c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801022c:	b480      	push	{r7}
 801022e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010230:	4b0b      	ldr	r3, [pc, #44]	; (8010260 <vPortSetupTimerInterrupt+0x34>)
 8010232:	2200      	movs	r2, #0
 8010234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010236:	4b0b      	ldr	r3, [pc, #44]	; (8010264 <vPortSetupTimerInterrupt+0x38>)
 8010238:	2200      	movs	r2, #0
 801023a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801023c:	4b0a      	ldr	r3, [pc, #40]	; (8010268 <vPortSetupTimerInterrupt+0x3c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a0a      	ldr	r2, [pc, #40]	; (801026c <vPortSetupTimerInterrupt+0x40>)
 8010242:	fba2 2303 	umull	r2, r3, r2, r3
 8010246:	099b      	lsrs	r3, r3, #6
 8010248:	4a09      	ldr	r2, [pc, #36]	; (8010270 <vPortSetupTimerInterrupt+0x44>)
 801024a:	3b01      	subs	r3, #1
 801024c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801024e:	4b04      	ldr	r3, [pc, #16]	; (8010260 <vPortSetupTimerInterrupt+0x34>)
 8010250:	2207      	movs	r2, #7
 8010252:	601a      	str	r2, [r3, #0]
}
 8010254:	bf00      	nop
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	e000e010 	.word	0xe000e010
 8010264:	e000e018 	.word	0xe000e018
 8010268:	20000000 	.word	0x20000000
 801026c:	10624dd3 	.word	0x10624dd3
 8010270:	e000e014 	.word	0xe000e014

08010274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010284 <vPortEnableVFP+0x10>
 8010278:	6801      	ldr	r1, [r0, #0]
 801027a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801027e:	6001      	str	r1, [r0, #0]
 8010280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010282:	bf00      	nop
 8010284:	e000ed88 	.word	0xe000ed88

08010288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010288:	b480      	push	{r7}
 801028a:	b085      	sub	sp, #20
 801028c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801028e:	f3ef 8305 	mrs	r3, IPSR
 8010292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2b0f      	cmp	r3, #15
 8010298:	d914      	bls.n	80102c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801029a:	4a17      	ldr	r2, [pc, #92]	; (80102f8 <vPortValidateInterruptPriority+0x70>)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	4413      	add	r3, r2
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80102a4:	4b15      	ldr	r3, [pc, #84]	; (80102fc <vPortValidateInterruptPriority+0x74>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	7afa      	ldrb	r2, [r7, #11]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d20a      	bcs.n	80102c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	607b      	str	r3, [r7, #4]
}
 80102c0:	bf00      	nop
 80102c2:	e7fe      	b.n	80102c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80102c4:	4b0e      	ldr	r3, [pc, #56]	; (8010300 <vPortValidateInterruptPriority+0x78>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80102cc:	4b0d      	ldr	r3, [pc, #52]	; (8010304 <vPortValidateInterruptPriority+0x7c>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d90a      	bls.n	80102ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80102d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	603b      	str	r3, [r7, #0]
}
 80102e6:	bf00      	nop
 80102e8:	e7fe      	b.n	80102e8 <vPortValidateInterruptPriority+0x60>
	}
 80102ea:	bf00      	nop
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	e000e3f0 	.word	0xe000e3f0
 80102fc:	20001188 	.word	0x20001188
 8010300:	e000ed0c 	.word	0xe000ed0c
 8010304:	2000118c 	.word	0x2000118c

08010308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b08a      	sub	sp, #40	; 0x28
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010310:	2300      	movs	r3, #0
 8010312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010314:	f7fe fd98 	bl	800ee48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010318:	4b58      	ldr	r3, [pc, #352]	; (801047c <pvPortMalloc+0x174>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d101      	bne.n	8010324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010320:	f000 f910 	bl	8010544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010324:	4b56      	ldr	r3, [pc, #344]	; (8010480 <pvPortMalloc+0x178>)
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4013      	ands	r3, r2
 801032c:	2b00      	cmp	r3, #0
 801032e:	f040 808e 	bne.w	801044e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d01d      	beq.n	8010374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010338:	2208      	movs	r2, #8
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4413      	add	r3, r2
 801033e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f003 0307 	and.w	r3, r3, #7
 8010346:	2b00      	cmp	r3, #0
 8010348:	d014      	beq.n	8010374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f023 0307 	bic.w	r3, r3, #7
 8010350:	3308      	adds	r3, #8
 8010352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f003 0307 	and.w	r3, r3, #7
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00a      	beq.n	8010374 <pvPortMalloc+0x6c>
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	617b      	str	r3, [r7, #20]
}
 8010370:	bf00      	nop
 8010372:	e7fe      	b.n	8010372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d069      	beq.n	801044e <pvPortMalloc+0x146>
 801037a:	4b42      	ldr	r3, [pc, #264]	; (8010484 <pvPortMalloc+0x17c>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	429a      	cmp	r2, r3
 8010382:	d864      	bhi.n	801044e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010384:	4b40      	ldr	r3, [pc, #256]	; (8010488 <pvPortMalloc+0x180>)
 8010386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010388:	4b3f      	ldr	r3, [pc, #252]	; (8010488 <pvPortMalloc+0x180>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801038e:	e004      	b.n	801039a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d903      	bls.n	80103ac <pvPortMalloc+0xa4>
 80103a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1f1      	bne.n	8010390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80103ac:	4b33      	ldr	r3, [pc, #204]	; (801047c <pvPortMalloc+0x174>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d04b      	beq.n	801044e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2208      	movs	r2, #8
 80103bc:	4413      	add	r3, r2
 80103be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	6a3b      	ldr	r3, [r7, #32]
 80103c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	685a      	ldr	r2, [r3, #4]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	1ad2      	subs	r2, r2, r3
 80103d0:	2308      	movs	r3, #8
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d91f      	bls.n	8010418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80103d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <pvPortMalloc+0xf8>
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	613b      	str	r3, [r7, #16]
}
 80103fc:	bf00      	nop
 80103fe:	e7fe      	b.n	80103fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	685a      	ldr	r2, [r3, #4]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	1ad2      	subs	r2, r2, r3
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010412:	69b8      	ldr	r0, [r7, #24]
 8010414:	f000 f8f8 	bl	8010608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010418:	4b1a      	ldr	r3, [pc, #104]	; (8010484 <pvPortMalloc+0x17c>)
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	4a18      	ldr	r2, [pc, #96]	; (8010484 <pvPortMalloc+0x17c>)
 8010424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010426:	4b17      	ldr	r3, [pc, #92]	; (8010484 <pvPortMalloc+0x17c>)
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	4b18      	ldr	r3, [pc, #96]	; (801048c <pvPortMalloc+0x184>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	429a      	cmp	r2, r3
 8010430:	d203      	bcs.n	801043a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010432:	4b14      	ldr	r3, [pc, #80]	; (8010484 <pvPortMalloc+0x17c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a15      	ldr	r2, [pc, #84]	; (801048c <pvPortMalloc+0x184>)
 8010438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	4b10      	ldr	r3, [pc, #64]	; (8010480 <pvPortMalloc+0x178>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	431a      	orrs	r2, r3
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	2200      	movs	r2, #0
 801044c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801044e:	f7fe fd09 	bl	800ee64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	f003 0307 	and.w	r3, r3, #7
 8010458:	2b00      	cmp	r3, #0
 801045a:	d00a      	beq.n	8010472 <pvPortMalloc+0x16a>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	60fb      	str	r3, [r7, #12]
}
 801046e:	bf00      	nop
 8010470:	e7fe      	b.n	8010470 <pvPortMalloc+0x168>
	return pvReturn;
 8010472:	69fb      	ldr	r3, [r7, #28]
}
 8010474:	4618      	mov	r0, r3
 8010476:	3728      	adds	r7, #40	; 0x28
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	20004d98 	.word	0x20004d98
 8010480:	20004da4 	.word	0x20004da4
 8010484:	20004d9c 	.word	0x20004d9c
 8010488:	20004d90 	.word	0x20004d90
 801048c:	20004da0 	.word	0x20004da0

08010490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d048      	beq.n	8010534 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80104a2:	2308      	movs	r3, #8
 80104a4:	425b      	negs	r3, r3
 80104a6:	697a      	ldr	r2, [r7, #20]
 80104a8:	4413      	add	r3, r2
 80104aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	4b21      	ldr	r3, [pc, #132]	; (801053c <vPortFree+0xac>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4013      	ands	r3, r2
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10a      	bne.n	80104d4 <vPortFree+0x44>
	__asm volatile
 80104be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	60fb      	str	r3, [r7, #12]
}
 80104d0:	bf00      	nop
 80104d2:	e7fe      	b.n	80104d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00a      	beq.n	80104f2 <vPortFree+0x62>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	f383 8811 	msr	BASEPRI, r3
 80104e4:	f3bf 8f6f 	isb	sy
 80104e8:	f3bf 8f4f 	dsb	sy
 80104ec:	60bb      	str	r3, [r7, #8]
}
 80104ee:	bf00      	nop
 80104f0:	e7fe      	b.n	80104f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	4b11      	ldr	r3, [pc, #68]	; (801053c <vPortFree+0xac>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4013      	ands	r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d019      	beq.n	8010534 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d115      	bne.n	8010534 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	685a      	ldr	r2, [r3, #4]
 801050c:	4b0b      	ldr	r3, [pc, #44]	; (801053c <vPortFree+0xac>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	43db      	mvns	r3, r3
 8010512:	401a      	ands	r2, r3
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010518:	f7fe fc96 	bl	800ee48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	685a      	ldr	r2, [r3, #4]
 8010520:	4b07      	ldr	r3, [pc, #28]	; (8010540 <vPortFree+0xb0>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4413      	add	r3, r2
 8010526:	4a06      	ldr	r2, [pc, #24]	; (8010540 <vPortFree+0xb0>)
 8010528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801052a:	6938      	ldr	r0, [r7, #16]
 801052c:	f000 f86c 	bl	8010608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010530:	f7fe fc98 	bl	800ee64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010534:	bf00      	nop
 8010536:	3718      	adds	r7, #24
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	20004da4 	.word	0x20004da4
 8010540:	20004d9c 	.word	0x20004d9c

08010544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801054a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801054e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010550:	4b27      	ldr	r3, [pc, #156]	; (80105f0 <prvHeapInit+0xac>)
 8010552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f003 0307 	and.w	r3, r3, #7
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00c      	beq.n	8010578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3307      	adds	r3, #7
 8010562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0307 	bic.w	r3, r3, #7
 801056a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	4a1f      	ldr	r2, [pc, #124]	; (80105f0 <prvHeapInit+0xac>)
 8010574:	4413      	add	r3, r2
 8010576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801057c:	4a1d      	ldr	r2, [pc, #116]	; (80105f4 <prvHeapInit+0xb0>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010582:	4b1c      	ldr	r3, [pc, #112]	; (80105f4 <prvHeapInit+0xb0>)
 8010584:	2200      	movs	r2, #0
 8010586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	4413      	add	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010590:	2208      	movs	r2, #8
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f023 0307 	bic.w	r3, r3, #7
 801059e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4a15      	ldr	r2, [pc, #84]	; (80105f8 <prvHeapInit+0xb4>)
 80105a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80105a6:	4b14      	ldr	r3, [pc, #80]	; (80105f8 <prvHeapInit+0xb4>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105ae:	4b12      	ldr	r3, [pc, #72]	; (80105f8 <prvHeapInit+0xb4>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80105c4:	4b0c      	ldr	r3, [pc, #48]	; (80105f8 <prvHeapInit+0xb4>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4a0a      	ldr	r2, [pc, #40]	; (80105fc <prvHeapInit+0xb8>)
 80105d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	4a09      	ldr	r2, [pc, #36]	; (8010600 <prvHeapInit+0xbc>)
 80105da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80105dc:	4b09      	ldr	r3, [pc, #36]	; (8010604 <prvHeapInit+0xc0>)
 80105de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80105e2:	601a      	str	r2, [r3, #0]
}
 80105e4:	bf00      	nop
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	20001190 	.word	0x20001190
 80105f4:	20004d90 	.word	0x20004d90
 80105f8:	20004d98 	.word	0x20004d98
 80105fc:	20004da0 	.word	0x20004da0
 8010600:	20004d9c 	.word	0x20004d9c
 8010604:	20004da4 	.word	0x20004da4

08010608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010610:	4b28      	ldr	r3, [pc, #160]	; (80106b4 <prvInsertBlockIntoFreeList+0xac>)
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e002      	b.n	801061c <prvInsertBlockIntoFreeList+0x14>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	60fb      	str	r3, [r7, #12]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d8f7      	bhi.n	8010616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	4413      	add	r3, r2
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	429a      	cmp	r2, r3
 8010636:	d108      	bne.n	801064a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	441a      	add	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	441a      	add	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	429a      	cmp	r2, r3
 801065c:	d118      	bne.n	8010690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d00d      	beq.n	8010686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	441a      	add	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	e008      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010686:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	e003      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	429a      	cmp	r2, r3
 801069e:	d002      	beq.n	80106a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20004d90 	.word	0x20004d90
 80106b8:	20004d98 	.word	0x20004d98

080106bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80106c0:	2201      	movs	r2, #1
 80106c2:	490e      	ldr	r1, [pc, #56]	; (80106fc <MX_USB_HOST_Init+0x40>)
 80106c4:	480e      	ldr	r0, [pc, #56]	; (8010700 <MX_USB_HOST_Init+0x44>)
 80106c6:	f7fb fab9 	bl	800bc3c <USBH_Init>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80106d0:	f7f1 fc78 	bl	8001fc4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80106d4:	490b      	ldr	r1, [pc, #44]	; (8010704 <MX_USB_HOST_Init+0x48>)
 80106d6:	480a      	ldr	r0, [pc, #40]	; (8010700 <MX_USB_HOST_Init+0x44>)
 80106d8:	f7fb fb60 	bl	800bd9c <USBH_RegisterClass>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80106e2:	f7f1 fc6f 	bl	8001fc4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80106e6:	4806      	ldr	r0, [pc, #24]	; (8010700 <MX_USB_HOST_Init+0x44>)
 80106e8:	f7fb fbe4 	bl	800beb4 <USBH_Start>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80106f2:	f7f1 fc67 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80106f6:	bf00      	nop
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	08010709 	.word	0x08010709
 8010700:	20004e60 	.word	0x20004e60
 8010704:	2000000c 	.word	0x2000000c

08010708 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	460b      	mov	r3, r1
 8010712:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010714:	78fb      	ldrb	r3, [r7, #3]
 8010716:	3b01      	subs	r3, #1
 8010718:	2b04      	cmp	r3, #4
 801071a:	d819      	bhi.n	8010750 <USBH_UserProcess+0x48>
 801071c:	a201      	add	r2, pc, #4	; (adr r2, 8010724 <USBH_UserProcess+0x1c>)
 801071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010722:	bf00      	nop
 8010724:	08010751 	.word	0x08010751
 8010728:	08010741 	.word	0x08010741
 801072c:	08010751 	.word	0x08010751
 8010730:	08010749 	.word	0x08010749
 8010734:	08010739 	.word	0x08010739
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010738:	4b09      	ldr	r3, [pc, #36]	; (8010760 <USBH_UserProcess+0x58>)
 801073a:	2203      	movs	r2, #3
 801073c:	701a      	strb	r2, [r3, #0]
  break;
 801073e:	e008      	b.n	8010752 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010740:	4b07      	ldr	r3, [pc, #28]	; (8010760 <USBH_UserProcess+0x58>)
 8010742:	2202      	movs	r2, #2
 8010744:	701a      	strb	r2, [r3, #0]
  break;
 8010746:	e004      	b.n	8010752 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010748:	4b05      	ldr	r3, [pc, #20]	; (8010760 <USBH_UserProcess+0x58>)
 801074a:	2201      	movs	r2, #1
 801074c:	701a      	strb	r2, [r3, #0]
  break;
 801074e:	e000      	b.n	8010752 <USBH_UserProcess+0x4a>

  default:
  break;
 8010750:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010752:	bf00      	nop
 8010754:	370c      	adds	r7, #12
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	20004da8 	.word	0x20004da8

08010764 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b08a      	sub	sp, #40	; 0x28
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801076c:	f107 0314 	add.w	r3, r7, #20
 8010770:	2200      	movs	r2, #0
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	605a      	str	r2, [r3, #4]
 8010776:	609a      	str	r2, [r3, #8]
 8010778:	60da      	str	r2, [r3, #12]
 801077a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010784:	d147      	bne.n	8010816 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010786:	2300      	movs	r3, #0
 8010788:	613b      	str	r3, [r7, #16]
 801078a:	4b25      	ldr	r3, [pc, #148]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 801078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801078e:	4a24      	ldr	r2, [pc, #144]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 8010790:	f043 0301 	orr.w	r3, r3, #1
 8010794:	6313      	str	r3, [r2, #48]	; 0x30
 8010796:	4b22      	ldr	r3, [pc, #136]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 8010798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801079a:	f003 0301 	and.w	r3, r3, #1
 801079e:	613b      	str	r3, [r7, #16]
 80107a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80107a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80107a8:	2300      	movs	r3, #0
 80107aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107ac:	2300      	movs	r3, #0
 80107ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80107b0:	f107 0314 	add.w	r3, r7, #20
 80107b4:	4619      	mov	r1, r3
 80107b6:	481b      	ldr	r0, [pc, #108]	; (8010824 <HAL_HCD_MspInit+0xc0>)
 80107b8:	f7f3 fecc 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80107bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80107c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107c2:	2302      	movs	r3, #2
 80107c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107c6:	2300      	movs	r3, #0
 80107c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107ca:	2303      	movs	r3, #3
 80107cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80107ce:	230a      	movs	r3, #10
 80107d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107d2:	f107 0314 	add.w	r3, r7, #20
 80107d6:	4619      	mov	r1, r3
 80107d8:	4812      	ldr	r0, [pc, #72]	; (8010824 <HAL_HCD_MspInit+0xc0>)
 80107da:	f7f3 febb 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80107de:	4b10      	ldr	r3, [pc, #64]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 80107e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e2:	4a0f      	ldr	r2, [pc, #60]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 80107e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107e8:	6353      	str	r3, [r2, #52]	; 0x34
 80107ea:	2300      	movs	r3, #0
 80107ec:	60fb      	str	r3, [r7, #12]
 80107ee:	4b0c      	ldr	r3, [pc, #48]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 80107f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107f2:	4a0b      	ldr	r2, [pc, #44]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 80107f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80107f8:	6453      	str	r3, [r2, #68]	; 0x44
 80107fa:	4b09      	ldr	r3, [pc, #36]	; (8010820 <HAL_HCD_MspInit+0xbc>)
 80107fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010802:	60fb      	str	r3, [r7, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010806:	2200      	movs	r2, #0
 8010808:	2100      	movs	r1, #0
 801080a:	2043      	movs	r0, #67	; 0x43
 801080c:	f7f3 fb5a 	bl	8003ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010810:	2043      	movs	r0, #67	; 0x43
 8010812:	f7f3 fb73 	bl	8003efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010816:	bf00      	nop
 8010818:	3728      	adds	r7, #40	; 0x28
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
 801081e:	bf00      	nop
 8010820:	40023800 	.word	0x40023800
 8010824:	40020000 	.word	0x40020000

08010828 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010836:	4618      	mov	r0, r3
 8010838:	f7fb ffe9 	bl	800c80e <USBH_LL_IncTimer>
}
 801083c:	bf00      	nop
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010852:	4618      	mov	r0, r3
 8010854:	f7fc f82d 	bl	800c8b2 <USBH_LL_Connect>
}
 8010858:	bf00      	nop
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801086e:	4618      	mov	r0, r3
 8010870:	f7fc f842 	bl	800c8f8 <USBH_LL_Disconnect>
}
 8010874:	bf00      	nop
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	460b      	mov	r3, r1
 8010886:	70fb      	strb	r3, [r7, #3]
 8010888:	4613      	mov	r3, r2
 801088a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010892:	4618      	mov	r0, r3
 8010894:	f7fc f879 	bl	800c98a <USBH_LL_NotifyURBChange>
#endif
}
 8010898:	bf00      	nop
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fb ffd7 	bl	800c862 <USBH_LL_PortEnabled>
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fb ffe3 	bl	800c896 <USBH_LL_PortDisabled>
}
 80108d0:	bf00      	nop
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d12a      	bne.n	8010940 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80108ea:	4a18      	ldr	r2, [pc, #96]	; (801094c <USBH_LL_Init+0x74>)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4a15      	ldr	r2, [pc, #84]	; (801094c <USBH_LL_Init+0x74>)
 80108f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80108fa:	4b14      	ldr	r3, [pc, #80]	; (801094c <USBH_LL_Init+0x74>)
 80108fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010900:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8010902:	4b12      	ldr	r3, [pc, #72]	; (801094c <USBH_LL_Init+0x74>)
 8010904:	220c      	movs	r2, #12
 8010906:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010908:	4b10      	ldr	r3, [pc, #64]	; (801094c <USBH_LL_Init+0x74>)
 801090a:	2201      	movs	r2, #1
 801090c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801090e:	4b0f      	ldr	r3, [pc, #60]	; (801094c <USBH_LL_Init+0x74>)
 8010910:	2200      	movs	r2, #0
 8010912:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010914:	4b0d      	ldr	r3, [pc, #52]	; (801094c <USBH_LL_Init+0x74>)
 8010916:	2202      	movs	r2, #2
 8010918:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801091a:	4b0c      	ldr	r3, [pc, #48]	; (801094c <USBH_LL_Init+0x74>)
 801091c:	2200      	movs	r2, #0
 801091e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010920:	480a      	ldr	r0, [pc, #40]	; (801094c <USBH_LL_Init+0x74>)
 8010922:	f7f3 ffc4 	bl	80048ae <HAL_HCD_Init>
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d001      	beq.n	8010930 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801092c:	f7f1 fb4a 	bl	8001fc4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010930:	4806      	ldr	r0, [pc, #24]	; (801094c <USBH_LL_Init+0x74>)
 8010932:	f7f4 fbc7 	bl	80050c4 <HAL_HCD_GetCurrentFrame>
 8010936:	4603      	mov	r3, r0
 8010938:	4619      	mov	r1, r3
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7fb ff58 	bl	800c7f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	3708      	adds	r7, #8
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	20005244 	.word	0x20005244

08010950 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010958:	2300      	movs	r3, #0
 801095a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801095c:	2300      	movs	r3, #0
 801095e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010966:	4618      	mov	r0, r3
 8010968:	f7f4 fb34 	bl	8004fd4 <HAL_HCD_Start>
 801096c:	4603      	mov	r3, r0
 801096e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010970:	7bfb      	ldrb	r3, [r7, #15]
 8010972:	4618      	mov	r0, r3
 8010974:	f000 f95e 	bl	8010c34 <USBH_Get_USB_Status>
 8010978:	4603      	mov	r3, r0
 801097a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801097c:	7bbb      	ldrb	r3, [r7, #14]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b084      	sub	sp, #16
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010992:	2300      	movs	r3, #0
 8010994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801099c:	4618      	mov	r0, r3
 801099e:	f7f4 fb3c 	bl	800501a <HAL_HCD_Stop>
 80109a2:	4603      	mov	r3, r0
 80109a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 f943 	bl	8010c34 <USBH_Get_USB_Status>
 80109ae:	4603      	mov	r3, r0
 80109b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80109c4:	2301      	movs	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7f4 fb86 	bl	80050e0 <HAL_HCD_GetCurrentSpeed>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	d00c      	beq.n	80109f4 <USBH_LL_GetSpeed+0x38>
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d80d      	bhi.n	80109fa <USBH_LL_GetSpeed+0x3e>
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d002      	beq.n	80109e8 <USBH_LL_GetSpeed+0x2c>
 80109e2:	2b01      	cmp	r3, #1
 80109e4:	d003      	beq.n	80109ee <USBH_LL_GetSpeed+0x32>
 80109e6:	e008      	b.n	80109fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80109e8:	2300      	movs	r3, #0
 80109ea:	73fb      	strb	r3, [r7, #15]
    break;
 80109ec:	e008      	b.n	8010a00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80109ee:	2301      	movs	r3, #1
 80109f0:	73fb      	strb	r3, [r7, #15]
    break;
 80109f2:	e005      	b.n	8010a00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80109f4:	2302      	movs	r3, #2
 80109f6:	73fb      	strb	r3, [r7, #15]
    break;
 80109f8:	e002      	b.n	8010a00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80109fa:	2301      	movs	r3, #1
 80109fc:	73fb      	strb	r3, [r7, #15]
    break;
 80109fe:	bf00      	nop
  }
  return  speed;
 8010a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b084      	sub	sp, #16
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a12:	2300      	movs	r3, #0
 8010a14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a16:	2300      	movs	r3, #0
 8010a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f4 fb17 	bl	8005054 <HAL_HCD_ResetPort>
 8010a26:	4603      	mov	r3, r0
 8010a28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a2a:	7bfb      	ldrb	r3, [r7, #15]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 f901 	bl	8010c34 <USBH_Get_USB_Status>
 8010a32:	4603      	mov	r3, r0
 8010a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	460b      	mov	r3, r1
 8010a4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a52:	78fa      	ldrb	r2, [r7, #3]
 8010a54:	4611      	mov	r1, r2
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7f4 fb1f 	bl	800509a <HAL_HCD_HC_GetXferCount>
 8010a5c:	4603      	mov	r3, r0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010a66:	b590      	push	{r4, r7, lr}
 8010a68:	b089      	sub	sp, #36	; 0x24
 8010a6a:	af04      	add	r7, sp, #16
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	4608      	mov	r0, r1
 8010a70:	4611      	mov	r1, r2
 8010a72:	461a      	mov	r2, r3
 8010a74:	4603      	mov	r3, r0
 8010a76:	70fb      	strb	r3, [r7, #3]
 8010a78:	460b      	mov	r3, r1
 8010a7a:	70bb      	strb	r3, [r7, #2]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a80:	2300      	movs	r3, #0
 8010a82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a84:	2300      	movs	r3, #0
 8010a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010a8e:	787c      	ldrb	r4, [r7, #1]
 8010a90:	78ba      	ldrb	r2, [r7, #2]
 8010a92:	78f9      	ldrb	r1, [r7, #3]
 8010a94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a96:	9302      	str	r3, [sp, #8]
 8010a98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a9c:	9301      	str	r3, [sp, #4]
 8010a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	4623      	mov	r3, r4
 8010aa6:	f7f3 ff64 	bl	8004972 <HAL_HCD_HC_Init>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010aae:	7bfb      	ldrb	r3, [r7, #15]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f000 f8bf 	bl	8010c34 <USBH_Get_USB_Status>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3714      	adds	r7, #20
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd90      	pop	{r4, r7, pc}

08010ac4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	460b      	mov	r3, r1
 8010ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ade:	78fa      	ldrb	r2, [r7, #3]
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f3 ffdd 	bl	8004aa2 <HAL_HCD_HC_Halt>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 f8a0 	bl	8010c34 <USBH_Get_USB_Status>
 8010af4:	4603      	mov	r3, r0
 8010af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010b02:	b590      	push	{r4, r7, lr}
 8010b04:	b089      	sub	sp, #36	; 0x24
 8010b06:	af04      	add	r7, sp, #16
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	4608      	mov	r0, r1
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	461a      	mov	r2, r3
 8010b10:	4603      	mov	r3, r0
 8010b12:	70fb      	strb	r3, [r7, #3]
 8010b14:	460b      	mov	r3, r1
 8010b16:	70bb      	strb	r3, [r7, #2]
 8010b18:	4613      	mov	r3, r2
 8010b1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b20:	2300      	movs	r3, #0
 8010b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010b2a:	787c      	ldrb	r4, [r7, #1]
 8010b2c:	78ba      	ldrb	r2, [r7, #2]
 8010b2e:	78f9      	ldrb	r1, [r7, #3]
 8010b30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010b34:	9303      	str	r3, [sp, #12]
 8010b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b38:	9302      	str	r3, [sp, #8]
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	9301      	str	r3, [sp, #4]
 8010b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	4623      	mov	r3, r4
 8010b46:	f7f3 ffcf 	bl	8004ae8 <HAL_HCD_HC_SubmitRequest>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010b4e:	7bfb      	ldrb	r3, [r7, #15]
 8010b50:	4618      	mov	r0, r3
 8010b52:	f000 f86f 	bl	8010c34 <USBH_Get_USB_Status>
 8010b56:	4603      	mov	r3, r0
 8010b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}

08010b64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b76:	78fa      	ldrb	r2, [r7, #3]
 8010b78:	4611      	mov	r1, r2
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7f4 fa78 	bl	8005070 <HAL_HCD_HC_GetURBState>
 8010b80:	4603      	mov	r3, r0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b082      	sub	sp, #8
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010b9c:	2b01      	cmp	r3, #1
 8010b9e:	d103      	bne.n	8010ba8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010ba0:	78fb      	ldrb	r3, [r7, #3]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 f872 	bl	8010c8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010ba8:	20c8      	movs	r0, #200	; 0xc8
 8010baa:	f7f2 fe3d 	bl	8003828 <HAL_Delay>
  return USBH_OK;
 8010bae:	2300      	movs	r3, #0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	70fb      	strb	r3, [r7, #3]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010bd0:	78fa      	ldrb	r2, [r7, #3]
 8010bd2:	68f9      	ldr	r1, [r7, #12]
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	4413      	add	r3, r2
 8010bda:	00db      	lsls	r3, r3, #3
 8010bdc:	440b      	add	r3, r1
 8010bde:	333b      	adds	r3, #59	; 0x3b
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00a      	beq.n	8010bfc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010be6:	78fa      	ldrb	r2, [r7, #3]
 8010be8:	68f9      	ldr	r1, [r7, #12]
 8010bea:	4613      	mov	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	4413      	add	r3, r2
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	440b      	add	r3, r1
 8010bf4:	3350      	adds	r3, #80	; 0x50
 8010bf6:	78ba      	ldrb	r2, [r7, #2]
 8010bf8:	701a      	strb	r2, [r3, #0]
 8010bfa:	e009      	b.n	8010c10 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010bfc:	78fa      	ldrb	r2, [r7, #3]
 8010bfe:	68f9      	ldr	r1, [r7, #12]
 8010c00:	4613      	mov	r3, r2
 8010c02:	009b      	lsls	r3, r3, #2
 8010c04:	4413      	add	r3, r2
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	440b      	add	r3, r1
 8010c0a:	3351      	adds	r3, #81	; 0x51
 8010c0c:	78ba      	ldrb	r2, [r7, #2]
 8010c0e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3714      	adds	r7, #20
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr

08010c1e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b082      	sub	sp, #8
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7f2 fdfe 	bl	8003828 <HAL_Delay>
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c42:	79fb      	ldrb	r3, [r7, #7]
 8010c44:	2b03      	cmp	r3, #3
 8010c46:	d817      	bhi.n	8010c78 <USBH_Get_USB_Status+0x44>
 8010c48:	a201      	add	r2, pc, #4	; (adr r2, 8010c50 <USBH_Get_USB_Status+0x1c>)
 8010c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4e:	bf00      	nop
 8010c50:	08010c61 	.word	0x08010c61
 8010c54:	08010c67 	.word	0x08010c67
 8010c58:	08010c6d 	.word	0x08010c6d
 8010c5c:	08010c73 	.word	0x08010c73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010c60:	2300      	movs	r3, #0
 8010c62:	73fb      	strb	r3, [r7, #15]
    break;
 8010c64:	e00b      	b.n	8010c7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010c66:	2302      	movs	r3, #2
 8010c68:	73fb      	strb	r3, [r7, #15]
    break;
 8010c6a:	e008      	b.n	8010c7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c70:	e005      	b.n	8010c7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010c72:	2302      	movs	r3, #2
 8010c74:	73fb      	strb	r3, [r7, #15]
    break;
 8010c76:	e002      	b.n	8010c7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010c78:	2302      	movs	r3, #2
 8010c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c7c:	bf00      	nop
  }
  return usb_status;
 8010c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3714      	adds	r7, #20
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	4603      	mov	r3, r0
 8010c94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010c9a:	79fb      	ldrb	r3, [r7, #7]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	73fb      	strb	r3, [r7, #15]
 8010ca4:	e001      	b.n	8010caa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8010caa:	7bfb      	ldrb	r3, [r7, #15]
 8010cac:	461a      	mov	r2, r3
 8010cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010cb2:	4803      	ldr	r0, [pc, #12]	; (8010cc0 <MX_DriverVbusFS+0x34>)
 8010cb4:	f7f3 fde2 	bl	800487c <HAL_GPIO_WritePin>
}
 8010cb8:	bf00      	nop
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	40021800 	.word	0x40021800

08010cc4 <_ZdlPv>:
 8010cc4:	f001 b810 	b.w	8011ce8 <free>

08010cc8 <_Znwj>:
 8010cc8:	2801      	cmp	r0, #1
 8010cca:	bf38      	it	cc
 8010ccc:	2001      	movcc	r0, #1
 8010cce:	b510      	push	{r4, lr}
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	f001 f800 	bl	8011cd8 <malloc>
 8010cd8:	b930      	cbnz	r0, 8010ce8 <_Znwj+0x20>
 8010cda:	f000 f80d 	bl	8010cf8 <_ZSt15get_new_handlerv>
 8010cde:	b908      	cbnz	r0, 8010ce4 <_Znwj+0x1c>
 8010ce0:	f000 ffc8 	bl	8011c74 <abort>
 8010ce4:	4780      	blx	r0
 8010ce6:	e7f4      	b.n	8010cd2 <_Znwj+0xa>
 8010ce8:	bd10      	pop	{r4, pc}

08010cea <_ZSt17__throw_bad_allocv>:
 8010cea:	b508      	push	{r3, lr}
 8010cec:	f000 ffc2 	bl	8011c74 <abort>

08010cf0 <_ZSt20__throw_length_errorPKc>:
 8010cf0:	b508      	push	{r3, lr}
 8010cf2:	f000 ffbf 	bl	8011c74 <abort>
	...

08010cf8 <_ZSt15get_new_handlerv>:
 8010cf8:	4b02      	ldr	r3, [pc, #8]	; (8010d04 <_ZSt15get_new_handlerv+0xc>)
 8010cfa:	6818      	ldr	r0, [r3, #0]
 8010cfc:	f3bf 8f5b 	dmb	ish
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop
 8010d04:	20004dac 	.word	0x20004dac

08010d08 <pow>:
 8010d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d0c:	ec59 8b10 	vmov	r8, r9, d0
 8010d10:	ec57 6b11 	vmov	r6, r7, d1
 8010d14:	f000 f8a8 	bl	8010e68 <__ieee754_pow>
 8010d18:	4b4e      	ldr	r3, [pc, #312]	; (8010e54 <pow+0x14c>)
 8010d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	ec55 4b10 	vmov	r4, r5, d0
 8010d24:	d015      	beq.n	8010d52 <pow+0x4a>
 8010d26:	4632      	mov	r2, r6
 8010d28:	463b      	mov	r3, r7
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	f7ef fecd 	bl	8000acc <__aeabi_dcmpun>
 8010d32:	b970      	cbnz	r0, 8010d52 <pow+0x4a>
 8010d34:	4642      	mov	r2, r8
 8010d36:	464b      	mov	r3, r9
 8010d38:	4640      	mov	r0, r8
 8010d3a:	4649      	mov	r1, r9
 8010d3c:	f7ef fec6 	bl	8000acc <__aeabi_dcmpun>
 8010d40:	2200      	movs	r2, #0
 8010d42:	2300      	movs	r3, #0
 8010d44:	b148      	cbz	r0, 8010d5a <pow+0x52>
 8010d46:	4630      	mov	r0, r6
 8010d48:	4639      	mov	r1, r7
 8010d4a:	f7ef fe8d 	bl	8000a68 <__aeabi_dcmpeq>
 8010d4e:	2800      	cmp	r0, #0
 8010d50:	d17d      	bne.n	8010e4e <pow+0x146>
 8010d52:	ec45 4b10 	vmov	d0, r4, r5
 8010d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d5a:	4640      	mov	r0, r8
 8010d5c:	4649      	mov	r1, r9
 8010d5e:	f7ef fe83 	bl	8000a68 <__aeabi_dcmpeq>
 8010d62:	b1e0      	cbz	r0, 8010d9e <pow+0x96>
 8010d64:	2200      	movs	r2, #0
 8010d66:	2300      	movs	r3, #0
 8010d68:	4630      	mov	r0, r6
 8010d6a:	4639      	mov	r1, r7
 8010d6c:	f7ef fe7c 	bl	8000a68 <__aeabi_dcmpeq>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	d16c      	bne.n	8010e4e <pow+0x146>
 8010d74:	ec47 6b10 	vmov	d0, r6, r7
 8010d78:	f000 fe55 	bl	8011a26 <finite>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	d0e8      	beq.n	8010d52 <pow+0x4a>
 8010d80:	2200      	movs	r2, #0
 8010d82:	2300      	movs	r3, #0
 8010d84:	4630      	mov	r0, r6
 8010d86:	4639      	mov	r1, r7
 8010d88:	f7ef fe78 	bl	8000a7c <__aeabi_dcmplt>
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	d0e0      	beq.n	8010d52 <pow+0x4a>
 8010d90:	f000 ff78 	bl	8011c84 <__errno>
 8010d94:	2321      	movs	r3, #33	; 0x21
 8010d96:	6003      	str	r3, [r0, #0]
 8010d98:	2400      	movs	r4, #0
 8010d9a:	4d2f      	ldr	r5, [pc, #188]	; (8010e58 <pow+0x150>)
 8010d9c:	e7d9      	b.n	8010d52 <pow+0x4a>
 8010d9e:	ec45 4b10 	vmov	d0, r4, r5
 8010da2:	f000 fe40 	bl	8011a26 <finite>
 8010da6:	bbb8      	cbnz	r0, 8010e18 <pow+0x110>
 8010da8:	ec49 8b10 	vmov	d0, r8, r9
 8010dac:	f000 fe3b 	bl	8011a26 <finite>
 8010db0:	b390      	cbz	r0, 8010e18 <pow+0x110>
 8010db2:	ec47 6b10 	vmov	d0, r6, r7
 8010db6:	f000 fe36 	bl	8011a26 <finite>
 8010dba:	b368      	cbz	r0, 8010e18 <pow+0x110>
 8010dbc:	4622      	mov	r2, r4
 8010dbe:	462b      	mov	r3, r5
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	f7ef fe82 	bl	8000acc <__aeabi_dcmpun>
 8010dc8:	b160      	cbz	r0, 8010de4 <pow+0xdc>
 8010dca:	f000 ff5b 	bl	8011c84 <__errno>
 8010dce:	2321      	movs	r3, #33	; 0x21
 8010dd0:	6003      	str	r3, [r0, #0]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	4610      	mov	r0, r2
 8010dd8:	4619      	mov	r1, r3
 8010dda:	f7ef fd07 	bl	80007ec <__aeabi_ddiv>
 8010dde:	4604      	mov	r4, r0
 8010de0:	460d      	mov	r5, r1
 8010de2:	e7b6      	b.n	8010d52 <pow+0x4a>
 8010de4:	f000 ff4e 	bl	8011c84 <__errno>
 8010de8:	2322      	movs	r3, #34	; 0x22
 8010dea:	6003      	str	r3, [r0, #0]
 8010dec:	2200      	movs	r2, #0
 8010dee:	2300      	movs	r3, #0
 8010df0:	4640      	mov	r0, r8
 8010df2:	4649      	mov	r1, r9
 8010df4:	f7ef fe42 	bl	8000a7c <__aeabi_dcmplt>
 8010df8:	2400      	movs	r4, #0
 8010dfa:	b158      	cbz	r0, 8010e14 <pow+0x10c>
 8010dfc:	ec47 6b10 	vmov	d0, r6, r7
 8010e00:	f000 fe26 	bl	8011a50 <rint>
 8010e04:	4632      	mov	r2, r6
 8010e06:	ec51 0b10 	vmov	r0, r1, d0
 8010e0a:	463b      	mov	r3, r7
 8010e0c:	f7ef fe2c 	bl	8000a68 <__aeabi_dcmpeq>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d0c2      	beq.n	8010d9a <pow+0x92>
 8010e14:	4d11      	ldr	r5, [pc, #68]	; (8010e5c <pow+0x154>)
 8010e16:	e79c      	b.n	8010d52 <pow+0x4a>
 8010e18:	2200      	movs	r2, #0
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	4629      	mov	r1, r5
 8010e20:	f7ef fe22 	bl	8000a68 <__aeabi_dcmpeq>
 8010e24:	2800      	cmp	r0, #0
 8010e26:	d094      	beq.n	8010d52 <pow+0x4a>
 8010e28:	ec49 8b10 	vmov	d0, r8, r9
 8010e2c:	f000 fdfb 	bl	8011a26 <finite>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d08e      	beq.n	8010d52 <pow+0x4a>
 8010e34:	ec47 6b10 	vmov	d0, r6, r7
 8010e38:	f000 fdf5 	bl	8011a26 <finite>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d088      	beq.n	8010d52 <pow+0x4a>
 8010e40:	f000 ff20 	bl	8011c84 <__errno>
 8010e44:	2322      	movs	r3, #34	; 0x22
 8010e46:	6003      	str	r3, [r0, #0]
 8010e48:	2400      	movs	r4, #0
 8010e4a:	2500      	movs	r5, #0
 8010e4c:	e781      	b.n	8010d52 <pow+0x4a>
 8010e4e:	4d04      	ldr	r5, [pc, #16]	; (8010e60 <pow+0x158>)
 8010e50:	2400      	movs	r4, #0
 8010e52:	e77e      	b.n	8010d52 <pow+0x4a>
 8010e54:	20000030 	.word	0x20000030
 8010e58:	fff00000 	.word	0xfff00000
 8010e5c:	7ff00000 	.word	0x7ff00000
 8010e60:	3ff00000 	.word	0x3ff00000
 8010e64:	00000000 	.word	0x00000000

08010e68 <__ieee754_pow>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	ed2d 8b06 	vpush	{d8-d10}
 8010e70:	b08d      	sub	sp, #52	; 0x34
 8010e72:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010e76:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010e7a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010e7e:	ea56 0100 	orrs.w	r1, r6, r0
 8010e82:	ec53 2b10 	vmov	r2, r3, d0
 8010e86:	f000 84d1 	beq.w	801182c <__ieee754_pow+0x9c4>
 8010e8a:	497f      	ldr	r1, [pc, #508]	; (8011088 <__ieee754_pow+0x220>)
 8010e8c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010e90:	428c      	cmp	r4, r1
 8010e92:	ee10 8a10 	vmov	r8, s0
 8010e96:	4699      	mov	r9, r3
 8010e98:	dc09      	bgt.n	8010eae <__ieee754_pow+0x46>
 8010e9a:	d103      	bne.n	8010ea4 <__ieee754_pow+0x3c>
 8010e9c:	b97a      	cbnz	r2, 8010ebe <__ieee754_pow+0x56>
 8010e9e:	42a6      	cmp	r6, r4
 8010ea0:	dd02      	ble.n	8010ea8 <__ieee754_pow+0x40>
 8010ea2:	e00c      	b.n	8010ebe <__ieee754_pow+0x56>
 8010ea4:	428e      	cmp	r6, r1
 8010ea6:	dc02      	bgt.n	8010eae <__ieee754_pow+0x46>
 8010ea8:	428e      	cmp	r6, r1
 8010eaa:	d110      	bne.n	8010ece <__ieee754_pow+0x66>
 8010eac:	b178      	cbz	r0, 8010ece <__ieee754_pow+0x66>
 8010eae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010eb2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010eb6:	ea54 0308 	orrs.w	r3, r4, r8
 8010eba:	f000 84b7 	beq.w	801182c <__ieee754_pow+0x9c4>
 8010ebe:	4873      	ldr	r0, [pc, #460]	; (801108c <__ieee754_pow+0x224>)
 8010ec0:	b00d      	add	sp, #52	; 0x34
 8010ec2:	ecbd 8b06 	vpop	{d8-d10}
 8010ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eca:	f000 bdb9 	b.w	8011a40 <nan>
 8010ece:	f1b9 0f00 	cmp.w	r9, #0
 8010ed2:	da36      	bge.n	8010f42 <__ieee754_pow+0xda>
 8010ed4:	496e      	ldr	r1, [pc, #440]	; (8011090 <__ieee754_pow+0x228>)
 8010ed6:	428e      	cmp	r6, r1
 8010ed8:	dc51      	bgt.n	8010f7e <__ieee754_pow+0x116>
 8010eda:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8010ede:	428e      	cmp	r6, r1
 8010ee0:	f340 84af 	ble.w	8011842 <__ieee754_pow+0x9da>
 8010ee4:	1531      	asrs	r1, r6, #20
 8010ee6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010eea:	2914      	cmp	r1, #20
 8010eec:	dd0f      	ble.n	8010f0e <__ieee754_pow+0xa6>
 8010eee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010ef2:	fa20 fc01 	lsr.w	ip, r0, r1
 8010ef6:	fa0c f101 	lsl.w	r1, ip, r1
 8010efa:	4281      	cmp	r1, r0
 8010efc:	f040 84a1 	bne.w	8011842 <__ieee754_pow+0x9da>
 8010f00:	f00c 0c01 	and.w	ip, ip, #1
 8010f04:	f1cc 0102 	rsb	r1, ip, #2
 8010f08:	9100      	str	r1, [sp, #0]
 8010f0a:	b180      	cbz	r0, 8010f2e <__ieee754_pow+0xc6>
 8010f0c:	e059      	b.n	8010fc2 <__ieee754_pow+0x15a>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d155      	bne.n	8010fbe <__ieee754_pow+0x156>
 8010f12:	f1c1 0114 	rsb	r1, r1, #20
 8010f16:	fa46 fc01 	asr.w	ip, r6, r1
 8010f1a:	fa0c f101 	lsl.w	r1, ip, r1
 8010f1e:	42b1      	cmp	r1, r6
 8010f20:	f040 848c 	bne.w	801183c <__ieee754_pow+0x9d4>
 8010f24:	f00c 0c01 	and.w	ip, ip, #1
 8010f28:	f1cc 0102 	rsb	r1, ip, #2
 8010f2c:	9100      	str	r1, [sp, #0]
 8010f2e:	4959      	ldr	r1, [pc, #356]	; (8011094 <__ieee754_pow+0x22c>)
 8010f30:	428e      	cmp	r6, r1
 8010f32:	d12d      	bne.n	8010f90 <__ieee754_pow+0x128>
 8010f34:	2f00      	cmp	r7, #0
 8010f36:	da79      	bge.n	801102c <__ieee754_pow+0x1c4>
 8010f38:	4956      	ldr	r1, [pc, #344]	; (8011094 <__ieee754_pow+0x22c>)
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	f7ef fc56 	bl	80007ec <__aeabi_ddiv>
 8010f40:	e016      	b.n	8010f70 <__ieee754_pow+0x108>
 8010f42:	2100      	movs	r1, #0
 8010f44:	9100      	str	r1, [sp, #0]
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d13b      	bne.n	8010fc2 <__ieee754_pow+0x15a>
 8010f4a:	494f      	ldr	r1, [pc, #316]	; (8011088 <__ieee754_pow+0x220>)
 8010f4c:	428e      	cmp	r6, r1
 8010f4e:	d1ee      	bne.n	8010f2e <__ieee754_pow+0xc6>
 8010f50:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010f54:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010f58:	ea53 0308 	orrs.w	r3, r3, r8
 8010f5c:	f000 8466 	beq.w	801182c <__ieee754_pow+0x9c4>
 8010f60:	4b4d      	ldr	r3, [pc, #308]	; (8011098 <__ieee754_pow+0x230>)
 8010f62:	429c      	cmp	r4, r3
 8010f64:	dd0d      	ble.n	8010f82 <__ieee754_pow+0x11a>
 8010f66:	2f00      	cmp	r7, #0
 8010f68:	f280 8464 	bge.w	8011834 <__ieee754_pow+0x9cc>
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	2100      	movs	r1, #0
 8010f70:	ec41 0b10 	vmov	d0, r0, r1
 8010f74:	b00d      	add	sp, #52	; 0x34
 8010f76:	ecbd 8b06 	vpop	{d8-d10}
 8010f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f7e:	2102      	movs	r1, #2
 8010f80:	e7e0      	b.n	8010f44 <__ieee754_pow+0xdc>
 8010f82:	2f00      	cmp	r7, #0
 8010f84:	daf2      	bge.n	8010f6c <__ieee754_pow+0x104>
 8010f86:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8010f8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f8e:	e7ef      	b.n	8010f70 <__ieee754_pow+0x108>
 8010f90:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8010f94:	d104      	bne.n	8010fa0 <__ieee754_pow+0x138>
 8010f96:	4610      	mov	r0, r2
 8010f98:	4619      	mov	r1, r3
 8010f9a:	f7ef fafd 	bl	8000598 <__aeabi_dmul>
 8010f9e:	e7e7      	b.n	8010f70 <__ieee754_pow+0x108>
 8010fa0:	493e      	ldr	r1, [pc, #248]	; (801109c <__ieee754_pow+0x234>)
 8010fa2:	428f      	cmp	r7, r1
 8010fa4:	d10d      	bne.n	8010fc2 <__ieee754_pow+0x15a>
 8010fa6:	f1b9 0f00 	cmp.w	r9, #0
 8010faa:	db0a      	blt.n	8010fc2 <__ieee754_pow+0x15a>
 8010fac:	ec43 2b10 	vmov	d0, r2, r3
 8010fb0:	b00d      	add	sp, #52	; 0x34
 8010fb2:	ecbd 8b06 	vpop	{d8-d10}
 8010fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fba:	f000 bc77 	b.w	80118ac <__ieee754_sqrt>
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	9100      	str	r1, [sp, #0]
 8010fc2:	ec43 2b10 	vmov	d0, r2, r3
 8010fc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010fca:	f000 fd23 	bl	8011a14 <fabs>
 8010fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fd2:	ec51 0b10 	vmov	r0, r1, d0
 8010fd6:	f1b8 0f00 	cmp.w	r8, #0
 8010fda:	d12a      	bne.n	8011032 <__ieee754_pow+0x1ca>
 8010fdc:	b12c      	cbz	r4, 8010fea <__ieee754_pow+0x182>
 8010fde:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8011094 <__ieee754_pow+0x22c>
 8010fe2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010fe6:	45e6      	cmp	lr, ip
 8010fe8:	d123      	bne.n	8011032 <__ieee754_pow+0x1ca>
 8010fea:	2f00      	cmp	r7, #0
 8010fec:	da05      	bge.n	8010ffa <__ieee754_pow+0x192>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	4927      	ldr	r1, [pc, #156]	; (8011094 <__ieee754_pow+0x22c>)
 8010ff6:	f7ef fbf9 	bl	80007ec <__aeabi_ddiv>
 8010ffa:	f1b9 0f00 	cmp.w	r9, #0
 8010ffe:	dab7      	bge.n	8010f70 <__ieee754_pow+0x108>
 8011000:	9b00      	ldr	r3, [sp, #0]
 8011002:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011006:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801100a:	4323      	orrs	r3, r4
 801100c:	d108      	bne.n	8011020 <__ieee754_pow+0x1b8>
 801100e:	4602      	mov	r2, r0
 8011010:	460b      	mov	r3, r1
 8011012:	4610      	mov	r0, r2
 8011014:	4619      	mov	r1, r3
 8011016:	f7ef f907 	bl	8000228 <__aeabi_dsub>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	e78d      	b.n	8010f3c <__ieee754_pow+0xd4>
 8011020:	9b00      	ldr	r3, [sp, #0]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d1a4      	bne.n	8010f70 <__ieee754_pow+0x108>
 8011026:	4602      	mov	r2, r0
 8011028:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801102c:	4610      	mov	r0, r2
 801102e:	4619      	mov	r1, r3
 8011030:	e79e      	b.n	8010f70 <__ieee754_pow+0x108>
 8011032:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011036:	f10c 35ff 	add.w	r5, ip, #4294967295
 801103a:	950a      	str	r5, [sp, #40]	; 0x28
 801103c:	9d00      	ldr	r5, [sp, #0]
 801103e:	46ac      	mov	ip, r5
 8011040:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011042:	ea5c 0505 	orrs.w	r5, ip, r5
 8011046:	d0e4      	beq.n	8011012 <__ieee754_pow+0x1aa>
 8011048:	4b15      	ldr	r3, [pc, #84]	; (80110a0 <__ieee754_pow+0x238>)
 801104a:	429e      	cmp	r6, r3
 801104c:	f340 80fc 	ble.w	8011248 <__ieee754_pow+0x3e0>
 8011050:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011054:	429e      	cmp	r6, r3
 8011056:	4b10      	ldr	r3, [pc, #64]	; (8011098 <__ieee754_pow+0x230>)
 8011058:	dd07      	ble.n	801106a <__ieee754_pow+0x202>
 801105a:	429c      	cmp	r4, r3
 801105c:	dc0a      	bgt.n	8011074 <__ieee754_pow+0x20c>
 801105e:	2f00      	cmp	r7, #0
 8011060:	da84      	bge.n	8010f6c <__ieee754_pow+0x104>
 8011062:	a307      	add	r3, pc, #28	; (adr r3, 8011080 <__ieee754_pow+0x218>)
 8011064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011068:	e795      	b.n	8010f96 <__ieee754_pow+0x12e>
 801106a:	429c      	cmp	r4, r3
 801106c:	dbf7      	blt.n	801105e <__ieee754_pow+0x1f6>
 801106e:	4b09      	ldr	r3, [pc, #36]	; (8011094 <__ieee754_pow+0x22c>)
 8011070:	429c      	cmp	r4, r3
 8011072:	dd17      	ble.n	80110a4 <__ieee754_pow+0x23c>
 8011074:	2f00      	cmp	r7, #0
 8011076:	dcf4      	bgt.n	8011062 <__ieee754_pow+0x1fa>
 8011078:	e778      	b.n	8010f6c <__ieee754_pow+0x104>
 801107a:	bf00      	nop
 801107c:	f3af 8000 	nop.w
 8011080:	8800759c 	.word	0x8800759c
 8011084:	7e37e43c 	.word	0x7e37e43c
 8011088:	7ff00000 	.word	0x7ff00000
 801108c:	08012040 	.word	0x08012040
 8011090:	433fffff 	.word	0x433fffff
 8011094:	3ff00000 	.word	0x3ff00000
 8011098:	3fefffff 	.word	0x3fefffff
 801109c:	3fe00000 	.word	0x3fe00000
 80110a0:	41e00000 	.word	0x41e00000
 80110a4:	4b64      	ldr	r3, [pc, #400]	; (8011238 <__ieee754_pow+0x3d0>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	f7ef f8be 	bl	8000228 <__aeabi_dsub>
 80110ac:	a356      	add	r3, pc, #344	; (adr r3, 8011208 <__ieee754_pow+0x3a0>)
 80110ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b2:	4604      	mov	r4, r0
 80110b4:	460d      	mov	r5, r1
 80110b6:	f7ef fa6f 	bl	8000598 <__aeabi_dmul>
 80110ba:	a355      	add	r3, pc, #340	; (adr r3, 8011210 <__ieee754_pow+0x3a8>)
 80110bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c0:	4606      	mov	r6, r0
 80110c2:	460f      	mov	r7, r1
 80110c4:	4620      	mov	r0, r4
 80110c6:	4629      	mov	r1, r5
 80110c8:	f7ef fa66 	bl	8000598 <__aeabi_dmul>
 80110cc:	4b5b      	ldr	r3, [pc, #364]	; (801123c <__ieee754_pow+0x3d4>)
 80110ce:	4682      	mov	sl, r0
 80110d0:	468b      	mov	fp, r1
 80110d2:	2200      	movs	r2, #0
 80110d4:	4620      	mov	r0, r4
 80110d6:	4629      	mov	r1, r5
 80110d8:	f7ef fa5e 	bl	8000598 <__aeabi_dmul>
 80110dc:	4602      	mov	r2, r0
 80110de:	460b      	mov	r3, r1
 80110e0:	a14d      	add	r1, pc, #308	; (adr r1, 8011218 <__ieee754_pow+0x3b0>)
 80110e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110e6:	f7ef f89f 	bl	8000228 <__aeabi_dsub>
 80110ea:	4622      	mov	r2, r4
 80110ec:	462b      	mov	r3, r5
 80110ee:	f7ef fa53 	bl	8000598 <__aeabi_dmul>
 80110f2:	4602      	mov	r2, r0
 80110f4:	460b      	mov	r3, r1
 80110f6:	2000      	movs	r0, #0
 80110f8:	4951      	ldr	r1, [pc, #324]	; (8011240 <__ieee754_pow+0x3d8>)
 80110fa:	f7ef f895 	bl	8000228 <__aeabi_dsub>
 80110fe:	4622      	mov	r2, r4
 8011100:	4680      	mov	r8, r0
 8011102:	4689      	mov	r9, r1
 8011104:	462b      	mov	r3, r5
 8011106:	4620      	mov	r0, r4
 8011108:	4629      	mov	r1, r5
 801110a:	f7ef fa45 	bl	8000598 <__aeabi_dmul>
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	4640      	mov	r0, r8
 8011114:	4649      	mov	r1, r9
 8011116:	f7ef fa3f 	bl	8000598 <__aeabi_dmul>
 801111a:	a341      	add	r3, pc, #260	; (adr r3, 8011220 <__ieee754_pow+0x3b8>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	f7ef fa3a 	bl	8000598 <__aeabi_dmul>
 8011124:	4602      	mov	r2, r0
 8011126:	460b      	mov	r3, r1
 8011128:	4650      	mov	r0, sl
 801112a:	4659      	mov	r1, fp
 801112c:	f7ef f87c 	bl	8000228 <__aeabi_dsub>
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4680      	mov	r8, r0
 8011136:	4689      	mov	r9, r1
 8011138:	4630      	mov	r0, r6
 801113a:	4639      	mov	r1, r7
 801113c:	f7ef f876 	bl	800022c <__adddf3>
 8011140:	2400      	movs	r4, #0
 8011142:	4632      	mov	r2, r6
 8011144:	463b      	mov	r3, r7
 8011146:	4620      	mov	r0, r4
 8011148:	460d      	mov	r5, r1
 801114a:	f7ef f86d 	bl	8000228 <__aeabi_dsub>
 801114e:	4602      	mov	r2, r0
 8011150:	460b      	mov	r3, r1
 8011152:	4640      	mov	r0, r8
 8011154:	4649      	mov	r1, r9
 8011156:	f7ef f867 	bl	8000228 <__aeabi_dsub>
 801115a:	9b00      	ldr	r3, [sp, #0]
 801115c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801115e:	3b01      	subs	r3, #1
 8011160:	4313      	orrs	r3, r2
 8011162:	4682      	mov	sl, r0
 8011164:	468b      	mov	fp, r1
 8011166:	f040 81f1 	bne.w	801154c <__ieee754_pow+0x6e4>
 801116a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011228 <__ieee754_pow+0x3c0>
 801116e:	eeb0 8a47 	vmov.f32	s16, s14
 8011172:	eef0 8a67 	vmov.f32	s17, s15
 8011176:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801117a:	2600      	movs	r6, #0
 801117c:	4632      	mov	r2, r6
 801117e:	463b      	mov	r3, r7
 8011180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011184:	f7ef f850 	bl	8000228 <__aeabi_dsub>
 8011188:	4622      	mov	r2, r4
 801118a:	462b      	mov	r3, r5
 801118c:	f7ef fa04 	bl	8000598 <__aeabi_dmul>
 8011190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011194:	4680      	mov	r8, r0
 8011196:	4689      	mov	r9, r1
 8011198:	4650      	mov	r0, sl
 801119a:	4659      	mov	r1, fp
 801119c:	f7ef f9fc 	bl	8000598 <__aeabi_dmul>
 80111a0:	4602      	mov	r2, r0
 80111a2:	460b      	mov	r3, r1
 80111a4:	4640      	mov	r0, r8
 80111a6:	4649      	mov	r1, r9
 80111a8:	f7ef f840 	bl	800022c <__adddf3>
 80111ac:	4632      	mov	r2, r6
 80111ae:	463b      	mov	r3, r7
 80111b0:	4680      	mov	r8, r0
 80111b2:	4689      	mov	r9, r1
 80111b4:	4620      	mov	r0, r4
 80111b6:	4629      	mov	r1, r5
 80111b8:	f7ef f9ee 	bl	8000598 <__aeabi_dmul>
 80111bc:	460b      	mov	r3, r1
 80111be:	4604      	mov	r4, r0
 80111c0:	460d      	mov	r5, r1
 80111c2:	4602      	mov	r2, r0
 80111c4:	4649      	mov	r1, r9
 80111c6:	4640      	mov	r0, r8
 80111c8:	f7ef f830 	bl	800022c <__adddf3>
 80111cc:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <__ieee754_pow+0x3dc>)
 80111ce:	4299      	cmp	r1, r3
 80111d0:	ec45 4b19 	vmov	d9, r4, r5
 80111d4:	4606      	mov	r6, r0
 80111d6:	460f      	mov	r7, r1
 80111d8:	468b      	mov	fp, r1
 80111da:	f340 82fe 	ble.w	80117da <__ieee754_pow+0x972>
 80111de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80111e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80111e6:	4303      	orrs	r3, r0
 80111e8:	f000 81f0 	beq.w	80115cc <__ieee754_pow+0x764>
 80111ec:	a310      	add	r3, pc, #64	; (adr r3, 8011230 <__ieee754_pow+0x3c8>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	ec51 0b18 	vmov	r0, r1, d8
 80111f6:	f7ef f9cf 	bl	8000598 <__aeabi_dmul>
 80111fa:	a30d      	add	r3, pc, #52	; (adr r3, 8011230 <__ieee754_pow+0x3c8>)
 80111fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011200:	e6cb      	b.n	8010f9a <__ieee754_pow+0x132>
 8011202:	bf00      	nop
 8011204:	f3af 8000 	nop.w
 8011208:	60000000 	.word	0x60000000
 801120c:	3ff71547 	.word	0x3ff71547
 8011210:	f85ddf44 	.word	0xf85ddf44
 8011214:	3e54ae0b 	.word	0x3e54ae0b
 8011218:	55555555 	.word	0x55555555
 801121c:	3fd55555 	.word	0x3fd55555
 8011220:	652b82fe 	.word	0x652b82fe
 8011224:	3ff71547 	.word	0x3ff71547
 8011228:	00000000 	.word	0x00000000
 801122c:	bff00000 	.word	0xbff00000
 8011230:	8800759c 	.word	0x8800759c
 8011234:	7e37e43c 	.word	0x7e37e43c
 8011238:	3ff00000 	.word	0x3ff00000
 801123c:	3fd00000 	.word	0x3fd00000
 8011240:	3fe00000 	.word	0x3fe00000
 8011244:	408fffff 	.word	0x408fffff
 8011248:	4bd7      	ldr	r3, [pc, #860]	; (80115a8 <__ieee754_pow+0x740>)
 801124a:	ea03 0309 	and.w	r3, r3, r9
 801124e:	2200      	movs	r2, #0
 8011250:	b92b      	cbnz	r3, 801125e <__ieee754_pow+0x3f6>
 8011252:	4bd6      	ldr	r3, [pc, #856]	; (80115ac <__ieee754_pow+0x744>)
 8011254:	f7ef f9a0 	bl	8000598 <__aeabi_dmul>
 8011258:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801125c:	460c      	mov	r4, r1
 801125e:	1523      	asrs	r3, r4, #20
 8011260:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011264:	4413      	add	r3, r2
 8011266:	9309      	str	r3, [sp, #36]	; 0x24
 8011268:	4bd1      	ldr	r3, [pc, #836]	; (80115b0 <__ieee754_pow+0x748>)
 801126a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801126e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011272:	429c      	cmp	r4, r3
 8011274:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011278:	dd08      	ble.n	801128c <__ieee754_pow+0x424>
 801127a:	4bce      	ldr	r3, [pc, #824]	; (80115b4 <__ieee754_pow+0x74c>)
 801127c:	429c      	cmp	r4, r3
 801127e:	f340 8163 	ble.w	8011548 <__ieee754_pow+0x6e0>
 8011282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011284:	3301      	adds	r3, #1
 8011286:	9309      	str	r3, [sp, #36]	; 0x24
 8011288:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801128c:	2400      	movs	r4, #0
 801128e:	00e3      	lsls	r3, r4, #3
 8011290:	930b      	str	r3, [sp, #44]	; 0x2c
 8011292:	4bc9      	ldr	r3, [pc, #804]	; (80115b8 <__ieee754_pow+0x750>)
 8011294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011298:	ed93 7b00 	vldr	d7, [r3]
 801129c:	4629      	mov	r1, r5
 801129e:	ec53 2b17 	vmov	r2, r3, d7
 80112a2:	eeb0 8a47 	vmov.f32	s16, s14
 80112a6:	eef0 8a67 	vmov.f32	s17, s15
 80112aa:	4682      	mov	sl, r0
 80112ac:	f7ee ffbc 	bl	8000228 <__aeabi_dsub>
 80112b0:	4652      	mov	r2, sl
 80112b2:	4606      	mov	r6, r0
 80112b4:	460f      	mov	r7, r1
 80112b6:	462b      	mov	r3, r5
 80112b8:	ec51 0b18 	vmov	r0, r1, d8
 80112bc:	f7ee ffb6 	bl	800022c <__adddf3>
 80112c0:	4602      	mov	r2, r0
 80112c2:	460b      	mov	r3, r1
 80112c4:	2000      	movs	r0, #0
 80112c6:	49bd      	ldr	r1, [pc, #756]	; (80115bc <__ieee754_pow+0x754>)
 80112c8:	f7ef fa90 	bl	80007ec <__aeabi_ddiv>
 80112cc:	ec41 0b19 	vmov	d9, r0, r1
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	4630      	mov	r0, r6
 80112d6:	4639      	mov	r1, r7
 80112d8:	f7ef f95e 	bl	8000598 <__aeabi_dmul>
 80112dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80112e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80112e8:	2300      	movs	r3, #0
 80112ea:	9304      	str	r3, [sp, #16]
 80112ec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80112f0:	46ab      	mov	fp, r5
 80112f2:	106d      	asrs	r5, r5, #1
 80112f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80112f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80112fc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011300:	2200      	movs	r2, #0
 8011302:	4640      	mov	r0, r8
 8011304:	4649      	mov	r1, r9
 8011306:	4614      	mov	r4, r2
 8011308:	461d      	mov	r5, r3
 801130a:	f7ef f945 	bl	8000598 <__aeabi_dmul>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	4630      	mov	r0, r6
 8011314:	4639      	mov	r1, r7
 8011316:	f7ee ff87 	bl	8000228 <__aeabi_dsub>
 801131a:	ec53 2b18 	vmov	r2, r3, d8
 801131e:	4606      	mov	r6, r0
 8011320:	460f      	mov	r7, r1
 8011322:	4620      	mov	r0, r4
 8011324:	4629      	mov	r1, r5
 8011326:	f7ee ff7f 	bl	8000228 <__aeabi_dsub>
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4650      	mov	r0, sl
 8011330:	4659      	mov	r1, fp
 8011332:	f7ee ff79 	bl	8000228 <__aeabi_dsub>
 8011336:	4642      	mov	r2, r8
 8011338:	464b      	mov	r3, r9
 801133a:	f7ef f92d 	bl	8000598 <__aeabi_dmul>
 801133e:	4602      	mov	r2, r0
 8011340:	460b      	mov	r3, r1
 8011342:	4630      	mov	r0, r6
 8011344:	4639      	mov	r1, r7
 8011346:	f7ee ff6f 	bl	8000228 <__aeabi_dsub>
 801134a:	ec53 2b19 	vmov	r2, r3, d9
 801134e:	f7ef f923 	bl	8000598 <__aeabi_dmul>
 8011352:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011356:	ec41 0b18 	vmov	d8, r0, r1
 801135a:	4610      	mov	r0, r2
 801135c:	4619      	mov	r1, r3
 801135e:	f7ef f91b 	bl	8000598 <__aeabi_dmul>
 8011362:	a37d      	add	r3, pc, #500	; (adr r3, 8011558 <__ieee754_pow+0x6f0>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	4604      	mov	r4, r0
 801136a:	460d      	mov	r5, r1
 801136c:	f7ef f914 	bl	8000598 <__aeabi_dmul>
 8011370:	a37b      	add	r3, pc, #492	; (adr r3, 8011560 <__ieee754_pow+0x6f8>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	f7ee ff59 	bl	800022c <__adddf3>
 801137a:	4622      	mov	r2, r4
 801137c:	462b      	mov	r3, r5
 801137e:	f7ef f90b 	bl	8000598 <__aeabi_dmul>
 8011382:	a379      	add	r3, pc, #484	; (adr r3, 8011568 <__ieee754_pow+0x700>)
 8011384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011388:	f7ee ff50 	bl	800022c <__adddf3>
 801138c:	4622      	mov	r2, r4
 801138e:	462b      	mov	r3, r5
 8011390:	f7ef f902 	bl	8000598 <__aeabi_dmul>
 8011394:	a376      	add	r3, pc, #472	; (adr r3, 8011570 <__ieee754_pow+0x708>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	f7ee ff47 	bl	800022c <__adddf3>
 801139e:	4622      	mov	r2, r4
 80113a0:	462b      	mov	r3, r5
 80113a2:	f7ef f8f9 	bl	8000598 <__aeabi_dmul>
 80113a6:	a374      	add	r3, pc, #464	; (adr r3, 8011578 <__ieee754_pow+0x710>)
 80113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ac:	f7ee ff3e 	bl	800022c <__adddf3>
 80113b0:	4622      	mov	r2, r4
 80113b2:	462b      	mov	r3, r5
 80113b4:	f7ef f8f0 	bl	8000598 <__aeabi_dmul>
 80113b8:	a371      	add	r3, pc, #452	; (adr r3, 8011580 <__ieee754_pow+0x718>)
 80113ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113be:	f7ee ff35 	bl	800022c <__adddf3>
 80113c2:	4622      	mov	r2, r4
 80113c4:	4606      	mov	r6, r0
 80113c6:	460f      	mov	r7, r1
 80113c8:	462b      	mov	r3, r5
 80113ca:	4620      	mov	r0, r4
 80113cc:	4629      	mov	r1, r5
 80113ce:	f7ef f8e3 	bl	8000598 <__aeabi_dmul>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	4630      	mov	r0, r6
 80113d8:	4639      	mov	r1, r7
 80113da:	f7ef f8dd 	bl	8000598 <__aeabi_dmul>
 80113de:	4642      	mov	r2, r8
 80113e0:	4604      	mov	r4, r0
 80113e2:	460d      	mov	r5, r1
 80113e4:	464b      	mov	r3, r9
 80113e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80113ea:	f7ee ff1f 	bl	800022c <__adddf3>
 80113ee:	ec53 2b18 	vmov	r2, r3, d8
 80113f2:	f7ef f8d1 	bl	8000598 <__aeabi_dmul>
 80113f6:	4622      	mov	r2, r4
 80113f8:	462b      	mov	r3, r5
 80113fa:	f7ee ff17 	bl	800022c <__adddf3>
 80113fe:	4642      	mov	r2, r8
 8011400:	4682      	mov	sl, r0
 8011402:	468b      	mov	fp, r1
 8011404:	464b      	mov	r3, r9
 8011406:	4640      	mov	r0, r8
 8011408:	4649      	mov	r1, r9
 801140a:	f7ef f8c5 	bl	8000598 <__aeabi_dmul>
 801140e:	4b6c      	ldr	r3, [pc, #432]	; (80115c0 <__ieee754_pow+0x758>)
 8011410:	2200      	movs	r2, #0
 8011412:	4606      	mov	r6, r0
 8011414:	460f      	mov	r7, r1
 8011416:	f7ee ff09 	bl	800022c <__adddf3>
 801141a:	4652      	mov	r2, sl
 801141c:	465b      	mov	r3, fp
 801141e:	f7ee ff05 	bl	800022c <__adddf3>
 8011422:	9c04      	ldr	r4, [sp, #16]
 8011424:	460d      	mov	r5, r1
 8011426:	4622      	mov	r2, r4
 8011428:	460b      	mov	r3, r1
 801142a:	4640      	mov	r0, r8
 801142c:	4649      	mov	r1, r9
 801142e:	f7ef f8b3 	bl	8000598 <__aeabi_dmul>
 8011432:	4b63      	ldr	r3, [pc, #396]	; (80115c0 <__ieee754_pow+0x758>)
 8011434:	4680      	mov	r8, r0
 8011436:	4689      	mov	r9, r1
 8011438:	2200      	movs	r2, #0
 801143a:	4620      	mov	r0, r4
 801143c:	4629      	mov	r1, r5
 801143e:	f7ee fef3 	bl	8000228 <__aeabi_dsub>
 8011442:	4632      	mov	r2, r6
 8011444:	463b      	mov	r3, r7
 8011446:	f7ee feef 	bl	8000228 <__aeabi_dsub>
 801144a:	4602      	mov	r2, r0
 801144c:	460b      	mov	r3, r1
 801144e:	4650      	mov	r0, sl
 8011450:	4659      	mov	r1, fp
 8011452:	f7ee fee9 	bl	8000228 <__aeabi_dsub>
 8011456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801145a:	f7ef f89d 	bl	8000598 <__aeabi_dmul>
 801145e:	4622      	mov	r2, r4
 8011460:	4606      	mov	r6, r0
 8011462:	460f      	mov	r7, r1
 8011464:	462b      	mov	r3, r5
 8011466:	ec51 0b18 	vmov	r0, r1, d8
 801146a:	f7ef f895 	bl	8000598 <__aeabi_dmul>
 801146e:	4602      	mov	r2, r0
 8011470:	460b      	mov	r3, r1
 8011472:	4630      	mov	r0, r6
 8011474:	4639      	mov	r1, r7
 8011476:	f7ee fed9 	bl	800022c <__adddf3>
 801147a:	4606      	mov	r6, r0
 801147c:	460f      	mov	r7, r1
 801147e:	4602      	mov	r2, r0
 8011480:	460b      	mov	r3, r1
 8011482:	4640      	mov	r0, r8
 8011484:	4649      	mov	r1, r9
 8011486:	f7ee fed1 	bl	800022c <__adddf3>
 801148a:	9c04      	ldr	r4, [sp, #16]
 801148c:	a33e      	add	r3, pc, #248	; (adr r3, 8011588 <__ieee754_pow+0x720>)
 801148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011492:	4620      	mov	r0, r4
 8011494:	460d      	mov	r5, r1
 8011496:	f7ef f87f 	bl	8000598 <__aeabi_dmul>
 801149a:	4642      	mov	r2, r8
 801149c:	ec41 0b18 	vmov	d8, r0, r1
 80114a0:	464b      	mov	r3, r9
 80114a2:	4620      	mov	r0, r4
 80114a4:	4629      	mov	r1, r5
 80114a6:	f7ee febf 	bl	8000228 <__aeabi_dsub>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4630      	mov	r0, r6
 80114b0:	4639      	mov	r1, r7
 80114b2:	f7ee feb9 	bl	8000228 <__aeabi_dsub>
 80114b6:	a336      	add	r3, pc, #216	; (adr r3, 8011590 <__ieee754_pow+0x728>)
 80114b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114bc:	f7ef f86c 	bl	8000598 <__aeabi_dmul>
 80114c0:	a335      	add	r3, pc, #212	; (adr r3, 8011598 <__ieee754_pow+0x730>)
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	4606      	mov	r6, r0
 80114c8:	460f      	mov	r7, r1
 80114ca:	4620      	mov	r0, r4
 80114cc:	4629      	mov	r1, r5
 80114ce:	f7ef f863 	bl	8000598 <__aeabi_dmul>
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	4630      	mov	r0, r6
 80114d8:	4639      	mov	r1, r7
 80114da:	f7ee fea7 	bl	800022c <__adddf3>
 80114de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114e0:	4b38      	ldr	r3, [pc, #224]	; (80115c4 <__ieee754_pow+0x75c>)
 80114e2:	4413      	add	r3, r2
 80114e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e8:	f7ee fea0 	bl	800022c <__adddf3>
 80114ec:	4682      	mov	sl, r0
 80114ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114f0:	468b      	mov	fp, r1
 80114f2:	f7ee ffe7 	bl	80004c4 <__aeabi_i2d>
 80114f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80114f8:	4b33      	ldr	r3, [pc, #204]	; (80115c8 <__ieee754_pow+0x760>)
 80114fa:	4413      	add	r3, r2
 80114fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011500:	4606      	mov	r6, r0
 8011502:	460f      	mov	r7, r1
 8011504:	4652      	mov	r2, sl
 8011506:	465b      	mov	r3, fp
 8011508:	ec51 0b18 	vmov	r0, r1, d8
 801150c:	f7ee fe8e 	bl	800022c <__adddf3>
 8011510:	4642      	mov	r2, r8
 8011512:	464b      	mov	r3, r9
 8011514:	f7ee fe8a 	bl	800022c <__adddf3>
 8011518:	4632      	mov	r2, r6
 801151a:	463b      	mov	r3, r7
 801151c:	f7ee fe86 	bl	800022c <__adddf3>
 8011520:	9c04      	ldr	r4, [sp, #16]
 8011522:	4632      	mov	r2, r6
 8011524:	463b      	mov	r3, r7
 8011526:	4620      	mov	r0, r4
 8011528:	460d      	mov	r5, r1
 801152a:	f7ee fe7d 	bl	8000228 <__aeabi_dsub>
 801152e:	4642      	mov	r2, r8
 8011530:	464b      	mov	r3, r9
 8011532:	f7ee fe79 	bl	8000228 <__aeabi_dsub>
 8011536:	ec53 2b18 	vmov	r2, r3, d8
 801153a:	f7ee fe75 	bl	8000228 <__aeabi_dsub>
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	4650      	mov	r0, sl
 8011544:	4659      	mov	r1, fp
 8011546:	e606      	b.n	8011156 <__ieee754_pow+0x2ee>
 8011548:	2401      	movs	r4, #1
 801154a:	e6a0      	b.n	801128e <__ieee754_pow+0x426>
 801154c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80115a0 <__ieee754_pow+0x738>
 8011550:	e60d      	b.n	801116e <__ieee754_pow+0x306>
 8011552:	bf00      	nop
 8011554:	f3af 8000 	nop.w
 8011558:	4a454eef 	.word	0x4a454eef
 801155c:	3fca7e28 	.word	0x3fca7e28
 8011560:	93c9db65 	.word	0x93c9db65
 8011564:	3fcd864a 	.word	0x3fcd864a
 8011568:	a91d4101 	.word	0xa91d4101
 801156c:	3fd17460 	.word	0x3fd17460
 8011570:	518f264d 	.word	0x518f264d
 8011574:	3fd55555 	.word	0x3fd55555
 8011578:	db6fabff 	.word	0xdb6fabff
 801157c:	3fdb6db6 	.word	0x3fdb6db6
 8011580:	33333303 	.word	0x33333303
 8011584:	3fe33333 	.word	0x3fe33333
 8011588:	e0000000 	.word	0xe0000000
 801158c:	3feec709 	.word	0x3feec709
 8011590:	dc3a03fd 	.word	0xdc3a03fd
 8011594:	3feec709 	.word	0x3feec709
 8011598:	145b01f5 	.word	0x145b01f5
 801159c:	be3e2fe0 	.word	0xbe3e2fe0
 80115a0:	00000000 	.word	0x00000000
 80115a4:	3ff00000 	.word	0x3ff00000
 80115a8:	7ff00000 	.word	0x7ff00000
 80115ac:	43400000 	.word	0x43400000
 80115b0:	0003988e 	.word	0x0003988e
 80115b4:	000bb679 	.word	0x000bb679
 80115b8:	08012048 	.word	0x08012048
 80115bc:	3ff00000 	.word	0x3ff00000
 80115c0:	40080000 	.word	0x40080000
 80115c4:	08012068 	.word	0x08012068
 80115c8:	08012058 	.word	0x08012058
 80115cc:	a3b5      	add	r3, pc, #724	; (adr r3, 80118a4 <__ieee754_pow+0xa3c>)
 80115ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d2:	4640      	mov	r0, r8
 80115d4:	4649      	mov	r1, r9
 80115d6:	f7ee fe29 	bl	800022c <__adddf3>
 80115da:	4622      	mov	r2, r4
 80115dc:	ec41 0b1a 	vmov	d10, r0, r1
 80115e0:	462b      	mov	r3, r5
 80115e2:	4630      	mov	r0, r6
 80115e4:	4639      	mov	r1, r7
 80115e6:	f7ee fe1f 	bl	8000228 <__aeabi_dsub>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	ec51 0b1a 	vmov	r0, r1, d10
 80115f2:	f7ef fa61 	bl	8000ab8 <__aeabi_dcmpgt>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	f47f adf8 	bne.w	80111ec <__ieee754_pow+0x384>
 80115fc:	4aa4      	ldr	r2, [pc, #656]	; (8011890 <__ieee754_pow+0xa28>)
 80115fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011602:	4293      	cmp	r3, r2
 8011604:	f340 810b 	ble.w	801181e <__ieee754_pow+0x9b6>
 8011608:	151b      	asrs	r3, r3, #20
 801160a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801160e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011612:	fa4a f303 	asr.w	r3, sl, r3
 8011616:	445b      	add	r3, fp
 8011618:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801161c:	4e9d      	ldr	r6, [pc, #628]	; (8011894 <__ieee754_pow+0xa2c>)
 801161e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011622:	4116      	asrs	r6, r2
 8011624:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011628:	2000      	movs	r0, #0
 801162a:	ea23 0106 	bic.w	r1, r3, r6
 801162e:	f1c2 0214 	rsb	r2, r2, #20
 8011632:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011636:	fa4a fa02 	asr.w	sl, sl, r2
 801163a:	f1bb 0f00 	cmp.w	fp, #0
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	4620      	mov	r0, r4
 8011644:	4629      	mov	r1, r5
 8011646:	bfb8      	it	lt
 8011648:	f1ca 0a00 	rsblt	sl, sl, #0
 801164c:	f7ee fdec 	bl	8000228 <__aeabi_dsub>
 8011650:	ec41 0b19 	vmov	d9, r0, r1
 8011654:	4642      	mov	r2, r8
 8011656:	464b      	mov	r3, r9
 8011658:	ec51 0b19 	vmov	r0, r1, d9
 801165c:	f7ee fde6 	bl	800022c <__adddf3>
 8011660:	2400      	movs	r4, #0
 8011662:	a379      	add	r3, pc, #484	; (adr r3, 8011848 <__ieee754_pow+0x9e0>)
 8011664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011668:	4620      	mov	r0, r4
 801166a:	460d      	mov	r5, r1
 801166c:	f7ee ff94 	bl	8000598 <__aeabi_dmul>
 8011670:	ec53 2b19 	vmov	r2, r3, d9
 8011674:	4606      	mov	r6, r0
 8011676:	460f      	mov	r7, r1
 8011678:	4620      	mov	r0, r4
 801167a:	4629      	mov	r1, r5
 801167c:	f7ee fdd4 	bl	8000228 <__aeabi_dsub>
 8011680:	4602      	mov	r2, r0
 8011682:	460b      	mov	r3, r1
 8011684:	4640      	mov	r0, r8
 8011686:	4649      	mov	r1, r9
 8011688:	f7ee fdce 	bl	8000228 <__aeabi_dsub>
 801168c:	a370      	add	r3, pc, #448	; (adr r3, 8011850 <__ieee754_pow+0x9e8>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	f7ee ff81 	bl	8000598 <__aeabi_dmul>
 8011696:	a370      	add	r3, pc, #448	; (adr r3, 8011858 <__ieee754_pow+0x9f0>)
 8011698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169c:	4680      	mov	r8, r0
 801169e:	4689      	mov	r9, r1
 80116a0:	4620      	mov	r0, r4
 80116a2:	4629      	mov	r1, r5
 80116a4:	f7ee ff78 	bl	8000598 <__aeabi_dmul>
 80116a8:	4602      	mov	r2, r0
 80116aa:	460b      	mov	r3, r1
 80116ac:	4640      	mov	r0, r8
 80116ae:	4649      	mov	r1, r9
 80116b0:	f7ee fdbc 	bl	800022c <__adddf3>
 80116b4:	4604      	mov	r4, r0
 80116b6:	460d      	mov	r5, r1
 80116b8:	4602      	mov	r2, r0
 80116ba:	460b      	mov	r3, r1
 80116bc:	4630      	mov	r0, r6
 80116be:	4639      	mov	r1, r7
 80116c0:	f7ee fdb4 	bl	800022c <__adddf3>
 80116c4:	4632      	mov	r2, r6
 80116c6:	463b      	mov	r3, r7
 80116c8:	4680      	mov	r8, r0
 80116ca:	4689      	mov	r9, r1
 80116cc:	f7ee fdac 	bl	8000228 <__aeabi_dsub>
 80116d0:	4602      	mov	r2, r0
 80116d2:	460b      	mov	r3, r1
 80116d4:	4620      	mov	r0, r4
 80116d6:	4629      	mov	r1, r5
 80116d8:	f7ee fda6 	bl	8000228 <__aeabi_dsub>
 80116dc:	4642      	mov	r2, r8
 80116de:	4606      	mov	r6, r0
 80116e0:	460f      	mov	r7, r1
 80116e2:	464b      	mov	r3, r9
 80116e4:	4640      	mov	r0, r8
 80116e6:	4649      	mov	r1, r9
 80116e8:	f7ee ff56 	bl	8000598 <__aeabi_dmul>
 80116ec:	a35c      	add	r3, pc, #368	; (adr r3, 8011860 <__ieee754_pow+0x9f8>)
 80116ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f2:	4604      	mov	r4, r0
 80116f4:	460d      	mov	r5, r1
 80116f6:	f7ee ff4f 	bl	8000598 <__aeabi_dmul>
 80116fa:	a35b      	add	r3, pc, #364	; (adr r3, 8011868 <__ieee754_pow+0xa00>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	f7ee fd92 	bl	8000228 <__aeabi_dsub>
 8011704:	4622      	mov	r2, r4
 8011706:	462b      	mov	r3, r5
 8011708:	f7ee ff46 	bl	8000598 <__aeabi_dmul>
 801170c:	a358      	add	r3, pc, #352	; (adr r3, 8011870 <__ieee754_pow+0xa08>)
 801170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011712:	f7ee fd8b 	bl	800022c <__adddf3>
 8011716:	4622      	mov	r2, r4
 8011718:	462b      	mov	r3, r5
 801171a:	f7ee ff3d 	bl	8000598 <__aeabi_dmul>
 801171e:	a356      	add	r3, pc, #344	; (adr r3, 8011878 <__ieee754_pow+0xa10>)
 8011720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011724:	f7ee fd80 	bl	8000228 <__aeabi_dsub>
 8011728:	4622      	mov	r2, r4
 801172a:	462b      	mov	r3, r5
 801172c:	f7ee ff34 	bl	8000598 <__aeabi_dmul>
 8011730:	a353      	add	r3, pc, #332	; (adr r3, 8011880 <__ieee754_pow+0xa18>)
 8011732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011736:	f7ee fd79 	bl	800022c <__adddf3>
 801173a:	4622      	mov	r2, r4
 801173c:	462b      	mov	r3, r5
 801173e:	f7ee ff2b 	bl	8000598 <__aeabi_dmul>
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	4640      	mov	r0, r8
 8011748:	4649      	mov	r1, r9
 801174a:	f7ee fd6d 	bl	8000228 <__aeabi_dsub>
 801174e:	4604      	mov	r4, r0
 8011750:	460d      	mov	r5, r1
 8011752:	4602      	mov	r2, r0
 8011754:	460b      	mov	r3, r1
 8011756:	4640      	mov	r0, r8
 8011758:	4649      	mov	r1, r9
 801175a:	f7ee ff1d 	bl	8000598 <__aeabi_dmul>
 801175e:	2200      	movs	r2, #0
 8011760:	ec41 0b19 	vmov	d9, r0, r1
 8011764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011768:	4620      	mov	r0, r4
 801176a:	4629      	mov	r1, r5
 801176c:	f7ee fd5c 	bl	8000228 <__aeabi_dsub>
 8011770:	4602      	mov	r2, r0
 8011772:	460b      	mov	r3, r1
 8011774:	ec51 0b19 	vmov	r0, r1, d9
 8011778:	f7ef f838 	bl	80007ec <__aeabi_ddiv>
 801177c:	4632      	mov	r2, r6
 801177e:	4604      	mov	r4, r0
 8011780:	460d      	mov	r5, r1
 8011782:	463b      	mov	r3, r7
 8011784:	4640      	mov	r0, r8
 8011786:	4649      	mov	r1, r9
 8011788:	f7ee ff06 	bl	8000598 <__aeabi_dmul>
 801178c:	4632      	mov	r2, r6
 801178e:	463b      	mov	r3, r7
 8011790:	f7ee fd4c 	bl	800022c <__adddf3>
 8011794:	4602      	mov	r2, r0
 8011796:	460b      	mov	r3, r1
 8011798:	4620      	mov	r0, r4
 801179a:	4629      	mov	r1, r5
 801179c:	f7ee fd44 	bl	8000228 <__aeabi_dsub>
 80117a0:	4642      	mov	r2, r8
 80117a2:	464b      	mov	r3, r9
 80117a4:	f7ee fd40 	bl	8000228 <__aeabi_dsub>
 80117a8:	460b      	mov	r3, r1
 80117aa:	4602      	mov	r2, r0
 80117ac:	493a      	ldr	r1, [pc, #232]	; (8011898 <__ieee754_pow+0xa30>)
 80117ae:	2000      	movs	r0, #0
 80117b0:	f7ee fd3a 	bl	8000228 <__aeabi_dsub>
 80117b4:	e9cd 0100 	strd	r0, r1, [sp]
 80117b8:	9b01      	ldr	r3, [sp, #4]
 80117ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80117be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117c2:	da2f      	bge.n	8011824 <__ieee754_pow+0x9bc>
 80117c4:	4650      	mov	r0, sl
 80117c6:	ed9d 0b00 	vldr	d0, [sp]
 80117ca:	f000 f9cd 	bl	8011b68 <scalbn>
 80117ce:	ec51 0b10 	vmov	r0, r1, d0
 80117d2:	ec53 2b18 	vmov	r2, r3, d8
 80117d6:	f7ff bbe0 	b.w	8010f9a <__ieee754_pow+0x132>
 80117da:	4b30      	ldr	r3, [pc, #192]	; (801189c <__ieee754_pow+0xa34>)
 80117dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80117e0:	429e      	cmp	r6, r3
 80117e2:	f77f af0b 	ble.w	80115fc <__ieee754_pow+0x794>
 80117e6:	4b2e      	ldr	r3, [pc, #184]	; (80118a0 <__ieee754_pow+0xa38>)
 80117e8:	440b      	add	r3, r1
 80117ea:	4303      	orrs	r3, r0
 80117ec:	d00b      	beq.n	8011806 <__ieee754_pow+0x99e>
 80117ee:	a326      	add	r3, pc, #152	; (adr r3, 8011888 <__ieee754_pow+0xa20>)
 80117f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f4:	ec51 0b18 	vmov	r0, r1, d8
 80117f8:	f7ee fece 	bl	8000598 <__aeabi_dmul>
 80117fc:	a322      	add	r3, pc, #136	; (adr r3, 8011888 <__ieee754_pow+0xa20>)
 80117fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011802:	f7ff bbca 	b.w	8010f9a <__ieee754_pow+0x132>
 8011806:	4622      	mov	r2, r4
 8011808:	462b      	mov	r3, r5
 801180a:	f7ee fd0d 	bl	8000228 <__aeabi_dsub>
 801180e:	4642      	mov	r2, r8
 8011810:	464b      	mov	r3, r9
 8011812:	f7ef f947 	bl	8000aa4 <__aeabi_dcmpge>
 8011816:	2800      	cmp	r0, #0
 8011818:	f43f aef0 	beq.w	80115fc <__ieee754_pow+0x794>
 801181c:	e7e7      	b.n	80117ee <__ieee754_pow+0x986>
 801181e:	f04f 0a00 	mov.w	sl, #0
 8011822:	e717      	b.n	8011654 <__ieee754_pow+0x7ec>
 8011824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011828:	4619      	mov	r1, r3
 801182a:	e7d2      	b.n	80117d2 <__ieee754_pow+0x96a>
 801182c:	491a      	ldr	r1, [pc, #104]	; (8011898 <__ieee754_pow+0xa30>)
 801182e:	2000      	movs	r0, #0
 8011830:	f7ff bb9e 	b.w	8010f70 <__ieee754_pow+0x108>
 8011834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011838:	f7ff bb9a 	b.w	8010f70 <__ieee754_pow+0x108>
 801183c:	9000      	str	r0, [sp, #0]
 801183e:	f7ff bb76 	b.w	8010f2e <__ieee754_pow+0xc6>
 8011842:	2100      	movs	r1, #0
 8011844:	f7ff bb60 	b.w	8010f08 <__ieee754_pow+0xa0>
 8011848:	00000000 	.word	0x00000000
 801184c:	3fe62e43 	.word	0x3fe62e43
 8011850:	fefa39ef 	.word	0xfefa39ef
 8011854:	3fe62e42 	.word	0x3fe62e42
 8011858:	0ca86c39 	.word	0x0ca86c39
 801185c:	be205c61 	.word	0xbe205c61
 8011860:	72bea4d0 	.word	0x72bea4d0
 8011864:	3e663769 	.word	0x3e663769
 8011868:	c5d26bf1 	.word	0xc5d26bf1
 801186c:	3ebbbd41 	.word	0x3ebbbd41
 8011870:	af25de2c 	.word	0xaf25de2c
 8011874:	3f11566a 	.word	0x3f11566a
 8011878:	16bebd93 	.word	0x16bebd93
 801187c:	3f66c16c 	.word	0x3f66c16c
 8011880:	5555553e 	.word	0x5555553e
 8011884:	3fc55555 	.word	0x3fc55555
 8011888:	c2f8f359 	.word	0xc2f8f359
 801188c:	01a56e1f 	.word	0x01a56e1f
 8011890:	3fe00000 	.word	0x3fe00000
 8011894:	000fffff 	.word	0x000fffff
 8011898:	3ff00000 	.word	0x3ff00000
 801189c:	4090cbff 	.word	0x4090cbff
 80118a0:	3f6f3400 	.word	0x3f6f3400
 80118a4:	652b82fe 	.word	0x652b82fe
 80118a8:	3c971547 	.word	0x3c971547

080118ac <__ieee754_sqrt>:
 80118ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118b0:	ec55 4b10 	vmov	r4, r5, d0
 80118b4:	4e56      	ldr	r6, [pc, #344]	; (8011a10 <__ieee754_sqrt+0x164>)
 80118b6:	43ae      	bics	r6, r5
 80118b8:	ee10 0a10 	vmov	r0, s0
 80118bc:	ee10 3a10 	vmov	r3, s0
 80118c0:	4629      	mov	r1, r5
 80118c2:	462a      	mov	r2, r5
 80118c4:	d110      	bne.n	80118e8 <__ieee754_sqrt+0x3c>
 80118c6:	ee10 2a10 	vmov	r2, s0
 80118ca:	462b      	mov	r3, r5
 80118cc:	f7ee fe64 	bl	8000598 <__aeabi_dmul>
 80118d0:	4602      	mov	r2, r0
 80118d2:	460b      	mov	r3, r1
 80118d4:	4620      	mov	r0, r4
 80118d6:	4629      	mov	r1, r5
 80118d8:	f7ee fca8 	bl	800022c <__adddf3>
 80118dc:	4604      	mov	r4, r0
 80118de:	460d      	mov	r5, r1
 80118e0:	ec45 4b10 	vmov	d0, r4, r5
 80118e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118e8:	2d00      	cmp	r5, #0
 80118ea:	dc10      	bgt.n	801190e <__ieee754_sqrt+0x62>
 80118ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80118f0:	4330      	orrs	r0, r6
 80118f2:	d0f5      	beq.n	80118e0 <__ieee754_sqrt+0x34>
 80118f4:	b15d      	cbz	r5, 801190e <__ieee754_sqrt+0x62>
 80118f6:	ee10 2a10 	vmov	r2, s0
 80118fa:	462b      	mov	r3, r5
 80118fc:	ee10 0a10 	vmov	r0, s0
 8011900:	f7ee fc92 	bl	8000228 <__aeabi_dsub>
 8011904:	4602      	mov	r2, r0
 8011906:	460b      	mov	r3, r1
 8011908:	f7ee ff70 	bl	80007ec <__aeabi_ddiv>
 801190c:	e7e6      	b.n	80118dc <__ieee754_sqrt+0x30>
 801190e:	1509      	asrs	r1, r1, #20
 8011910:	d076      	beq.n	8011a00 <__ieee754_sqrt+0x154>
 8011912:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011916:	07ce      	lsls	r6, r1, #31
 8011918:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801191c:	bf5e      	ittt	pl
 801191e:	0fda      	lsrpl	r2, r3, #31
 8011920:	005b      	lslpl	r3, r3, #1
 8011922:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011926:	0fda      	lsrs	r2, r3, #31
 8011928:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801192c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011930:	2000      	movs	r0, #0
 8011932:	106d      	asrs	r5, r5, #1
 8011934:	005b      	lsls	r3, r3, #1
 8011936:	f04f 0e16 	mov.w	lr, #22
 801193a:	4684      	mov	ip, r0
 801193c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011940:	eb0c 0401 	add.w	r4, ip, r1
 8011944:	4294      	cmp	r4, r2
 8011946:	bfde      	ittt	le
 8011948:	1b12      	suble	r2, r2, r4
 801194a:	eb04 0c01 	addle.w	ip, r4, r1
 801194e:	1840      	addle	r0, r0, r1
 8011950:	0052      	lsls	r2, r2, #1
 8011952:	f1be 0e01 	subs.w	lr, lr, #1
 8011956:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801195a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801195e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011962:	d1ed      	bne.n	8011940 <__ieee754_sqrt+0x94>
 8011964:	4671      	mov	r1, lr
 8011966:	2720      	movs	r7, #32
 8011968:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801196c:	4562      	cmp	r2, ip
 801196e:	eb04 060e 	add.w	r6, r4, lr
 8011972:	dc02      	bgt.n	801197a <__ieee754_sqrt+0xce>
 8011974:	d113      	bne.n	801199e <__ieee754_sqrt+0xf2>
 8011976:	429e      	cmp	r6, r3
 8011978:	d811      	bhi.n	801199e <__ieee754_sqrt+0xf2>
 801197a:	2e00      	cmp	r6, #0
 801197c:	eb06 0e04 	add.w	lr, r6, r4
 8011980:	da43      	bge.n	8011a0a <__ieee754_sqrt+0x15e>
 8011982:	f1be 0f00 	cmp.w	lr, #0
 8011986:	db40      	blt.n	8011a0a <__ieee754_sqrt+0x15e>
 8011988:	f10c 0801 	add.w	r8, ip, #1
 801198c:	eba2 020c 	sub.w	r2, r2, ip
 8011990:	429e      	cmp	r6, r3
 8011992:	bf88      	it	hi
 8011994:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011998:	1b9b      	subs	r3, r3, r6
 801199a:	4421      	add	r1, r4
 801199c:	46c4      	mov	ip, r8
 801199e:	0052      	lsls	r2, r2, #1
 80119a0:	3f01      	subs	r7, #1
 80119a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80119a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80119aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80119ae:	d1dd      	bne.n	801196c <__ieee754_sqrt+0xc0>
 80119b0:	4313      	orrs	r3, r2
 80119b2:	d006      	beq.n	80119c2 <__ieee754_sqrt+0x116>
 80119b4:	1c4c      	adds	r4, r1, #1
 80119b6:	bf13      	iteet	ne
 80119b8:	3101      	addne	r1, #1
 80119ba:	3001      	addeq	r0, #1
 80119bc:	4639      	moveq	r1, r7
 80119be:	f021 0101 	bicne.w	r1, r1, #1
 80119c2:	1043      	asrs	r3, r0, #1
 80119c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80119c8:	0849      	lsrs	r1, r1, #1
 80119ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80119ce:	07c2      	lsls	r2, r0, #31
 80119d0:	bf48      	it	mi
 80119d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80119d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80119da:	460c      	mov	r4, r1
 80119dc:	463d      	mov	r5, r7
 80119de:	e77f      	b.n	80118e0 <__ieee754_sqrt+0x34>
 80119e0:	0ada      	lsrs	r2, r3, #11
 80119e2:	3815      	subs	r0, #21
 80119e4:	055b      	lsls	r3, r3, #21
 80119e6:	2a00      	cmp	r2, #0
 80119e8:	d0fa      	beq.n	80119e0 <__ieee754_sqrt+0x134>
 80119ea:	02d7      	lsls	r7, r2, #11
 80119ec:	d50a      	bpl.n	8011a04 <__ieee754_sqrt+0x158>
 80119ee:	f1c1 0420 	rsb	r4, r1, #32
 80119f2:	fa23 f404 	lsr.w	r4, r3, r4
 80119f6:	1e4d      	subs	r5, r1, #1
 80119f8:	408b      	lsls	r3, r1
 80119fa:	4322      	orrs	r2, r4
 80119fc:	1b41      	subs	r1, r0, r5
 80119fe:	e788      	b.n	8011912 <__ieee754_sqrt+0x66>
 8011a00:	4608      	mov	r0, r1
 8011a02:	e7f0      	b.n	80119e6 <__ieee754_sqrt+0x13a>
 8011a04:	0052      	lsls	r2, r2, #1
 8011a06:	3101      	adds	r1, #1
 8011a08:	e7ef      	b.n	80119ea <__ieee754_sqrt+0x13e>
 8011a0a:	46e0      	mov	r8, ip
 8011a0c:	e7be      	b.n	801198c <__ieee754_sqrt+0xe0>
 8011a0e:	bf00      	nop
 8011a10:	7ff00000 	.word	0x7ff00000

08011a14 <fabs>:
 8011a14:	ec51 0b10 	vmov	r0, r1, d0
 8011a18:	ee10 2a10 	vmov	r2, s0
 8011a1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a20:	ec43 2b10 	vmov	d0, r2, r3
 8011a24:	4770      	bx	lr

08011a26 <finite>:
 8011a26:	b082      	sub	sp, #8
 8011a28:	ed8d 0b00 	vstr	d0, [sp]
 8011a2c:	9801      	ldr	r0, [sp, #4]
 8011a2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011a32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011a36:	0fc0      	lsrs	r0, r0, #31
 8011a38:	b002      	add	sp, #8
 8011a3a:	4770      	bx	lr
 8011a3c:	0000      	movs	r0, r0
	...

08011a40 <nan>:
 8011a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a48 <nan+0x8>
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	00000000 	.word	0x00000000
 8011a4c:	7ff80000 	.word	0x7ff80000

08011a50 <rint>:
 8011a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a52:	ec51 0b10 	vmov	r0, r1, d0
 8011a56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011a5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011a5e:	2e13      	cmp	r6, #19
 8011a60:	ee10 4a10 	vmov	r4, s0
 8011a64:	460b      	mov	r3, r1
 8011a66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011a6a:	dc58      	bgt.n	8011b1e <rint+0xce>
 8011a6c:	2e00      	cmp	r6, #0
 8011a6e:	da2b      	bge.n	8011ac8 <rint+0x78>
 8011a70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011a74:	4302      	orrs	r2, r0
 8011a76:	d023      	beq.n	8011ac0 <rint+0x70>
 8011a78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011a7c:	4302      	orrs	r2, r0
 8011a7e:	4254      	negs	r4, r2
 8011a80:	4314      	orrs	r4, r2
 8011a82:	0c4b      	lsrs	r3, r1, #17
 8011a84:	0b24      	lsrs	r4, r4, #12
 8011a86:	045b      	lsls	r3, r3, #17
 8011a88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011a8c:	ea44 0103 	orr.w	r1, r4, r3
 8011a90:	4b32      	ldr	r3, [pc, #200]	; (8011b5c <rint+0x10c>)
 8011a92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a96:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	4639      	mov	r1, r7
 8011aa2:	f7ee fbc3 	bl	800022c <__adddf3>
 8011aa6:	e9cd 0100 	strd	r0, r1, [sp]
 8011aaa:	463b      	mov	r3, r7
 8011aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ab0:	4632      	mov	r2, r6
 8011ab2:	f7ee fbb9 	bl	8000228 <__aeabi_dsub>
 8011ab6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011aba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011abe:	4639      	mov	r1, r7
 8011ac0:	ec41 0b10 	vmov	d0, r0, r1
 8011ac4:	b003      	add	sp, #12
 8011ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ac8:	4a25      	ldr	r2, [pc, #148]	; (8011b60 <rint+0x110>)
 8011aca:	4132      	asrs	r2, r6
 8011acc:	ea01 0702 	and.w	r7, r1, r2
 8011ad0:	4307      	orrs	r7, r0
 8011ad2:	d0f5      	beq.n	8011ac0 <rint+0x70>
 8011ad4:	0851      	lsrs	r1, r2, #1
 8011ad6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8011ada:	4314      	orrs	r4, r2
 8011adc:	d00c      	beq.n	8011af8 <rint+0xa8>
 8011ade:	ea23 0201 	bic.w	r2, r3, r1
 8011ae2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011ae6:	2e13      	cmp	r6, #19
 8011ae8:	fa43 f606 	asr.w	r6, r3, r6
 8011aec:	bf0c      	ite	eq
 8011aee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011af2:	2400      	movne	r4, #0
 8011af4:	ea42 0306 	orr.w	r3, r2, r6
 8011af8:	4918      	ldr	r1, [pc, #96]	; (8011b5c <rint+0x10c>)
 8011afa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011afe:	4622      	mov	r2, r4
 8011b00:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011b04:	4620      	mov	r0, r4
 8011b06:	4629      	mov	r1, r5
 8011b08:	f7ee fb90 	bl	800022c <__adddf3>
 8011b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8011b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b14:	4622      	mov	r2, r4
 8011b16:	462b      	mov	r3, r5
 8011b18:	f7ee fb86 	bl	8000228 <__aeabi_dsub>
 8011b1c:	e7d0      	b.n	8011ac0 <rint+0x70>
 8011b1e:	2e33      	cmp	r6, #51	; 0x33
 8011b20:	dd07      	ble.n	8011b32 <rint+0xe2>
 8011b22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011b26:	d1cb      	bne.n	8011ac0 <rint+0x70>
 8011b28:	ee10 2a10 	vmov	r2, s0
 8011b2c:	f7ee fb7e 	bl	800022c <__adddf3>
 8011b30:	e7c6      	b.n	8011ac0 <rint+0x70>
 8011b32:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011b36:	f04f 36ff 	mov.w	r6, #4294967295
 8011b3a:	40d6      	lsrs	r6, r2
 8011b3c:	4230      	tst	r0, r6
 8011b3e:	d0bf      	beq.n	8011ac0 <rint+0x70>
 8011b40:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011b44:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011b48:	bf1f      	itttt	ne
 8011b4a:	ea24 0101 	bicne.w	r1, r4, r1
 8011b4e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011b52:	fa44 f202 	asrne.w	r2, r4, r2
 8011b56:	ea41 0402 	orrne.w	r4, r1, r2
 8011b5a:	e7cd      	b.n	8011af8 <rint+0xa8>
 8011b5c:	08012078 	.word	0x08012078
 8011b60:	000fffff 	.word	0x000fffff
 8011b64:	00000000 	.word	0x00000000

08011b68 <scalbn>:
 8011b68:	b570      	push	{r4, r5, r6, lr}
 8011b6a:	ec55 4b10 	vmov	r4, r5, d0
 8011b6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011b72:	4606      	mov	r6, r0
 8011b74:	462b      	mov	r3, r5
 8011b76:	b99a      	cbnz	r2, 8011ba0 <scalbn+0x38>
 8011b78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b7c:	4323      	orrs	r3, r4
 8011b7e:	d036      	beq.n	8011bee <scalbn+0x86>
 8011b80:	4b39      	ldr	r3, [pc, #228]	; (8011c68 <scalbn+0x100>)
 8011b82:	4629      	mov	r1, r5
 8011b84:	ee10 0a10 	vmov	r0, s0
 8011b88:	2200      	movs	r2, #0
 8011b8a:	f7ee fd05 	bl	8000598 <__aeabi_dmul>
 8011b8e:	4b37      	ldr	r3, [pc, #220]	; (8011c6c <scalbn+0x104>)
 8011b90:	429e      	cmp	r6, r3
 8011b92:	4604      	mov	r4, r0
 8011b94:	460d      	mov	r5, r1
 8011b96:	da10      	bge.n	8011bba <scalbn+0x52>
 8011b98:	a32b      	add	r3, pc, #172	; (adr r3, 8011c48 <scalbn+0xe0>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	e03a      	b.n	8011c16 <scalbn+0xae>
 8011ba0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011ba4:	428a      	cmp	r2, r1
 8011ba6:	d10c      	bne.n	8011bc2 <scalbn+0x5a>
 8011ba8:	ee10 2a10 	vmov	r2, s0
 8011bac:	4620      	mov	r0, r4
 8011bae:	4629      	mov	r1, r5
 8011bb0:	f7ee fb3c 	bl	800022c <__adddf3>
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	460d      	mov	r5, r1
 8011bb8:	e019      	b.n	8011bee <scalbn+0x86>
 8011bba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011bbe:	460b      	mov	r3, r1
 8011bc0:	3a36      	subs	r2, #54	; 0x36
 8011bc2:	4432      	add	r2, r6
 8011bc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011bc8:	428a      	cmp	r2, r1
 8011bca:	dd08      	ble.n	8011bde <scalbn+0x76>
 8011bcc:	2d00      	cmp	r5, #0
 8011bce:	a120      	add	r1, pc, #128	; (adr r1, 8011c50 <scalbn+0xe8>)
 8011bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bd4:	da1c      	bge.n	8011c10 <scalbn+0xa8>
 8011bd6:	a120      	add	r1, pc, #128	; (adr r1, 8011c58 <scalbn+0xf0>)
 8011bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bdc:	e018      	b.n	8011c10 <scalbn+0xa8>
 8011bde:	2a00      	cmp	r2, #0
 8011be0:	dd08      	ble.n	8011bf4 <scalbn+0x8c>
 8011be2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011be6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011bea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011bee:	ec45 4b10 	vmov	d0, r4, r5
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}
 8011bf4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011bf8:	da19      	bge.n	8011c2e <scalbn+0xc6>
 8011bfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011bfe:	429e      	cmp	r6, r3
 8011c00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011c04:	dd0a      	ble.n	8011c1c <scalbn+0xb4>
 8011c06:	a112      	add	r1, pc, #72	; (adr r1, 8011c50 <scalbn+0xe8>)
 8011c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d1e2      	bne.n	8011bd6 <scalbn+0x6e>
 8011c10:	a30f      	add	r3, pc, #60	; (adr r3, 8011c50 <scalbn+0xe8>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7ee fcbf 	bl	8000598 <__aeabi_dmul>
 8011c1a:	e7cb      	b.n	8011bb4 <scalbn+0x4c>
 8011c1c:	a10a      	add	r1, pc, #40	; (adr r1, 8011c48 <scalbn+0xe0>)
 8011c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d0b8      	beq.n	8011b98 <scalbn+0x30>
 8011c26:	a10e      	add	r1, pc, #56	; (adr r1, 8011c60 <scalbn+0xf8>)
 8011c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c2c:	e7b4      	b.n	8011b98 <scalbn+0x30>
 8011c2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c32:	3236      	adds	r2, #54	; 0x36
 8011c34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <scalbn+0x108>)
 8011c40:	2200      	movs	r2, #0
 8011c42:	e7e8      	b.n	8011c16 <scalbn+0xae>
 8011c44:	f3af 8000 	nop.w
 8011c48:	c2f8f359 	.word	0xc2f8f359
 8011c4c:	01a56e1f 	.word	0x01a56e1f
 8011c50:	8800759c 	.word	0x8800759c
 8011c54:	7e37e43c 	.word	0x7e37e43c
 8011c58:	8800759c 	.word	0x8800759c
 8011c5c:	fe37e43c 	.word	0xfe37e43c
 8011c60:	c2f8f359 	.word	0xc2f8f359
 8011c64:	81a56e1f 	.word	0x81a56e1f
 8011c68:	43500000 	.word	0x43500000
 8011c6c:	ffff3cb0 	.word	0xffff3cb0
 8011c70:	3c900000 	.word	0x3c900000

08011c74 <abort>:
 8011c74:	b508      	push	{r3, lr}
 8011c76:	2006      	movs	r0, #6
 8011c78:	f000 f950 	bl	8011f1c <raise>
 8011c7c:	2001      	movs	r0, #1
 8011c7e:	f7f1 fd11 	bl	80036a4 <_exit>
	...

08011c84 <__errno>:
 8011c84:	4b01      	ldr	r3, [pc, #4]	; (8011c8c <__errno+0x8>)
 8011c86:	6818      	ldr	r0, [r3, #0]
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	20000034 	.word	0x20000034

08011c90 <__libc_init_array>:
 8011c90:	b570      	push	{r4, r5, r6, lr}
 8011c92:	4d0d      	ldr	r5, [pc, #52]	; (8011cc8 <__libc_init_array+0x38>)
 8011c94:	4c0d      	ldr	r4, [pc, #52]	; (8011ccc <__libc_init_array+0x3c>)
 8011c96:	1b64      	subs	r4, r4, r5
 8011c98:	10a4      	asrs	r4, r4, #2
 8011c9a:	2600      	movs	r6, #0
 8011c9c:	42a6      	cmp	r6, r4
 8011c9e:	d109      	bne.n	8011cb4 <__libc_init_array+0x24>
 8011ca0:	4d0b      	ldr	r5, [pc, #44]	; (8011cd0 <__libc_init_array+0x40>)
 8011ca2:	4c0c      	ldr	r4, [pc, #48]	; (8011cd4 <__libc_init_array+0x44>)
 8011ca4:	f000 f964 	bl	8011f70 <_init>
 8011ca8:	1b64      	subs	r4, r4, r5
 8011caa:	10a4      	asrs	r4, r4, #2
 8011cac:	2600      	movs	r6, #0
 8011cae:	42a6      	cmp	r6, r4
 8011cb0:	d105      	bne.n	8011cbe <__libc_init_array+0x2e>
 8011cb2:	bd70      	pop	{r4, r5, r6, pc}
 8011cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cb8:	4798      	blx	r3
 8011cba:	3601      	adds	r6, #1
 8011cbc:	e7ee      	b.n	8011c9c <__libc_init_array+0xc>
 8011cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cc2:	4798      	blx	r3
 8011cc4:	3601      	adds	r6, #1
 8011cc6:	e7f2      	b.n	8011cae <__libc_init_array+0x1e>
 8011cc8:	08012090 	.word	0x08012090
 8011ccc:	08012090 	.word	0x08012090
 8011cd0:	08012090 	.word	0x08012090
 8011cd4:	08012098 	.word	0x08012098

08011cd8 <malloc>:
 8011cd8:	4b02      	ldr	r3, [pc, #8]	; (8011ce4 <malloc+0xc>)
 8011cda:	4601      	mov	r1, r0
 8011cdc:	6818      	ldr	r0, [r3, #0]
 8011cde:	f000 b88b 	b.w	8011df8 <_malloc_r>
 8011ce2:	bf00      	nop
 8011ce4:	20000034 	.word	0x20000034

08011ce8 <free>:
 8011ce8:	4b02      	ldr	r3, [pc, #8]	; (8011cf4 <free+0xc>)
 8011cea:	4601      	mov	r1, r0
 8011cec:	6818      	ldr	r0, [r3, #0]
 8011cee:	f000 b833 	b.w	8011d58 <_free_r>
 8011cf2:	bf00      	nop
 8011cf4:	20000034 	.word	0x20000034

08011cf8 <memcpy>:
 8011cf8:	440a      	add	r2, r1
 8011cfa:	4291      	cmp	r1, r2
 8011cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d00:	d100      	bne.n	8011d04 <memcpy+0xc>
 8011d02:	4770      	bx	lr
 8011d04:	b510      	push	{r4, lr}
 8011d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d0e:	4291      	cmp	r1, r2
 8011d10:	d1f9      	bne.n	8011d06 <memcpy+0xe>
 8011d12:	bd10      	pop	{r4, pc}

08011d14 <memmove>:
 8011d14:	4288      	cmp	r0, r1
 8011d16:	b510      	push	{r4, lr}
 8011d18:	eb01 0402 	add.w	r4, r1, r2
 8011d1c:	d902      	bls.n	8011d24 <memmove+0x10>
 8011d1e:	4284      	cmp	r4, r0
 8011d20:	4623      	mov	r3, r4
 8011d22:	d807      	bhi.n	8011d34 <memmove+0x20>
 8011d24:	1e43      	subs	r3, r0, #1
 8011d26:	42a1      	cmp	r1, r4
 8011d28:	d008      	beq.n	8011d3c <memmove+0x28>
 8011d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d32:	e7f8      	b.n	8011d26 <memmove+0x12>
 8011d34:	4402      	add	r2, r0
 8011d36:	4601      	mov	r1, r0
 8011d38:	428a      	cmp	r2, r1
 8011d3a:	d100      	bne.n	8011d3e <memmove+0x2a>
 8011d3c:	bd10      	pop	{r4, pc}
 8011d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d46:	e7f7      	b.n	8011d38 <memmove+0x24>

08011d48 <memset>:
 8011d48:	4402      	add	r2, r0
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d100      	bne.n	8011d52 <memset+0xa>
 8011d50:	4770      	bx	lr
 8011d52:	f803 1b01 	strb.w	r1, [r3], #1
 8011d56:	e7f9      	b.n	8011d4c <memset+0x4>

08011d58 <_free_r>:
 8011d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d5a:	2900      	cmp	r1, #0
 8011d5c:	d048      	beq.n	8011df0 <_free_r+0x98>
 8011d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d62:	9001      	str	r0, [sp, #4]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	f1a1 0404 	sub.w	r4, r1, #4
 8011d6a:	bfb8      	it	lt
 8011d6c:	18e4      	addlt	r4, r4, r3
 8011d6e:	f000 f8f1 	bl	8011f54 <__malloc_lock>
 8011d72:	4a20      	ldr	r2, [pc, #128]	; (8011df4 <_free_r+0x9c>)
 8011d74:	9801      	ldr	r0, [sp, #4]
 8011d76:	6813      	ldr	r3, [r2, #0]
 8011d78:	4615      	mov	r5, r2
 8011d7a:	b933      	cbnz	r3, 8011d8a <_free_r+0x32>
 8011d7c:	6063      	str	r3, [r4, #4]
 8011d7e:	6014      	str	r4, [r2, #0]
 8011d80:	b003      	add	sp, #12
 8011d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d86:	f000 b8eb 	b.w	8011f60 <__malloc_unlock>
 8011d8a:	42a3      	cmp	r3, r4
 8011d8c:	d90b      	bls.n	8011da6 <_free_r+0x4e>
 8011d8e:	6821      	ldr	r1, [r4, #0]
 8011d90:	1862      	adds	r2, r4, r1
 8011d92:	4293      	cmp	r3, r2
 8011d94:	bf04      	itt	eq
 8011d96:	681a      	ldreq	r2, [r3, #0]
 8011d98:	685b      	ldreq	r3, [r3, #4]
 8011d9a:	6063      	str	r3, [r4, #4]
 8011d9c:	bf04      	itt	eq
 8011d9e:	1852      	addeq	r2, r2, r1
 8011da0:	6022      	streq	r2, [r4, #0]
 8011da2:	602c      	str	r4, [r5, #0]
 8011da4:	e7ec      	b.n	8011d80 <_free_r+0x28>
 8011da6:	461a      	mov	r2, r3
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	b10b      	cbz	r3, 8011db0 <_free_r+0x58>
 8011dac:	42a3      	cmp	r3, r4
 8011dae:	d9fa      	bls.n	8011da6 <_free_r+0x4e>
 8011db0:	6811      	ldr	r1, [r2, #0]
 8011db2:	1855      	adds	r5, r2, r1
 8011db4:	42a5      	cmp	r5, r4
 8011db6:	d10b      	bne.n	8011dd0 <_free_r+0x78>
 8011db8:	6824      	ldr	r4, [r4, #0]
 8011dba:	4421      	add	r1, r4
 8011dbc:	1854      	adds	r4, r2, r1
 8011dbe:	42a3      	cmp	r3, r4
 8011dc0:	6011      	str	r1, [r2, #0]
 8011dc2:	d1dd      	bne.n	8011d80 <_free_r+0x28>
 8011dc4:	681c      	ldr	r4, [r3, #0]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	6053      	str	r3, [r2, #4]
 8011dca:	4421      	add	r1, r4
 8011dcc:	6011      	str	r1, [r2, #0]
 8011dce:	e7d7      	b.n	8011d80 <_free_r+0x28>
 8011dd0:	d902      	bls.n	8011dd8 <_free_r+0x80>
 8011dd2:	230c      	movs	r3, #12
 8011dd4:	6003      	str	r3, [r0, #0]
 8011dd6:	e7d3      	b.n	8011d80 <_free_r+0x28>
 8011dd8:	6825      	ldr	r5, [r4, #0]
 8011dda:	1961      	adds	r1, r4, r5
 8011ddc:	428b      	cmp	r3, r1
 8011dde:	bf04      	itt	eq
 8011de0:	6819      	ldreq	r1, [r3, #0]
 8011de2:	685b      	ldreq	r3, [r3, #4]
 8011de4:	6063      	str	r3, [r4, #4]
 8011de6:	bf04      	itt	eq
 8011de8:	1949      	addeq	r1, r1, r5
 8011dea:	6021      	streq	r1, [r4, #0]
 8011dec:	6054      	str	r4, [r2, #4]
 8011dee:	e7c7      	b.n	8011d80 <_free_r+0x28>
 8011df0:	b003      	add	sp, #12
 8011df2:	bd30      	pop	{r4, r5, pc}
 8011df4:	20004db0 	.word	0x20004db0

08011df8 <_malloc_r>:
 8011df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dfa:	1ccd      	adds	r5, r1, #3
 8011dfc:	f025 0503 	bic.w	r5, r5, #3
 8011e00:	3508      	adds	r5, #8
 8011e02:	2d0c      	cmp	r5, #12
 8011e04:	bf38      	it	cc
 8011e06:	250c      	movcc	r5, #12
 8011e08:	2d00      	cmp	r5, #0
 8011e0a:	4606      	mov	r6, r0
 8011e0c:	db01      	blt.n	8011e12 <_malloc_r+0x1a>
 8011e0e:	42a9      	cmp	r1, r5
 8011e10:	d903      	bls.n	8011e1a <_malloc_r+0x22>
 8011e12:	230c      	movs	r3, #12
 8011e14:	6033      	str	r3, [r6, #0]
 8011e16:	2000      	movs	r0, #0
 8011e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e1a:	f000 f89b 	bl	8011f54 <__malloc_lock>
 8011e1e:	4921      	ldr	r1, [pc, #132]	; (8011ea4 <_malloc_r+0xac>)
 8011e20:	680a      	ldr	r2, [r1, #0]
 8011e22:	4614      	mov	r4, r2
 8011e24:	b99c      	cbnz	r4, 8011e4e <_malloc_r+0x56>
 8011e26:	4f20      	ldr	r7, [pc, #128]	; (8011ea8 <_malloc_r+0xb0>)
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	b923      	cbnz	r3, 8011e36 <_malloc_r+0x3e>
 8011e2c:	4621      	mov	r1, r4
 8011e2e:	4630      	mov	r0, r6
 8011e30:	f000 f83c 	bl	8011eac <_sbrk_r>
 8011e34:	6038      	str	r0, [r7, #0]
 8011e36:	4629      	mov	r1, r5
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f000 f837 	bl	8011eac <_sbrk_r>
 8011e3e:	1c43      	adds	r3, r0, #1
 8011e40:	d123      	bne.n	8011e8a <_malloc_r+0x92>
 8011e42:	230c      	movs	r3, #12
 8011e44:	6033      	str	r3, [r6, #0]
 8011e46:	4630      	mov	r0, r6
 8011e48:	f000 f88a 	bl	8011f60 <__malloc_unlock>
 8011e4c:	e7e3      	b.n	8011e16 <_malloc_r+0x1e>
 8011e4e:	6823      	ldr	r3, [r4, #0]
 8011e50:	1b5b      	subs	r3, r3, r5
 8011e52:	d417      	bmi.n	8011e84 <_malloc_r+0x8c>
 8011e54:	2b0b      	cmp	r3, #11
 8011e56:	d903      	bls.n	8011e60 <_malloc_r+0x68>
 8011e58:	6023      	str	r3, [r4, #0]
 8011e5a:	441c      	add	r4, r3
 8011e5c:	6025      	str	r5, [r4, #0]
 8011e5e:	e004      	b.n	8011e6a <_malloc_r+0x72>
 8011e60:	6863      	ldr	r3, [r4, #4]
 8011e62:	42a2      	cmp	r2, r4
 8011e64:	bf0c      	ite	eq
 8011e66:	600b      	streq	r3, [r1, #0]
 8011e68:	6053      	strne	r3, [r2, #4]
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	f000 f878 	bl	8011f60 <__malloc_unlock>
 8011e70:	f104 000b 	add.w	r0, r4, #11
 8011e74:	1d23      	adds	r3, r4, #4
 8011e76:	f020 0007 	bic.w	r0, r0, #7
 8011e7a:	1ac2      	subs	r2, r0, r3
 8011e7c:	d0cc      	beq.n	8011e18 <_malloc_r+0x20>
 8011e7e:	1a1b      	subs	r3, r3, r0
 8011e80:	50a3      	str	r3, [r4, r2]
 8011e82:	e7c9      	b.n	8011e18 <_malloc_r+0x20>
 8011e84:	4622      	mov	r2, r4
 8011e86:	6864      	ldr	r4, [r4, #4]
 8011e88:	e7cc      	b.n	8011e24 <_malloc_r+0x2c>
 8011e8a:	1cc4      	adds	r4, r0, #3
 8011e8c:	f024 0403 	bic.w	r4, r4, #3
 8011e90:	42a0      	cmp	r0, r4
 8011e92:	d0e3      	beq.n	8011e5c <_malloc_r+0x64>
 8011e94:	1a21      	subs	r1, r4, r0
 8011e96:	4630      	mov	r0, r6
 8011e98:	f000 f808 	bl	8011eac <_sbrk_r>
 8011e9c:	3001      	adds	r0, #1
 8011e9e:	d1dd      	bne.n	8011e5c <_malloc_r+0x64>
 8011ea0:	e7cf      	b.n	8011e42 <_malloc_r+0x4a>
 8011ea2:	bf00      	nop
 8011ea4:	20004db0 	.word	0x20004db0
 8011ea8:	20004db4 	.word	0x20004db4

08011eac <_sbrk_r>:
 8011eac:	b538      	push	{r3, r4, r5, lr}
 8011eae:	4d06      	ldr	r5, [pc, #24]	; (8011ec8 <_sbrk_r+0x1c>)
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	4608      	mov	r0, r1
 8011eb6:	602b      	str	r3, [r5, #0]
 8011eb8:	f7f1 fbfe 	bl	80036b8 <_sbrk>
 8011ebc:	1c43      	adds	r3, r0, #1
 8011ebe:	d102      	bne.n	8011ec6 <_sbrk_r+0x1a>
 8011ec0:	682b      	ldr	r3, [r5, #0]
 8011ec2:	b103      	cbz	r3, 8011ec6 <_sbrk_r+0x1a>
 8011ec4:	6023      	str	r3, [r4, #0]
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	20005508 	.word	0x20005508

08011ecc <_raise_r>:
 8011ecc:	291f      	cmp	r1, #31
 8011ece:	b538      	push	{r3, r4, r5, lr}
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	460d      	mov	r5, r1
 8011ed4:	d904      	bls.n	8011ee0 <_raise_r+0x14>
 8011ed6:	2316      	movs	r3, #22
 8011ed8:	6003      	str	r3, [r0, #0]
 8011eda:	f04f 30ff 	mov.w	r0, #4294967295
 8011ede:	bd38      	pop	{r3, r4, r5, pc}
 8011ee0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ee2:	b112      	cbz	r2, 8011eea <_raise_r+0x1e>
 8011ee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ee8:	b94b      	cbnz	r3, 8011efe <_raise_r+0x32>
 8011eea:	4620      	mov	r0, r4
 8011eec:	f000 f830 	bl	8011f50 <_getpid_r>
 8011ef0:	462a      	mov	r2, r5
 8011ef2:	4601      	mov	r1, r0
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011efa:	f000 b817 	b.w	8011f2c <_kill_r>
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d00a      	beq.n	8011f18 <_raise_r+0x4c>
 8011f02:	1c59      	adds	r1, r3, #1
 8011f04:	d103      	bne.n	8011f0e <_raise_r+0x42>
 8011f06:	2316      	movs	r3, #22
 8011f08:	6003      	str	r3, [r0, #0]
 8011f0a:	2001      	movs	r0, #1
 8011f0c:	e7e7      	b.n	8011ede <_raise_r+0x12>
 8011f0e:	2400      	movs	r4, #0
 8011f10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f14:	4628      	mov	r0, r5
 8011f16:	4798      	blx	r3
 8011f18:	2000      	movs	r0, #0
 8011f1a:	e7e0      	b.n	8011ede <_raise_r+0x12>

08011f1c <raise>:
 8011f1c:	4b02      	ldr	r3, [pc, #8]	; (8011f28 <raise+0xc>)
 8011f1e:	4601      	mov	r1, r0
 8011f20:	6818      	ldr	r0, [r3, #0]
 8011f22:	f7ff bfd3 	b.w	8011ecc <_raise_r>
 8011f26:	bf00      	nop
 8011f28:	20000034 	.word	0x20000034

08011f2c <_kill_r>:
 8011f2c:	b538      	push	{r3, r4, r5, lr}
 8011f2e:	4d07      	ldr	r5, [pc, #28]	; (8011f4c <_kill_r+0x20>)
 8011f30:	2300      	movs	r3, #0
 8011f32:	4604      	mov	r4, r0
 8011f34:	4608      	mov	r0, r1
 8011f36:	4611      	mov	r1, r2
 8011f38:	602b      	str	r3, [r5, #0]
 8011f3a:	f7f1 fba3 	bl	8003684 <_kill>
 8011f3e:	1c43      	adds	r3, r0, #1
 8011f40:	d102      	bne.n	8011f48 <_kill_r+0x1c>
 8011f42:	682b      	ldr	r3, [r5, #0]
 8011f44:	b103      	cbz	r3, 8011f48 <_kill_r+0x1c>
 8011f46:	6023      	str	r3, [r4, #0]
 8011f48:	bd38      	pop	{r3, r4, r5, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20005508 	.word	0x20005508

08011f50 <_getpid_r>:
 8011f50:	f7f1 bb90 	b.w	8003674 <_getpid>

08011f54 <__malloc_lock>:
 8011f54:	4801      	ldr	r0, [pc, #4]	; (8011f5c <__malloc_lock+0x8>)
 8011f56:	f000 b809 	b.w	8011f6c <__retarget_lock_acquire_recursive>
 8011f5a:	bf00      	nop
 8011f5c:	20005510 	.word	0x20005510

08011f60 <__malloc_unlock>:
 8011f60:	4801      	ldr	r0, [pc, #4]	; (8011f68 <__malloc_unlock+0x8>)
 8011f62:	f000 b804 	b.w	8011f6e <__retarget_lock_release_recursive>
 8011f66:	bf00      	nop
 8011f68:	20005510 	.word	0x20005510

08011f6c <__retarget_lock_acquire_recursive>:
 8011f6c:	4770      	bx	lr

08011f6e <__retarget_lock_release_recursive>:
 8011f6e:	4770      	bx	lr

08011f70 <_init>:
 8011f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f72:	bf00      	nop
 8011f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f76:	bc08      	pop	{r3}
 8011f78:	469e      	mov	lr, r3
 8011f7a:	4770      	bx	lr

08011f7c <_fini>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	bf00      	nop
 8011f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f82:	bc08      	pop	{r3}
 8011f84:	469e      	mov	lr, r3
 8011f86:	4770      	bx	lr
