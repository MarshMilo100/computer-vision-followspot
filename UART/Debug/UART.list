
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f198  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800f378  0800f378  0001f378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f414  0800f414  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f414  0800f414  0001f414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f41c  0800f41c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f41c  0800f41c  0001f41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f420  0800f420  0001f420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000546c  20000094  0800f4b8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  0800f4b8  00025500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003647d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006509  00000000  00000000  00056541  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002930  00000000  00000000  0005ca50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002658  00000000  00000000  0005f380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009e4c  00000000  00000000  000619d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000258bc  00000000  00000000  0006b824  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f64de  00000000  00000000  000910e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001875be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b164  00000000  00000000  0018763c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f360 	.word	0x0800f360

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800f360 	.word	0x0800f360

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_UART_RxCpltCallback>:
void DefaultThread(void *argument);
void MainThread(void *argument);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000528:	2108      	movs	r1, #8
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <HAL_UART_RxCpltCallback+0x18>)
 800052c:	f002 fc6f 	bl	8002e0e <HAL_GPIO_TogglePin>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f001 fbe4 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f83a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fb0a 	bl	8000b60 <MX_GPIO_Init>
  MX_ADC1_Init();
 800054c:	f000 f8d6 	bl	80006fc <MX_ADC1_Init>
  MX_DAC_Init();
 8000550:	f000 f926 	bl	80007a0 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000554:	f000 f94e 	bl	80007f4 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000558:	f000 f984 	bl	8000864 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800055c:	f000 f9ec 	bl	8000938 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000560:	f000 fca6 	bl	8000eb0 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000564:	f000 fa1e 	bl	80009a4 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000568:	f000 fa4a 	bl	8000a00 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 800056c:	f000 fa74 	bl	8000a58 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000570:	f000 faa2 	bl	8000ab8 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000574:	f000 faca 	bl	8000b0c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000578:	f00b fb82 	bl	800bc80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(DefaultThread, NULL, &blink01_attributes);
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <main+0x68>)
 800057e:	2100      	movs	r1, #0
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <main+0x6c>)
 8000582:	f00b fbe7 	bl	800bd54 <osThreadNew>
 8000586:	4602      	mov	r2, r0
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <main+0x70>)
 800058a:	601a      	str	r2, [r3, #0]

  /* creation of mainThread */
  mainThreadHandle = osThreadNew(MainThread, NULL, &mainThread_attributes);
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <main+0x74>)
 800058e:	2100      	movs	r1, #0
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x78>)
 8000592:	f00b fbdf 	bl	800bd54 <osThreadNew>
 8000596:	4602      	mov	r2, r0
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <main+0x7c>)
 800059a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f00b fba4 	bl	800bce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x64>
 80005a2:	bf00      	nop
 80005a4:	0800f3b4 	.word	0x0800f3b4
 80005a8:	08001015 	.word	0x08001015
 80005ac:	20004d10 	.word	0x20004d10
 80005b0:	0800f3d8 	.word	0x0800f3d8
 80005b4:	08001049 	.word	0x08001049
 80005b8:	20004d14 	.word	0x20004d14

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0aa      	sub	sp, #168	; 0xa8
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00e fe05 	bl	800f1da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2258      	movs	r2, #88	; 0x58
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00e fdf6 	bl	800f1da <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b40      	ldr	r3, [pc, #256]	; (80006f4 <SystemClock_Config+0x138>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a3f      	ldr	r2, [pc, #252]	; (80006f4 <SystemClock_Config+0x138>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <SystemClock_Config+0x138>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <SystemClock_Config+0x13c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a39      	ldr	r2, [pc, #228]	; (80006f8 <SystemClock_Config+0x13c>)
 8000614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <SystemClock_Config+0x13c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000626:	2303      	movs	r3, #3
 8000628:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800062e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800064a:	230f      	movs	r3, #15
 800064c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000650:	2390      	movs	r3, #144	; 0x90
 8000652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800065c:	2305      	movs	r3, #5
 800065e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800066c:	4618      	mov	r0, r3
 800066e:	f005 fc39 	bl	8005ee4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 fd00 	bl	800107c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fe4a 	bl	8005330 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006a2:	f000 fceb 	bl	800107c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80006a6:	f240 1371 	movw	r3, #369	; 0x171
 80006aa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006ac:	2332      	movs	r3, #50	; 0x32
 80006ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80006b0:	230c      	movs	r3, #12
 80006b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80006c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80006ca:	2300      	movs	r3, #0
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80006d2:	2300      	movs	r3, #0
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 f826 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80006e6:	f000 fcc9 	bl	800107c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	37a8      	adds	r7, #168	; 0xa8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC1_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC1_Init+0x98>)
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC1_Init+0xa0>)
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <MX_ADC1_Init+0x98>)
 800075c:	f001 fb3a 	bl	8001dd4 <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 fc89 	bl	800107c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800076a:	230a      	movs	r3, #10
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC1_Init+0x98>)
 800077c:	f001 fb6e 	bl	8001e5c <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 fc79 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20004b48 	.word	0x20004b48
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_DAC_Init+0x4c>)
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_DAC_Init+0x50>)
 80007b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_DAC_Init+0x4c>)
 80007b6:	f001 fe61 	bl	800247c <HAL_DAC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c0:	f000 fc5c 	bl	800107c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_DAC_Init+0x4c>)
 80007d4:	f001 fec8 	bl	8002568 <HAL_DAC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007de:	f000 fc4d 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20004b90 	.word	0x20004b90
 80007f0:	40007400 	.word	0x40007400

080007f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_DFSDM1_Init+0x68>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <MX_DFSDM1_Init+0x6c>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000800:	2201      	movs	r2, #1
 8000802:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_DFSDM1_Init+0x68>)
 800080c:	2202      	movs	r2, #2
 800080e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_DFSDM1_Init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000824:	2202      	movs	r2, #2
 8000826:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_DFSDM1_Init+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000836:	2201      	movs	r2, #1
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_DFSDM1_Init+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_DFSDM1_Init+0x68>)
 8000848:	f001 fee6 	bl	8002618 <HAL_DFSDM_ChannelInit>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000852:	f000 fc13 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20004a10 	.word	0x20004a10
 8000860:	40016020 	.word	0x40016020

08000864 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 800086a:	4a30      	ldr	r2, [pc, #192]	; (800092c <MX_DFSDM2_Init+0xc8>)
 800086c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 8000870:	2201      	movs	r2, #1
 8000872:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 800087c:	2202      	movs	r2, #2
 800087e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 8000894:	2202      	movs	r2, #2
 8000896:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <MX_DFSDM2_Init+0xc4>)
 80008b8:	f001 feae 	bl	8002618 <HAL_DFSDM_ChannelInit>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80008c2:	f000 fbdb 	bl	800107c <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008c8:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <MX_DFSDM2_Init+0xd0>)
 80008ca:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008da:	2202      	movs	r2, #2
 80008dc:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 8000904:	2201      	movs	r2, #1
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000914:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_DFSDM2_Init+0xcc>)
 8000916:	f001 fe7f 	bl	8002618 <HAL_DFSDM_ChannelInit>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000920:	f000 fbac 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20004b10 	.word	0x20004b10
 800092c:	40016420 	.word	0x40016420
 8000930:	20004a48 	.word	0x20004a48
 8000934:	400164e0 	.word	0x400164e0

08000938 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_FMPI2C1_Init+0x64>)
 8000940:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000944:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <MX_FMPI2C1_Init+0x68>)
 8000946:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000974:	f001 ffc6 	bl	8002904 <HAL_FMPI2C_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800097e:	f000 fb7d 	bl	800107c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_FMPI2C1_Init+0x60>)
 8000986:	f002 f84c 	bl	8002a22 <HAL_FMPI2CEx_ConfigAnalogFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 fb74 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20004ba4 	.word	0x20004ba4
 800099c:	40006000 	.word	0x40006000
 80009a0:	00303d5b 	.word	0x00303d5b

080009a4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <MX_I2S2_Init+0x58>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009d0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_I2S2_Init+0x54>)
 80009e6:	f003 ff1f 	bl	8004828 <HAL_I2S_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80009f0:	f000 fb44 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20004d18 	.word	0x20004d18
 80009fc:	40003800 	.word	0x40003800

08000a00 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_QUADSPI_Init+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_QUADSPI_Init+0x50>)
 8000a3c:	f004 fbb6 	bl	80051ac <HAL_QSPI_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a46:	f000 fb19 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20004d60 	.word	0x20004d60
 8000a54:	a0001000 	.word	0xa0001000

08000a58 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_SDIO_SD_Init+0x5c>)
 8000a60:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a88:	f005 fc6e 	bl	8006368 <HAL_SD_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000a92:	f000 faf3 	bl	800107c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SDIO_SD_Init+0x58>)
 8000a9c:	f005 fe98 	bl	80067d0 <HAL_SD_ConfigWideBusOperation>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 fae9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20004c4c 	.word	0x20004c4c
 8000ab4:	40012c00 	.word	0x40012c00

08000ab8 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_UART10_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_UART10_Init+0x4c>)
 8000af0:	f006 fc28 	bl	8007344 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 fabf 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20004a80 	.word	0x20004a80
 8000b08:	40011c00 	.word	0x40011c00

08000b0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART6_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b44:	f006 fbfe 	bl	8007344 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 fa95 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20004cd0 	.word	0x20004cd0
 8000b5c:	40011400 	.word	0x40011400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
 8000b7a:	4bb0      	ldr	r3, [pc, #704]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4aaf      	ldr	r2, [pc, #700]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4bad      	ldr	r3, [pc, #692]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	623b      	str	r3, [r7, #32]
 8000b90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	4ba9      	ldr	r3, [pc, #676]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4aa8      	ldr	r2, [pc, #672]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4ba6      	ldr	r3, [pc, #664]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	4ba2      	ldr	r3, [pc, #648]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4aa1      	ldr	r2, [pc, #644]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bb8:	f043 0320 	orr.w	r3, r3, #32
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b9f      	ldr	r3, [pc, #636]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4b9b      	ldr	r3, [pc, #620]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a9a      	ldr	r2, [pc, #616]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b98      	ldr	r3, [pc, #608]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b94      	ldr	r3, [pc, #592]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a93      	ldr	r2, [pc, #588]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b91      	ldr	r3, [pc, #580]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b8d      	ldr	r3, [pc, #564]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a8c      	ldr	r2, [pc, #560]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b8a      	ldr	r3, [pc, #552]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b86      	ldr	r3, [pc, #536]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a85      	ldr	r2, [pc, #532]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b83      	ldr	r3, [pc, #524]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b7f      	ldr	r3, [pc, #508]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a7e      	ldr	r2, [pc, #504]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b7c      	ldr	r3, [pc, #496]	; (8000e3c <MX_GPIO_Init+0x2dc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2138      	movs	r1, #56	; 0x38
 8000c5a:	4879      	ldr	r0, [pc, #484]	; (8000e40 <MX_GPIO_Init+0x2e0>)
 8000c5c:	f002 f8be 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2120      	movs	r1, #32
 8000c64:	4877      	ldr	r0, [pc, #476]	; (8000e44 <MX_GPIO_Init+0x2e4>)
 8000c66:	f002 f8b9 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c70:	4875      	ldr	r0, [pc, #468]	; (8000e48 <MX_GPIO_Init+0x2e8>)
 8000c72:	f002 f8b3 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000c7c:	4873      	ldr	r0, [pc, #460]	; (8000e4c <MX_GPIO_Init+0x2ec>)
 8000c7e:	f002 f8ad 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4869      	ldr	r0, [pc, #420]	; (8000e40 <MX_GPIO_Init+0x2e0>)
 8000c9a:	f001 ff0d 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4861      	ldr	r0, [pc, #388]	; (8000e40 <MX_GPIO_Init+0x2e0>)
 8000cba:	f001 fefd 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	485d      	ldr	r0, [pc, #372]	; (8000e50 <MX_GPIO_Init+0x2f0>)
 8000cdc:	f001 feec 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce4:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <MX_GPIO_Init+0x2f4>)
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4854      	ldr	r0, [pc, #336]	; (8000e44 <MX_GPIO_Init+0x2e4>)
 8000cf4:	f001 fee0 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfc:	4b55      	ldr	r3, [pc, #340]	; (8000e54 <MX_GPIO_Init+0x2f4>)
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4853      	ldr	r0, [pc, #332]	; (8000e58 <MX_GPIO_Init+0x2f8>)
 8000d0c:	f001 fed4 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d10:	2320      	movs	r3, #32
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4847      	ldr	r0, [pc, #284]	; (8000e44 <MX_GPIO_Init+0x2e4>)
 8000d28:	f001 fec6 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4840      	ldr	r0, [pc, #256]	; (8000e48 <MX_GPIO_Init+0x2e8>)
 8000d48:	f001 feb6 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d52:	4b40      	ldr	r3, [pc, #256]	; (8000e54 <MX_GPIO_Init+0x2f4>)
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	483b      	ldr	r0, [pc, #236]	; (8000e50 <MX_GPIO_Init+0x2f0>)
 8000d62:	f001 fea9 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4831      	ldr	r0, [pc, #196]	; (8000e48 <MX_GPIO_Init+0x2e8>)
 8000d84:	f001 fe98 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4828      	ldr	r0, [pc, #160]	; (8000e48 <MX_GPIO_Init+0x2e8>)
 8000da6:	f001 fe87 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000daa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4821      	ldr	r0, [pc, #132]	; (8000e48 <MX_GPIO_Init+0x2e8>)
 8000dc4:	f001 fe78 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000dc8:	f248 0380 	movw	r3, #32896	; 0x8080
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_GPIO_Init+0x2f4>)
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481b      	ldr	r0, [pc, #108]	; (8000e4c <MX_GPIO_Init+0x2ec>)
 8000dde:	f001 fe6b 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000de2:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4814      	ldr	r0, [pc, #80]	; (8000e4c <MX_GPIO_Init+0x2ec>)
 8000dfc:	f001 fe5c 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e12:	2301      	movs	r3, #1
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <MX_GPIO_Init+0x2f8>)
 8000e1e:	f001 fe4b 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e22:	2330      	movs	r3, #48	; 0x30
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e32:	2306      	movs	r3, #6
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	e00f      	b.n	8000e5c <MX_GPIO_Init+0x2fc>
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	40021400 	.word	0x40021400
 8000e54:	10110000 	.word	0x10110000
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <MX_GPIO_Init+0x348>)
 8000e60:	f001 fe2a 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_GPIO_Init+0x34c>)
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <MX_GPIO_Init+0x348>)
 8000e78:	f001 fe1e 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_GPIO_Init+0x348>)
 8000e9a:	f001 fe0d 	bl	8002ab8 <HAL_GPIO_Init>

}
 8000e9e:	bf00      	nop
 8000ea0:	3738      	adds	r7, #56	; 0x38
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	10110000 	.word	0x10110000

08000eb0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <MX_FSMC_Init+0x158>)
 8000eca:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ece:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <MX_FSMC_Init+0x158>)
 8000ed2:	4a4e      	ldr	r2, [pc, #312]	; (800100c <MX_FSMC_Init+0x15c>)
 8000ed4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <MX_FSMC_Init+0x158>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_FSMC_Init+0x158>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <MX_FSMC_Init+0x158>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ee8:	4b47      	ldr	r3, [pc, #284]	; (8001008 <MX_FSMC_Init+0x158>)
 8000eea:	2210      	movs	r2, #16
 8000eec:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000eee:	4b46      	ldr	r3, [pc, #280]	; (8001008 <MX_FSMC_Init+0x158>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <MX_FSMC_Init+0x158>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <MX_FSMC_Init+0x158>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f06:	4b40      	ldr	r3, [pc, #256]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f24:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f30:	230f      	movs	r3, #15
 8000f32:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f34:	230f      	movs	r3, #15
 8000f36:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f38:	23ff      	movs	r3, #255	; 0xff
 8000f3a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f40:	2310      	movs	r3, #16
 8000f42:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f44:	2311      	movs	r3, #17
 8000f46:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	482d      	ldr	r0, [pc, #180]	; (8001008 <MX_FSMC_Init+0x158>)
 8000f54:	f005 ff74 	bl	8006e40 <HAL_SRAM_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000f5e:	f000 f88d 	bl	800107c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f64:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f68:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <MX_FSMC_Init+0x15c>)
 8000f6e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f84:	2210      	movs	r2, #16
 8000f86:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_FSMC_Init+0x160>)
 8000f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_FSMC_Init+0x160>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_FSMC_Init+0x160>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_FSMC_Init+0x160>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_FSMC_Init+0x160>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_FSMC_Init+0x160>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_FSMC_Init+0x160>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_FSMC_Init+0x160>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000fd4:	23ff      	movs	r3, #255	; 0xff
 8000fd6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fe0:	2311      	movs	r3, #17
 8000fe2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <MX_FSMC_Init+0x160>)
 8000ff0:	f005 ff26 	bl	8006e40 <HAL_SRAM_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8000ffa:	f000 f83f 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20004ac0 	.word	0x20004ac0
 800100c:	a0000104 	.word	0xa0000104
 8001010:	20004bf0 	.word	0x20004bf0

08001014 <DefaultThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultThread */
void DefaultThread(void *argument)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800101c:	f00d fd96 	bl	800eb4c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_UART_Receive_IT(&huart6, Rx_Data, 4);
 8001020:	2204      	movs	r2, #4
 8001022:	4906      	ldr	r1, [pc, #24]	; (800103c <DefaultThread+0x28>)
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <DefaultThread+0x2c>)
 8001026:	f006 f9da 	bl	80073de <HAL_UART_Receive_IT>
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800102a:	2120      	movs	r1, #32
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <DefaultThread+0x30>)
 800102e:	f001 feee 	bl	8002e0e <HAL_GPIO_TogglePin>
    osDelay(500);
 8001032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001036:	f00a ff33 	bl	800bea0 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800103a:	e7f6      	b.n	800102a <DefaultThread+0x16>
 800103c:	20004c40 	.word	0x20004c40
 8001040:	20004cd0 	.word	0x20004cd0
 8001044:	40020800 	.word	0x40020800

08001048 <MainThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainThread */
void MainThread(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001050:	2064      	movs	r0, #100	; 0x64
 8001052:	f00a ff25 	bl	800bea0 <osDelay>
 8001056:	e7fb      	b.n	8001050 <MainThread+0x8>

08001058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800106a:	f000 fe71 	bl	8001d50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_MspInit+0x4c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <HAL_ADC_MspInit+0xe4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d15b      	bne.n	80011b6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_ADC_MspInit+0xe8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800116e:	2311      	movs	r3, #17
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <HAL_ADC_MspInit+0xec>)
 8001182:	f001 fc99 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001186:	2326      	movs	r3, #38	; 0x26
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <HAL_ADC_MspInit+0xf0>)
 800119a:	f001 fc8d 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <HAL_ADC_MspInit+0xf4>)
 80011b2:	f001 fc81 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	; 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012000 	.word	0x40012000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_DAC_MspInit+0x8c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12f      	bne.n	8001256 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_DAC_MspInit+0x90>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_DAC_MspInit+0x90>)
 8001200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_DAC_MspInit+0x90>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_DAC_MspInit+0x90>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <HAL_DAC_MspInit+0x90>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_DAC_MspInit+0x90>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800122e:	2310      	movs	r3, #16
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <HAL_DAC_MspInit+0x94>)
 8001242:	f001 fc39 	bl	8002ab8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2036      	movs	r0, #54	; 0x36
 800124c:	f001 f8ec 	bl	8002428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001250:	2036      	movs	r0, #54	; 0x36
 8001252:	f001 f905 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40007400 	.word	0x40007400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a77      	ldr	r2, [pc, #476]	; (8001468 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00e      	beq.n	80012ac <HAL_DFSDM_ChannelMspInit+0x40>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a76      	ldr	r2, [pc, #472]	; (800146c <HAL_DFSDM_ChannelMspInit+0x200>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d009      	beq.n	80012ac <HAL_DFSDM_ChannelMspInit+0x40>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a74      	ldr	r2, [pc, #464]	; (8001470 <HAL_DFSDM_ChannelMspInit+0x204>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d004      	beq.n	80012ac <HAL_DFSDM_ChannelMspInit+0x40>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a73      	ldr	r2, [pc, #460]	; (8001474 <HAL_DFSDM_ChannelMspInit+0x208>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d154      	bne.n	8001356 <HAL_DFSDM_ChannelMspInit+0xea>
 80012ac:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d150      	bne.n	8001356 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	4a6f      	ldr	r2, [pc, #444]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c2:	6453      	str	r3, [r2, #68]	; 0x44
 80012c4:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a68      	ldr	r2, [pc, #416]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	4b62      	ldr	r3, [pc, #392]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a61      	ldr	r2, [pc, #388]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800131a:	2306      	movs	r3, #6
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	4856      	ldr	r0, [pc, #344]	; (8001480 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001326:	f001 fbc7 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800132a:	2340      	movs	r3, #64	; 0x40
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800133a:	2306      	movs	r3, #6
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	484f      	ldr	r0, [pc, #316]	; (8001484 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001346:	f001 fbb7 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001352:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001354:	e084      	b.n	8001460 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d07f      	beq.n	8001460 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a41      	ldr	r2, [pc, #260]	; (800146c <HAL_DFSDM_ChannelMspInit+0x200>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d07a      	beq.n	8001460 <HAL_DFSDM_ChannelMspInit+0x1f4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a40      	ldr	r2, [pc, #256]	; (8001470 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d075      	beq.n	8001460 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a3e      	ldr	r2, [pc, #248]	; (8001474 <HAL_DFSDM_ChannelMspInit+0x208>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d070      	beq.n	8001460 <HAL_DFSDM_ChannelMspInit+0x1f4>
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d16c      	bne.n	8001460 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a3b      	ldr	r2, [pc, #236]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001390:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b39      	ldr	r3, [pc, #228]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b35      	ldr	r3, [pc, #212]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a34      	ldr	r2, [pc, #208]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b32      	ldr	r3, [pc, #200]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a2d      	ldr	r2, [pc, #180]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001406:	2307      	movs	r3, #7
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001412:	f001 fb51 	bl	8002ab8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001416:	2304      	movs	r3, #4
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001426:	2303      	movs	r3, #3
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001432:	f001 fb41 	bl	8002ab8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001446:	2306      	movs	r3, #6
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <HAL_DFSDM_ChannelMspInit+0x220>)
 8001452:	f001 fb31 	bl	8002ab8 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	3738      	adds	r7, #56	; 0x38
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40016000 	.word	0x40016000
 800146c:	40016020 	.word	0x40016020
 8001470:	40016040 	.word	0x40016040
 8001474:	40016060 	.word	0x40016060
 8001478:	200000b0 	.word	0x200000b0
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020c00 	.word	0x40020c00
 8001488:	200000b4 	.word	0x200000b4
 800148c:	40020400 	.word	0x40020400

08001490 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_FMPI2C_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_FMPI2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_FMPI2C_MspInit+0x88>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_FMPI2C_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_FMPI2C_MspInit+0x8c>)
 80014ea:	f001 fae5 	bl	8002ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_FMPI2C_MspInit+0x88>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_FMPI2C_MspInit+0x88>)
 80014f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_FMPI2C_MspInit+0x88>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40006000 	.word	0x40006000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020800 	.word	0x40020800

08001520 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a4f      	ldr	r2, [pc, #316]	; (800167c <HAL_I2S_MspInit+0x15c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	f040 8097 	bne.w	8001672 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <HAL_I2S_MspInit+0x160>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a4c      	ldr	r2, [pc, #304]	; (8001680 <HAL_I2S_MspInit+0x160>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_I2S_MspInit+0x160>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	4b46      	ldr	r3, [pc, #280]	; (8001680 <HAL_I2S_MspInit+0x160>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a45      	ldr	r2, [pc, #276]	; (8001680 <HAL_I2S_MspInit+0x160>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b43      	ldr	r3, [pc, #268]	; (8001680 <HAL_I2S_MspInit+0x160>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <HAL_I2S_MspInit+0x160>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a3e      	ldr	r2, [pc, #248]	; (8001680 <HAL_I2S_MspInit+0x160>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <HAL_I2S_MspInit+0x160>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b38      	ldr	r3, [pc, #224]	; (8001680 <HAL_I2S_MspInit+0x160>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a37      	ldr	r2, [pc, #220]	; (8001680 <HAL_I2S_MspInit+0x160>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_I2S_MspInit+0x160>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_I2S_MspInit+0x160>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <HAL_I2S_MspInit+0x160>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	6313      	str	r3, [r2, #48]	; 0x30
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_I2S_MspInit+0x160>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80015d0:	2304      	movs	r3, #4
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80015e0:	2306      	movs	r3, #6
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4826      	ldr	r0, [pc, #152]	; (8001684 <HAL_I2S_MspInit+0x164>)
 80015ec:	f001 fa64 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80015f0:	2308      	movs	r3, #8
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001600:	2305      	movs	r3, #5
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	481e      	ldr	r0, [pc, #120]	; (8001684 <HAL_I2S_MspInit+0x164>)
 800160c:	f001 fa54 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001610:	2308      	movs	r3, #8
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001620:	2305      	movs	r3, #5
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4817      	ldr	r0, [pc, #92]	; (8001688 <HAL_I2S_MspInit+0x168>)
 800162c:	f001 fa44 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001630:	2308      	movs	r3, #8
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001640:	2305      	movs	r3, #5
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <HAL_I2S_MspInit+0x16c>)
 800164c:	f001 fa34 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001662:	2305      	movs	r3, #5
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <HAL_I2S_MspInit+0x170>)
 800166e:	f001 fa23 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3730      	adds	r7, #48	; 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40003800 	.word	0x40003800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020800 	.word	0x40020800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a56      	ldr	r2, [pc, #344]	; (800180c <HAL_QSPI_MspInit+0x178>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	f040 80a6 	bne.w	8001804 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	4a53      	ldr	r2, [pc, #332]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	6393      	str	r3, [r2, #56]	; 0x38
 80016c8:	4b51      	ldr	r3, [pc, #324]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4a4c      	ldr	r2, [pc, #304]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6313      	str	r3, [r2, #48]	; 0x30
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a45      	ldr	r2, [pc, #276]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	4b38      	ldr	r3, [pc, #224]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a37      	ldr	r2, [pc, #220]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a30      	ldr	r2, [pc, #192]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 800174e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_QSPI_MspInit+0x17c>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001760:	2304      	movs	r3, #4
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001770:	2309      	movs	r3, #9
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4826      	ldr	r0, [pc, #152]	; (8001814 <HAL_QSPI_MspInit+0x180>)
 800177c:	f001 f99c 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001780:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001792:	230a      	movs	r3, #10
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	481e      	ldr	r0, [pc, #120]	; (8001818 <HAL_QSPI_MspInit+0x184>)
 800179e:	f001 f98b 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80017a2:	2304      	movs	r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017b2:	2309      	movs	r3, #9
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	4817      	ldr	r0, [pc, #92]	; (800181c <HAL_QSPI_MspInit+0x188>)
 80017be:	f001 f97b 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017d4:	2309      	movs	r3, #9
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	4810      	ldr	r0, [pc, #64]	; (8001820 <HAL_QSPI_MspInit+0x18c>)
 80017e0:	f001 f96a 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017f4:	230a      	movs	r3, #10
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4809      	ldr	r0, [pc, #36]	; (8001824 <HAL_QSPI_MspInit+0x190>)
 8001800:	f001 f95a 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3738      	adds	r7, #56	; 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	a0001000 	.word	0xa0001000
 8001810:	40023800 	.word	0x40023800
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40020400 	.word	0x40020400
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021800 	.word	0x40021800

08001828 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <HAL_SD_MspInit+0xc0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d14a      	bne.n	80018e0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_SD_MspInit+0xc4>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_SD_MspInit+0xc4>)
 8001854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_SD_MspInit+0xc4>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_SD_MspInit+0xc4>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_SD_MspInit+0xc4>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_SD_MspInit+0xc4>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_SD_MspInit+0xc4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_SD_MspInit+0xc4>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_SD_MspInit+0xc4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800189e:	2340      	movs	r3, #64	; 0x40
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018ae:	230c      	movs	r3, #12
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <HAL_SD_MspInit+0xc8>)
 80018ba:	f001 f8fd 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80018be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018c2:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018d0:	230c      	movs	r3, #12
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <HAL_SD_MspInit+0xcc>)
 80018dc:	f001 f8ec 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40012c00 	.word	0x40012c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020800 	.word	0x40020800

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a37      	ldr	r2, [pc, #220]	; (80019f4 <HAL_UART_MspInit+0xfc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12d      	bne.n	8001976 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_UART_MspInit+0x100>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <HAL_UART_MspInit+0x100>)
 8001924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_UART_MspInit+0x100>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_UART_MspInit+0x100>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_UART_MspInit+0x100>)
 8001940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_UART_MspInit+0x100>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001952:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001964:	230b      	movs	r3, #11
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4823      	ldr	r0, [pc, #140]	; (80019fc <HAL_UART_MspInit+0x104>)
 8001970:	f001 f8a2 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001974:	e039      	b.n	80019ea <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_UART_MspInit+0x108>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d134      	bne.n	80019ea <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_UART_MspInit+0x100>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_UART_MspInit+0x100>)
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	6453      	str	r3, [r2, #68]	; 0x44
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_UART_MspInit+0x100>)
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_UART_MspInit+0x100>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_UART_MspInit+0x100>)
 80019a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_UART_MspInit+0x100>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80019b8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019ca:	2308      	movs	r3, #8
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_UART_MspInit+0x104>)
 80019d6:	f001 f86f 	bl	8002ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	2047      	movs	r0, #71	; 0x47
 80019e0:	f000 fd22 	bl	8002428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019e4:	2047      	movs	r0, #71	; 0x47
 80019e6:	f000 fd3b 	bl	8002460 <HAL_NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40011c00 	.word	0x40011c00
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40021800 	.word	0x40021800
 8001a00:	40011400 	.word	0x40011400

08001a04 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <HAL_FSMC_MspInit+0xc8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d151      	bne.n	8001ac4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_FSMC_MspInit+0xc8>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <HAL_FSMC_MspInit+0xcc>)
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_FSMC_MspInit+0xcc>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6393      	str	r3, [r2, #56]	; 0x38
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_FSMC_MspInit+0xcc>)
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001a42:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a46:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a54:	230c      	movs	r3, #12
 8001a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481d      	ldr	r0, [pc, #116]	; (8001ad4 <HAL_FSMC_MspInit+0xd0>)
 8001a5e:	f001 f82b 	bl	8002ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001a62:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a66:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a74:	230c      	movs	r3, #12
 8001a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4816      	ldr	r0, [pc, #88]	; (8001ad8 <HAL_FSMC_MspInit+0xd4>)
 8001a7e:	f001 f81b 	bl	8002ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001a82:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a86:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a94:	230c      	movs	r3, #12
 8001a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <HAL_FSMC_MspInit+0xd8>)
 8001a9e:	f001 f80b 	bl	8002ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001aa2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001aa6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4808      	ldr	r0, [pc, #32]	; (8001ae0 <HAL_FSMC_MspInit+0xdc>)
 8001abe:	f000 fffb 	bl	8002ab8 <HAL_GPIO_Init>
 8001ac2:	e000      	b.n	8001ac6 <HAL_FSMC_MspInit+0xc2>
    return;
 8001ac4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000b8 	.word	0x200000b8
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40021400 	.word	0x40021400
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001aec:	f7ff ff8a 	bl	8001a04 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	2036      	movs	r0, #54	; 0x36
 8001b0e:	f000 fc8b 	bl	8002428 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b12:	2036      	movs	r0, #54	; 0x36
 8001b14:	f000 fca4 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_InitTick+0xa0>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_InitTick+0xa0>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_InitTick+0xa0>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b34:	f107 0210 	add.w	r2, r7, #16
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fdc2 	bl	80056c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b44:	f003 fd98 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8001b48:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_InitTick+0xa4>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3b01      	subs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_InitTick+0xac>)
 8001b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b7a:	f005 f9a5 	bl	8006ec8 <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b86:	f005 f9d4 	bl	8006f32 <HAL_TIM_Base_Start_IT>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	20004dac 	.word	0x20004dac
 8001ba4:	40001000 	.word	0x40001000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <TIM6_DAC_IRQHandler+0x14>)
 8001be2:	f000 fc6d 	bl	80024c0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <TIM6_DAC_IRQHandler+0x18>)
 8001be8:	f005 f9c7 	bl	8006f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20004b90 	.word	0x20004b90
 8001bf4:	20004dac 	.word	0x20004dac

08001bf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <OTG_FS_IRQHandler+0x10>)
 8001bfe:	f001 fbb1 	bl	8003364 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20005238 	.word	0x20005238

08001c0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <USART6_IRQHandler+0x10>)
 8001c12:	f005 fc39 	bl	8007488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20004cd0 	.word	0x20004cd0

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f00d fa7e 	bl	800f150 <__errno>
 8001c54:	4602      	mov	r2, r0
 8001c56:	230c      	movs	r3, #12
 8001c58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20050000 	.word	0x20050000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	200000bc 	.word	0x200000bc
 8001c88:	20005500 	.word	0x20005500

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <SystemInit+0x28>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <SystemInit+0x28>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SystemInit+0x28>)
 8001ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cbe:	e003      	b.n	8001cc8 <LoopCopyDataInit>

08001cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cc6:	3104      	adds	r1, #4

08001cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd0:	d3f6      	bcc.n	8001cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd4:	e002      	b.n	8001cdc <LoopFillZerobss>

08001cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cd8:	f842 3b04 	str.w	r3, [r2], #4

08001cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce0:	d3f9      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd3 	bl	8001c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f00d fa39 	bl	800f15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7fe fc27 	bl	800053c <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cf0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001cf4:	0800f424 	.word	0x0800f424
  ldr  r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cfc:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001d00:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001d04:	20005500 	.word	0x20005500

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fb6c 	bl	8002412 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fedc 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff f9a4 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20004dec 	.word	0x20004dec

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20004dec 	.word	0x20004dec

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff ffee 	bl	8001d78 <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_Delay+0x40>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffde 	bl	8001d78 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e033      	b.n	8001e52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f972 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e1a:	f023 0302 	bic.w	r3, r3, #2
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f94a 	bl	80020c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1c>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e113      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x244>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b09      	cmp	r3, #9
 8001e86:	d925      	bls.n	8001ed4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3b1e      	subs	r3, #30
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	400a      	ands	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68d9      	ldr	r1, [r3, #12]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3b1e      	subs	r3, #30
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	e022      	b.n	8001f1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6919      	ldr	r1, [r3, #16]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2207      	movs	r2, #7
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6919      	ldr	r1, [r3, #16]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4403      	add	r3, r0
 8001f10:	409a      	lsls	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d824      	bhi.n	8001f6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b05      	subs	r3, #5
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b05      	subs	r3, #5
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6a:	e04c      	b.n	8002006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d824      	bhi.n	8001fbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b23      	subs	r3, #35	; 0x23
 8001f86:	221f      	movs	r2, #31
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	3b23      	subs	r3, #35	; 0x23
 8001fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbc:	e023      	b.n	8002006 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b41      	subs	r3, #65	; 0x41
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b41      	subs	r3, #65	; 0x41
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002006:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_ADC_ConfigChannel+0x250>)
 8002008:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <HAL_ADC_ConfigChannel+0x254>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d10f      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1d8>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d10b      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_ADC_ConfigChannel+0x254>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d12b      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x23a>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_ADC_ConfigChannel+0x258>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_ADC_ConfigChannel+0x1f4>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b11      	cmp	r3, #17
 800204e:	d122      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_ADC_ConfigChannel+0x258>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d111      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_ADC_ConfigChannel+0x260>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	0c9a      	lsrs	r2, r3, #18
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002088:	e002      	b.n	8002090 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	3b01      	subs	r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f9      	bne.n	800208a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40012300 	.word	0x40012300
 80020b0:	40012000 	.word	0x40012000
 80020b4:	10000012 	.word	0x10000012
 80020b8:	20000000 	.word	0x20000000
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c8:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <ADC_Init+0x1f0>)
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	021a      	lsls	r2, r3, #8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002118:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <ADC_Init+0x1f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002166:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6899      	ldr	r1, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	e00f      	b.n	80021be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0202 	bic.w	r2, r2, #2
 80021cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e1b      	ldrb	r3, [r3, #24]
 80021d8:	005a      	lsls	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800220a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	3b01      	subs	r3, #1
 8002218:	035a      	lsls	r2, r3, #13
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e007      	b.n	8002234 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002232:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	3b01      	subs	r3, #1
 8002250:	051a      	lsls	r2, r3, #20
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002276:	025a      	lsls	r2, r3, #9
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	029a      	lsls	r2, r3, #10
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40012300 	.word	0x40012300
 80022b4:	0f000001 	.word	0x0f000001

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	; (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff4c 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243a:	f7ff ff61 	bl	8002300 <__NVIC_GetPriorityGrouping>
 800243e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff ffb1 	bl	80023ac <NVIC_EncodePriority>
 800244a:	4602      	mov	r2, r0
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff80 	bl	8002358 <__NVIC_SetPriority>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff54 	bl	800231c <__NVIC_EnableIRQ>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e014      	b.n	80024b8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fe98 	bl	80011d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d6:	d118      	bne.n	800250a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002502:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f825 	bl	8002554 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d118      	bne.n	800254c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002544:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f85b 	bl	8002602 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	795b      	ldrb	r3, [r3, #5]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_DAC_ConfigChannel+0x20>
 8002584:	2302      	movs	r3, #2
 8002586:	e036      	b.n	80025f6 <HAL_DAC_ConfigChannel+0x8e>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800259c:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4013      	ands	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	22c0      	movs	r2, #192	; 0xc0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	400a      	ands	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0cf      	b.n	80027ca <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a69      	ldr	r2, [pc, #420]	; (80027d4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DFSDM_ChannelInit+0x3a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a67      	ldr	r2, [pc, #412]	; (80027d8 <HAL_DFSDM_ChannelInit+0x1c0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DFSDM_ChannelInit+0x3a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a66      	ldr	r2, [pc, #408]	; (80027dc <HAL_DFSDM_ChannelInit+0x1c4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DFSDM_ChannelInit+0x3a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a64      	ldr	r2, [pc, #400]	; (80027e0 <HAL_DFSDM_ChannelInit+0x1c8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d106      	bne.n	8002660 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002652:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002654:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002656:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002658:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800265a:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <HAL_DFSDM_ChannelInit+0x1bc>)
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e005      	b.n	800266c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002660:	4b62      	ldr	r3, [pc, #392]	; (80027ec <HAL_DFSDM_ChannelInit+0x1d4>)
 8002662:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002664:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002666:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002668:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <HAL_DFSDM_ChannelInit+0x1dc>)
 800266a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 f8c1 	bl	80027f8 <DFSDM_GetChannelFromInstance>
 8002676:	4603      	mov	r3, r0
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0a0      	b.n	80027ca <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fe fdef 	bl	800126c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d125      	bne.n	80026ec <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	791b      	ldrb	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026fa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800270a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002710:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020f 	bic.w	r2, r2, #15
 8002728:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002750:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	3b01      	subs	r3, #1
 8002762:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f002 0207 	and.w	r2, r2, #7
 800277c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a8:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f81e 	bl	80027f8 <DFSDM_GetChannelFromInstance>
 80027bc:	4603      	mov	r3, r0
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40016000 	.word	0x40016000
 80027d8:	40016020 	.word	0x40016020
 80027dc:	40016040 	.word	0x40016040
 80027e0:	40016060 	.word	0x40016060
 80027e4:	200000c0 	.word	0x200000c0
 80027e8:	200000c4 	.word	0x200000c4
 80027ec:	200000d4 	.word	0x200000d4
 80027f0:	200000d8 	.word	0x200000d8
 80027f4:	40016400 	.word	0x40016400

080027f8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <DFSDM_GetChannelFromInstance+0x9c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <DFSDM_GetChannelFromInstance+0x18>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a23      	ldr	r2, [pc, #140]	; (8002898 <DFSDM_GetChannelFromInstance+0xa0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d102      	bne.n	8002816 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e037      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a20      	ldr	r2, [pc, #128]	; (800289c <DFSDM_GetChannelFromInstance+0xa4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <DFSDM_GetChannelFromInstance+0x2e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d102      	bne.n	800282c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002826:	2301      	movs	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e02c      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <DFSDM_GetChannelFromInstance+0xac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <DFSDM_GetChannelFromInstance+0x44>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <DFSDM_GetChannelFromInstance+0xb0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800283c:	2302      	movs	r3, #2
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e021      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <DFSDM_GetChannelFromInstance+0xb4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d003      	beq.n	8002852 <DFSDM_GetChannelFromInstance+0x5a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <DFSDM_GetChannelFromInstance+0xb8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d102      	bne.n	8002858 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002852:	2303      	movs	r3, #3
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e016      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <DFSDM_GetChannelFromInstance+0xbc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d102      	bne.n	8002866 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002860:	2304      	movs	r3, #4
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e00f      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <DFSDM_GetChannelFromInstance+0xc0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d102      	bne.n	8002874 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800286e:	2305      	movs	r3, #5
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e008      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <DFSDM_GetChannelFromInstance+0xc4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d102      	bne.n	8002882 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800287c:	2306      	movs	r3, #6
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e001      	b.n	8002886 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8002882:	2307      	movs	r3, #7
 8002884:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40016000 	.word	0x40016000
 8002898:	40016400 	.word	0x40016400
 800289c:	40016020 	.word	0x40016020
 80028a0:	40016420 	.word	0x40016420
 80028a4:	40016040 	.word	0x40016040
 80028a8:	40016440 	.word	0x40016440
 80028ac:	40016060 	.word	0x40016060
 80028b0:	40016460 	.word	0x40016460
 80028b4:	40016480 	.word	0x40016480
 80028b8:	400164a0 	.word	0x400164a0
 80028bc:	400164c0 	.word	0x400164c0

080028c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e00c      	b.n	80028f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2205      	movs	r2, #5
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e081      	b.n	8002a1a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fdb0 	bl	8001490 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002954:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002964:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	e006      	b.n	800298c <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800298a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d104      	bne.n	800299e <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800299c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029c0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	ea42 0103 	orr.w	r1, r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	021a      	lsls	r2, r3, #8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69d9      	ldr	r1, [r3, #28]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1a      	ldr	r2, [r3, #32]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d138      	bne.n	8002aaa <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e032      	b.n	8002aac <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2224      	movs	r2, #36	; 0x24
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e165      	b.n	8002da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 8154 	bne.w	8002d9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d00b      	beq.n	8002b12 <HAL_GPIO_Init+0x5a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b06:	2b11      	cmp	r3, #17
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0xfc>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b12      	cmp	r3, #18
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ae 	beq.w	8002d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_GPIO_Init+0x2fc>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_GPIO_Init+0x2fc>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b59      	ldr	r3, [pc, #356]	; (8002db4 <HAL_GPIO_Init+0x2fc>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5a:	4a57      	ldr	r2, [pc, #348]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	; (8002dbc <HAL_GPIO_Init+0x304>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <HAL_GPIO_Init+0x308>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x216>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <HAL_GPIO_Init+0x30c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x212>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	; (8002dc8 <HAL_GPIO_Init+0x310>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x20e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_GPIO_Init+0x314>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x20a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a49      	ldr	r2, [pc, #292]	; (8002dd0 <HAL_GPIO_Init+0x318>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x206>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a48      	ldr	r2, [pc, #288]	; (8002dd4 <HAL_GPIO_Init+0x31c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x202>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cba:	2307      	movs	r3, #7
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x21c>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce4:	4934      	ldr	r1, [pc, #208]	; (8002db8 <HAL_GPIO_Init+0x300>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d16:	4a30      	ldr	r2, [pc, #192]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d40:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d94:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	f67f ae96 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	3724      	adds	r7, #36	; 0x24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40021400 	.word	0x40021400
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df8:	e003      	b.n	8002e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	401a      	ands	r2, r3
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d104      	bne.n	8002e32 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	041a      	lsls	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002e30:	e002      	b.n	8002e38 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	b08f      	sub	sp, #60	; 0x3c
 8002e48:	af0a      	add	r7, sp, #40	; 0x28
 8002e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e054      	b.n	8002f00 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f00b febf 	bl	800ebf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f005 fec3 	bl	8008c20 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	687e      	ldr	r6, [r7, #4]
 8002ea2:	466d      	mov	r5, sp
 8002ea4:	f106 0410 	add.w	r4, r6, #16
 8002ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb8:	1d33      	adds	r3, r6, #4
 8002eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	f005 fe3d 	bl	8008b3c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 feba 	bl	8008c42 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	687e      	ldr	r6, [r7, #4]
 8002ed6:	466d      	mov	r5, sp
 8002ed8:	f106 0410 	add.w	r4, r6, #16
 8002edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eec:	1d33      	adds	r3, r6, #4
 8002eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	f005 ffcd 	bl	8008e90 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f08 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af04      	add	r7, sp, #16
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	4608      	mov	r0, r1
 8002f12:	4611      	mov	r1, r2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	70fb      	strb	r3, [r7, #3]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70bb      	strb	r3, [r7, #2]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_HCD_HC_Init+0x28>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e07f      	b.n	8003030 <HAL_HCD_HC_Init+0x128>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	333d      	adds	r3, #61	; 0x3d
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	3338      	adds	r3, #56	; 0x38
 8002f5c:	787a      	ldrb	r2, [r7, #1]
 8002f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3340      	adds	r3, #64	; 0x40
 8002f70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f72:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	3339      	adds	r3, #57	; 0x39
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	333f      	adds	r3, #63	; 0x3f
 8002f98:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	78bb      	ldrb	r3, [r7, #2]
 8002fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa6:	b2d8      	uxtb	r0, r3
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	333a      	adds	r3, #58	; 0x3a
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da0a      	bge.n	8002fd8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	333b      	adds	r3, #59	; 0x3b
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
 8002fd6:	e009      	b.n	8002fec <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	333b      	adds	r3, #59	; 0x3b
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	333c      	adds	r3, #60	; 0x3c
 8002ffc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003000:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	787c      	ldrb	r4, [r7, #1]
 8003008:	78ba      	ldrb	r2, [r7, #2]
 800300a:	78f9      	ldrb	r1, [r7, #3]
 800300c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	4623      	mov	r3, r4
 800301e:	f006 f8b3 	bl	8009188 <USB_HC_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}

08003038 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_HCD_HC_Halt+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e00f      	b.n	8003076 <HAL_HCD_HC_Halt+0x3e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f006 faef 	bl	800964a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	70bb      	strb	r3, [r7, #2]
 8003096:	4613      	mov	r3, r2
 8003098:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	333b      	adds	r3, #59	; 0x3b
 80030aa:	78ba      	ldrb	r2, [r7, #2]
 80030ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	440b      	add	r3, r1
 80030bc:	333f      	adds	r3, #63	; 0x3f
 80030be:	787a      	ldrb	r2, [r7, #1]
 80030c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030c2:	7c3b      	ldrb	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d114      	bne.n	80030f2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3342      	adds	r3, #66	; 0x42
 80030d8:	2203      	movs	r2, #3
 80030da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	333d      	adds	r3, #61	; 0x3d
 80030ec:	7f3a      	ldrb	r2, [r7, #28]
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e009      	b.n	8003106 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	3342      	adds	r3, #66	; 0x42
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003106:	787b      	ldrb	r3, [r7, #1]
 8003108:	2b03      	cmp	r3, #3
 800310a:	f200 80d6 	bhi.w	80032ba <HAL_HCD_HC_SubmitRequest+0x23a>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	080032a5 	.word	0x080032a5
 800311c:	08003191 	.word	0x08003191
 8003120:	0800321b 	.word	0x0800321b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003124:	7c3b      	ldrb	r3, [r7, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	f040 80c9 	bne.w	80032be <HAL_HCD_HC_SubmitRequest+0x23e>
 800312c:	78bb      	ldrb	r3, [r7, #2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80c5 	bne.w	80032be <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003134:	8b3b      	ldrh	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	3351      	adds	r3, #81	; 0x51
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3351      	adds	r3, #81	; 0x51
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3342      	adds	r3, #66	; 0x42
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003178:	e0a1      	b.n	80032be <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	3342      	adds	r3, #66	; 0x42
 800318a:	2202      	movs	r2, #2
 800318c:	701a      	strb	r2, [r3, #0]
      break;
 800318e:	e096      	b.n	80032be <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003190:	78bb      	ldrb	r3, [r7, #2]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d120      	bne.n	80031d8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	3351      	adds	r3, #81	; 0x51
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	3342      	adds	r3, #66	; 0x42
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031c0:	e07e      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	3342      	adds	r3, #66	; 0x42
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
      break;
 80031d6:	e073      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	3350      	adds	r3, #80	; 0x50
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	3342      	adds	r3, #66	; 0x42
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
      break;
 8003202:	e05d      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	3342      	adds	r3, #66	; 0x42
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
      break;
 8003218:	e052      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800321a:	78bb      	ldrb	r3, [r7, #2]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d120      	bne.n	8003262 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	3351      	adds	r3, #81	; 0x51
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	3342      	adds	r3, #66	; 0x42
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800324a:	e039      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	3342      	adds	r3, #66	; 0x42
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
      break;
 8003260:	e02e      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	3350      	adds	r3, #80	; 0x50
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	3342      	adds	r3, #66	; 0x42
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
      break;
 800328c:	e018      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3342      	adds	r3, #66	; 0x42
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      break;
 80032a2:	e00d      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	440b      	add	r3, r1
 80032b2:	3342      	adds	r3, #66	; 0x42
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
      break;
 80032b8:	e002      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80032be:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	3344      	adds	r3, #68	; 0x44
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	8b39      	ldrh	r1, [r7, #24]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4403      	add	r3, r0
 80032e4:	3348      	adds	r3, #72	; 0x48
 80032e6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	335c      	adds	r3, #92	; 0x5c
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	; 0x4c
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	3339      	adds	r3, #57	; 0x39
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	335d      	adds	r3, #93	; 0x5d
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	3338      	adds	r3, #56	; 0x38
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	18d1      	adds	r1, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	f006 f822 	bl	800939c <USB_HC_StartXfer>
 8003358:	4603      	mov	r3, r0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop

08003364 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f005 fd45 	bl	8008e0a <USB_GetMode>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	f040 80ef 	bne.w	8003566 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f005 fd29 	bl	8008de4 <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80e5 	beq.w	8003564 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f005 fd20 	bl	8008de4 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ae:	d104      	bne.n	80033ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 fd10 	bl	8008de4 <USB_ReadInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ce:	d104      	bne.n	80033da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 fd00 	bl	8008de4 <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ee:	d104      	bne.n	80033fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 fcf0 	bl	8008de4 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2202      	movs	r2, #2
 8003414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 fce2 	bl	8008de4 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342a:	d115      	bne.n	8003458 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003434:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f00b fc52 	bl	800ecf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2101      	movs	r1, #1
 8003452:	4618      	mov	r0, r3
 8003454:	f005 fdd2 	bl	8008ffc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f005 fcc1 	bl	8008de4 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d102      	bne.n	8003474 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f001 f966 	bl	8004740 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f005 fcb3 	bl	8008de4 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b08      	cmp	r3, #8
 8003486:	d106      	bne.n	8003496 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f00b fc15 	bl	800ecb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2208      	movs	r2, #8
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f005 fca2 	bl	8008de4 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034aa:	d138      	bne.n	800351e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f006 f8b9 	bl	8009628 <USB_HC_ReadInterrupt>
 80034b6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e025      	b.n	800350a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e8:	d106      	bne.n	80034f8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8cf 	bl	8003694 <HCD_HC_IN_IRQHandler>
 80034f6:	e005      	b.n	8003504 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fcfd 	bl	8003efe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3301      	adds	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	d3d4      	bcc.n	80034be <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f005 fc5e 	bl	8008de4 <USB_ReadInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b10      	cmp	r3, #16
 8003530:	d101      	bne.n	8003536 <HAL_HCD_IRQHandler+0x1d2>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_HCD_IRQHandler+0x1d4>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d014      	beq.n	8003566 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0210 	bic.w	r2, r2, #16
 800354a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f001 f84b 	bl	80045e8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0210 	orr.w	r2, r2, #16
 8003560:	619a      	str	r2, [r3, #24]
 8003562:	e000      	b.n	8003566 <HAL_HCD_IRQHandler+0x202>
      return;
 8003564:	bf00      	nop
    }
  }
}
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_HCD_Start+0x16>
 800357e:	2302      	movs	r3, #2
 8003580:	e013      	b.n	80035aa <HAL_HCD_Start+0x3e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f005 fb35 	bl	8008bfe <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	4618      	mov	r0, r3
 800359c:	f005 fd92 	bl	80090c4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_HCD_Stop+0x16>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e00d      	b.n	80035e4 <HAL_HCD_Stop+0x32>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f006 f973 	bl	80098c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f005 fd39 	bl	8009070 <USB_ResetPort>
 80035fe:	4603      	mov	r3, r0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	781b      	ldrb	r3, [r3, #0]
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	334c      	adds	r3, #76	; 0x4c
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f005 fd7b 	bl	8009164 <USB_GetCurrentFrame>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f005 fd56 	bl	8009136 <USB_GetHostSpeed>
 800368a:	4603      	mov	r3, r0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d119      	bne.n	80036f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	461a      	mov	r2, r3
 80036d2:	2304      	movs	r3, #4
 80036d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	60d3      	str	r3, [r2, #12]
 80036f6:	e0ce      	b.n	8003896 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370e:	d12c      	bne.n	800376a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003722:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	440b      	add	r3, r1
 8003732:	335d      	adds	r3, #93	; 0x5d
 8003734:	2207      	movs	r2, #7
 8003736:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	440a      	add	r2, r1
 800374e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f005 ff71 	bl	800964a <USB_HC_Halt>
 8003768:	e095      	b.n	8003896 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d109      	bne.n	8003794 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	2320      	movs	r3, #32
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	e080      	b.n	8003896 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d134      	bne.n	8003814 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	440b      	add	r3, r1
 80037d8:	335d      	adds	r3, #93	; 0x5d
 80037da:	2205      	movs	r2, #5
 80037dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	2310      	movs	r3, #16
 80037ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	461a      	mov	r2, r3
 80037fe:	2308      	movs	r3, #8
 8003800:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f005 ff1c 	bl	800964a <USB_HC_Halt>
 8003812:	e040      	b.n	8003896 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382a:	d134      	bne.n	8003896 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	440a      	add	r2, r1
 8003842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f005 fef7 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	461a      	mov	r2, r3
 800386a:	2310      	movs	r3, #16
 800386c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	440b      	add	r3, r1
 800387c:	335d      	adds	r3, #93	; 0x5d
 800387e:	2208      	movs	r2, #8
 8003880:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003894:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ac:	d122      	bne.n	80038f4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f005 feb6 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80038f2:	e300      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	f040 80fd 	bne.w	8003b06 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	3348      	adds	r3, #72	; 0x48
 8003924:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	0159      	lsls	r1, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	440b      	add	r3, r1
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003938:	1ad1      	subs	r1, r2, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4403      	add	r3, r0
 8003948:	334c      	adds	r3, #76	; 0x4c
 800394a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	335d      	adds	r3, #93	; 0x5d
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	3358      	adds	r3, #88	; 0x58
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	2301      	movs	r3, #1
 8003984:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	440b      	add	r3, r1
 8003994:	333f      	adds	r3, #63	; 0x3f
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	333f      	adds	r3, #63	; 0x3f
 80039ac:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d121      	bne.n	80039f6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f005 fe34 	bl	800964a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	461a      	mov	r2, r3
 80039f0:	2310      	movs	r3, #16
 80039f2:	6093      	str	r3, [r2, #8]
 80039f4:	e070      	b.n	8003ad8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	333f      	adds	r3, #63	; 0x3f
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d12a      	bne.n	8003a62 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a2a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	335c      	adds	r3, #92	; 0x5c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	b2d8      	uxtb	r0, r3
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	335c      	adds	r3, #92	; 0x5c
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4601      	mov	r1, r0
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f00b f956 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a60:	e03a      	b.n	8003ad8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	333f      	adds	r3, #63	; 0x3f
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d12f      	bne.n	8003ad8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	335c      	adds	r3, #92	; 0x5c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	440b      	add	r3, r1
 8003a9a:	3350      	adds	r3, #80	; 0x50
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2d8      	uxtb	r0, r3
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3350      	adds	r3, #80	; 0x50
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	b2d8      	uxtb	r0, r3
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	440b      	add	r3, r1
 8003aca:	335c      	adds	r3, #92	; 0x5c
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4601      	mov	r1, r0
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f00b f91a 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3350      	adds	r3, #80	; 0x50
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2d8      	uxtb	r0, r3
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	440b      	add	r3, r1
 8003afe:	3350      	adds	r3, #80	; 0x50
 8003b00:	4602      	mov	r2, r0
 8003b02:	701a      	strb	r2, [r3, #0]
}
 8003b04:	e1f7      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	f040 811a 	bne.w	8003d52 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	0151      	lsls	r1, r2, #5
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	440a      	add	r2, r1
 8003b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b38:	f023 0302 	bic.w	r3, r3, #2
 8003b3c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	440b      	add	r3, r1
 8003b4c:	335d      	adds	r3, #93	; 0x5d
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10a      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	335c      	adds	r3, #92	; 0x5c
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e0d9      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	335d      	adds	r3, #93	; 0x5d
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d10a      	bne.n	8003b96 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	335c      	adds	r3, #92	; 0x5c
 8003b90:	2205      	movs	r2, #5
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e0c3      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	335d      	adds	r3, #93	; 0x5d
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d00a      	beq.n	8003bc2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	440b      	add	r3, r1
 8003bba:	335d      	adds	r3, #93	; 0x5d
 8003bbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d156      	bne.n	8003c70 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	440b      	add	r3, r1
 8003bd0:	3358      	adds	r3, #88	; 0x58
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4403      	add	r3, r0
 8003be4:	3358      	adds	r3, #88	; 0x58
 8003be6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3358      	adds	r3, #88	; 0x58
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d914      	bls.n	8003c28 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3358      	adds	r3, #88	; 0x58
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	440b      	add	r3, r1
 8003c20:	335c      	adds	r3, #92	; 0x5c
 8003c22:	2204      	movs	r2, #4
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e009      	b.n	8003c3c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	335c      	adds	r3, #92	; 0x5c
 8003c38:	2202      	movs	r2, #2
 8003c3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e056      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	440b      	add	r3, r1
 8003c7e:	335d      	adds	r3, #93	; 0x5d
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d123      	bne.n	8003cce <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	335c      	adds	r3, #92	; 0x5c
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cb0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cb8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e027      	b.n	8003d1e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	440b      	add	r3, r1
 8003cdc:	335d      	adds	r3, #93	; 0x5d
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b07      	cmp	r3, #7
 8003ce2:	d11c      	bne.n	8003d1e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3358      	adds	r3, #88	; 0x58
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4403      	add	r3, r0
 8003d06:	3358      	adds	r3, #88	; 0x58
 8003d08:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	335c      	adds	r3, #92	; 0x5c
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	b2d8      	uxtb	r0, r3
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	440b      	add	r3, r1
 8003d42:	335c      	adds	r3, #92	; 0x5c
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	4601      	mov	r1, r0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f00a ffde 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d50:	e0d1      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d13e      	bne.n	8003de6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d82:	f043 0302 	orr.w	r3, r3, #2
 8003d86:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	440b      	add	r3, r1
 8003d96:	3358      	adds	r3, #88	; 0x58
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4403      	add	r3, r0
 8003daa:	3358      	adds	r3, #88	; 0x58
 8003dac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	335d      	adds	r3, #93	; 0x5d
 8003dbe:	2206      	movs	r2, #6
 8003dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f005 fc3c 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	6093      	str	r3, [r2, #8]
}
 8003de4:	e087      	b.n	8003ef6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d17c      	bne.n	8003ef6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	440b      	add	r3, r1
 8003e0a:	333f      	adds	r3, #63	; 0x3f
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d122      	bne.n	8003e58 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	440b      	add	r3, r1
 8003e20:	3358      	adds	r3, #88	; 0x58
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f005 fbfa 	bl	800964a <USB_HC_Halt>
 8003e56:	e045      	b.n	8003ee4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	440b      	add	r3, r1
 8003e66:	333f      	adds	r3, #63	; 0x3f
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	440b      	add	r3, r1
 8003e7c:	333f      	adds	r3, #63	; 0x3f
 8003e7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d12f      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	440b      	add	r3, r1
 8003e92:	3358      	adds	r3, #88	; 0x58
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d121      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	440b      	add	r3, r1
 8003eae:	335d      	adds	r3, #93	; 0x5d
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	0151      	lsls	r1, r2, #5
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	440a      	add	r2, r1
 8003eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ece:	f043 0302 	orr.w	r3, r3, #2
 8003ed2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f005 fbb3 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	6093      	str	r3, [r2, #8]
}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d119      	bne.n	8003f62 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f60:	e33e      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d141      	bne.n	8003ffc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f84:	461a      	mov	r2, r3
 8003f86:	2320      	movs	r3, #32
 8003f88:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	333d      	adds	r3, #61	; 0x3d
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 831f 	bne.w	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	333d      	adds	r3, #61	; 0x3d
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	335c      	adds	r3, #92	; 0x5c
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f005 fb28 	bl	800964a <USB_HC_Halt>
}
 8003ffa:	e2f1      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d13f      	bne.n	8004092 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	440b      	add	r3, r1
 8004020:	335d      	adds	r3, #93	; 0x5d
 8004022:	2204      	movs	r2, #4
 8004024:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	440b      	add	r3, r1
 8004034:	333d      	adds	r3, #61	; 0x3d
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	440b      	add	r3, r1
 8004048:	3358      	adds	r3, #88	; 0x58
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	440a      	add	r2, r1
 8004064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f005 fae6 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	461a      	mov	r2, r3
 800408c:	2340      	movs	r3, #64	; 0x40
 800408e:	6093      	str	r3, [r2, #8]
}
 8004090:	e2a6      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d122      	bne.n	80040f0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f005 fab8 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ec:	6093      	str	r3, [r2, #8]
}
 80040ee:	e277      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d135      	bne.n	8004172 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	3358      	adds	r3, #88	; 0x58
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	0151      	lsls	r1, r2, #5
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	440a      	add	r2, r1
 8004130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f005 fa80 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	2301      	movs	r3, #1
 800415a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	335d      	adds	r3, #93	; 0x5d
 800416c:	2201      	movs	r2, #1
 800416e:	701a      	strb	r2, [r3, #0]
}
 8004170:	e236      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d12b      	bne.n	80041e0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004194:	461a      	mov	r2, r3
 8004196:	2308      	movs	r3, #8
 8004198:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 fa40 	bl	800964a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	440b      	add	r3, r1
 80041d8:	335d      	adds	r3, #93	; 0x5d
 80041da:	2205      	movs	r2, #5
 80041dc:	701a      	strb	r2, [r3, #0]
}
 80041de:	e1ff      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d155      	bne.n	80042a2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	3358      	adds	r3, #88	; 0x58
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	335d      	adds	r3, #93	; 0x5d
 800421a:	2203      	movs	r2, #3
 800421c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	333d      	adds	r3, #61	; 0x3d
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d114      	bne.n	800425e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	333c      	adds	r3, #60	; 0x3c
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	440b      	add	r3, r1
 8004258:	333d      	adds	r3, #61	; 0x3d
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	440a      	add	r2, r1
 8004274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f005 f9de 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	461a      	mov	r2, r3
 800429c:	2310      	movs	r3, #16
 800429e:	6093      	str	r3, [r2, #8]
}
 80042a0:	e19e      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d12b      	bne.n	8004310 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f005 f9b1 	bl	800964a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	440b      	add	r3, r1
 80042f6:	335d      	adds	r3, #93	; 0x5d
 80042f8:	2206      	movs	r2, #6
 80042fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	6093      	str	r3, [r2, #8]
}
 800430e:	e167      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	d135      	bne.n	8004394 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	440a      	add	r2, r1
 800433e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004342:	f043 0302 	orr.w	r3, r3, #2
 8004346:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f005 f979 	bl	800964a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	461a      	mov	r2, r3
 8004366:	2310      	movs	r3, #16
 8004368:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	461a      	mov	r2, r3
 8004378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	335d      	adds	r3, #93	; 0x5d
 800438e:	2208      	movs	r2, #8
 8004390:	701a      	strb	r2, [r3, #0]
}
 8004392:	e125      	b.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	f040 811a 	bne.w	80045e0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	0151      	lsls	r1, r2, #5
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	440a      	add	r2, r1
 80043c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c6:	f023 0302 	bic.w	r3, r3, #2
 80043ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	440b      	add	r3, r1
 80043da:	335d      	adds	r3, #93	; 0x5d
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d137      	bne.n	8004452 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	335c      	adds	r3, #92	; 0x5c
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	440b      	add	r3, r1
 8004404:	333f      	adds	r3, #63	; 0x3f
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d00b      	beq.n	8004424 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	440b      	add	r3, r1
 800441a:	333f      	adds	r3, #63	; 0x3f
 800441c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800441e:	2b03      	cmp	r3, #3
 8004420:	f040 80c5 	bne.w	80045ae <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	440b      	add	r3, r1
 8004432:	3351      	adds	r3, #81	; 0x51
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f083 0301 	eor.w	r3, r3, #1
 800443a:	b2d8      	uxtb	r0, r3
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	3351      	adds	r3, #81	; 0x51
 800444c:	4602      	mov	r2, r0
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e0ad      	b.n	80045ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	440b      	add	r3, r1
 8004460:	335d      	adds	r3, #93	; 0x5d
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d10a      	bne.n	800447e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	440b      	add	r3, r1
 8004476:	335c      	adds	r3, #92	; 0x5c
 8004478:	2202      	movs	r2, #2
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	e097      	b.n	80045ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	335d      	adds	r3, #93	; 0x5d
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d10a      	bne.n	80044aa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	440b      	add	r3, r1
 80044a2:	335c      	adds	r3, #92	; 0x5c
 80044a4:	2202      	movs	r2, #2
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e081      	b.n	80045ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	440b      	add	r3, r1
 80044b8:	335d      	adds	r3, #93	; 0x5d
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d10a      	bne.n	80044d6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	335c      	adds	r3, #92	; 0x5c
 80044d0:	2205      	movs	r2, #5
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	e06b      	b.n	80045ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	440b      	add	r3, r1
 80044e4:	335d      	adds	r3, #93	; 0x5d
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d00a      	beq.n	8004502 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	335d      	adds	r3, #93	; 0x5d
 80044fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d155      	bne.n	80045ae <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	440b      	add	r3, r1
 8004510:	3358      	adds	r3, #88	; 0x58
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4403      	add	r3, r0
 8004524:	3358      	adds	r3, #88	; 0x58
 8004526:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	3358      	adds	r3, #88	; 0x58
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d914      	bls.n	8004568 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	440b      	add	r3, r1
 800454c:	3358      	adds	r3, #88	; 0x58
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	440b      	add	r3, r1
 8004560:	335c      	adds	r3, #92	; 0x5c
 8004562:	2204      	movs	r2, #4
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e009      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	335c      	adds	r3, #92	; 0x5c
 8004578:	2202      	movs	r2, #2
 800457a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004592:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800459a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ba:	461a      	mov	r2, r3
 80045bc:	2302      	movs	r3, #2
 80045be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	b2d8      	uxtb	r0, r3
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	335c      	adds	r3, #92	; 0x5c
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	4601      	mov	r1, r0
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f00a fb96 	bl	800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045e0:	bf00      	nop
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	0c5b      	lsrs	r3, r3, #17
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d003      	beq.n	800462c <HCD_RXQLVL_IRQHandler+0x44>
 8004624:	2b05      	cmp	r3, #5
 8004626:	f000 8082 	beq.w	800472e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800462a:	e083      	b.n	8004734 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d07f      	beq.n	8004732 <HCD_RXQLVL_IRQHandler+0x14a>
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	440b      	add	r3, r1
 8004640:	3344      	adds	r3, #68	; 0x44
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d074      	beq.n	8004732 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	3344      	adds	r3, #68	; 0x44
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	b292      	uxth	r2, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f004 fb95 	bl	8008d92 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	3344      	adds	r3, #68	; 0x44
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	18d1      	adds	r1, r2, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4403      	add	r3, r0
 800468c:	3344      	adds	r3, #68	; 0x44
 800468e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	334c      	adds	r3, #76	; 0x4c
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	18d1      	adds	r1, r2, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4403      	add	r3, r0
 80046b4:	334c      	adds	r3, #76	; 0x4c
 80046b6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	4b1d      	ldr	r3, [pc, #116]	; (800473c <HCD_RXQLVL_IRQHandler+0x154>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d031      	beq.n	8004732 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	440b      	add	r3, r1
 800470e:	3350      	adds	r3, #80	; 0x50
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	f083 0301 	eor.w	r3, r3, #1
 8004716:	b2d8      	uxtb	r0, r3
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	3350      	adds	r3, #80	; 0x50
 8004728:	4602      	mov	r2, r0
 800472a:	701a      	strb	r2, [r3, #0]
      break;
 800472c:	e001      	b.n	8004732 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004732:	bf00      	nop
  }
}
 8004734:	bf00      	nop
 8004736:	3728      	adds	r7, #40	; 0x28
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	1ff80000 	.word	0x1ff80000

08004740 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800476c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d10b      	bne.n	8004790 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d102      	bne.n	8004788 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f00a faa6 	bl	800ecd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f043 0302 	orr.w	r3, r3, #2
 800478e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b08      	cmp	r3, #8
 8004798:	d132      	bne.n	8004800 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f043 0308 	orr.w	r3, r3, #8
 80047a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d126      	bne.n	80047fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d113      	bne.n	80047dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047be:	d106      	bne.n	80047ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2102      	movs	r1, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f004 fc18 	bl	8008ffc <USB_InitFSLSPClkSel>
 80047cc:	e011      	b.n	80047f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 fc11 	bl	8008ffc <USB_InitFSLSPClkSel>
 80047da:	e00a      	b.n	80047f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d106      	bne.n	80047f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ea:	461a      	mov	r2, r3
 80047ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f00a fa9c 	bl	800ed30 <HAL_HCD_PortEnabled_Callback>
 80047f8:	e002      	b.n	8004800 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f00a faa6 	bl	800ed4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b20      	cmp	r3, #32
 8004808:	d103      	bne.n	8004812 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6013      	str	r3, [r2, #0]
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e154      	b.n	8004ae4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a98      	ldr	r2, [pc, #608]	; (8004ab4 <HAL_I2S_Init+0x28c>)
 8004852:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fc fe63 	bl	8001520 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004870:	f023 030f 	bic.w	r3, r3, #15
 8004874:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2202      	movs	r2, #2
 800487c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d06f      	beq.n	8004966 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800488e:	2310      	movs	r3, #16
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e001      	b.n	8004898 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004894:	2320      	movs	r3, #32
 8004896:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b20      	cmp	r3, #32
 800489e:	d802      	bhi.n	80048a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a83      	ldr	r2, [pc, #524]	; (8004ab8 <HAL_I2S_Init+0x290>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_I2S_Init+0x92>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a81      	ldr	r2, [pc, #516]	; (8004abc <HAL_I2S_Init+0x294>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d104      	bne.n	80048c4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80048ba:	2001      	movs	r0, #1
 80048bc:	f001 f9c2 	bl	8005c44 <HAL_RCCEx_GetPeriphCLKFreq>
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	e003      	b.n	80048cc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80048c4:	2002      	movs	r0, #2
 80048c6:	f001 f9bd 	bl	8005c44 <HAL_RCCEx_GetPeriphCLKFreq>
 80048ca:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d125      	bne.n	8004922 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	3305      	adds	r3, #5
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e01f      	b.n	8004940 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	fbb2 f2f3 	udiv	r2, r2, r3
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	3305      	adds	r3, #5
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e00e      	b.n	8004940 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fbb2 f2f3 	udiv	r2, r2, r3
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	3305      	adds	r3, #5
 800493e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4a5f      	ldr	r2, [pc, #380]	; (8004ac0 <HAL_I2S_Init+0x298>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	e003      	b.n	800496e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004966:	2302      	movs	r3, #2
 8004968:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d902      	bls.n	800497a <HAL_I2S_Init+0x152>
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2bff      	cmp	r3, #255	; 0xff
 8004978:	d907      	bls.n	800498a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f043 0210 	orr.w	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0ac      	b.n	8004ae4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	ea42 0103 	orr.w	r1, r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	430a      	orrs	r2, r1
 800499c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049a8:	f023 030f 	bic.w	r3, r3, #15
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6851      	ldr	r1, [r2, #4]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6892      	ldr	r2, [r2, #8]
 80049b4:	4311      	orrs	r1, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68d2      	ldr	r2, [r2, #12]
 80049ba:	4311      	orrs	r1, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6992      	ldr	r2, [r2, #24]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049cc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b30      	cmp	r3, #48	; 0x30
 80049d4:	d003      	beq.n	80049de <HAL_I2S_Init+0x1b6>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2bb0      	cmp	r3, #176	; 0xb0
 80049dc:	d107      	bne.n	80049ee <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049ec:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d16e      	bne.n	8004ad4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a32      	ldr	r2, [pc, #200]	; (8004ac4 <HAL_I2S_Init+0x29c>)
 80049fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a2d      	ldr	r2, [pc, #180]	; (8004ab8 <HAL_I2S_Init+0x290>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_I2S_Init+0x1e2>
 8004a06:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <HAL_I2S_Init+0x2a0>)
 8004a08:	e001      	b.n	8004a0e <HAL_I2S_Init+0x1e6>
 8004a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	4928      	ldr	r1, [pc, #160]	; (8004ab8 <HAL_I2S_Init+0x290>)
 8004a16:	428a      	cmp	r2, r1
 8004a18:	d101      	bne.n	8004a1e <HAL_I2S_Init+0x1f6>
 8004a1a:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_I2S_Init+0x2a0>)
 8004a1c:	e001      	b.n	8004a22 <HAL_I2S_Init+0x1fa>
 8004a1e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a26:	f023 030f 	bic.w	r3, r3, #15
 8004a2a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <HAL_I2S_Init+0x290>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_I2S_Init+0x212>
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <HAL_I2S_Init+0x2a0>)
 8004a38:	e001      	b.n	8004a3e <HAL_I2S_Init+0x216>
 8004a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a3e:	2202      	movs	r2, #2
 8004a40:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <HAL_I2S_Init+0x290>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_I2S_Init+0x228>
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <HAL_I2S_Init+0x2a0>)
 8004a4e:	e001      	b.n	8004a54 <HAL_I2S_Init+0x22c>
 8004a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d003      	beq.n	8004a6a <HAL_I2S_Init+0x242>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	e001      	b.n	8004a76 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	b299      	uxth	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004a8c:	4303      	orrs	r3, r0
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	430b      	orrs	r3, r1
 8004a92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	897b      	ldrh	r3, [r7, #10]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aa2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a03      	ldr	r2, [pc, #12]	; (8004ab8 <HAL_I2S_Init+0x290>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d10e      	bne.n	8004acc <HAL_I2S_Init+0x2a4>
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <HAL_I2S_Init+0x2a0>)
 8004ab0:	e00e      	b.n	8004ad0 <HAL_I2S_Init+0x2a8>
 8004ab2:	bf00      	nop
 8004ab4:	08004be3 	.word	0x08004be3
 8004ab8:	40003800 	.word	0x40003800
 8004abc:	40003c00 	.word	0x40003c00
 8004ac0:	cccccccd 	.word	0xcccccccd
 8004ac4:	08004cf9 	.word	0x08004cf9
 8004ac8:	40003400 	.word	0x40003400
 8004acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad0:	897a      	ldrh	r2, [r7, #10]
 8004ad2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10e      	bne.n	8004b7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffb8 	bl	8004aec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	b292      	uxth	r2, r2
 8004b98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10e      	bne.n	8004bda <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff93 	bl	8004b00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d13a      	bne.n	8004c74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d109      	bne.n	8004c1c <I2S_IRQHandler+0x3a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d102      	bne.n	8004c1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ffb4 	bl	8004b84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d126      	bne.n	8004c74 <I2S_IRQHandler+0x92>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d11f      	bne.n	8004c74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f043 0202 	orr.w	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff50 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d136      	bne.n	8004cee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d109      	bne.n	8004c9e <I2S_IRQHandler+0xbc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d102      	bne.n	8004c9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff45 	bl	8004b28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d122      	bne.n	8004cee <I2S_IRQHandler+0x10c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d11b      	bne.n	8004cee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cc4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff13 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4aa2      	ldr	r2, [pc, #648]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d12:	4ba2      	ldr	r3, [pc, #648]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d14:	e001      	b.n	8004d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a9b      	ldr	r2, [pc, #620]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d30:	4b9a      	ldr	r3, [pc, #616]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d32:	e001      	b.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d44:	d004      	beq.n	8004d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 8099 	bne.w	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d107      	bne.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f925 	bl	8004fb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9c8 	bl	8005114 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d13a      	bne.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d035      	beq.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7e      	ldr	r2, [pc, #504]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004da2:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004da4:	e001      	b.n	8004daa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4979      	ldr	r1, [pc, #484]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004db2:	428b      	cmp	r3, r1
 8004db4:	d101      	bne.n	8004dba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004db6:	4b79      	ldr	r3, [pc, #484]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004db8:	e001      	b.n	8004dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f043 0202 	orr.w	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fe88 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	f040 80be 	bne.w	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80b8 	beq.w	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a59      	ldr	r2, [pc, #356]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e36:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e38:	e001      	b.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4954      	ldr	r1, [pc, #336]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e46:	428b      	cmp	r3, r1
 8004e48:	d101      	bne.n	8004e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e4a:	4b54      	ldr	r3, [pc, #336]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e4c:	e001      	b.n	8004e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe4a 	bl	8004b14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e80:	e084      	b.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d107      	bne.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8be 	bl	8005018 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f8fd 	bl	80050b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d12f      	bne.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02a      	beq.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2e      	ldr	r2, [pc, #184]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ee6:	e001      	b.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4929      	ldr	r1, [pc, #164]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	d101      	bne.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ef8:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004efa:	e001      	b.n	8004f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fdfa 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d131      	bne.n	8004f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02c      	beq.n	8004f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f3e:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f40:	e001      	b.n	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4912      	ldr	r1, [pc, #72]	; (8004f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	d101      	bne.n	8004f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f54:	e001      	b.n	8004f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f6e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f043 0204 	orr.w	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fdc5 	bl	8004b14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f8a:	e000      	b.n	8004f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f8c:	bf00      	nop
}
 8004f8e:	bf00      	nop
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40003800 	.word	0x40003800
 8004f9c:	40003400 	.word	0x40003400

08004fa0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c99      	adds	r1, r3, #2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6251      	str	r1, [r2, #36]	; 0x24
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d113      	bne.n	800500e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ff4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ffc9 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c99      	adds	r1, r3, #2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6251      	str	r1, [r2, #36]	; 0x24
 800502a:	8819      	ldrh	r1, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <I2SEx_TxISR_I2SExt+0x90>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <I2SEx_TxISR_I2SExt+0x22>
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <I2SEx_TxISR_I2SExt+0x94>)
 8005038:	e001      	b.n	800503e <I2SEx_TxISR_I2SExt+0x26>
 800503a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800503e:	460a      	mov	r2, r1
 8005040:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <I2SEx_TxISR_I2SExt+0x90>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <I2SEx_TxISR_I2SExt+0x50>
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <I2SEx_TxISR_I2SExt+0x94>)
 8005066:	e001      	b.n	800506c <I2SEx_TxISR_I2SExt+0x54>
 8005068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <I2SEx_TxISR_I2SExt+0x90>)
 8005074:	428b      	cmp	r3, r1
 8005076:	d101      	bne.n	800507c <I2SEx_TxISR_I2SExt+0x64>
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <I2SEx_TxISR_I2SExt+0x94>)
 800507a:	e001      	b.n	8005080 <I2SEx_TxISR_I2SExt+0x68>
 800507c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005080:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005084:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff81 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40003800 	.word	0x40003800
 80050ac:	40003400 	.word	0x40003400

080050b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68d8      	ldr	r0, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	1c99      	adds	r1, r3, #2
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050c8:	b282      	uxth	r2, r0
 80050ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff4a 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <I2SEx_RxISR_I2SExt+0x90>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <I2SEx_RxISR_I2SExt+0x16>
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005128:	e001      	b.n	800512e <I2SEx_RxISR_I2SExt+0x1a>
 800512a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800512e:	68d8      	ldr	r0, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	1c99      	adds	r1, r3, #2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	62d1      	str	r1, [r2, #44]	; 0x2c
 800513a:	b282      	uxth	r2, r0
 800513c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d121      	bne.n	800519a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <I2SEx_RxISR_I2SExt+0x90>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d101      	bne.n	8005164 <I2SEx_RxISR_I2SExt+0x50>
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005162:	e001      	b.n	8005168 <I2SEx_RxISR_I2SExt+0x54>
 8005164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	490d      	ldr	r1, [pc, #52]	; (80051a4 <I2SEx_RxISR_I2SExt+0x90>)
 8005170:	428b      	cmp	r3, r1
 8005172:	d101      	bne.n	8005178 <I2SEx_RxISR_I2SExt+0x64>
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005176:	e001      	b.n	800517c <I2SEx_RxISR_I2SExt+0x68>
 8005178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005180:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff03 	bl	8004fa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40003800 	.word	0x40003800
 80051a8:	40003400 	.word	0x40003400

080051ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051b4:	f7fc fde0 	bl	8001d78 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e069      	b.n	8005298 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fc fa5b 	bl	8001694 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80051de:	f241 3188 	movw	r1, #5000	; 0x1388
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f85e 	bl	80052a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	2120      	movs	r1, #32
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f856 	bl	80052c0 <QSPI_WaitFlagStateUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005218:	7afb      	ldrb	r3, [r7, #11]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d137      	bne.n	800528e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6852      	ldr	r2, [r2, #4]
 8005230:	0611      	lsls	r1, r2, #24
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68d2      	ldr	r2, [r2, #12]
 8005236:	4311      	orrs	r1, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	69d2      	ldr	r2, [r2, #28]
 800523c:	4311      	orrs	r1, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6a12      	ldr	r2, [r2, #32]
 8005242:	4311      	orrs	r1, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_QSPI_Init+0xf4>)
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6912      	ldr	r2, [r2, #16]
 800525a:	0411      	lsls	r1, r2, #16
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6952      	ldr	r2, [r2, #20]
 8005260:	4311      	orrs	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6992      	ldr	r2, [r2, #24]
 8005266:	4311      	orrs	r1, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	430b      	orrs	r3, r1
 800526e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005296:	7afb      	ldrb	r3, [r7, #11]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	ffe0f8fe 	.word	0xffe0f8fe

080052a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80052d0:	e01a      	b.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d016      	beq.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fc fd4d 	bl	8001d78 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2204      	movs	r2, #4
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e00e      	b.n	8005326 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	429a      	cmp	r2, r3
 8005322:	d1d6      	bne.n	80052d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0cc      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005344:	4b68      	ldr	r3, [pc, #416]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d90c      	bls.n	800536c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b65      	ldr	r3, [pc, #404]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b63      	ldr	r3, [pc, #396]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0b8      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d020      	beq.n	80053ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005384:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a58      	ldr	r2, [pc, #352]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800538e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800539c:	4b53      	ldr	r3, [pc, #332]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a52      	ldr	r2, [pc, #328]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b50      	ldr	r3, [pc, #320]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	494d      	ldr	r1, [pc, #308]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d044      	beq.n	8005450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b47      	ldr	r3, [pc, #284]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d119      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d003      	beq.n	80053ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ee:	4b3f      	ldr	r3, [pc, #252]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e06f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fe:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e067      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4934      	ldr	r1, [pc, #208]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005420:	f7fc fcaa 	bl	8001d78 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fc fca6 	bl	8001d78 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e04f      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b2b      	ldr	r3, [pc, #172]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d20c      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d001      	beq.n	8005478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e032      	b.n	80054de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4916      	ldr	r1, [pc, #88]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	490e      	ldr	r1, [pc, #56]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054b6:	f000 f821 	bl	80054fc <HAL_RCC_GetSysClockFreq>
 80054ba:	4601      	mov	r1, r0
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <HAL_RCC_ClockConfig+0x1c0>)
 80054c8:	5cd3      	ldrb	r3, [r2, r3]
 80054ca:	fa21 f303 	lsr.w	r3, r1, r3
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fc fb0e 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40023c00 	.word	0x40023c00
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800f3fc 	.word	0x0800f3fc
 80054f4:	20000000 	.word	0x20000000
 80054f8:	20000004 	.word	0x20000004

080054fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	2300      	movs	r3, #0
 800550c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005512:	4b50      	ldr	r3, [pc, #320]	; (8005654 <HAL_RCC_GetSysClockFreq+0x158>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b04      	cmp	r3, #4
 800551c:	d007      	beq.n	800552e <HAL_RCC_GetSysClockFreq+0x32>
 800551e:	2b08      	cmp	r3, #8
 8005520:	d008      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x38>
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 808d 	bne.w	8005642 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b4b      	ldr	r3, [pc, #300]	; (8005658 <HAL_RCC_GetSysClockFreq+0x15c>)
 800552a:	60bb      	str	r3, [r7, #8]
       break;
 800552c:	e08c      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800552e:	4b4b      	ldr	r3, [pc, #300]	; (800565c <HAL_RCC_GetSysClockFreq+0x160>)
 8005530:	60bb      	str	r3, [r7, #8]
      break;
 8005532:	e089      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005534:	4b47      	ldr	r3, [pc, #284]	; (8005654 <HAL_RCC_GetSysClockFreq+0x158>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800553c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800553e:	4b45      	ldr	r3, [pc, #276]	; (8005654 <HAL_RCC_GetSysClockFreq+0x158>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d023      	beq.n	8005592 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554a:	4b42      	ldr	r3, [pc, #264]	; (8005654 <HAL_RCC_GetSysClockFreq+0x158>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	099b      	lsrs	r3, r3, #6
 8005550:	f04f 0400 	mov.w	r4, #0
 8005554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	ea03 0501 	and.w	r5, r3, r1
 8005560:	ea04 0602 	and.w	r6, r4, r2
 8005564:	4a3d      	ldr	r2, [pc, #244]	; (800565c <HAL_RCC_GetSysClockFreq+0x160>)
 8005566:	fb02 f106 	mul.w	r1, r2, r6
 800556a:	2200      	movs	r2, #0
 800556c:	fb02 f205 	mul.w	r2, r2, r5
 8005570:	440a      	add	r2, r1
 8005572:	493a      	ldr	r1, [pc, #232]	; (800565c <HAL_RCC_GetSysClockFreq+0x160>)
 8005574:	fba5 0101 	umull	r0, r1, r5, r1
 8005578:	1853      	adds	r3, r2, r1
 800557a:	4619      	mov	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f04f 0400 	mov.w	r4, #0
 8005582:	461a      	mov	r2, r3
 8005584:	4623      	mov	r3, r4
 8005586:	f7fa fe4b 	bl	8000220 <__aeabi_uldivmod>
 800558a:	4603      	mov	r3, r0
 800558c:	460c      	mov	r4, r1
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e049      	b.n	8005626 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005592:	4b30      	ldr	r3, [pc, #192]	; (8005654 <HAL_RCC_GetSysClockFreq+0x158>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	ea03 0501 	and.w	r5, r3, r1
 80055a8:	ea04 0602 	and.w	r6, r4, r2
 80055ac:	4629      	mov	r1, r5
 80055ae:	4632      	mov	r2, r6
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	0154      	lsls	r4, r2, #5
 80055ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055be:	014b      	lsls	r3, r1, #5
 80055c0:	4619      	mov	r1, r3
 80055c2:	4622      	mov	r2, r4
 80055c4:	1b49      	subs	r1, r1, r5
 80055c6:	eb62 0206 	sbc.w	r2, r2, r6
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	0194      	lsls	r4, r2, #6
 80055d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055d8:	018b      	lsls	r3, r1, #6
 80055da:	1a5b      	subs	r3, r3, r1
 80055dc:	eb64 0402 	sbc.w	r4, r4, r2
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	00e2      	lsls	r2, r4, #3
 80055ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055ee:	00d9      	lsls	r1, r3, #3
 80055f0:	460b      	mov	r3, r1
 80055f2:	4614      	mov	r4, r2
 80055f4:	195b      	adds	r3, r3, r5
 80055f6:	eb44 0406 	adc.w	r4, r4, r6
 80055fa:	f04f 0100 	mov.w	r1, #0
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	02a2      	lsls	r2, r4, #10
 8005604:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005608:	0299      	lsls	r1, r3, #10
 800560a:	460b      	mov	r3, r1
 800560c:	4614      	mov	r4, r2
 800560e:	4618      	mov	r0, r3
 8005610:	4621      	mov	r1, r4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f04f 0400 	mov.w	r4, #0
 8005618:	461a      	mov	r2, r3
 800561a:	4623      	mov	r3, r4
 800561c:	f7fa fe00 	bl	8000220 <__aeabi_uldivmod>
 8005620:	4603      	mov	r3, r0
 8005622:	460c      	mov	r4, r1
 8005624:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_RCC_GetSysClockFreq+0x158>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0c1b      	lsrs	r3, r3, #16
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	3301      	adds	r3, #1
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	60bb      	str	r3, [r7, #8]
      break;
 8005640:	e002      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005644:	60bb      	str	r3, [r7, #8]
      break;
 8005646:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005648:	68bb      	ldr	r3, [r7, #8]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	00f42400 	.word	0x00f42400
 800565c:	017d7840 	.word	0x017d7840

08005660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005664:	4b03      	ldr	r3, [pc, #12]	; (8005674 <HAL_RCC_GetHCLKFreq+0x14>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000000 	.word	0x20000000

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800567c:	f7ff fff0 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 8005680:	4601      	mov	r1, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0a9b      	lsrs	r3, r3, #10
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4a03      	ldr	r2, [pc, #12]	; (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	0800f40c 	.word	0x0800f40c

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056a4:	f7ff ffdc 	bl	8005660 <HAL_RCC_GetHCLKFreq>
 80056a8:	4601      	mov	r1, r0
 80056aa:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0b5b      	lsrs	r3, r3, #13
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4a03      	ldr	r2, [pc, #12]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b6:	5cd3      	ldrb	r3, [r2, r3]
 80056b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40023800 	.word	0x40023800
 80056c4:	0800f40c 	.word	0x0800f40c

080056c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	220f      	movs	r2, #15
 80056d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0203 	and.w	r2, r3, #3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80056fc:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCC_GetClockConfig+0x5c>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	08db      	lsrs	r3, r3, #3
 8005702:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <HAL_RCC_GetClockConfig+0x60>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 020f 	and.w	r2, r3, #15
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800
 8005728:	40023c00 	.word	0x40023c00

0800572c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005750:	4b7a      	ldr	r3, [pc, #488]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005756:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4977      	ldr	r1, [pc, #476]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800576e:	2301      	movs	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d010      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800577e:	4b6f      	ldr	r3, [pc, #444]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005784:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	496b      	ldr	r1, [pc, #428]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d022      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80057ac:	4b63      	ldr	r3, [pc, #396]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ba:	4960      	ldr	r1, [pc, #384]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d6:	d10c      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80057d8:	4b58      	ldr	r3, [pc, #352]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	4954      	ldr	r1, [pc, #336]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d022      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80057fe:	4b4f      	ldr	r3, [pc, #316]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580c:	494b      	ldr	r1, [pc, #300]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800581c:	2301      	movs	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800582a:	4b44      	ldr	r3, [pc, #272]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800582c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005830:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	3b01      	subs	r3, #1
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	493f      	ldr	r1, [pc, #252]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 808a 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	4a38      	ldr	r2, [pc, #224]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800585c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005860:	6413      	str	r3, [r2, #64]	; 0x40
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800586e:	4b34      	ldr	r3, [pc, #208]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a33      	ldr	r2, [pc, #204]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800587a:	f7fc fa7d 	bl	8001d78 <HAL_GetTick>
 800587e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005880:	e008      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005882:	f7fc fa79 	bl	8001d78 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e1d1      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02f      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d028      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058be:	4b1f      	ldr	r3, [pc, #124]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d114      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058e6:	f7fc fa47 	bl	8001d78 <HAL_GetTick>
 80058ea:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ec:	e00a      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fc fa43 	bl	8001d78 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e199      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0ee      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591c:	d114      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	4902      	ldr	r1, [pc, #8]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005934:	4313      	orrs	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
 8005938:	e00c      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
 8005940:	40007000 	.word	0x40007000
 8005944:	42470e40 	.word	0x42470e40
 8005948:	4b89      	ldr	r3, [pc, #548]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4a88      	ldr	r2, [pc, #544]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800594e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005952:	6093      	str	r3, [r2, #8]
 8005954:	4b86      	ldr	r3, [pc, #536]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005956:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005960:	4983      	ldr	r1, [pc, #524]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005962:	4313      	orrs	r3, r2
 8005964:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005978:	4b7e      	ldr	r3, [pc, #504]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800597a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800598a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	4976      	ldr	r1, [pc, #472]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d011      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059aa:	4b71      	ldr	r3, [pc, #452]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	496d      	ldr	r1, [pc, #436]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c8:	d101      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80059ca:	2301      	movs	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80059da:	4b65      	ldr	r3, [pc, #404]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	4961      	ldr	r1, [pc, #388]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d004      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	f040 80c6 	bne.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a00:	4b5d      	ldr	r3, [pc, #372]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a06:	f7fc f9b7 	bl	8001d78 <HAL_GetTick>
 8005a0a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a0e:	f7fc f9b3 	bl	8001d78 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e10b      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a20:	4b53      	ldr	r3, [pc, #332]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005a2c:	4a53      	ldr	r2, [pc, #332]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a32:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d023      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d019      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a70:	d00e      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d019      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d115      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a8e:	d110      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	019b      	lsls	r3, r3, #6
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	061b      	lsls	r3, r3, #24
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	071b      	lsls	r3, r3, #28
 8005aaa:	4931      	ldr	r1, [pc, #196]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d026      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d122      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ada:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	431a      	orrs	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	491b      	ldr	r1, [pc, #108]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0e:	f023 021f 	bic.w	r2, r3, #31
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4915      	ldr	r1, [pc, #84]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	019b      	lsls	r3, r3, #6
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	490a      	ldr	r1, [pc, #40]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b54:	f7fc f910 	bl	8001d78 <HAL_GetTick>
 8005b58:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b5a:	e011      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b5c:	f7fc f90c 	bl	8001d78 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d90a      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e064      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800
 8005b74:	424711e0 	.word	0x424711e0
 8005b78:	42470068 	.word	0x42470068
 8005b7c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0e7      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba6:	4926      	ldr	r1, [pc, #152]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bba:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	491d      	ldr	r1, [pc, #116]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005bdc:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	4915      	ldr	r1, [pc, #84]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c04:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	490c      	ldr	r1, [pc, #48]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c26:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	4904      	ldr	r1, [pc, #16]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40023800 	.word	0x40023800

08005c44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d003      	beq.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	f000 8098 	beq.w	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005c68:	e12d      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005c6a:	4b9a      	ldr	r3, [pc, #616]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005c74:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c7c:	d00c      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c82:	d802      	bhi.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005c88:	e082      	b.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c8e:	d047      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005c90:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005c94:	d06f      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8005c96:	e07b      	b.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c98:	4b8f      	ldr	r3, [pc, #572]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c9a:	617b      	str	r3, [r7, #20]
          break;
 8005c9c:	e07b      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005c9e:	4b8d      	ldr	r3, [pc, #564]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cae:	4b89      	ldr	r3, [pc, #548]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb8:	4a87      	ldr	r2, [pc, #540]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e019      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cc2:	4b84      	ldr	r3, [pc, #528]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cce:	d109      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cd0:	4b80      	ldr	r3, [pc, #512]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cda:	4a80      	ldr	r2, [pc, #512]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ce4:	4b7b      	ldr	r3, [pc, #492]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cee:	4a7c      	ldr	r2, [pc, #496]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005cf6:	4b77      	ldr	r3, [pc, #476]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfc:	099b      	lsrs	r3, r3, #6
 8005cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
 8005d08:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d0a:	4b72      	ldr	r3, [pc, #456]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d10:	0f1b      	lsrs	r3, r3, #28
 8005d12:	f003 0307 	and.w	r3, r3, #7
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]
          break;
 8005d1e:	e03a      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d20:	4b6c      	ldr	r3, [pc, #432]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d2e:	4b69      	ldr	r3, [pc, #420]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d36:	4a69      	ldr	r2, [pc, #420]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e007      	b.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d40:	4b64      	ldr	r3, [pc, #400]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d48:	4a65      	ldr	r2, [pc, #404]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005d50:	4b60      	ldr	r3, [pc, #384]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005d62:	4b5c      	ldr	r3, [pc, #368]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	0f1b      	lsrs	r3, r3, #28
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	617b      	str	r3, [r7, #20]
          break;
 8005d74:	e00f      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d76:	4b57      	ldr	r3, [pc, #348]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d82:	d102      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005d84:	4b55      	ldr	r3, [pc, #340]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d86:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005d88:	e005      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005d8a:	4b55      	ldr	r3, [pc, #340]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d8c:	617b      	str	r3, [r7, #20]
          break;
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
          break;
 8005d94:	bf00      	nop
        }
      }
      break;
 8005d96:	e096      	b.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005d98:	4b4e      	ldr	r3, [pc, #312]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d9e:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005da2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005daa:	d00c      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db0:	d802      	bhi.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005db6:	e082      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbc:	d047      	beq.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005dbe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005dc2:	d06f      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005dc4:	e07b      	b.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dc6:	4b44      	ldr	r3, [pc, #272]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005dc8:	617b      	str	r3, [r7, #20]
          break;
 8005dca:	e07b      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005dcc:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dda:	d109      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ddc:	4b3d      	ldr	r3, [pc, #244]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de6:	4a3c      	ldr	r2, [pc, #240]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e019      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005df0:	4b38      	ldr	r3, [pc, #224]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfc:	d109      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005dfe:	4b35      	ldr	r3, [pc, #212]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e08:	4a34      	ldr	r2, [pc, #208]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e008      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e12:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e1c:	4a30      	ldr	r2, [pc, #192]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e22:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e24:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	099b      	lsrs	r3, r3, #6
 8005e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e38:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3e:	0f1b      	lsrs	r3, r3, #28
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	617b      	str	r3, [r7, #20]
          break;
 8005e4c:	e03a      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e4e:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e5a:	d108      	bne.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e64:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e007      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e6e:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e76:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	099b      	lsrs	r3, r3, #6
 8005e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005e90:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	0f1b      	lsrs	r3, r3, #28
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
          break;
 8005ea2:	e00f      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eb0:	d102      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005eb4:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005eb8:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005eba:	617b      	str	r3, [r7, #20]
          break;
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
          break;
 8005ec2:	bf00      	nop
        }
      }
      break;
 8005ec4:	bf00      	nop
    }
  }
  return frequency;
 8005ec6:	697b      	ldr	r3, [r7, #20]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	00bb8000 	.word	0x00bb8000
 8005edc:	017d7840 	.word	0x017d7840
 8005ee0:	00f42400 	.word	0x00f42400

08005ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d075      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005efc:	4ba2      	ldr	r3, [pc, #648]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d00c      	beq.n	8005f22 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f08:	4b9f      	ldr	r3, [pc, #636]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d112      	bne.n	8005f3a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f14:	4b9c      	ldr	r3, [pc, #624]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f20:	d10b      	bne.n	8005f3a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f22:	4b99      	ldr	r3, [pc, #612]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d05b      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x102>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d157      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e20b      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d106      	bne.n	8005f52 <HAL_RCC_OscConfig+0x6e>
 8005f44:	4b90      	ldr	r3, [pc, #576]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a8f      	ldr	r2, [pc, #572]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e01d      	b.n	8005f8e <HAL_RCC_OscConfig+0xaa>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f5a:	d10c      	bne.n	8005f76 <HAL_RCC_OscConfig+0x92>
 8005f5c:	4b8a      	ldr	r3, [pc, #552]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a89      	ldr	r2, [pc, #548]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b87      	ldr	r3, [pc, #540]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a86      	ldr	r2, [pc, #536]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	e00b      	b.n	8005f8e <HAL_RCC_OscConfig+0xaa>
 8005f76:	4b84      	ldr	r3, [pc, #528]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a83      	ldr	r2, [pc, #524]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4b81      	ldr	r3, [pc, #516]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a80      	ldr	r2, [pc, #512]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d013      	beq.n	8005fbe <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fb feef 	bl	8001d78 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9e:	f7fb feeb 	bl	8001d78 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b64      	cmp	r3, #100	; 0x64
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e1d0      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb0:	4b75      	ldr	r3, [pc, #468]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_OscConfig+0xba>
 8005fbc:	e014      	b.n	8005fe8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbe:	f7fb fedb 	bl	8001d78 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc6:	f7fb fed7 	bl	8001d78 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b64      	cmp	r3, #100	; 0x64
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e1bc      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd8:	4b6b      	ldr	r3, [pc, #428]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCC_OscConfig+0xe2>
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d063      	beq.n	80060bc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ff4:	4b64      	ldr	r3, [pc, #400]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 030c 	and.w	r3, r3, #12
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006008:	2b08      	cmp	r3, #8
 800600a:	d11c      	bne.n	8006046 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800600c:	4b5e      	ldr	r3, [pc, #376]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d116      	bne.n	8006046 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006018:	4b5b      	ldr	r3, [pc, #364]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCC_OscConfig+0x14c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e190      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006030:	4b55      	ldr	r3, [pc, #340]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4952      	ldr	r1, [pc, #328]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006044:	e03a      	b.n	80060bc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d020      	beq.n	8006090 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800604e:	4b4f      	ldr	r3, [pc, #316]	; (800618c <HAL_RCC_OscConfig+0x2a8>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fb fe90 	bl	8001d78 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800605c:	f7fb fe8c 	bl	8001d78 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e171      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606e:	4b46      	ldr	r3, [pc, #280]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607a:	4b43      	ldr	r3, [pc, #268]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	493f      	ldr	r1, [pc, #252]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
 800608e:	e015      	b.n	80060bc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006090:	4b3e      	ldr	r3, [pc, #248]	; (800618c <HAL_RCC_OscConfig+0x2a8>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006096:	f7fb fe6f 	bl	8001d78 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800609e:	f7fb fe6b 	bl	8001d78 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e150      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b0:	4b35      	ldr	r3, [pc, #212]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d030      	beq.n	800612a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d016      	beq.n	80060fe <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d0:	4b2f      	ldr	r3, [pc, #188]	; (8006190 <HAL_RCC_OscConfig+0x2ac>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d6:	f7fb fe4f 	bl	8001d78 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060de:	f7fb fe4b 	bl	8001d78 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e130      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f0:	4b25      	ldr	r3, [pc, #148]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0f0      	beq.n	80060de <HAL_RCC_OscConfig+0x1fa>
 80060fc:	e015      	b.n	800612a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060fe:	4b24      	ldr	r3, [pc, #144]	; (8006190 <HAL_RCC_OscConfig+0x2ac>)
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006104:	f7fb fe38 	bl	8001d78 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800610c:	f7fb fe34 	bl	8001d78 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e119      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8006120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 809f 	beq.w	8006276 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 8006152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006156:	6413      	str	r3, [r2, #64]	; 0x40
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <HAL_RCC_OscConfig+0x2a4>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006164:	2301      	movs	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_RCC_OscConfig+0x2b0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d120      	bne.n	80061b6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <HAL_RCC_OscConfig+0x2b0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a06      	ldr	r2, [pc, #24]	; (8006194 <HAL_RCC_OscConfig+0x2b0>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006180:	f7fb fdfa 	bl	8001d78 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006186:	e010      	b.n	80061aa <HAL_RCC_OscConfig+0x2c6>
 8006188:	40023800 	.word	0x40023800
 800618c:	42470000 	.word	0x42470000
 8006190:	42470e80 	.word	0x42470e80
 8006194:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006198:	f7fb fdee 	bl	8001d78 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e0d3      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061aa:	4b6c      	ldr	r3, [pc, #432]	; (800635c <HAL_RCC_OscConfig+0x478>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d106      	bne.n	80061cc <HAL_RCC_OscConfig+0x2e8>
 80061be:	4b68      	ldr	r3, [pc, #416]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	4a67      	ldr	r2, [pc, #412]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ca:	e01c      	b.n	8006206 <HAL_RCC_OscConfig+0x322>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d10c      	bne.n	80061ee <HAL_RCC_OscConfig+0x30a>
 80061d4:	4b62      	ldr	r3, [pc, #392]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	4a61      	ldr	r2, [pc, #388]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	6713      	str	r3, [r2, #112]	; 0x70
 80061e0:	4b5f      	ldr	r3, [pc, #380]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	4a5e      	ldr	r2, [pc, #376]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6713      	str	r3, [r2, #112]	; 0x70
 80061ec:	e00b      	b.n	8006206 <HAL_RCC_OscConfig+0x322>
 80061ee:	4b5c      	ldr	r3, [pc, #368]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a5b      	ldr	r2, [pc, #364]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70
 80061fa:	4b59      	ldr	r3, [pc, #356]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a58      	ldr	r2, [pc, #352]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 8006200:	f023 0304 	bic.w	r3, r3, #4
 8006204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d015      	beq.n	800623a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620e:	f7fb fdb3 	bl	8001d78 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	e00a      	b.n	800622c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006216:	f7fb fdaf 	bl	8001d78 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	f241 3288 	movw	r2, #5000	; 0x1388
 8006224:	4293      	cmp	r3, r2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e092      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622c:	4b4c      	ldr	r3, [pc, #304]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 800622e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ee      	beq.n	8006216 <HAL_RCC_OscConfig+0x332>
 8006238:	e014      	b.n	8006264 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623a:	f7fb fd9d 	bl	8001d78 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006240:	e00a      	b.n	8006258 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f7fb fd99 	bl	8001d78 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006250:	4293      	cmp	r3, r2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e07c      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006258:	4b41      	ldr	r3, [pc, #260]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ee      	bne.n	8006242 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d105      	bne.n	8006276 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800626a:	4b3d      	ldr	r3, [pc, #244]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 8006270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d068      	beq.n	8006350 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800627e:	4b38      	ldr	r3, [pc, #224]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b08      	cmp	r3, #8
 8006288:	d060      	beq.n	800634c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d145      	bne.n	800631e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006292:	4b34      	ldr	r3, [pc, #208]	; (8006364 <HAL_RCC_OscConfig+0x480>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fb fd6e 	bl	8001d78 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fb fd6a 	bl	8001d78 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e04f      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b2:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f0      	bne.n	80062a0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69da      	ldr	r2, [r3, #28]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	3b01      	subs	r3, #1
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	061b      	lsls	r3, r3, #24
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	071b      	lsls	r3, r3, #28
 80062ea:	491d      	ldr	r1, [pc, #116]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f0:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <HAL_RCC_OscConfig+0x480>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fb fd3f 	bl	8001d78 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062fe:	f7fb fd3b 	bl	8001d78 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e020      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006310:	4b13      	ldr	r3, [pc, #76]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0x41a>
 800631c:	e018      	b.n	8006350 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <HAL_RCC_OscConfig+0x480>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fb fd28 	bl	8001d78 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800632c:	f7fb fd24 	bl	8001d78 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e009      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <HAL_RCC_OscConfig+0x47c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x448>
 800634a:	e001      	b.n	8006350 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40007000 	.word	0x40007000
 8006360:	40023800 	.word	0x40023800
 8006364:	42470060 	.word	0x42470060

08006368 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e022      	b.n	80063c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d105      	bne.n	8006392 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fb fa4b 	bl	8001828 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2203      	movs	r2, #3
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f814 	bl	80063c8 <HAL_SD_InitCard>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e00a      	b.n	80063c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063c8:	b5b0      	push	{r4, r5, r7, lr}
 80063ca:	b08e      	sub	sp, #56	; 0x38
 80063cc:	af04      	add	r7, sp, #16
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80063e4:	2376      	movs	r3, #118	; 0x76
 80063e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681d      	ldr	r5, [r3, #0]
 80063ec:	466c      	mov	r4, sp
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063fa:	f107 0308 	add.w	r3, r7, #8
 80063fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006400:	4628      	mov	r0, r5
 8006402:	f001 ff13 	bl	800822c <SDIO_Init>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800640c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e031      	b.n	800647c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006418:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <HAL_SD_InitCard+0xbc>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f001 ff3a 	bl	800829c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <HAL_SD_InitCard+0xbc>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fb18 	bl	8006a64 <SD_PowerON>
 8006434:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e013      	b.n	800647c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa37 	bl	80068c8 <SD_InitCard>
 800645a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	; 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	bdb0      	pop	{r4, r5, r7, pc}
 8006484:	422580a0 	.word	0x422580a0

08006488 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006496:	0f9b      	lsrs	r3, r3, #30
 8006498:	b2da      	uxtb	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a2:	0e9b      	lsrs	r3, r3, #26
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b4:	0e1b      	lsrs	r3, r3, #24
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e8:	0d1b      	lsrs	r3, r3, #20
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006506:	0bdb      	lsrs	r3, r3, #15
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006518:	0b9b      	lsrs	r3, r3, #14
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	b2da      	uxtb	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800652a:	0b5b      	lsrs	r3, r3, #13
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	b2da      	uxtb	r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800653c:	0b1b      	lsrs	r3, r3, #12
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2200      	movs	r2, #0
 800654e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	2b00      	cmp	r3, #0
 8006556:	d163      	bne.n	8006620 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655c:	009a      	lsls	r2, r3, #2
 800655e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006562:	4013      	ands	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006568:	0f92      	lsrs	r2, r2, #30
 800656a:	431a      	orrs	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006574:	0edb      	lsrs	r3, r3, #27
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	b2da      	uxtb	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006586:	0e1b      	lsrs	r3, r3, #24
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	b2da      	uxtb	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006598:	0d5b      	lsrs	r3, r3, #21
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065aa:	0c9b      	lsrs	r3, r3, #18
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065bc:	0bdb      	lsrs	r3, r3, #15
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	7e1b      	ldrb	r3, [r3, #24]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	3302      	adds	r3, #2
 80065e0:	2201      	movs	r2, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80065ea:	fb02 f203 	mul.w	r2, r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	7a1b      	ldrb	r3, [r3, #8]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	2201      	movs	r2, #1
 80065fe:	409a      	lsls	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800660c:	0a52      	lsrs	r2, r2, #9
 800660e:	fb02 f203 	mul.w	r2, r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800661c:	661a      	str	r2, [r3, #96]	; 0x60
 800661e:	e031      	b.n	8006684 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	2b01      	cmp	r3, #1
 8006626:	d11d      	bne.n	8006664 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	431a      	orrs	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	3301      	adds	r3, #1
 8006644:	029a      	lsls	r2, r3, #10
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006658:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	661a      	str	r2, [r3, #96]	; 0x60
 8006662:	e00f      	b.n	8006684 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a58      	ldr	r2, [pc, #352]	; (80067cc <HAL_SD_GetCardCSD+0x344>)
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e09d      	b.n	80067c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	0b9b      	lsrs	r3, r3, #14
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800669a:	09db      	lsrs	r3, r3, #7
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	0fdb      	lsrs	r3, r3, #31
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	0f5b      	lsrs	r3, r3, #29
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	0e9b      	lsrs	r3, r3, #26
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ec:	0d9b      	lsrs	r3, r3, #22
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fe:	0d5b      	lsrs	r3, r3, #21
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	0bdb      	lsrs	r3, r3, #15
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	0b9b      	lsrs	r3, r3, #14
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	0b5b      	lsrs	r3, r3, #13
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	0b1b      	lsrs	r3, r3, #12
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	0a9b      	lsrs	r3, r3, #10
 8006780:	b2db      	uxtb	r3, r3
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	b2da      	uxtb	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	004005ff 	.word	0x004005ff

080067d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80067d0:	b5b0      	push	{r4, r5, r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af04      	add	r7, sp, #16
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2203      	movs	r2, #3
 80067de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d02e      	beq.n	8006848 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f0:	d106      	bne.n	8006800 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
 80067fe:	e029      	b.n	8006854 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d10a      	bne.n	800681e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f9b9 	bl	8006b80 <SD_WideBus_Enable>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
 800681c:	e01a      	b.n	8006854 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f9f6 	bl	8006c16 <SD_WideBus_Disable>
 800682a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38
 8006838:	e00c      	b.n	8006854 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
 8006846:	e005      	b.n	8006854 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e024      	b.n	80068ba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681d      	ldr	r5, [r3, #0]
 8006896:	466c      	mov	r4, sp
 8006898:	f107 0318 	add.w	r3, r7, #24
 800689c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068aa:	4628      	mov	r0, r5
 80068ac:	f001 fcbe 	bl	800822c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3728      	adds	r7, #40	; 0x28
 80068be:	46bd      	mov	sp, r7
 80068c0:	bdb0      	pop	{r4, r5, r7, pc}
 80068c2:	bf00      	nop
 80068c4:	004005ff 	.word	0x004005ff

080068c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068c8:	b5b0      	push	{r4, r5, r7, lr}
 80068ca:	b094      	sub	sp, #80	; 0x50
 80068cc:	af04      	add	r7, sp, #16
 80068ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068d0:	2301      	movs	r3, #1
 80068d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 fcee 	bl	80082ba <SDIO_GetPowerState>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068e8:	e0b7      	b.n	8006a5a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d02f      	beq.n	8006952 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 fe6d 	bl	80085d6 <SDMMC_CmdSendCID>
 80068fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <SD_InitCard+0x40>
    {
      return errorstate;
 8006904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006906:	e0a8      	b.n	8006a5a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f001 fd18 	bl	8008344 <SDIO_GetResponse>
 8006914:	4602      	mov	r2, r0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2104      	movs	r1, #4
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fd0f 	bl	8008344 <SDIO_GetResponse>
 8006926:	4602      	mov	r2, r0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2108      	movs	r1, #8
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fd06 	bl	8008344 <SDIO_GetResponse>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	210c      	movs	r1, #12
 8006944:	4618      	mov	r0, r3
 8006946:	f001 fcfd 	bl	8008344 <SDIO_GetResponse>
 800694a:	4602      	mov	r2, r0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	2b03      	cmp	r3, #3
 8006958:	d00d      	beq.n	8006976 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f107 020e 	add.w	r2, r7, #14
 8006962:	4611      	mov	r1, r2
 8006964:	4618      	mov	r0, r3
 8006966:	f001 fe73 	bl	8008650 <SDMMC_CmdSetRelAdd>
 800696a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <SD_InitCard+0xae>
    {
      return errorstate;
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	e071      	b.n	8006a5a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	2b03      	cmp	r3, #3
 800697c:	d036      	beq.n	80069ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800697e:	89fb      	ldrh	r3, [r7, #14]
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	041b      	lsls	r3, r3, #16
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f001 fe3d 	bl	8008612 <SDMMC_CmdSendCSD>
 8006998:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a2:	e05a      	b.n	8006a5a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fcca 	bl	8008344 <SDIO_GetResponse>
 80069b0:	4602      	mov	r2, r0
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2104      	movs	r1, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 fcc1 	bl	8008344 <SDIO_GetResponse>
 80069c2:	4602      	mov	r2, r0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2108      	movs	r1, #8
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fcb8 	bl	8008344 <SDIO_GetResponse>
 80069d4:	4602      	mov	r2, r0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	210c      	movs	r1, #12
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fcaf 	bl	8008344 <SDIO_GetResponse>
 80069e6:	4602      	mov	r2, r0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2104      	movs	r1, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fca6 	bl	8008344 <SDIO_GetResponse>
 80069f8:	4603      	mov	r3, r0
 80069fa:	0d1a      	lsrs	r2, r3, #20
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a00:	f107 0310 	add.w	r3, r7, #16
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fd3e 	bl	8006488 <HAL_SD_GetCardCSD>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a16:	e020      	b.n	8006a5a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	f04f 0400 	mov.w	r4, #0
 8006a26:	461a      	mov	r2, r3
 8006a28:	4623      	mov	r3, r4
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	f001 fceb 	bl	8008406 <SDMMC_CmdSelDesel>
 8006a30:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <SD_InitCard+0x174>
  {
    return errorstate;
 8006a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3a:	e00e      	b.n	8006a5a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681d      	ldr	r5, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	466c      	mov	r4, sp
 8006a44:	f103 0210 	add.w	r2, r3, #16
 8006a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a4e:	3304      	adds	r3, #4
 8006a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a52:	4628      	mov	r0, r5
 8006a54:	f001 fbea 	bl	800822c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3740      	adds	r7, #64	; 0x40
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	2300      	movs	r3, #0
 8006a76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fce5 	bl	800844c <SDMMC_CmdGoIdleState>
 8006a82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	e072      	b.n	8006b74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fcf8 	bl	8008488 <SDMMC_CmdOperCond>
 8006a98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00d      	beq.n	8006abc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fcce 	bl	800844c <SDMMC_CmdGoIdleState>
 8006ab0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	e05b      	b.n	8006b74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d137      	bne.n	8006b3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fcf8 	bl	80084c6 <SDMMC_CmdAppCommand>
 8006ad6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d02d      	beq.n	8006b3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ade:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ae2:	e047      	b.n	8006b74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 fceb 	bl	80084c6 <SDMMC_CmdAppCommand>
 8006af0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <SD_PowerON+0x98>
    {
      return errorstate;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	e03b      	b.n	8006b74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	491e      	ldr	r1, [pc, #120]	; (8006b7c <SD_PowerON+0x118>)
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 fd01 	bl	800850a <SDMMC_CmdAppOperCommand>
 8006b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b14:	e02e      	b.n	8006b74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 fc11 	bl	8008344 <SDIO_GetResponse>
 8006b22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	0fdb      	lsrs	r3, r3, #31
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <SD_PowerON+0xcc>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <SD_PowerON+0xce>
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]

    count++;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d802      	bhi.n	8006b4a <SD_PowerON+0xe6>
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0cc      	beq.n	8006ae4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d902      	bls.n	8006b5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b58:	e00c      	b.n	8006b74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	645a      	str	r2, [r3, #68]	; 0x44
 8006b6a:	e002      	b.n	8006b72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	c1100000 	.word	0xc1100000

08006b80 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 fbd4 	bl	8008344 <SDIO_GetResponse>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba6:	d102      	bne.n	8006bae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bac:	e02f      	b.n	8006c0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006bae:	f107 030c 	add.w	r3, r7, #12
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f879 	bl	8006cac <SD_FindSCR>
 8006bba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	e023      	b.n	8006c0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01c      	beq.n	8006c0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f001 fc72 	bl	80084c6 <SDMMC_CmdAppCommand>
 8006be2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	e00f      	b.n	8006c0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fcab 	bl	8008550 <SDMMC_CmdBusWidth>
 8006bfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	e003      	b.n	8006c0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e001      	b.n	8006c0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 fb89 	bl	8008344 <SDIO_GetResponse>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c3c:	d102      	bne.n	8006c44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c42:	e02f      	b.n	8006ca4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c44:	f107 030c 	add.w	r3, r7, #12
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f82e 	bl	8006cac <SD_FindSCR>
 8006c50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	e023      	b.n	8006ca4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01c      	beq.n	8006ca0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f001 fc27 	bl	80084c6 <SDMMC_CmdAppCommand>
 8006c78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	e00f      	b.n	8006ca4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 fc60 	bl	8008550 <SDMMC_CmdBusWidth>
 8006c90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	e003      	b.n	8006ca4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e001      	b.n	8006ca4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ca0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b08f      	sub	sp, #60	; 0x3c
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006cb6:	f7fb f85f 	bl	8001d78 <HAL_GetTick>
 8006cba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2108      	movs	r1, #8
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fb75 	bl	80083c2 <SDMMC_CmdBlockLength>
 8006cd8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	e0a9      	b.n	8006e38 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f001 fbe8 	bl	80084c6 <SDMMC_CmdAppCommand>
 8006cf6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	e09a      	b.n	8006e38 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d08:	2308      	movs	r3, #8
 8006d0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006d0c:	2330      	movs	r3, #48	; 0x30
 8006d0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d10:	2302      	movs	r3, #2
 8006d12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f107 0210 	add.w	r2, r7, #16
 8006d24:	4611      	mov	r1, r2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fb1f 	bl	800836a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fc2f 	bl	8008594 <SDMMC_CmdSendSCR>
 8006d36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d022      	beq.n	8006d84 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	e07a      	b.n	8006e38 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	f107 0208 	add.w	r2, r7, #8
 8006d5c:	18d4      	adds	r4, r2, r3
 8006d5e:	4608      	mov	r0, r1
 8006d60:	f001 fa8f 	bl	8008282 <SDIO_ReadFIFO>
 8006d64:	4603      	mov	r3, r0
 8006d66:	6023      	str	r3, [r4, #0]
      index++;
 8006d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d6e:	f7fb f803 	bl	8001d78 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d102      	bne.n	8006d84 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d82:	e059      	b.n	8006e38 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8a:	f240 432a 	movw	r3, #1066	; 0x42a
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0d6      	beq.n	8006d42 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2208      	movs	r2, #8
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006daa:	2308      	movs	r3, #8
 8006dac:	e044      	b.n	8006e38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e037      	b.n	8006e38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006dde:	2320      	movs	r3, #32
 8006de0:	e02a      	b.n	8006e38 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f240 523a 	movw	r2, #1338	; 0x53a
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	061a      	lsls	r2, r3, #24
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006df8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	0e1b      	lsrs	r3, r3, #24
 8006e08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	601a      	str	r2, [r3, #0]
    scr++;
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	3304      	adds	r3, #4
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	061a      	lsls	r2, r3, #24
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	0a1b      	lsrs	r3, r3, #8
 8006e26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	0e1b      	lsrs	r3, r3, #24
 8006e30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	373c      	adds	r7, #60	; 0x3c
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd90      	pop	{r4, r7, pc}

08006e40 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e034      	b.n	8006ec0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7fa fe3a 	bl	8001ae4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3308      	adds	r3, #8
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f001 f8d2 	bl	8008024 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	f001 f93a 	bl	8008104 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6858      	ldr	r0, [r3, #4]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	f001 f985 	bl	80081ac <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	6892      	ldr	r2, [r2, #8]
 8006eaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	6892      	ldr	r2, [r2, #8]
 8006eb6:	f041 0101 	orr.w	r1, r1, #1
 8006eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e01d      	b.n	8006f16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f815 	bl	8006f1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f000 f968 	bl	80071dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d007      	beq.n	8006f6c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d122      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d11b      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f06f 0202 	mvn.w	r2, #2
 8006fa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f8ee 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 8006fc2:	e005      	b.n	8006fd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f8e0 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f8f1 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d122      	bne.n	800702a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d11b      	bne.n	800702a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f06f 0204 	mvn.w	r2, #4
 8006ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8c4 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 8007016:	e005      	b.n	8007024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8b6 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8c7 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d122      	bne.n	800707e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b08      	cmp	r3, #8
 8007044:	d11b      	bne.n	800707e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f06f 0208 	mvn.w	r2, #8
 800704e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2204      	movs	r2, #4
 8007054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f89a 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 800706a:	e005      	b.n	8007078 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f88c 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f89d 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b10      	cmp	r3, #16
 800708a:	d122      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b10      	cmp	r3, #16
 8007098:	d11b      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f06f 0210 	mvn.w	r2, #16
 80070a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2208      	movs	r2, #8
 80070a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f870 	bl	800719e <HAL_TIM_IC_CaptureCallback>
 80070be:	e005      	b.n	80070cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f862 	bl	800718a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f873 	bl	80071b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d10e      	bne.n	80070fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d107      	bne.n	80070fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f06f 0201 	mvn.w	r2, #1
 80070f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7f9 ffad 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b80      	cmp	r3, #128	; 0x80
 800710a:	d10e      	bne.n	800712a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d107      	bne.n	800712a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f903 	bl	8007330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b40      	cmp	r3, #64	; 0x40
 8007136:	d10e      	bne.n	8007156 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d107      	bne.n	8007156 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800714e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f838 	bl	80071c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b20      	cmp	r3, #32
 8007162:	d10e      	bne.n	8007182 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b20      	cmp	r3, #32
 8007170:	d107      	bne.n	8007182 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f06f 0220 	mvn.w	r2, #32
 800717a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8cd 	bl	800731c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a40      	ldr	r2, [pc, #256]	; (80072f0 <TIM_Base_SetConfig+0x114>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d013      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fa:	d00f      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a3d      	ldr	r2, [pc, #244]	; (80072f4 <TIM_Base_SetConfig+0x118>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00b      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a3c      	ldr	r2, [pc, #240]	; (80072f8 <TIM_Base_SetConfig+0x11c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a3b      	ldr	r2, [pc, #236]	; (80072fc <TIM_Base_SetConfig+0x120>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_Base_SetConfig+0x40>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a3a      	ldr	r2, [pc, #232]	; (8007300 <TIM_Base_SetConfig+0x124>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d108      	bne.n	800722e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <TIM_Base_SetConfig+0x114>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d02b      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723c:	d027      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a2c      	ldr	r2, [pc, #176]	; (80072f4 <TIM_Base_SetConfig+0x118>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d023      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a2b      	ldr	r2, [pc, #172]	; (80072f8 <TIM_Base_SetConfig+0x11c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d01f      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <TIM_Base_SetConfig+0x120>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01b      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <TIM_Base_SetConfig+0x124>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d017      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a28      	ldr	r2, [pc, #160]	; (8007304 <TIM_Base_SetConfig+0x128>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a27      	ldr	r2, [pc, #156]	; (8007308 <TIM_Base_SetConfig+0x12c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00f      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a26      	ldr	r2, [pc, #152]	; (800730c <TIM_Base_SetConfig+0x130>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00b      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a25      	ldr	r2, [pc, #148]	; (8007310 <TIM_Base_SetConfig+0x134>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a24      	ldr	r2, [pc, #144]	; (8007314 <TIM_Base_SetConfig+0x138>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_Base_SetConfig+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a23      	ldr	r2, [pc, #140]	; (8007318 <TIM_Base_SetConfig+0x13c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d108      	bne.n	80072a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <TIM_Base_SetConfig+0x114>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d003      	beq.n	80072d4 <TIM_Base_SetConfig+0xf8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a0c      	ldr	r2, [pc, #48]	; (8007300 <TIM_Base_SetConfig+0x124>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d103      	bne.n	80072dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	615a      	str	r2, [r3, #20]
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00
 8007300:	40010400 	.word	0x40010400
 8007304:	40014000 	.word	0x40014000
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800
 8007310:	40001800 	.word	0x40001800
 8007314:	40001c00 	.word	0x40001c00
 8007318:	40002000 	.word	0x40002000

0800731c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e03f      	b.n	80073d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fa fac4 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2224      	movs	r2, #36	; 0x24
 8007374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fab3 	bl	80078f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800739c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	4613      	mov	r3, r2
 80073ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d140      	bne.n	800747a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_UART_Receive_IT+0x26>
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e039      	b.n	800747c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_UART_Receive_IT+0x38>
 8007412:	2302      	movs	r3, #2
 8007414:	e032      	b.n	800747c <HAL_UART_Receive_IT+0x9e>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	88fa      	ldrh	r2, [r7, #6]
 800742e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2222      	movs	r2, #34	; 0x22
 800743a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007454:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695a      	ldr	r2, [r3, #20]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0201 	orr.w	r2, r2, #1
 8007464:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0220 	orr.w	r2, r2, #32
 8007474:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	e000      	b.n	800747c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800747a:	2302      	movs	r3, #2
  }
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10d      	bne.n	80074da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d008      	beq.n	80074da <HAL_UART_IRQHandler+0x52>
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f98c 	bl	80077f0 <UART_Receive_IT>
      return;
 80074d8:	e0d1      	b.n	800767e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80b0 	beq.w	8007642 <HAL_UART_IRQHandler+0x1ba>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_UART_IRQHandler+0x70>
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80a5 	beq.w	8007642 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_UART_IRQHandler+0x90>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	f043 0201 	orr.w	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <HAL_UART_IRQHandler+0xb0>
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007530:	f043 0202 	orr.w	r2, r3, #2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_UART_IRQHandler+0xd0>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	f043 0204 	orr.w	r2, r3, #4
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00f      	beq.n	8007582 <HAL_UART_IRQHandler+0xfa>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_UART_IRQHandler+0xee>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	f043 0208 	orr.w	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	2b00      	cmp	r3, #0
 8007588:	d078      	beq.n	800767c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <HAL_UART_IRQHandler+0x11c>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f926 	bl	80077f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	bf0c      	ite	eq
 80075b2:	2301      	moveq	r3, #1
 80075b4:	2300      	movne	r3, #0
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <HAL_UART_IRQHandler+0x144>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d031      	beq.n	8007630 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f86f 	bl	80076b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d123      	bne.n	8007628 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	4a21      	ldr	r2, [pc, #132]	; (8007684 <HAL_UART_IRQHandler+0x1fc>)
 80075fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007604:	4618      	mov	r0, r3
 8007606:	f7fb f95b 	bl	80028c0 <HAL_DMA_Abort_IT>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d016      	beq.n	800763e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800761a:	4610      	mov	r0, r2
 800761c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761e:	e00e      	b.n	800763e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f83b 	bl	800769c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007626:	e00a      	b.n	800763e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f837 	bl	800769c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762e:	e006      	b.n	800763e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f833 	bl	800769c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800763c:	e01e      	b.n	800767c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763e:	bf00      	nop
    return;
 8007640:	e01c      	b.n	800767c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_UART_IRQHandler+0x1d6>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f85c 	bl	8007714 <UART_Transmit_IT>
    return;
 800765c:	e00f      	b.n	800767e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <HAL_UART_IRQHandler+0x1f6>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f8a4 	bl	80077c0 <UART_EndTransmit_IT>
    return;
 8007678:	bf00      	nop
 800767a:	e000      	b.n	800767e <HAL_UART_IRQHandler+0x1f6>
    return;
 800767c:	bf00      	nop
  }
}
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	080076ed 	.word	0x080076ed

08007688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff ffc8 	bl	800769c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b21      	cmp	r3, #33	; 0x21
 8007726:	d144      	bne.n	80077b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007730:	d11a      	bne.n	8007768 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007746:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	621a      	str	r2, [r3, #32]
 800775a:	e00e      	b.n	800777a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	621a      	str	r2, [r3, #32]
 8007766:	e008      	b.n	800777a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	1c59      	adds	r1, r3, #1
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6211      	str	r1, [r2, #32]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4619      	mov	r1, r3
 8007788:	84d1      	strh	r1, [r2, #38]	; 0x26
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10f      	bne.n	80077ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e000      	b.n	80077b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
  }
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff51 	bl	8007688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b22      	cmp	r3, #34	; 0x22
 8007802:	d171      	bne.n	80078e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780c:	d123      	bne.n	8007856 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10e      	bne.n	800783a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b29b      	uxth	r3, r3
 8007824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	629a      	str	r2, [r3, #40]	; 0x28
 8007838:	e029      	b.n	800788e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b29b      	uxth	r3, r3
 8007842:	b2db      	uxtb	r3, r3
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	629a      	str	r2, [r3, #40]	; 0x28
 8007854:	e01b      	b.n	800788e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6858      	ldr	r0, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	1c59      	adds	r1, r3, #1
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6291      	str	r1, [r2, #40]	; 0x28
 800786e:	b2c2      	uxtb	r2, r0
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	e00c      	b.n	800788e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	b2da      	uxtb	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	1c58      	adds	r0, r3, #1
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	6288      	str	r0, [r1, #40]	; 0x28
 8007886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29b      	uxth	r3, r3
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	4619      	mov	r1, r3
 800789c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d120      	bne.n	80078e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0220 	bic.w	r2, r2, #32
 80078b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7f8 fe20 	bl	8000520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e002      	b.n	80078ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007936:	f023 030c 	bic.w	r3, r3, #12
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	68f9      	ldr	r1, [r7, #12]
 8007940:	430b      	orrs	r3, r1
 8007942:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007962:	f040 8199 	bne.w	8007c98 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4ac6      	ldr	r2, [pc, #792]	; (8007c84 <UART_SetConfig+0x390>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00f      	beq.n	8007990 <UART_SetConfig+0x9c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4ac4      	ldr	r2, [pc, #784]	; (8007c88 <UART_SetConfig+0x394>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00a      	beq.n	8007990 <UART_SetConfig+0x9c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4ac3      	ldr	r2, [pc, #780]	; (8007c8c <UART_SetConfig+0x398>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d005      	beq.n	8007990 <UART_SetConfig+0x9c>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4ac1      	ldr	r2, [pc, #772]	; (8007c90 <UART_SetConfig+0x39c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	f040 80bd 	bne.w	8007b0a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007990:	f7fd fe86 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8007994:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	461d      	mov	r5, r3
 800799a:	f04f 0600 	mov.w	r6, #0
 800799e:	46a8      	mov	r8, r5
 80079a0:	46b1      	mov	r9, r6
 80079a2:	eb18 0308 	adds.w	r3, r8, r8
 80079a6:	eb49 0409 	adc.w	r4, r9, r9
 80079aa:	4698      	mov	r8, r3
 80079ac:	46a1      	mov	r9, r4
 80079ae:	eb18 0805 	adds.w	r8, r8, r5
 80079b2:	eb49 0906 	adc.w	r9, r9, r6
 80079b6:	f04f 0100 	mov.w	r1, #0
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079ca:	4688      	mov	r8, r1
 80079cc:	4691      	mov	r9, r2
 80079ce:	eb18 0005 	adds.w	r0, r8, r5
 80079d2:	eb49 0106 	adc.w	r1, r9, r6
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	461d      	mov	r5, r3
 80079dc:	f04f 0600 	mov.w	r6, #0
 80079e0:	196b      	adds	r3, r5, r5
 80079e2:	eb46 0406 	adc.w	r4, r6, r6
 80079e6:	461a      	mov	r2, r3
 80079e8:	4623      	mov	r3, r4
 80079ea:	f7f8 fc19 	bl	8000220 <__aeabi_uldivmod>
 80079ee:	4603      	mov	r3, r0
 80079f0:	460c      	mov	r4, r1
 80079f2:	461a      	mov	r2, r3
 80079f4:	4ba7      	ldr	r3, [pc, #668]	; (8007c94 <UART_SetConfig+0x3a0>)
 80079f6:	fba3 2302 	umull	r2, r3, r3, r2
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	461d      	mov	r5, r3
 8007a04:	f04f 0600 	mov.w	r6, #0
 8007a08:	46a9      	mov	r9, r5
 8007a0a:	46b2      	mov	sl, r6
 8007a0c:	eb19 0309 	adds.w	r3, r9, r9
 8007a10:	eb4a 040a 	adc.w	r4, sl, sl
 8007a14:	4699      	mov	r9, r3
 8007a16:	46a2      	mov	sl, r4
 8007a18:	eb19 0905 	adds.w	r9, r9, r5
 8007a1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a20:	f04f 0100 	mov.w	r1, #0
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a34:	4689      	mov	r9, r1
 8007a36:	4692      	mov	sl, r2
 8007a38:	eb19 0005 	adds.w	r0, r9, r5
 8007a3c:	eb4a 0106 	adc.w	r1, sl, r6
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	461d      	mov	r5, r3
 8007a46:	f04f 0600 	mov.w	r6, #0
 8007a4a:	196b      	adds	r3, r5, r5
 8007a4c:	eb46 0406 	adc.w	r4, r6, r6
 8007a50:	461a      	mov	r2, r3
 8007a52:	4623      	mov	r3, r4
 8007a54:	f7f8 fbe4 	bl	8000220 <__aeabi_uldivmod>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4b8d      	ldr	r3, [pc, #564]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007a60:	fba3 1302 	umull	r1, r3, r3, r2
 8007a64:	095b      	lsrs	r3, r3, #5
 8007a66:	2164      	movs	r1, #100	; 0x64
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	3332      	adds	r3, #50	; 0x32
 8007a72:	4a88      	ldr	r2, [pc, #544]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007a74:	fba2 2303 	umull	r2, r3, r2, r3
 8007a78:	095b      	lsrs	r3, r3, #5
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a80:	4498      	add	r8, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	461d      	mov	r5, r3
 8007a86:	f04f 0600 	mov.w	r6, #0
 8007a8a:	46a9      	mov	r9, r5
 8007a8c:	46b2      	mov	sl, r6
 8007a8e:	eb19 0309 	adds.w	r3, r9, r9
 8007a92:	eb4a 040a 	adc.w	r4, sl, sl
 8007a96:	4699      	mov	r9, r3
 8007a98:	46a2      	mov	sl, r4
 8007a9a:	eb19 0905 	adds.w	r9, r9, r5
 8007a9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007aa2:	f04f 0100 	mov.w	r1, #0
 8007aa6:	f04f 0200 	mov.w	r2, #0
 8007aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ab2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ab6:	4689      	mov	r9, r1
 8007ab8:	4692      	mov	sl, r2
 8007aba:	eb19 0005 	adds.w	r0, r9, r5
 8007abe:	eb4a 0106 	adc.w	r1, sl, r6
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	f04f 0600 	mov.w	r6, #0
 8007acc:	196b      	adds	r3, r5, r5
 8007ace:	eb46 0406 	adc.w	r4, r6, r6
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	4623      	mov	r3, r4
 8007ad6:	f7f8 fba3 	bl	8000220 <__aeabi_uldivmod>
 8007ada:	4603      	mov	r3, r0
 8007adc:	460c      	mov	r4, r1
 8007ade:	461a      	mov	r2, r3
 8007ae0:	4b6c      	ldr	r3, [pc, #432]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2164      	movs	r1, #100	; 0x64
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	3332      	adds	r3, #50	; 0x32
 8007af4:	4a67      	ldr	r2, [pc, #412]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	f003 0207 	and.w	r2, r3, #7
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4442      	add	r2, r8
 8007b06:	609a      	str	r2, [r3, #8]
 8007b08:	e27d      	b.n	8008006 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b0a:	f7fd fdb5 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8007b0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	461d      	mov	r5, r3
 8007b14:	f04f 0600 	mov.w	r6, #0
 8007b18:	46a8      	mov	r8, r5
 8007b1a:	46b1      	mov	r9, r6
 8007b1c:	eb18 0308 	adds.w	r3, r8, r8
 8007b20:	eb49 0409 	adc.w	r4, r9, r9
 8007b24:	4698      	mov	r8, r3
 8007b26:	46a1      	mov	r9, r4
 8007b28:	eb18 0805 	adds.w	r8, r8, r5
 8007b2c:	eb49 0906 	adc.w	r9, r9, r6
 8007b30:	f04f 0100 	mov.w	r1, #0
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b44:	4688      	mov	r8, r1
 8007b46:	4691      	mov	r9, r2
 8007b48:	eb18 0005 	adds.w	r0, r8, r5
 8007b4c:	eb49 0106 	adc.w	r1, r9, r6
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	461d      	mov	r5, r3
 8007b56:	f04f 0600 	mov.w	r6, #0
 8007b5a:	196b      	adds	r3, r5, r5
 8007b5c:	eb46 0406 	adc.w	r4, r6, r6
 8007b60:	461a      	mov	r2, r3
 8007b62:	4623      	mov	r3, r4
 8007b64:	f7f8 fb5c 	bl	8000220 <__aeabi_uldivmod>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	4b49      	ldr	r3, [pc, #292]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007b70:	fba3 2302 	umull	r2, r3, r3, r2
 8007b74:	095b      	lsrs	r3, r3, #5
 8007b76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	461d      	mov	r5, r3
 8007b7e:	f04f 0600 	mov.w	r6, #0
 8007b82:	46a9      	mov	r9, r5
 8007b84:	46b2      	mov	sl, r6
 8007b86:	eb19 0309 	adds.w	r3, r9, r9
 8007b8a:	eb4a 040a 	adc.w	r4, sl, sl
 8007b8e:	4699      	mov	r9, r3
 8007b90:	46a2      	mov	sl, r4
 8007b92:	eb19 0905 	adds.w	r9, r9, r5
 8007b96:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b9a:	f04f 0100 	mov.w	r1, #0
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007baa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bae:	4689      	mov	r9, r1
 8007bb0:	4692      	mov	sl, r2
 8007bb2:	eb19 0005 	adds.w	r0, r9, r5
 8007bb6:	eb4a 0106 	adc.w	r1, sl, r6
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	f04f 0600 	mov.w	r6, #0
 8007bc4:	196b      	adds	r3, r5, r5
 8007bc6:	eb46 0406 	adc.w	r4, r6, r6
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4623      	mov	r3, r4
 8007bce:	f7f8 fb27 	bl	8000220 <__aeabi_uldivmod>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	4b2e      	ldr	r3, [pc, #184]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007bda:	fba3 1302 	umull	r1, r3, r3, r2
 8007bde:	095b      	lsrs	r3, r3, #5
 8007be0:	2164      	movs	r1, #100	; 0x64
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	3332      	adds	r3, #50	; 0x32
 8007bec:	4a29      	ldr	r2, [pc, #164]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007bee:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bfa:	4498      	add	r8, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	461d      	mov	r5, r3
 8007c00:	f04f 0600 	mov.w	r6, #0
 8007c04:	46a9      	mov	r9, r5
 8007c06:	46b2      	mov	sl, r6
 8007c08:	eb19 0309 	adds.w	r3, r9, r9
 8007c0c:	eb4a 040a 	adc.w	r4, sl, sl
 8007c10:	4699      	mov	r9, r3
 8007c12:	46a2      	mov	sl, r4
 8007c14:	eb19 0905 	adds.w	r9, r9, r5
 8007c18:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c1c:	f04f 0100 	mov.w	r1, #0
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c30:	4689      	mov	r9, r1
 8007c32:	4692      	mov	sl, r2
 8007c34:	eb19 0005 	adds.w	r0, r9, r5
 8007c38:	eb4a 0106 	adc.w	r1, sl, r6
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	461d      	mov	r5, r3
 8007c42:	f04f 0600 	mov.w	r6, #0
 8007c46:	196b      	adds	r3, r5, r5
 8007c48:	eb46 0406 	adc.w	r4, r6, r6
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4623      	mov	r3, r4
 8007c50:	f7f8 fae6 	bl	8000220 <__aeabi_uldivmod>
 8007c54:	4603      	mov	r3, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	2164      	movs	r1, #100	; 0x64
 8007c64:	fb01 f303 	mul.w	r3, r1, r3
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	3332      	adds	r3, #50	; 0x32
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <UART_SetConfig+0x3a0>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	f003 0207 	and.w	r2, r3, #7
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4442      	add	r2, r8
 8007c80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007c82:	e1c0      	b.n	8008006 <UART_SetConfig+0x712>
 8007c84:	40011000 	.word	0x40011000
 8007c88:	40011400 	.word	0x40011400
 8007c8c:	40011800 	.word	0x40011800
 8007c90:	40011c00 	.word	0x40011c00
 8007c94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4adc      	ldr	r2, [pc, #880]	; (8008010 <UART_SetConfig+0x71c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00f      	beq.n	8007cc2 <UART_SetConfig+0x3ce>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4adb      	ldr	r2, [pc, #876]	; (8008014 <UART_SetConfig+0x720>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00a      	beq.n	8007cc2 <UART_SetConfig+0x3ce>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4ad9      	ldr	r2, [pc, #868]	; (8008018 <UART_SetConfig+0x724>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d005      	beq.n	8007cc2 <UART_SetConfig+0x3ce>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4ad8      	ldr	r2, [pc, #864]	; (800801c <UART_SetConfig+0x728>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	f040 80d1 	bne.w	8007e64 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cc2:	f7fd fced 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8007cc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	469a      	mov	sl, r3
 8007ccc:	f04f 0b00 	mov.w	fp, #0
 8007cd0:	46d0      	mov	r8, sl
 8007cd2:	46d9      	mov	r9, fp
 8007cd4:	eb18 0308 	adds.w	r3, r8, r8
 8007cd8:	eb49 0409 	adc.w	r4, r9, r9
 8007cdc:	4698      	mov	r8, r3
 8007cde:	46a1      	mov	r9, r4
 8007ce0:	eb18 080a 	adds.w	r8, r8, sl
 8007ce4:	eb49 090b 	adc.w	r9, r9, fp
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007cf4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007cf8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007cfc:	4688      	mov	r8, r1
 8007cfe:	4691      	mov	r9, r2
 8007d00:	eb1a 0508 	adds.w	r5, sl, r8
 8007d04:	eb4b 0609 	adc.w	r6, fp, r9
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	f04f 0400 	mov.w	r4, #0
 8007d1a:	0094      	lsls	r4, r2, #2
 8007d1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d20:	008b      	lsls	r3, r1, #2
 8007d22:	461a      	mov	r2, r3
 8007d24:	4623      	mov	r3, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	4631      	mov	r1, r6
 8007d2a:	f7f8 fa79 	bl	8000220 <__aeabi_uldivmod>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4bba      	ldr	r3, [pc, #744]	; (8008020 <UART_SetConfig+0x72c>)
 8007d36:	fba3 2302 	umull	r2, r3, r3, r2
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	469b      	mov	fp, r3
 8007d44:	f04f 0c00 	mov.w	ip, #0
 8007d48:	46d9      	mov	r9, fp
 8007d4a:	46e2      	mov	sl, ip
 8007d4c:	eb19 0309 	adds.w	r3, r9, r9
 8007d50:	eb4a 040a 	adc.w	r4, sl, sl
 8007d54:	4699      	mov	r9, r3
 8007d56:	46a2      	mov	sl, r4
 8007d58:	eb19 090b 	adds.w	r9, r9, fp
 8007d5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d60:	f04f 0100 	mov.w	r1, #0
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d74:	4689      	mov	r9, r1
 8007d76:	4692      	mov	sl, r2
 8007d78:	eb1b 0509 	adds.w	r5, fp, r9
 8007d7c:	eb4c 060a 	adc.w	r6, ip, sl
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4619      	mov	r1, r3
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	f04f 0400 	mov.w	r4, #0
 8007d92:	0094      	lsls	r4, r2, #2
 8007d94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d98:	008b      	lsls	r3, r1, #2
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4631      	mov	r1, r6
 8007da2:	f7f8 fa3d 	bl	8000220 <__aeabi_uldivmod>
 8007da6:	4603      	mov	r3, r0
 8007da8:	460c      	mov	r4, r1
 8007daa:	461a      	mov	r2, r3
 8007dac:	4b9c      	ldr	r3, [pc, #624]	; (8008020 <UART_SetConfig+0x72c>)
 8007dae:	fba3 1302 	umull	r1, r3, r3, r2
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	2164      	movs	r1, #100	; 0x64
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	3332      	adds	r3, #50	; 0x32
 8007dc0:	4a97      	ldr	r2, [pc, #604]	; (8008020 <UART_SetConfig+0x72c>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dcc:	4498      	add	r8, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	469b      	mov	fp, r3
 8007dd2:	f04f 0c00 	mov.w	ip, #0
 8007dd6:	46d9      	mov	r9, fp
 8007dd8:	46e2      	mov	sl, ip
 8007dda:	eb19 0309 	adds.w	r3, r9, r9
 8007dde:	eb4a 040a 	adc.w	r4, sl, sl
 8007de2:	4699      	mov	r9, r3
 8007de4:	46a2      	mov	sl, r4
 8007de6:	eb19 090b 	adds.w	r9, r9, fp
 8007dea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007dee:	f04f 0100 	mov.w	r1, #0
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e02:	4689      	mov	r9, r1
 8007e04:	4692      	mov	sl, r2
 8007e06:	eb1b 0509 	adds.w	r5, fp, r9
 8007e0a:	eb4c 060a 	adc.w	r6, ip, sl
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4619      	mov	r1, r3
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	f04f 0400 	mov.w	r4, #0
 8007e20:	0094      	lsls	r4, r2, #2
 8007e22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e26:	008b      	lsls	r3, r1, #2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	4631      	mov	r1, r6
 8007e30:	f7f8 f9f6 	bl	8000220 <__aeabi_uldivmod>
 8007e34:	4603      	mov	r3, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4b79      	ldr	r3, [pc, #484]	; (8008020 <UART_SetConfig+0x72c>)
 8007e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	2164      	movs	r1, #100	; 0x64
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	3332      	adds	r3, #50	; 0x32
 8007e4e:	4a74      	ldr	r2, [pc, #464]	; (8008020 <UART_SetConfig+0x72c>)
 8007e50:	fba2 2303 	umull	r2, r3, r2, r3
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	f003 020f 	and.w	r2, r3, #15
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4442      	add	r2, r8
 8007e60:	609a      	str	r2, [r3, #8]
 8007e62:	e0d0      	b.n	8008006 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e64:	f7fd fc08 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 8007e68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	469a      	mov	sl, r3
 8007e6e:	f04f 0b00 	mov.w	fp, #0
 8007e72:	46d0      	mov	r8, sl
 8007e74:	46d9      	mov	r9, fp
 8007e76:	eb18 0308 	adds.w	r3, r8, r8
 8007e7a:	eb49 0409 	adc.w	r4, r9, r9
 8007e7e:	4698      	mov	r8, r3
 8007e80:	46a1      	mov	r9, r4
 8007e82:	eb18 080a 	adds.w	r8, r8, sl
 8007e86:	eb49 090b 	adc.w	r9, r9, fp
 8007e8a:	f04f 0100 	mov.w	r1, #0
 8007e8e:	f04f 0200 	mov.w	r2, #0
 8007e92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e9e:	4688      	mov	r8, r1
 8007ea0:	4691      	mov	r9, r2
 8007ea2:	eb1a 0508 	adds.w	r5, sl, r8
 8007ea6:	eb4b 0609 	adc.w	r6, fp, r9
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	f04f 0400 	mov.w	r4, #0
 8007ebc:	0094      	lsls	r4, r2, #2
 8007ebe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ec2:	008b      	lsls	r3, r1, #2
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4623      	mov	r3, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	4631      	mov	r1, r6
 8007ecc:	f7f8 f9a8 	bl	8000220 <__aeabi_uldivmod>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4b52      	ldr	r3, [pc, #328]	; (8008020 <UART_SetConfig+0x72c>)
 8007ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	469b      	mov	fp, r3
 8007ee6:	f04f 0c00 	mov.w	ip, #0
 8007eea:	46d9      	mov	r9, fp
 8007eec:	46e2      	mov	sl, ip
 8007eee:	eb19 0309 	adds.w	r3, r9, r9
 8007ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ef6:	4699      	mov	r9, r3
 8007ef8:	46a2      	mov	sl, r4
 8007efa:	eb19 090b 	adds.w	r9, r9, fp
 8007efe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f02:	f04f 0100 	mov.w	r1, #0
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f16:	4689      	mov	r9, r1
 8007f18:	4692      	mov	sl, r2
 8007f1a:	eb1b 0509 	adds.w	r5, fp, r9
 8007f1e:	eb4c 060a 	adc.w	r6, ip, sl
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	4619      	mov	r1, r3
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	f04f 0400 	mov.w	r4, #0
 8007f34:	0094      	lsls	r4, r2, #2
 8007f36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f3a:	008b      	lsls	r3, r1, #2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4623      	mov	r3, r4
 8007f40:	4628      	mov	r0, r5
 8007f42:	4631      	mov	r1, r6
 8007f44:	f7f8 f96c 	bl	8000220 <__aeabi_uldivmod>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b34      	ldr	r3, [pc, #208]	; (8008020 <UART_SetConfig+0x72c>)
 8007f50:	fba3 1302 	umull	r1, r3, r3, r2
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	2164      	movs	r1, #100	; 0x64
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	3332      	adds	r3, #50	; 0x32
 8007f62:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <UART_SetConfig+0x72c>)
 8007f64:	fba2 2303 	umull	r2, r3, r2, r3
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f6e:	4498      	add	r8, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	469b      	mov	fp, r3
 8007f74:	f04f 0c00 	mov.w	ip, #0
 8007f78:	46d9      	mov	r9, fp
 8007f7a:	46e2      	mov	sl, ip
 8007f7c:	eb19 0309 	adds.w	r3, r9, r9
 8007f80:	eb4a 040a 	adc.w	r4, sl, sl
 8007f84:	4699      	mov	r9, r3
 8007f86:	46a2      	mov	sl, r4
 8007f88:	eb19 090b 	adds.w	r9, r9, fp
 8007f8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f90:	f04f 0100 	mov.w	r1, #0
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fa4:	4689      	mov	r9, r1
 8007fa6:	4692      	mov	sl, r2
 8007fa8:	eb1b 0509 	adds.w	r5, fp, r9
 8007fac:	eb4c 060a 	adc.w	r6, ip, sl
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	f04f 0400 	mov.w	r4, #0
 8007fc2:	0094      	lsls	r4, r2, #2
 8007fc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fc8:	008b      	lsls	r3, r1, #2
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4623      	mov	r3, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	f7f8 f925 	bl	8000220 <__aeabi_uldivmod>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <UART_SetConfig+0x72c>)
 8007fde:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe2:	095b      	lsrs	r3, r3, #5
 8007fe4:	2164      	movs	r1, #100	; 0x64
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	3332      	adds	r3, #50	; 0x32
 8007ff0:	4a0b      	ldr	r2, [pc, #44]	; (8008020 <UART_SetConfig+0x72c>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	f003 020f 	and.w	r2, r3, #15
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4442      	add	r2, r8
 8008002:	609a      	str	r2, [r3, #8]
}
 8008004:	e7ff      	b.n	8008006 <UART_SetConfig+0x712>
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	40011000 	.word	0x40011000
 8008014:	40011400 	.word	0x40011400
 8008018:	40011800 	.word	0x40011800
 800801c:	40011c00 	.word	0x40011c00
 8008020:	51eb851f 	.word	0x51eb851f

08008024 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4b2f      	ldr	r3, [pc, #188]	; (8008100 <FSMC_NORSRAM_Init+0xdc>)
 8008042:	4013      	ands	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800804e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008054:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800805a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008060:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8008066:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800806c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008072:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008078:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800807e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008084:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800808a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008090:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008096:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d103      	bne.n	80080ae <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ac:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c2:	d10a      	bne.n	80080da <FSMC_NORSRAM_Init+0xb6>
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d006      	beq.n	80080da <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d4:	431a      	orrs	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d006      	beq.n	80080f0 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	ffc00480 	.word	0xffc00480

08008104 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008126:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008132:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800813a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008142:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	3b01      	subs	r3, #1
 800814a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800814c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	3b02      	subs	r3, #2
 8008154:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008156:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800815c:	4313      	orrs	r3, r2
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6979      	ldr	r1, [r7, #20]
 800816c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817c:	d10e      	bne.n	800819c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008186:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	3b01      	subs	r3, #1
 800818e:	051b      	lsls	r3, r3, #20
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c4:	d122      	bne.n	800820c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ce:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80081e2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80081ea:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80081f2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80081f8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6979      	ldr	r1, [r7, #20]
 8008206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800820a:	e005      	b.n	8008218 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	cff00000 	.word	0xcff00000

0800822c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800822c:	b084      	sub	sp, #16
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	f107 001c 	add.w	r0, r7, #28
 800823a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008242:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008244:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008246:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800824a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800824e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008252:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008256:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	b004      	add	sp, #16
 8008280:	4770      	bx	lr

08008282 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2203      	movs	r2, #3
 80082a8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80082aa:	2002      	movs	r0, #2
 80082ac:	f7f9 fd70 	bl	8001d90 <HAL_Delay>
  
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0303 	and.w	r3, r3, #3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80082f4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80082fa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008300:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008310:	f023 030f 	bic.w	r3, r3, #15
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	b2db      	uxtb	r3, r3
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3314      	adds	r3, #20
 8008352:	461a      	mov	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	4413      	add	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
}  
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008390:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008396:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800839c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0

}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b088      	sub	sp, #32
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80083d0:	2310      	movs	r3, #16
 80083d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083d4:	2340      	movs	r3, #64	; 0x40
 80083d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff74 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80083ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f2:	2110      	movs	r1, #16
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f975 	bl	80086e4 <SDMMC_GetCmdResp1>
 80083fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083fc:	69fb      	ldr	r3, [r7, #28]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b08a      	sub	sp, #40	; 0x28
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008416:	2307      	movs	r3, #7
 8008418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800841a:	2340      	movs	r3, #64	; 0x40
 800841c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800841e:	2300      	movs	r3, #0
 8008420:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008426:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008428:	f107 0310 	add.w	r3, r7, #16
 800842c:	4619      	mov	r1, r3
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f7ff ff51 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008434:	f241 3288 	movw	r2, #5000	; 0x1388
 8008438:	2107      	movs	r1, #7
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 f952 	bl	80086e4 <SDMMC_GetCmdResp1>
 8008440:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008444:	4618      	mov	r0, r3
 8008446:	3728      	adds	r7, #40	; 0x28
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800845c:	2300      	movs	r3, #0
 800845e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008468:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800846a:	f107 0308 	add.w	r3, r7, #8
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ff30 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f90c 	bl	8008694 <SDMMC_GetCmdError>
 800847c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800847e:	69fb      	ldr	r3, [r7, #28]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008490:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008496:	2308      	movs	r3, #8
 8008498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800849a:	2340      	movs	r3, #64	; 0x40
 800849c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff ff11 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 faf5 	bl	8008aa4 <SDMMC_GetCmdResp7>
 80084ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084bc:	69fb      	ldr	r3, [r7, #28]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b088      	sub	sp, #32
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084d4:	2337      	movs	r3, #55	; 0x37
 80084d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084d8:	2340      	movs	r3, #64	; 0x40
 80084da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff fef2 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80084f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f6:	2137      	movs	r1, #55	; 0x37
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f8f3 	bl	80086e4 <SDMMC_GetCmdResp1>
 80084fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008500:	69fb      	ldr	r3, [r7, #28]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b088      	sub	sp, #32
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800851a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800851e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008520:	2329      	movs	r3, #41	; 0x29
 8008522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800852c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008530:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff fecc 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa02 	bl	8008948 <SDMMC_GetCmdResp3>
 8008544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008546:	69fb      	ldr	r3, [r7, #28]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800855e:	2306      	movs	r3, #6
 8008560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800856a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800856e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff fead 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800857c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008580:	2106      	movs	r1, #6
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f8ae 	bl	80086e4 <SDMMC_GetCmdResp1>
 8008588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800858a:	69fb      	ldr	r3, [r7, #28]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80085a0:	2333      	movs	r3, #51	; 0x33
 80085a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff fe8c 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80085be:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c2:	2133      	movs	r1, #51	; 0x33
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f88d 	bl	80086e4 <SDMMC_GetCmdResp1>
 80085ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085cc:	69fb      	ldr	r3, [r7, #28]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3720      	adds	r7, #32
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b088      	sub	sp, #32
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80085e2:	2302      	movs	r3, #2
 80085e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80085e6:	23c0      	movs	r3, #192	; 0xc0
 80085e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085f4:	f107 0308 	add.w	r3, r7, #8
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff fe6b 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f95b 	bl	80088bc <SDMMC_GetCmdResp2>
 8008606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008608:	69fb      	ldr	r3, [r7, #28]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b088      	sub	sp, #32
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008620:	2309      	movs	r3, #9
 8008622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008624:	23c0      	movs	r3, #192	; 0xc0
 8008626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800862c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008632:	f107 0308 	add.w	r3, r7, #8
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff fe4c 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f93c 	bl	80088bc <SDMMC_GetCmdResp2>
 8008644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008646:	69fb      	ldr	r3, [r7, #28]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800865e:	2303      	movs	r3, #3
 8008660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008662:	2340      	movs	r3, #64	; 0x40
 8008664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800866a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800866e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008670:	f107 0308 	add.w	r3, r7, #8
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff fe2d 	bl	80082d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	2103      	movs	r1, #3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f99b 	bl	80089bc <SDMMC_GetCmdResp6>
 8008686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008688:	69fb      	ldr	r3, [r7, #28]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3720      	adds	r7, #32
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008694:	b490      	push	{r4, r7}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <SDMMC_GetCmdError+0x48>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a0f      	ldr	r2, [pc, #60]	; (80086e0 <SDMMC_GetCmdError+0x4c>)
 80086a2:	fba2 2303 	umull	r2, r3, r2, r3
 80086a6:	0a5b      	lsrs	r3, r3, #9
 80086a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80086b0:	4623      	mov	r3, r4
 80086b2:	1e5c      	subs	r4, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086bc:	e009      	b.n	80086d2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0f2      	beq.n	80086b0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	22c5      	movs	r2, #197	; 0xc5
 80086ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc90      	pop	{r4, r7}
 80086da:	4770      	bx	lr
 80086dc:	20000000 	.word	0x20000000
 80086e0:	10624dd3 	.word	0x10624dd3

080086e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	460b      	mov	r3, r1
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80086f2:	4b6f      	ldr	r3, [pc, #444]	; (80088b0 <SDMMC_GetCmdResp1+0x1cc>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a6f      	ldr	r2, [pc, #444]	; (80088b4 <SDMMC_GetCmdResp1+0x1d0>)
 80086f8:	fba2 2303 	umull	r2, r3, r2, r3
 80086fc:	0a5b      	lsrs	r3, r3, #9
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008704:	4623      	mov	r3, r4
 8008706:	1e5c      	subs	r4, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800870c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008710:	e0c9      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008716:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f0      	beq.n	8008704 <SDMMC_GetCmdResp1+0x20>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1eb      	bne.n	8008704 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2204      	movs	r2, #4
 800873c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800873e:	2304      	movs	r3, #4
 8008740:	e0b1      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008754:	2301      	movs	r3, #1
 8008756:	e0a6      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	22c5      	movs	r2, #197	; 0xc5
 800875c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fde3 	bl	800832a <SDIO_GetCommandResponse>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	4293      	cmp	r3, r2
 800876c:	d001      	beq.n	8008772 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800876e:	2301      	movs	r3, #1
 8008770:	e099      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff fde5 	bl	8008344 <SDIO_GetResponse>
 800877a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4b4e      	ldr	r3, [pc, #312]	; (80088b8 <SDMMC_GetCmdResp1+0x1d4>)
 8008780:	4013      	ands	r3, r2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8008786:	2300      	movs	r3, #0
 8008788:	e08d      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da02      	bge.n	8008796 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008794:	e087      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	e080      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80087ae:	2380      	movs	r3, #128	; 0x80
 80087b0:	e079      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80087bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087c0:	e071      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80087cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087d0:	e069      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80087dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e0:	e061      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80087ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087f0:	e059      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008800:	e051      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800880c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008810:	e049      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800881c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008820:	e041      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800882c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008830:	e039      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800883c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008840:	e031      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800884c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008850:	e029      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800885c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008860:	e021      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800886c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008870:	e019      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800887c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008880:	e011      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800888c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008890:	e009      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800889c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80088a0:	e001      	b.n	80088a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd90      	pop	{r4, r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000000 	.word	0x20000000
 80088b4:	10624dd3 	.word	0x10624dd3
 80088b8:	fdffe008 	.word	0xfdffe008

080088bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80088bc:	b490      	push	{r4, r7}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088c4:	4b1e      	ldr	r3, [pc, #120]	; (8008940 <SDMMC_GetCmdResp2+0x84>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <SDMMC_GetCmdResp2+0x88>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	0a5b      	lsrs	r3, r3, #9
 80088d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088d8:	4623      	mov	r3, r4
 80088da:	1e5c      	subs	r4, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088e4:	e026      	b.n	8008934 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0f0      	beq.n	80088d8 <SDMMC_GetCmdResp2+0x1c>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1eb      	bne.n	80088d8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b00      	cmp	r3, #0
 800890a:	d004      	beq.n	8008916 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2204      	movs	r2, #4
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008912:	2304      	movs	r3, #4
 8008914:	e00e      	b.n	8008934 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d004      	beq.n	800892c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008928:	2301      	movs	r3, #1
 800892a:	e003      	b.n	8008934 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	22c5      	movs	r2, #197	; 0xc5
 8008930:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bc90      	pop	{r4, r7}
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000000 	.word	0x20000000
 8008944:	10624dd3 	.word	0x10624dd3

08008948 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008948:	b490      	push	{r4, r7}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008950:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <SDMMC_GetCmdResp3+0x6c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <SDMMC_GetCmdResp3+0x70>)
 8008956:	fba2 2303 	umull	r2, r3, r2, r3
 800895a:	0a5b      	lsrs	r3, r3, #9
 800895c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008960:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008964:	4623      	mov	r3, r4
 8008966:	1e5c      	subs	r4, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800896c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008970:	e01b      	b.n	80089aa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f0      	beq.n	8008964 <SDMMC_GetCmdResp3+0x1c>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1eb      	bne.n	8008964 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d004      	beq.n	80089a2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2204      	movs	r2, #4
 800899c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800899e:	2304      	movs	r3, #4
 80089a0:	e003      	b.n	80089aa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	22c5      	movs	r2, #197	; 0xc5
 80089a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc90      	pop	{r4, r7}
 80089b2:	4770      	bx	lr
 80089b4:	20000000 	.word	0x20000000
 80089b8:	10624dd3 	.word	0x10624dd3

080089bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	460b      	mov	r3, r1
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089ca:	4b34      	ldr	r3, [pc, #208]	; (8008a9c <SDMMC_GetCmdResp6+0xe0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a34      	ldr	r2, [pc, #208]	; (8008aa0 <SDMMC_GetCmdResp6+0xe4>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	0a5b      	lsrs	r3, r3, #9
 80089d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089da:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80089de:	4623      	mov	r3, r4
 80089e0:	1e5c      	subs	r4, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ea:	e052      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f0      	beq.n	80089de <SDMMC_GetCmdResp6+0x22>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1eb      	bne.n	80089de <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d004      	beq.n	8008a1c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2204      	movs	r2, #4
 8008a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a18:	2304      	movs	r3, #4
 8008a1a:	e03a      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e02f      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff fc79 	bl	800832a <SDIO_GetCommandResponse>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d001      	beq.n	8008a46 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e025      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	22c5      	movs	r2, #197	; 0xc5
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fc78 	bl	8008344 <SDIO_GetResponse>
 8008a54:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	0c1b      	lsrs	r3, r3, #16
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e011      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a7c:	e009      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a8c:	e001      	b.n	8008a92 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd90      	pop	{r4, r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000000 	.word	0x20000000
 8008aa0:	10624dd3 	.word	0x10624dd3

08008aa4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008aa4:	b490      	push	{r4, r7}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008aac:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <SDMMC_GetCmdResp7+0x90>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	; (8008b38 <SDMMC_GetCmdResp7+0x94>)
 8008ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab6:	0a5b      	lsrs	r3, r3, #9
 8008ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008abc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	1e5c      	subs	r4, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008acc:	e02c      	b.n	8008b28 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <SDMMC_GetCmdResp7+0x1c>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1eb      	bne.n	8008ac0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2204      	movs	r2, #4
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008afa:	2304      	movs	r3, #4
 8008afc:	e014      	b.n	8008b28 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e009      	b.n	8008b28 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2240      	movs	r2, #64	; 0x40
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b26:	2300      	movs	r3, #0
  
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc90      	pop	{r4, r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	20000000 	.word	0x20000000
 8008b38:	10624dd3 	.word	0x10624dd3

08008b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	f107 001c 	add.w	r0, r7, #28
 8008b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d122      	bne.n	8008b9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d105      	bne.n	8008b8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f94a 	bl	8008e28 <USB_CoreReset>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]
 8008b98:	e01a      	b.n	8008bd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f93e 	bl	8008e28 <USB_CoreReset>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	639a      	str	r2, [r3, #56]	; 0x38
 8008bc2:	e005      	b.n	8008bd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10b      	bne.n	8008bee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f043 0206 	orr.w	r2, r3, #6
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bfa:	b004      	add	sp, #16
 8008bfc:	4770      	bx	lr

08008bfe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f043 0201 	orr.w	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f023 0201 	bic.w	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d106      	bne.n	8008c6e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]
 8008c6c:	e00b      	b.n	8008c86 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60da      	str	r2, [r3, #12]
 8008c80:	e001      	b.n	8008c86 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e003      	b.n	8008c8e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c86:	2032      	movs	r0, #50	; 0x32
 8008c88:	f7f9 f882 	bl	8001d90 <HAL_Delay>

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	019b      	lsls	r3, r3, #6
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4a09      	ldr	r2, [pc, #36]	; (8008ce0 <USB_FlushTxFifo+0x48>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d901      	bls.n	8008cc4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e006      	b.n	8008cd2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d0f0      	beq.n	8008cb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	00030d40 	.word	0x00030d40

08008ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2210      	movs	r2, #16
 8008cf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <USB_FlushRxFifo+0x40>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d901      	bls.n	8008d08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e006      	b.n	8008d16 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	d0f0      	beq.n	8008cf6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	00030d40 	.word	0x00030d40

08008d28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b089      	sub	sp, #36	; 0x24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4611      	mov	r1, r2
 8008d34:	461a      	mov	r2, r3
 8008d36:	460b      	mov	r3, r1
 8008d38:	71fb      	strb	r3, [r7, #7]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d11a      	bne.n	8008d84 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d4e:	88bb      	ldrh	r3, [r7, #4]
 8008d50:	3303      	adds	r3, #3
 8008d52:	089b      	lsrs	r3, r3, #2
 8008d54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	e00f      	b.n	8008d7c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	031a      	lsls	r2, r3, #12
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d68:	461a      	mov	r2, r3
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3304      	adds	r3, #4
 8008d74:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d3eb      	bcc.n	8008d5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3724      	adds	r7, #36	; 0x24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b089      	sub	sp, #36	; 0x24
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008da8:	88fb      	ldrh	r3, [r7, #6]
 8008daa:	3303      	adds	r3, #3
 8008dac:	089b      	lsrs	r3, r3, #2
 8008dae:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	e00b      	b.n	8008dce <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	601a      	str	r2, [r3, #0]
    pDest++;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	61bb      	str	r3, [r7, #24]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3ef      	bcc.n	8008db6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008dd6:	69fb      	ldr	r3, [r7, #28]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3724      	adds	r7, #36	; 0x24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f003 0301 	and.w	r3, r3, #1
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <USB_CoreReset+0x64>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d901      	bls.n	8008e46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e01b      	b.n	8008e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	daf2      	bge.n	8008e34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f043 0201 	orr.w	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3301      	adds	r3, #1
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4a09      	ldr	r2, [pc, #36]	; (8008e8c <USB_CoreReset+0x64>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d901      	bls.n	8008e70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e006      	b.n	8008e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d0f0      	beq.n	8008e5e <USB_CoreReset+0x36>

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	00030d40 	.word	0x00030d40

08008e90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e90:	b084      	sub	sp, #16
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	f107 001c 	add.w	r0, r7, #28
 8008e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eac:	461a      	mov	r2, r3
 8008eae:	2300      	movs	r3, #0
 8008eb0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d018      	beq.n	8008f08 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d10a      	bne.n	8008ef2 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008eea:	f043 0304 	orr.w	r3, r3, #4
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	e014      	b.n	8008f1c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f00:	f023 0304 	bic.w	r3, r3, #4
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	e009      	b.n	8008f1c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f16:	f023 0304 	bic.w	r3, r3, #4
 8008f1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008f1c:	2110      	movs	r1, #16
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff feba 	bl	8008c98 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff fedd 	bl	8008ce4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	e015      	b.n	8008f5c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f50:	461a      	mov	r2, r3
 8008f52:	2300      	movs	r3, #0
 8008f54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d3e5      	bcc.n	8008f30 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008f64:	2101      	movs	r1, #1
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f8ac 	bl	80090c4 <USB_DriveVbus>

  HAL_Delay(200U);
 8008f6c:	20c8      	movs	r0, #200	; 0xc8
 8008f6e:	f7f8 ff0f 	bl	8001d90 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a14      	ldr	r2, [pc, #80]	; (8008fe8 <USB_HostInit+0x158>)
 8008f98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a13      	ldr	r2, [pc, #76]	; (8008fec <USB_HostInit+0x15c>)
 8008f9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008fa2:	e009      	b.n	8008fb8 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2280      	movs	r2, #128	; 0x80
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a10      	ldr	r2, [pc, #64]	; (8008ff0 <USB_HostInit+0x160>)
 8008fae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <USB_HostInit+0x164>)
 8008fb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d105      	bne.n	8008fca <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f043 0210 	orr.w	r2, r3, #16
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <USB_HostInit+0x168>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fe2:	b004      	add	sp, #16
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	01000200 	.word	0x01000200
 8008fec:	00e00300 	.word	0x00e00300
 8008ff0:	00600080 	.word	0x00600080
 8008ff4:	004000e0 	.word	0x004000e0
 8008ff8:	a3200008 	.word	0xa3200008

08008ffc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009034:	4313      	orrs	r3, r2
 8009036:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d107      	bne.n	800904e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009044:	461a      	mov	r2, r3
 8009046:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800904a:	6053      	str	r3, [r2, #4]
 800904c:	e009      	b.n	8009062 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	2b02      	cmp	r3, #2
 8009052:	d106      	bne.n	8009062 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800905a:	461a      	mov	r2, r3
 800905c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009060:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009090:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800909a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800909e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80090a0:	2064      	movs	r0, #100	; 0x64
 80090a2:	f7f8 fe75 	bl	8001d90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090b4:	200a      	movs	r0, #10
 80090b6:	f7f8 fe6b 	bl	8001d90 <HAL_Delay>

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80090e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <USB_DriveVbus+0x44>
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d106      	bne.n	8009108 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009102:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009106:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800910e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009112:	d109      	bne.n	8009128 <USB_DriveVbus+0x64>
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009126:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	0c5b      	lsrs	r3, r3, #17
 8009154:	f003 0303 	and.w	r3, r3, #3
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	b29b      	uxth	r3, r3
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
	...

08009188 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	4603      	mov	r3, r0
 8009198:	70fb      	strb	r3, [r7, #3]
 800919a:	460b      	mov	r3, r1
 800919c:	70bb      	strb	r3, [r7, #2]
 800919e:	4613      	mov	r3, r2
 80091a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b6:	461a      	mov	r2, r3
 80091b8:	f04f 33ff 	mov.w	r3, #4294967295
 80091bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d87e      	bhi.n	80092c4 <USB_HC_Init+0x13c>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <USB_HC_Init+0x44>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	080091dd 	.word	0x080091dd
 80091d0:	08009287 	.word	0x08009287
 80091d4:	080091dd 	.word	0x080091dd
 80091d8:	08009249 	.word	0x08009249
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e8:	461a      	mov	r2, r3
 80091ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80091ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80091f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	da10      	bge.n	800921a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80091f8:	78fb      	ldrb	r3, [r7, #3]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	0151      	lsls	r1, r2, #5
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	440a      	add	r2, r1
 800920e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009216:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009218:	e057      	b.n	80092ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d051      	beq.n	80092ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	440a      	add	r2, r1
 800923c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009240:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009244:	60d3      	str	r3, [r2, #12]
      break;
 8009246:	e040      	b.n	80092ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4413      	add	r3, r2
 8009250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009254:	461a      	mov	r2, r3
 8009256:	f240 639d 	movw	r3, #1693	; 0x69d
 800925a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800925c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009260:	2b00      	cmp	r3, #0
 8009262:	da34      	bge.n	80092ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4413      	add	r3, r2
 800926c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	440a      	add	r2, r1
 800927a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800927e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009282:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009284:	e023      	b.n	80092ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009292:	461a      	mov	r2, r3
 8009294:	f240 2325 	movw	r3, #549	; 0x225
 8009298:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800929a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da17      	bge.n	80092d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80092c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092c2:	e006      	b.n	80092d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	75fb      	strb	r3, [r7, #23]
      break;
 80092c8:	e004      	b.n	80092d4 <USB_HC_Init+0x14c>
      break;
 80092ca:	bf00      	nop
 80092cc:	e002      	b.n	80092d4 <USB_HC_Init+0x14c>
      break;
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <USB_HC_Init+0x14c>
      break;
 80092d2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092da:	699a      	ldr	r2, [r3, #24]
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	2101      	movs	r1, #1
 80092e4:	fa01 f303 	lsl.w	r3, r1, r3
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80092ee:	4313      	orrs	r3, r2
 80092f0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80092fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009302:	2b00      	cmp	r3, #0
 8009304:	da03      	bge.n	800930e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	e001      	b.n	8009312 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d103      	bne.n	8009322 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800931a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e001      	b.n	8009326 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009326:	787b      	ldrb	r3, [r7, #1]
 8009328:	059b      	lsls	r3, r3, #22
 800932a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800932e:	78bb      	ldrb	r3, [r7, #2]
 8009330:	02db      	lsls	r3, r3, #11
 8009332:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009336:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800933c:	049b      	lsls	r3, r3, #18
 800933e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009342:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009346:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800934a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	0159      	lsls	r1, r3, #5
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	440b      	add	r3, r1
 8009358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009362:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009368:	2b03      	cmp	r3, #3
 800936a:	d10f      	bne.n	800938c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4413      	add	r3, r2
 8009374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	440a      	add	r2, r1
 8009382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800938a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
}
 800938e:	4618      	mov	r0, r3
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop

0800939c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08c      	sub	sp, #48	; 0x30
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	4613      	mov	r3, r2
 80093a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80093b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d028      	beq.n	8009418 <USB_HC_StartXfer+0x7c>
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	791b      	ldrb	r3, [r3, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d124      	bne.n	8009418 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10b      	bne.n	80093ec <USB_HC_StartXfer+0x50>
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	795b      	ldrb	r3, [r3, #5]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d107      	bne.n	80093ec <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	4619      	mov	r1, r3
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fa30 	bl	8009848 <USB_DoPing>
      return HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	e114      	b.n	8009616 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d112      	bne.n	8009418 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	0151      	lsls	r1, r2, #5
 8009404:	6a3a      	ldr	r2, [r7, #32]
 8009406:	440a      	add	r2, r1
 8009408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800940c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009410:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2200      	movs	r2, #0
 8009416:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d018      	beq.n	8009452 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	8912      	ldrh	r2, [r2, #8]
 8009428:	4413      	add	r3, r2
 800942a:	3b01      	subs	r3, #1
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	8912      	ldrh	r2, [r2, #8]
 8009430:	fbb3 f3f2 	udiv	r3, r3, r2
 8009434:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009436:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009438:	8b7b      	ldrh	r3, [r7, #26]
 800943a:	429a      	cmp	r2, r3
 800943c:	d90b      	bls.n	8009456 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800943e:	8b7b      	ldrh	r3, [r7, #26]
 8009440:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	8912      	ldrh	r2, [r2, #8]
 8009448:	fb02 f203 	mul.w	r2, r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	611a      	str	r2, [r3, #16]
 8009450:	e001      	b.n	8009456 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8009452:	2301      	movs	r3, #1
 8009454:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	78db      	ldrb	r3, [r3, #3]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d006      	beq.n	800946c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800945e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	8912      	ldrh	r2, [r2, #8]
 8009464:	fb02 f203 	mul.w	r2, r2, r3
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009476:	04d9      	lsls	r1, r3, #19
 8009478:	4b69      	ldr	r3, [pc, #420]	; (8009620 <USB_HC_StartXfer+0x284>)
 800947a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800947c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	7a9b      	ldrb	r3, [r3, #10]
 8009482:	075b      	lsls	r3, r3, #29
 8009484:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	0148      	lsls	r0, r1, #5
 800948c:	6a39      	ldr	r1, [r7, #32]
 800948e:	4401      	add	r1, r0
 8009490:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009494:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009496:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68d9      	ldr	r1, [r3, #12]
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ae:	460a      	mov	r2, r1
 80094b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf0c      	ite	eq
 80094c2:	2301      	moveq	r3, #1
 80094c4:	2300      	movne	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	0151      	lsls	r1, r2, #5
 80094dc:	6a3a      	ldr	r2, [r7, #32]
 80094de:	440a      	add	r2, r1
 80094e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	7e7b      	ldrb	r3, [r7, #25]
 80094fa:	075b      	lsls	r3, r3, #29
 80094fc:	69f9      	ldr	r1, [r7, #28]
 80094fe:	0148      	lsls	r0, r1, #5
 8009500:	6a39      	ldr	r1, [r7, #32]
 8009502:	4401      	add	r1, r0
 8009504:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009508:	4313      	orrs	r3, r2
 800950a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	4413      	add	r3, r2
 8009514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a42      	ldr	r2, [pc, #264]	; (8009624 <USB_HC_StartXfer+0x288>)
 800951c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800951e:	4b41      	ldr	r3, [pc, #260]	; (8009624 <USB_HC_StartXfer+0x288>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009526:	4a3f      	ldr	r2, [pc, #252]	; (8009624 <USB_HC_StartXfer+0x288>)
 8009528:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	78db      	ldrb	r3, [r3, #3]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d006      	beq.n	8009540 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009532:	4b3c      	ldr	r3, [pc, #240]	; (8009624 <USB_HC_StartXfer+0x288>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800953a:	4a3a      	ldr	r2, [pc, #232]	; (8009624 <USB_HC_StartXfer+0x288>)
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	e005      	b.n	800954c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009540:	4b38      	ldr	r3, [pc, #224]	; (8009624 <USB_HC_StartXfer+0x288>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009548:	4a36      	ldr	r2, [pc, #216]	; (8009624 <USB_HC_StartXfer+0x288>)
 800954a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800954c:	4b35      	ldr	r3, [pc, #212]	; (8009624 <USB_HC_StartXfer+0x288>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009554:	4a33      	ldr	r2, [pc, #204]	; (8009624 <USB_HC_StartXfer+0x288>)
 8009556:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	4413      	add	r3, r2
 8009560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009564:	461a      	mov	r2, r3
 8009566:	4b2f      	ldr	r3, [pc, #188]	; (8009624 <USB_HC_StartXfer+0x288>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	e04f      	b.n	8009616 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	78db      	ldrb	r3, [r3, #3]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d14a      	bne.n	8009614 <USB_HC_StartXfer+0x278>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d046      	beq.n	8009614 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	79db      	ldrb	r3, [r3, #7]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d830      	bhi.n	80095f0 <USB_HC_StartXfer+0x254>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <USB_HC_StartXfer+0x1f8>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095a5 	.word	0x080095a5
 8009598:	080095c9 	.word	0x080095c9
 800959c:	080095a5 	.word	0x080095a5
 80095a0:	080095c9 	.word	0x080095c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	3303      	adds	r3, #3
 80095aa:	089b      	lsrs	r3, r3, #2
 80095ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095ae:	8afa      	ldrh	r2, [r7, #22]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d91c      	bls.n	80095f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	f043 0220 	orr.w	r2, r3, #32
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80095c6:	e015      	b.n	80095f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	3303      	adds	r3, #3
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80095d2:	8afa      	ldrh	r2, [r7, #22]
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	429a      	cmp	r2, r3
 80095e0:	d90a      	bls.n	80095f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80095ee:	e003      	b.n	80095f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80095f0:	bf00      	nop
 80095f2:	e002      	b.n	80095fa <USB_HC_StartXfer+0x25e>
        break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <USB_HC_StartXfer+0x25e>
        break;
 80095f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	68d9      	ldr	r1, [r3, #12]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	785a      	ldrb	r2, [r3, #1]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	b298      	uxth	r0, r3
 8009608:	2300      	movs	r3, #0
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	4603      	mov	r3, r0
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff fb8a 	bl	8008d28 <USB_WritePacket>
  }

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3728      	adds	r7, #40	; 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	1ff80000 	.word	0x1ff80000
 8009624:	200000f8 	.word	0x200000f8

08009628 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	b29b      	uxth	r3, r3
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800964a:	b480      	push	{r7}
 800964c:	b087      	sub	sp, #28
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4413      	add	r3, r2
 800966a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	0c9b      	lsrs	r3, r3, #18
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <USB_HC_Halt+0x3a>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d16c      	bne.n	800975e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	4413      	add	r3, r2
 800968c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	0151      	lsls	r1, r2, #5
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	440a      	add	r2, r1
 800969a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800969e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096a2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d143      	bne.n	8009738 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	0151      	lsls	r1, r2, #5
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	440a      	add	r2, r1
 8009706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800970a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800970e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	3301      	adds	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800971c:	d81d      	bhi.n	800975a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	4413      	add	r3, r2
 8009726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009734:	d0ec      	beq.n	8009710 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009736:	e080      	b.n	800983a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	0151      	lsls	r1, r2, #5
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	440a      	add	r2, r1
 800974e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009756:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009758:	e06f      	b.n	800983a <USB_HC_Halt+0x1f0>
          break;
 800975a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800975c:	e06d      	b.n	800983a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	4413      	add	r3, r2
 8009766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	440a      	add	r2, r1
 8009774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800977c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d143      	bne.n	8009816 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	4413      	add	r3, r2
 8009796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	0151      	lsls	r1, r2, #5
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	440a      	add	r2, r1
 80097c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097cc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097ec:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	3301      	adds	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097fa:	d81d      	bhi.n	8009838 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	4413      	add	r3, r2
 8009804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800980e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009812:	d0ec      	beq.n	80097ee <USB_HC_Halt+0x1a4>
 8009814:	e011      	b.n	800983a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	0151      	lsls	r1, r2, #5
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	440a      	add	r2, r1
 800982c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	e000      	b.n	800983a <USB_HC_Halt+0x1f0>
          break;
 8009838:	bf00      	nop
    }
  }

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800985c:	2301      	movs	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	04da      	lsls	r2, r3, #19
 8009864:	4b15      	ldr	r3, [pc, #84]	; (80098bc <USB_DoPing+0x74>)
 8009866:	4013      	ands	r3, r2
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	0151      	lsls	r1, r2, #5
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	440a      	add	r2, r1
 8009870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009878:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	4413      	add	r3, r2
 8009882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009890:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009898:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a6:	461a      	mov	r2, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	1ff80000 	.word	0x1ff80000

080098c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff f9a5 	bl	8008c20 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80098d6:	2110      	movs	r1, #16
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff f9dd 	bl	8008c98 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fa00 	bl	8008ce4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80098e4:	2300      	movs	r3, #0
 80098e6:	613b      	str	r3, [r7, #16]
 80098e8:	e01f      	b.n	800992a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009900:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009908:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009910:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800991e:	461a      	mov	r2, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3301      	adds	r3, #1
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b0f      	cmp	r3, #15
 800992e:	d9dc      	bls.n	80098ea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009930:	2300      	movs	r3, #0
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	e034      	b.n	80099a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800994c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009954:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800995c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800996a:	461a      	mov	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	3301      	adds	r3, #1
 8009974:	617b      	str	r3, [r7, #20]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800997c:	d80c      	bhi.n	8009998 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4413      	add	r3, r2
 8009986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009994:	d0ec      	beq.n	8009970 <USB_StopHost+0xb0>
 8009996:	e000      	b.n	800999a <USB_StopHost+0xda>
        break;
 8009998:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b0f      	cmp	r3, #15
 80099a4:	d9c7      	bls.n	8009936 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099ac:	461a      	mov	r2, r3
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295
 80099b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff f91e 	bl	8008bfe <USB_EnableGlobalInt>

  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099cc:	b590      	push	{r4, r7, lr}
 80099ce:	b089      	sub	sp, #36	; 0x24
 80099d0:	af04      	add	r7, sp, #16
 80099d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80099d4:	2301      	movs	r3, #1
 80099d6:	2202      	movs	r2, #2
 80099d8:	2102      	movs	r1, #2
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fcb4 	bl	800a348 <USBH_FindInterface>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	2bff      	cmp	r3, #255	; 0xff
 80099e8:	d002      	beq.n	80099f0 <USBH_CDC_InterfaceInit+0x24>
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d901      	bls.n	80099f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099f0:	2302      	movs	r3, #2
 80099f2:	e13d      	b.n	8009c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fc89 	bl	800a310 <USBH_SelectInterface>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e131      	b.n	8009c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a12:	2050      	movs	r0, #80	; 0x50
 8009a14:	f005 fbc6 	bl	800f1a4 <malloc>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e11f      	b.n	8009c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a30:	2250      	movs	r2, #80	; 0x50
 8009a32:	2100      	movs	r1, #0
 8009a34:	68b8      	ldr	r0, [r7, #8]
 8009a36:	f005 fbd0 	bl	800f1da <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	211a      	movs	r1, #26
 8009a40:	fb01 f303 	mul.w	r3, r1, r3
 8009a44:	4413      	add	r3, r2
 8009a46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b25b      	sxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	da15      	bge.n	8009a7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	211a      	movs	r1, #26
 8009a58:	fb01 f303 	mul.w	r3, r1, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a62:	781a      	ldrb	r2, [r3, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	211a      	movs	r1, #26
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a78:	881a      	ldrh	r2, [r3, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 f890 	bl	800bbaa <USBH_AllocPipe>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	7819      	ldrb	r1, [r3, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	7858      	ldrb	r0, [r3, #1]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	8952      	ldrh	r2, [r2, #10]
 8009aaa:	9202      	str	r2, [sp, #8]
 8009aac:	2203      	movs	r2, #3
 8009aae:	9201      	str	r2, [sp, #4]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f002 f848 	bl	800bb4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f005 fabd 	bl	800f044 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009aca:	2300      	movs	r3, #0
 8009acc:	2200      	movs	r2, #0
 8009ace:	210a      	movs	r1, #10
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fc39 	bl	800a348 <USBH_FindInterface>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	2bff      	cmp	r3, #255	; 0xff
 8009ade:	d002      	beq.n	8009ae6 <USBH_CDC_InterfaceInit+0x11a>
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d901      	bls.n	8009aea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e0c2      	b.n	8009c70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	211a      	movs	r1, #26
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b25b      	sxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	da16      	bge.n	8009b30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	211a      	movs	r1, #26
 8009b08:	fb01 f303 	mul.w	r3, r1, r3
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	211a      	movs	r1, #26
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b28:	881a      	ldrh	r2, [r3, #0]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	835a      	strh	r2, [r3, #26]
 8009b2e:	e015      	b.n	8009b5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	211a      	movs	r1, #26
 8009b36:	fb01 f303 	mul.w	r3, r1, r3
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b40:	781a      	ldrb	r2, [r3, #0]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	211a      	movs	r1, #26
 8009b4c:	fb01 f303 	mul.w	r3, r1, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b56:	881a      	ldrh	r2, [r3, #0]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	211a      	movs	r1, #26
 8009b62:	fb01 f303 	mul.w	r3, r1, r3
 8009b66:	4413      	add	r3, r2
 8009b68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	b25b      	sxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da16      	bge.n	8009ba2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	211a      	movs	r1, #26
 8009b7a:	fb01 f303 	mul.w	r3, r1, r3
 8009b7e:	4413      	add	r3, r2
 8009b80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009b84:	781a      	ldrb	r2, [r3, #0]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	211a      	movs	r1, #26
 8009b90:	fb01 f303 	mul.w	r3, r1, r3
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009b9a:	881a      	ldrh	r2, [r3, #0]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	835a      	strh	r2, [r3, #26]
 8009ba0:	e015      	b.n	8009bce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	211a      	movs	r1, #26
 8009ba8:	fb01 f303 	mul.w	r3, r1, r3
 8009bac:	4413      	add	r3, r2
 8009bae:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bb2:	781a      	ldrb	r2, [r3, #0]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	211a      	movs	r1, #26
 8009bbe:	fb01 f303 	mul.w	r3, r1, r3
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009bc8:	881a      	ldrh	r2, [r3, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	7b9b      	ldrb	r3, [r3, #14]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 ffe8 	bl	800bbaa <USBH_AllocPipe>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	461a      	mov	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	7bdb      	ldrb	r3, [r3, #15]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 ffde 	bl	800bbaa <USBH_AllocPipe>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	7b59      	ldrb	r1, [r3, #13]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	7b98      	ldrb	r0, [r3, #14]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	8b12      	ldrh	r2, [r2, #24]
 8009c0e:	9202      	str	r2, [sp, #8]
 8009c10:	2202      	movs	r2, #2
 8009c12:	9201      	str	r2, [sp, #4]
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	4623      	mov	r3, r4
 8009c18:	4602      	mov	r2, r0
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 ff96 	bl	800bb4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	7b19      	ldrb	r1, [r3, #12]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	7bd8      	ldrb	r0, [r3, #15]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	8b52      	ldrh	r2, [r2, #26]
 8009c38:	9202      	str	r2, [sp, #8]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	9201      	str	r2, [sp, #4]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4623      	mov	r3, r4
 8009c42:	4602      	mov	r2, r0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 ff81 	bl	800bb4c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	7b5b      	ldrb	r3, [r3, #13]
 8009c56:	2200      	movs	r2, #0
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f005 f9f2 	bl	800f044 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	7b1b      	ldrb	r3, [r3, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f005 f9eb 	bl	800f044 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd90      	pop	{r4, r7, pc}

08009c78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00e      	beq.n	8009cb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 ff76 	bl	800bb8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 ffa1 	bl	800bbec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	7b1b      	ldrb	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00e      	beq.n	8009cd6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	7b1b      	ldrb	r3, [r3, #12]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 ff63 	bl	800bb8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 ff8e 	bl	800bbec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	7b5b      	ldrb	r3, [r3, #13]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00e      	beq.n	8009cfc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	7b5b      	ldrb	r3, [r3, #13]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 ff50 	bl	800bb8a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	7b5b      	ldrb	r3, [r3, #13]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 ff7b 	bl	800bbec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f005 fa4f 	bl	800f1b4 <free>
    phost->pActiveClass->pData = 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3340      	adds	r3, #64	; 0x40
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f8b1 	bl	8009eaa <GetLineCoding>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009d4c:	7afb      	ldrb	r3, [r7, #11]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d58:	2102      	movs	r1, #2
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d70:	2301      	movs	r3, #1
 8009d72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009d88:	2b04      	cmp	r3, #4
 8009d8a:	d877      	bhi.n	8009e7c <USBH_CDC_Process+0x114>
 8009d8c:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <USBH_CDC_Process+0x2c>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009da9 	.word	0x08009da9
 8009d98:	08009daf 	.word	0x08009daf
 8009d9c:	08009ddf 	.word	0x08009ddf
 8009da0:	08009e53 	.word	0x08009e53
 8009da4:	08009e61 	.word	0x08009e61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
      break;
 8009dac:	e06d      	b.n	8009e8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f897 	bl	8009ee8 <SetLineCoding>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d104      	bne.n	8009dce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009dcc:	e058      	b.n	8009e80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d055      	beq.n	8009e80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ddc:	e050      	b.n	8009e80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	3340      	adds	r3, #64	; 0x40
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f860 	bl	8009eaa <GetLineCoding>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d126      	bne.n	8009e42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e06:	791b      	ldrb	r3, [r3, #4]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d13b      	bne.n	8009e84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d133      	bne.n	8009e84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d12b      	bne.n	8009e84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d124      	bne.n	8009e84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f984 	bl	800a148 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e40:	e020      	b.n	8009e84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d01d      	beq.n	8009e84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e50:	e018      	b.n	8009e84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f867 	bl	8009f26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f8f8 	bl	800a04e <CDC_ProcessReception>
      break;
 8009e5e:	e014      	b.n	8009e8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 f94f 	bl	800b106 <USBH_ClrFeature>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009e7a:	e005      	b.n	8009e88 <USBH_CDC_Process+0x120>

    default:
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e004      	b.n	8009e8a <USBH_CDC_Process+0x122>
      break;
 8009e80:	bf00      	nop
 8009e82:	e002      	b.n	8009e8a <USBH_CDC_Process+0x122>
      break;
 8009e84:	bf00      	nop
 8009e86:	e000      	b.n	8009e8a <USBH_CDC_Process+0x122>
      break;
 8009e88:	bf00      	nop

  }

  return status;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	22a1      	movs	r2, #161	; 0xa1
 8009eb8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2221      	movs	r2, #33	; 0x21
 8009ebe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2207      	movs	r2, #7
 8009ed0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2207      	movs	r2, #7
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 faf4 	bl	800b4c6 <USBH_CtlReq>
 8009ede:	4603      	mov	r3, r0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2221      	movs	r2, #33	; 0x21
 8009ef6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2207      	movs	r2, #7
 8009f0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2207      	movs	r2, #7
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 fad5 	bl	800b4c6 <USBH_CtlReq>
 8009f1c:	4603      	mov	r3, r0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b086      	sub	sp, #24
 8009f2a:	af02      	add	r7, sp, #8
 8009f2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d002      	beq.n	8009f4c <CDC_ProcessTransmission+0x26>
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d025      	beq.n	8009f96 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8009f4a:	e07c      	b.n	800a046 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	8b12      	ldrh	r2, [r2, #24]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d90c      	bls.n	8009f72 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	69d9      	ldr	r1, [r3, #28]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	8b1a      	ldrh	r2, [r3, #24]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	7b58      	ldrb	r0, [r3, #13]
 8009f64:	2301      	movs	r3, #1
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4603      	mov	r3, r0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 fdab 	bl	800bac6 <USBH_BulkSendData>
 8009f70:	e00c      	b.n	8009f8c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	7b58      	ldrb	r0, [r3, #13]
 8009f80:	2301      	movs	r3, #1
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	4603      	mov	r3, r0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fd9d 	bl	800bac6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009f94:	e057      	b.n	800a046 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7b5b      	ldrb	r3, [r3, #13]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f005 f827 	bl	800eff0 <USBH_LL_GetURBState>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d136      	bne.n	800a01a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	8b12      	ldrh	r2, [r2, #24]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d90e      	bls.n	8009fd6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	8b12      	ldrh	r2, [r2, #24]
 8009fc0:	1a9a      	subs	r2, r3, r2
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	8b12      	ldrh	r2, [r2, #24]
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	61da      	str	r2, [r3, #28]
 8009fd4:	e002      	b.n	8009fdc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009fec:	e006      	b.n	8009ffc <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f892 	bl	800a120 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2204      	movs	r2, #4
 800a000:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a010:	2300      	movs	r3, #0
 800a012:	2200      	movs	r2, #0
 800a014:	f001 fff8 	bl	800c008 <osMessageQueuePut>
      break;
 800a018:	e014      	b.n	800a044 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d111      	bne.n	800a044 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2204      	movs	r2, #4
 800a02c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a03c:	2300      	movs	r3, #0
 800a03e:	2200      	movs	r2, #0
 800a040:	f001 ffe2 	bl	800c008 <osMessageQueuePut>
      break;
 800a044:	bf00      	nop
  }
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b086      	sub	sp, #24
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a060:	2300      	movs	r3, #0
 800a062:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d002      	beq.n	800a074 <CDC_ProcessReception+0x26>
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d00e      	beq.n	800a090 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a072:	e051      	b.n	800a118 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	6a19      	ldr	r1, [r3, #32]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	8b5a      	ldrh	r2, [r3, #26]
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	7b1b      	ldrb	r3, [r3, #12]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 fd45 	bl	800bb10 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2204      	movs	r2, #4
 800a08a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a08e:	e043      	b.n	800a118 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	7b1b      	ldrb	r3, [r3, #12]
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f004 ffaa 	bl	800eff0 <USBH_LL_GetURBState>
 800a09c:	4603      	mov	r3, r0
 800a09e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a0a0:	7cfb      	ldrb	r3, [r7, #19]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d137      	bne.n	800a116 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	7b1b      	ldrb	r3, [r3, #12]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f004 ff0d 	bl	800eecc <USBH_LL_GetLastXferSize>
 800a0b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d016      	beq.n	800a0ec <CDC_ProcessReception+0x9e>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	8b5b      	ldrh	r3, [r3, #26]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d910      	bls.n	800a0ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	1ad2      	subs	r2, r2, r3
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	441a      	add	r2, r3
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2203      	movs	r2, #3
 800a0e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a0ea:	e006      	b.n	800a0fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f81d 	bl	800a134 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a10e:	2300      	movs	r3, #0
 800a110:	2200      	movs	r2, #0
 800a112:	f001 ff79 	bl	800c008 <osMessageQueuePut>
      break;
 800a116:	bf00      	nop
  }
}
 800a118:	bf00      	nop
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a170:	2302      	movs	r3, #2
 800a172:	e044      	b.n	800a1fe <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	79fa      	ldrb	r2, [r7, #7]
 800a178:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f841 	bl	800a214 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d003      	beq.n	800a1c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2104      	movs	r1, #4
 800a1c4:	2010      	movs	r0, #16
 800a1c6:	f001 fe99 	bl	800befc <osMessageQueueNew>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <USBH_Init+0xac>)
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	; (800a20c <USBH_Init+0xb0>)
 800a1d6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a1d8:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <USBH_Init+0xac>)
 800a1da:	2280      	movs	r2, #128	; 0x80
 800a1dc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a1de:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <USBH_Init+0xac>)
 800a1e0:	2218      	movs	r2, #24
 800a1e2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a1e4:	4a08      	ldr	r2, [pc, #32]	; (800a208 <USBH_Init+0xac>)
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	4809      	ldr	r0, [pc, #36]	; (800a210 <USBH_Init+0xb4>)
 800a1ea:	f001 fdb3 	bl	800bd54 <osThreadNew>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f004 fdb6 	bl	800ed68 <USBH_LL_Init>

  return USBH_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20004df0 	.word	0x20004df0
 800a20c:	0800f390 	.word	0x0800f390
 800a210:	0800ae7d 	.word	0x0800ae7d

0800a214 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e009      	b.n	800a23a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	33e0      	adds	r3, #224	; 0xe0
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	2200      	movs	r2, #0
 800a232:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b0e      	cmp	r3, #14
 800a23e:	d9f2      	bls.n	800a226 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	e009      	b.n	800a25a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a250:	2200      	movs	r2, #0
 800a252:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a260:	d3f1      	bcc.n	800a246 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2240      	movs	r2, #64	; 0x40
 800a286:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d016      	beq.n	800a2fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10e      	bne.n	800a2f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a2e0:	1c59      	adds	r1, r3, #1
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	33de      	adds	r3, #222	; 0xde
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	73fb      	strb	r3, [r7, #15]
 800a2f6:	e004      	b.n	800a302 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	e001      	b.n	800a302 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d204      	bcs.n	800a336 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a334:	e001      	b.n	800a33a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a336:	2302      	movs	r3, #2
 800a338:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4603      	mov	r3, r0
 800a358:	70fb      	strb	r3, [r7, #3]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70bb      	strb	r3, [r7, #2]
 800a35e:	4613      	mov	r3, r2
 800a360:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a366:	2300      	movs	r3, #0
 800a368:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a370:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a372:	e025      	b.n	800a3c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	221a      	movs	r2, #26
 800a378:	fb02 f303 	mul.w	r3, r2, r3
 800a37c:	3308      	adds	r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4413      	add	r3, r2
 800a382:	3302      	adds	r3, #2
 800a384:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	795b      	ldrb	r3, [r3, #5]
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d002      	beq.n	800a396 <USBH_FindInterface+0x4e>
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	2bff      	cmp	r3, #255	; 0xff
 800a394:	d111      	bne.n	800a3ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a39a:	78ba      	ldrb	r2, [r7, #2]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d002      	beq.n	800a3a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3a0:	78bb      	ldrb	r3, [r7, #2]
 800a3a2:	2bff      	cmp	r3, #255	; 0xff
 800a3a4:	d109      	bne.n	800a3ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3aa:	787a      	ldrb	r2, [r7, #1]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d002      	beq.n	800a3b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3b0:	787b      	ldrb	r3, [r7, #1]
 800a3b2:	2bff      	cmp	r3, #255	; 0xff
 800a3b4:	d101      	bne.n	800a3ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	e006      	b.n	800a3c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d9d6      	bls.n	800a374 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a3c6:	23ff      	movs	r3, #255	; 0xff
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f004 fcff 	bl	800ede0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f004 fe16 	bl	800f016 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af04      	add	r7, sp, #16
 800a3fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d102      	bne.n	800a416 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2203      	movs	r2, #3
 800a414:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b0b      	cmp	r3, #11
 800a41e:	f200 823c 	bhi.w	800a89a <USBH_Process+0x4a6>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <USBH_Process+0x34>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a459 	.word	0x0800a459
 800a42c:	0800a4a7 	.word	0x0800a4a7
 800a430:	0800a52b 	.word	0x0800a52b
 800a434:	0800a819 	.word	0x0800a819
 800a438:	0800a89b 	.word	0x0800a89b
 800a43c:	0800a5eb 	.word	0x0800a5eb
 800a440:	0800a7a3 	.word	0x0800a7a3
 800a444:	0800a63d 	.word	0x0800a63d
 800a448:	0800a679 	.word	0x0800a679
 800a44c:	0800a6b3 	.word	0x0800a6b3
 800a450:	0800a6fb 	.word	0x0800a6fb
 800a454:	0800a801 	.word	0x0800a801
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 821c 	beq.w	800a89e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a46c:	20c8      	movs	r0, #200	; 0xc8
 800a46e:	f004 fe1c 	bl	800f0aa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f004 fd0f 	bl	800ee96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a49c:	2300      	movs	r3, #0
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f001 fdb2 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a4a4:	e1fb      	b.n	800a89e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d107      	bne.n	800a4c0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	e025      	b.n	800a50c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a4c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4ca:	d914      	bls.n	800a4f6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d903      	bls.n	800a4ee <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	220d      	movs	r2, #13
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	e00e      	b.n	800a50c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e00a      	b.n	800a50c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a4fc:	f103 020a 	add.w	r2, r3, #10
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a506:	200a      	movs	r0, #10
 800a508:	f004 fdcf 	bl	800f0aa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a520:	2300      	movs	r3, #0
 800a522:	2200      	movs	r2, #0
 800a524:	f001 fd70 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a528:	e1c0      	b.n	800a8ac <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a53a:	2104      	movs	r1, #4
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a540:	2064      	movs	r0, #100	; 0x64
 800a542:	f004 fdb2 	bl	800f0aa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f004 fc80 	bl	800ee4c <USBH_LL_GetSpeed>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2205      	movs	r2, #5
 800a55a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a55c:	2100      	movs	r1, #0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 fb23 	bl	800bbaa <USBH_AllocPipe>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a56c:	2180      	movs	r1, #128	; 0x80
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f001 fb1b 	bl	800bbaa <USBH_AllocPipe>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7919      	ldrb	r1, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a590:	b292      	uxth	r2, r2
 800a592:	9202      	str	r2, [sp, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	9201      	str	r2, [sp, #4]
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	4603      	mov	r3, r0
 800a59c:	2280      	movs	r2, #128	; 0x80
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f001 fad4 	bl	800bb4c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7959      	ldrb	r1, [r3, #5]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	9202      	str	r2, [sp, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	9201      	str	r2, [sp, #4]
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f001 fac0 	bl	800bb4c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f001 fd10 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a5e8:	e160      	b.n	800a8ac <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f964 	bl	800a8b8 <USBH_HandleEnum>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f040 8152 	bne.w	800a8a2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d103      	bne.n	800a618 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2208      	movs	r2, #8
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	e002      	b.n	800a61e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2207      	movs	r2, #7
 800a61c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2205      	movs	r2, #5
 800a622:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a632:	2300      	movs	r3, #0
 800a634:	2200      	movs	r2, #0
 800a636:	f001 fce7 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a63a:	e132      	b.n	800a8a2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 812f 	beq.w	800a8a6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a64e:	2101      	movs	r1, #1
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2208      	movs	r2, #8
 800a658:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2205      	movs	r2, #5
 800a65e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a66e:	2300      	movs	r3, #0
 800a670:	2200      	movs	r2, #0
 800a672:	f001 fcc9 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a676:	e116      	b.n	800a8a6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a67e:	b29b      	uxth	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fcf8 	bl	800b078 <USBH_SetCfg>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2209      	movs	r2, #9
 800a692:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f001 fcac 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a6b0:	e0fc      	b.n	800a8ac <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a6b8:	f003 0320 	and.w	r3, r3, #32
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00a      	beq.n	800a6d6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fcfb 	bl	800b0be <USBH_SetFeature>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	701a      	strb	r2, [r3, #0]
 800a6d4:	e002      	b.n	800a6dc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	220a      	movs	r2, #10
 800a6da:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f001 fc88 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a6f8:	e0d8      	b.n	800a8ac <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a700:	2b00      	cmp	r3, #0
 800a702:	d03f      	beq.n	800a784 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
 800a710:	e016      	b.n	800a740 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a712:	7bfa      	ldrb	r2, [r7, #15]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	32de      	adds	r2, #222	; 0xde
 800a718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71c:	791a      	ldrb	r2, [r3, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a724:	429a      	cmp	r2, r3
 800a726:	d108      	bne.n	800a73a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a728:	7bfa      	ldrb	r2, [r7, #15]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32de      	adds	r2, #222	; 0xde
 800a72e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a738:	e005      	b.n	800a746 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	3301      	adds	r3, #1
 800a73e:	73fb      	strb	r3, [r7, #15]
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0e5      	beq.n	800a712 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d016      	beq.n	800a77e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d109      	bne.n	800a776 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2206      	movs	r2, #6
 800a766:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a76e:	2103      	movs	r1, #3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	4798      	blx	r3
 800a774:	e006      	b.n	800a784 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	220d      	movs	r2, #13
 800a77a:	701a      	strb	r2, [r3, #0]
 800a77c:	e002      	b.n	800a784 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	220d      	movs	r2, #13
 800a782:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2205      	movs	r2, #5
 800a788:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a798:	2300      	movs	r3, #0
 800a79a:	2200      	movs	r2, #0
 800a79c:	f001 fc34 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a7a0:	e084      	b.n	800a8ac <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d017      	beq.n	800a7dc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	4798      	blx	r3
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	220b      	movs	r2, #11
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	e00a      	b.n	800a7e2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d106      	bne.n	800a7e2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	220d      	movs	r2, #13
 800a7d8:	701a      	strb	r2, [r3, #0]
 800a7da:	e002      	b.n	800a7e2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	220d      	movs	r2, #13
 800a7e0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2205      	movs	r2, #5
 800a7e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f001 fc05 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a7fe:	e055      	b.n	800a8ac <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d04f      	beq.n	800a8aa <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4798      	blx	r3
      }
      break;
 800a816:	e048      	b.n	800a8aa <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff fcf7 	bl	800a214 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d005      	beq.n	800a85a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a854:	2105      	movs	r1, #5
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b01      	cmp	r3, #1
 800a864:	d107      	bne.n	800a876 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff fdb0 	bl	800a3d4 <USBH_Start>
 800a874:	e002      	b.n	800a87c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f004 fab2 	bl	800ede0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	f001 fbb8 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      break;
 800a898:	e008      	b.n	800a8ac <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a89a:	bf00      	nop
 800a89c:	e006      	b.n	800a8ac <USBH_Process+0x4b8>
      break;
 800a89e:	bf00      	nop
 800a8a0:	e004      	b.n	800a8ac <USBH_Process+0x4b8>
      break;
 800a8a2:	bf00      	nop
 800a8a4:	e002      	b.n	800a8ac <USBH_Process+0x4b8>
    break;
 800a8a6:	bf00      	nop
 800a8a8:	e000      	b.n	800a8ac <USBH_Process+0x4b8>
      break;
 800a8aa:	bf00      	nop
  }
  return USBH_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop

0800a8b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af04      	add	r7, sp, #16
 800a8be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	785b      	ldrb	r3, [r3, #1]
 800a8cc:	2b07      	cmp	r3, #7
 800a8ce:	f200 8208 	bhi.w	800ace2 <USBH_HandleEnum+0x42a>
 800a8d2:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <USBH_HandleEnum+0x20>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a8f9 	.word	0x0800a8f9
 800a8dc:	0800a9b7 	.word	0x0800a9b7
 800a8e0:	0800aa21 	.word	0x0800aa21
 800a8e4:	0800aaaf 	.word	0x0800aaaf
 800a8e8:	0800ab19 	.word	0x0800ab19
 800a8ec:	0800ab89 	.word	0x0800ab89
 800a8f0:	0800ac25 	.word	0x0800ac25
 800a8f4:	0800aca3 	.word	0x0800aca3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a8f8:	2108      	movs	r1, #8
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 faec 	bl	800aed8 <USBH_Get_DevDesc>
 800a900:	4603      	mov	r3, r0
 800a902:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d130      	bne.n	800a96c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7919      	ldrb	r1, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a92e:	b292      	uxth	r2, r2
 800a930:	9202      	str	r2, [sp, #8]
 800a932:	2200      	movs	r2, #0
 800a934:	9201      	str	r2, [sp, #4]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	4603      	mov	r3, r0
 800a93a:	2280      	movs	r2, #128	; 0x80
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f001 f905 	bl	800bb4c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	7959      	ldrb	r1, [r3, #5]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a956:	b292      	uxth	r2, r2
 800a958:	9202      	str	r2, [sp, #8]
 800a95a:	2200      	movs	r2, #0
 800a95c:	9201      	str	r2, [sp, #4]
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	4603      	mov	r3, r0
 800a962:	2200      	movs	r2, #0
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 f8f1 	bl	800bb4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a96a:	e1bc      	b.n	800ace6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b03      	cmp	r3, #3
 800a970:	f040 81b9 	bne.w	800ace6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a97a:	3301      	adds	r3, #1
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d903      	bls.n	800a996 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	220d      	movs	r2, #13
 800a992:	701a      	strb	r2, [r3, #0]
      break;
 800a994:	e1a7      	b.n	800ace6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	795b      	ldrb	r3, [r3, #5]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 f925 	bl	800bbec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	791b      	ldrb	r3, [r3, #4]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 f91f 	bl	800bbec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
      break;
 800a9b4:	e197      	b.n	800ace6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a9b6:	2112      	movs	r1, #18
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fa8d 	bl	800aed8 <USBH_Get_DevDesc>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d103      	bne.n	800a9d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9ce:	e18c      	b.n	800acea <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	f040 8189 	bne.w	800acea <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9de:	3301      	adds	r3, #1
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d903      	bls.n	800a9fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	220d      	movs	r2, #13
 800a9f6:	701a      	strb	r2, [r3, #0]
      break;
 800a9f8:	e177      	b.n	800acea <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	795b      	ldrb	r3, [r3, #5]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f001 f8f3 	bl	800bbec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	791b      	ldrb	r3, [r3, #4]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f8ed 	bl	800bbec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	701a      	strb	r2, [r3, #0]
      break;
 800aa1e:	e164      	b.n	800acea <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aa20:	2101      	movs	r1, #1
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fb04 	bl	800b030 <USBH_SetAddress>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d132      	bne.n	800aa98 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aa32:	2002      	movs	r0, #2
 800aa34:	f004 fb39 	bl	800f0aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2203      	movs	r2, #3
 800aa44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	7919      	ldrb	r1, [r3, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa5a:	b292      	uxth	r2, r2
 800aa5c:	9202      	str	r2, [sp, #8]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	9201      	str	r2, [sp, #4]
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	4603      	mov	r3, r0
 800aa66:	2280      	movs	r2, #128	; 0x80
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 f86f 	bl	800bb4c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7959      	ldrb	r1, [r3, #5]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa82:	b292      	uxth	r2, r2
 800aa84:	9202      	str	r2, [sp, #8]
 800aa86:	2200      	movs	r2, #0
 800aa88:	9201      	str	r2, [sp, #4]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 f85b 	bl	800bb4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa96:	e12a      	b.n	800acee <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	f040 8127 	bne.w	800acee <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	220d      	movs	r2, #13
 800aaa4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	705a      	strb	r2, [r3, #1]
      break;
 800aaac:	e11f      	b.n	800acee <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aaae:	2109      	movs	r1, #9
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fa39 	bl	800af28 <USBH_Get_CfgDesc>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2204      	movs	r2, #4
 800aac4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aac6:	e114      	b.n	800acf2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	f040 8111 	bne.w	800acf2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aad6:	3301      	adds	r3, #1
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d903      	bls.n	800aaf2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	220d      	movs	r2, #13
 800aaee:	701a      	strb	r2, [r3, #0]
      break;
 800aaf0:	e0ff      	b.n	800acf2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	795b      	ldrb	r3, [r3, #5]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 f877 	bl	800bbec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	791b      	ldrb	r3, [r3, #4]
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f001 f871 	bl	800bbec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]
      break;
 800ab16:	e0ec      	b.n	800acf2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fa01 	bl	800af28 <USBH_Get_CfgDesc>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2205      	movs	r2, #5
 800ab34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab36:	e0de      	b.n	800acf6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	f040 80db 	bne.w	800acf6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab46:	3301      	adds	r3, #1
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d903      	bls.n	800ab62 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	220d      	movs	r2, #13
 800ab5e:	701a      	strb	r2, [r3, #0]
      break;
 800ab60:	e0c9      	b.n	800acf6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	795b      	ldrb	r3, [r3, #5]
 800ab66:	4619      	mov	r1, r3
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 f83f 	bl	800bbec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	791b      	ldrb	r3, [r3, #4]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f001 f839 	bl	800bbec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]
      break;
 800ab86:	e0b6      	b.n	800acf6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d036      	beq.n	800ac00 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab9e:	23ff      	movs	r3, #255	; 0xff
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f9e5 	bl	800af70 <USBH_Get_StringDesc>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d111      	bne.n	800abd4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2206      	movs	r2, #6
 800abb4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2205      	movs	r2, #5
 800abba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800abca:	2300      	movs	r3, #0
 800abcc:	2200      	movs	r2, #0
 800abce:	f001 fa1b 	bl	800c008 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abd2:	e092      	b.n	800acfa <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	f040 808f 	bne.w	800acfa <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2206      	movs	r2, #6
 800abe0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2205      	movs	r2, #5
 800abe6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800abf6:	2300      	movs	r3, #0
 800abf8:	2200      	movs	r2, #0
 800abfa:	f001 fa05 	bl	800c008 <osMessageQueuePut>
      break;
 800abfe:	e07c      	b.n	800acfa <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2206      	movs	r2, #6
 800ac04:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2205      	movs	r2, #5
 800ac0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f001 f9f3 	bl	800c008 <osMessageQueuePut>
      break;
 800ac22:	e06a      	b.n	800acfa <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d027      	beq.n	800ac7e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ac3a:	23ff      	movs	r3, #255	; 0xff
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f997 	bl	800af70 <USBH_Get_StringDesc>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d103      	bne.n	800ac54 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2207      	movs	r2, #7
 800ac50:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac52:	e054      	b.n	800acfe <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d151      	bne.n	800acfe <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2207      	movs	r2, #7
 800ac5e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2205      	movs	r2, #5
 800ac64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac74:	2300      	movs	r3, #0
 800ac76:	2200      	movs	r2, #0
 800ac78:	f001 f9c6 	bl	800c008 <osMessageQueuePut>
      break;
 800ac7c:	e03f      	b.n	800acfe <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2207      	movs	r2, #7
 800ac82:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2205      	movs	r2, #5
 800ac88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f001 f9b4 	bl	800c008 <osMessageQueuePut>
      break;
 800aca0:	e02d      	b.n	800acfe <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d017      	beq.n	800acdc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800acb8:	23ff      	movs	r3, #255	; 0xff
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 f958 	bl	800af70 <USBH_Get_StringDesc>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d102      	bne.n	800acd0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800acce:	e018      	b.n	800ad02 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d115      	bne.n	800ad02 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
      break;
 800acda:	e012      	b.n	800ad02 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
      break;
 800ace0:	e00f      	b.n	800ad02 <USBH_HandleEnum+0x44a>

    default:
      break;
 800ace2:	bf00      	nop
 800ace4:	e00e      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800ace6:	bf00      	nop
 800ace8:	e00c      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800acea:	bf00      	nop
 800acec:	e00a      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800acee:	bf00      	nop
 800acf0:	e008      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800acf2:	bf00      	nop
 800acf4:	e006      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800acf6:	bf00      	nop
 800acf8:	e004      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800acfa:	bf00      	nop
 800acfc:	e002      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800acfe:	bf00      	nop
 800ad00:	e000      	b.n	800ad04 <USBH_HandleEnum+0x44c>
      break;
 800ad02:	bf00      	nop
  }
  return Status;
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop

0800ad10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ad22:	bf00      	nop
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f804 	bl	800ad52 <USBH_HandleSof>
}
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b0b      	cmp	r3, #11
 800ad62:	d10a      	bne.n	800ad7a <USBH_HandleSof+0x28>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d005      	beq.n	800ad7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	4798      	blx	r3
  }
}
 800ad7a:	bf00      	nop
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ada6:	2300      	movs	r3, #0
 800ada8:	2200      	movs	r2, #0
 800adaa:	f001 f92d 	bl	800c008 <osMessageQueuePut>
#endif
#endif

  return;
 800adae:	bf00      	nop
}
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800adc6:	bf00      	nop
}
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae06:	2300      	movs	r3, #0
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f001 f8fd 	bl	800c008 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f003 ffec 	bl	800ee16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	791b      	ldrb	r3, [r3, #4]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fed1 	bl	800bbec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	795b      	ldrb	r3, [r3, #5]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fecb 	bl	800bbec <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f001 f8cb 	bl	800c008 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	2200      	movs	r2, #0
 800ae96:	f001 f92b 	bl	800c0f0 <osMessageQueueGet>
 800ae9a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f0      	bne.n	800ae84 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff faa6 	bl	800a3f4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800aea8:	e7ec      	b.n	800ae84 <USBH_Process_OS+0x8>

0800aeaa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b082      	sub	sp, #8
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aec6:	2300      	movs	r3, #0
 800aec8:	2200      	movs	r2, #0
 800aeca:	f001 f89d 	bl	800c008 <osMessageQueuePut>
#endif

  return USBH_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af02      	add	r7, sp, #8
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aef6:	2100      	movs	r1, #0
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f864 	bl	800afc6 <USBH_GetDescriptor>
 800aefe:	4603      	mov	r3, r0
 800af00:	73fb      	strb	r3, [r7, #15]
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af14:	78fa      	ldrb	r2, [r7, #3]
 800af16:	b292      	uxth	r2, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	f000 f918 	bl	800b14e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	331c      	adds	r3, #28
 800af38:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800af3a:	887b      	ldrh	r3, [r7, #2]
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f83d 	bl	800afc6 <USBH_GetDescriptor>
 800af4c:	4603      	mov	r3, r0
 800af4e:	72fb      	strb	r3, [r7, #11]
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d107      	bne.n	800af66 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800af5c:	887a      	ldrh	r2, [r7, #2]
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f964 	bl	800b22e <USBH_ParseCfgDesc>
  }

  return status;
 800af66:	7afb      	ldrb	r3, [r7, #11]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af02      	add	r7, sp, #8
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	607a      	str	r2, [r7, #4]
 800af7a:	461a      	mov	r2, r3
 800af7c:	460b      	mov	r3, r1
 800af7e:	72fb      	strb	r3, [r7, #11]
 800af80:	4613      	mov	r3, r2
 800af82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	b29b      	uxth	r3, r3
 800af88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800af8c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af94:	893b      	ldrh	r3, [r7, #8]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	460b      	mov	r3, r1
 800af9a:	2100      	movs	r1, #0
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f000 f812 	bl	800afc6 <USBH_GetDescriptor>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d107      	bne.n	800afbc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afb2:	893a      	ldrh	r2, [r7, #8]
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fa37 	bl	800b42a <USBH_ParseStringDesc>
  }

  return status;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b084      	sub	sp, #16
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	607b      	str	r3, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	72fb      	strb	r3, [r7, #11]
 800afd4:	4613      	mov	r3, r2
 800afd6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	789b      	ldrb	r3, [r3, #2]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d11c      	bne.n	800b01a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800afe0:	7afb      	ldrb	r3, [r7, #11]
 800afe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2206      	movs	r2, #6
 800aff0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	893a      	ldrh	r2, [r7, #8]
 800aff6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aff8:	893b      	ldrh	r3, [r7, #8]
 800affa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800affe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b002:	d104      	bne.n	800b00e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f240 4209 	movw	r2, #1033	; 0x409
 800b00a:	829a      	strh	r2, [r3, #20]
 800b00c:	e002      	b.n	800b014 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8b3a      	ldrh	r2, [r7, #24]
 800b018:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b01a:	8b3b      	ldrh	r3, [r7, #24]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 fa50 	bl	800b4c6 <USBH_CtlReq>
 800b026:	4603      	mov	r3, r0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	789b      	ldrb	r3, [r3, #2]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d10f      	bne.n	800b064 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2205      	movs	r2, #5
 800b04e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	b29a      	uxth	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b064:	2200      	movs	r2, #0
 800b066:	2100      	movs	r1, #0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fa2c 	bl	800b4c6 <USBH_CtlReq>
 800b06e:	4603      	mov	r3, r0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	789b      	ldrb	r3, [r3, #2]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d10e      	bne.n	800b0aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2209      	movs	r2, #9
 800b096:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	887a      	ldrh	r2, [r7, #2]
 800b09c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 fa09 	bl	800b4c6 <USBH_CtlReq>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d10f      	bne.n	800b0f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2203      	movs	r2, #3
 800b0dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9e5 	bl	800b4c6 <USBH_CtlReq>
 800b0fc:	4603      	mov	r3, r0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	789b      	ldrb	r3, [r3, #2]
 800b116:	2b01      	cmp	r3, #1
 800b118:	d10f      	bne.n	800b13a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2202      	movs	r2, #2
 800b11e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f9c1 	bl	800b4c6 <USBH_CtlReq>
 800b144:	4603      	mov	r3, r0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b14e:	b480      	push	{r7}
 800b150:	b085      	sub	sp, #20
 800b152:	af00      	add	r7, sp, #0
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	4613      	mov	r3, r2
 800b15a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	781a      	ldrb	r2, [r3, #0]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	785a      	ldrb	r2, [r3, #1]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3302      	adds	r3, #2
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b29a      	uxth	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3303      	adds	r3, #3
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	791a      	ldrb	r2, [r3, #4]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	795a      	ldrb	r2, [r3, #5]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	799a      	ldrb	r2, [r3, #6]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	79da      	ldrb	r2, [r3, #7]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	2b08      	cmp	r3, #8
 800b1ac:	d939      	bls.n	800b222 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	3309      	adds	r3, #9
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	330a      	adds	r3, #10
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	330b      	adds	r3, #11
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	330c      	adds	r3, #12
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	330d      	adds	r3, #13
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	7b9a      	ldrb	r2, [r3, #14]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	7bda      	ldrb	r2, [r3, #15]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	7c1a      	ldrb	r2, [r3, #16]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	7c5a      	ldrb	r2, [r3, #17]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	745a      	strb	r2, [r3, #17]
  }
}
 800b222:	bf00      	nop
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b08a      	sub	sp, #40	; 0x28
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	4613      	mov	r3, r2
 800b23a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	785a      	ldrb	r2, [r3, #1]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	3302      	adds	r3, #2
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	b29a      	uxth	r2, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3303      	adds	r3, #3
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	021b      	lsls	r3, r3, #8
 800b272:	b29b      	uxth	r3, r3
 800b274:	4313      	orrs	r3, r2
 800b276:	b29a      	uxth	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	791a      	ldrb	r2, [r3, #4]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	795a      	ldrb	r2, [r3, #5]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	799a      	ldrb	r2, [r3, #6]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	79da      	ldrb	r2, [r3, #7]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	7a1a      	ldrb	r2, [r3, #8]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d95f      	bls.n	800b36a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b2aa:	2309      	movs	r3, #9
 800b2ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2b2:	e051      	b.n	800b358 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2b4:	f107 0316 	add.w	r3, r7, #22
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2bc:	f000 f8e8 	bl	800b490 <USBH_GetNextDesc>
 800b2c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	785b      	ldrb	r3, [r3, #1]
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	d146      	bne.n	800b358 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b2ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2ce:	221a      	movs	r2, #26
 800b2d0:	fb02 f303 	mul.w	r3, r2, r3
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3302      	adds	r3, #2
 800b2dc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b2de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e0:	69f8      	ldr	r0, [r7, #28]
 800b2e2:	f000 f846 	bl	800b372 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2f0:	e022      	b.n	800b338 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2f2:	f107 0316 	add.w	r3, r7, #22
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2fa:	f000 f8c9 	bl	800b490 <USBH_GetNextDesc>
 800b2fe:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	785b      	ldrb	r3, [r3, #1]
 800b304:	2b05      	cmp	r3, #5
 800b306:	d117      	bne.n	800b338 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b30c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b310:	3201      	adds	r2, #1
 800b312:	00d2      	lsls	r2, r2, #3
 800b314:	211a      	movs	r1, #26
 800b316:	fb01 f303 	mul.w	r3, r1, r3
 800b31a:	4413      	add	r3, r2
 800b31c:	3308      	adds	r3, #8
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4413      	add	r3, r2
 800b322:	3304      	adds	r3, #4
 800b324:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b328:	69b8      	ldr	r0, [r7, #24]
 800b32a:	f000 f851 	bl	800b3d0 <USBH_ParseEPDesc>
            ep_ix++;
 800b32e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b332:	3301      	adds	r3, #1
 800b334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	791b      	ldrb	r3, [r3, #4]
 800b33c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b340:	429a      	cmp	r2, r3
 800b342:	d204      	bcs.n	800b34e <USBH_ParseCfgDesc+0x120>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	885a      	ldrh	r2, [r3, #2]
 800b348:	8afb      	ldrh	r3, [r7, #22]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d8d1      	bhi.n	800b2f2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b34e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b352:	3301      	adds	r3, #1
 800b354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d804      	bhi.n	800b36a <USBH_ParseCfgDesc+0x13c>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	885a      	ldrh	r2, [r3, #2]
 800b364:	8afb      	ldrh	r3, [r7, #22]
 800b366:	429a      	cmp	r2, r3
 800b368:	d8a4      	bhi.n	800b2b4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b36a:	bf00      	nop
 800b36c:	3728      	adds	r7, #40	; 0x28
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781a      	ldrb	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	785a      	ldrb	r2, [r3, #1]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	789a      	ldrb	r2, [r3, #2]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	78da      	ldrb	r2, [r3, #3]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	791a      	ldrb	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	795a      	ldrb	r2, [r3, #5]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	799a      	ldrb	r2, [r3, #6]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	79da      	ldrb	r2, [r3, #7]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	7a1a      	ldrb	r2, [r3, #8]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	721a      	strb	r2, [r3, #8]
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781a      	ldrb	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	785a      	ldrb	r2, [r3, #1]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	789a      	ldrb	r2, [r3, #2]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	78da      	ldrb	r2, [r3, #3]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	b29a      	uxth	r2, r3
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	3305      	adds	r3, #5
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	021b      	lsls	r3, r3, #8
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	799a      	ldrb	r2, [r3, #6]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	719a      	strb	r2, [r3, #6]
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	4613      	mov	r3, r2
 800b436:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d120      	bne.n	800b484 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	1e9a      	subs	r2, r3, #2
 800b448:	88fb      	ldrh	r3, [r7, #6]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bf28      	it	cs
 800b44e:	4613      	movcs	r3, r2
 800b450:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	3302      	adds	r3, #2
 800b456:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b458:	2300      	movs	r3, #0
 800b45a:	82fb      	strh	r3, [r7, #22]
 800b45c:	e00b      	b.n	800b476 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b45e:	8afb      	ldrh	r3, [r7, #22]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	781a      	ldrb	r2, [r3, #0]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b470:	8afb      	ldrh	r3, [r7, #22]
 800b472:	3302      	adds	r3, #2
 800b474:	82fb      	strh	r3, [r7, #22]
 800b476:	8afa      	ldrh	r2, [r7, #22]
 800b478:	8abb      	ldrh	r3, [r7, #20]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d3ef      	bcc.n	800b45e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
  }
}
 800b484:	bf00      	nop
 800b486:	371c      	adds	r7, #28
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	881a      	ldrh	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4413      	add	r3, r2
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b086      	sub	sp, #24
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	60f8      	str	r0, [r7, #12]
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	789b      	ldrb	r3, [r3, #2]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d002      	beq.n	800b4e6 <USBH_CtlReq+0x20>
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d01d      	beq.n	800b520 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b4e4:	e043      	b.n	800b56e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b4fe:	2301      	movs	r3, #1
 800b500:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2203      	movs	r2, #3
 800b506:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b516:	2300      	movs	r3, #0
 800b518:	2200      	movs	r2, #0
 800b51a:	f000 fd75 	bl	800c008 <osMessageQueuePut>
      break;
 800b51e:	e026      	b.n	800b56e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f829 	bl	800b578 <USBH_HandleControl>
 800b526:	4603      	mov	r3, r0
 800b528:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <USBH_CtlReq+0x70>
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b03      	cmp	r3, #3
 800b534:	d106      	bne.n	800b544 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	761a      	strb	r2, [r3, #24]
 800b542:	e005      	b.n	800b550 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	2b02      	cmp	r3, #2
 800b548:	d102      	bne.n	800b550 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2203      	movs	r2, #3
 800b554:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b564:	2300      	movs	r3, #0
 800b566:	2200      	movs	r2, #0
 800b568:	f000 fd4e 	bl	800c008 <osMessageQueuePut>
      break;
 800b56c:	bf00      	nop
  }
  return status;
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b580:	2301      	movs	r3, #1
 800b582:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b584:	2300      	movs	r3, #0
 800b586:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	7e1b      	ldrb	r3, [r3, #24]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	2b0a      	cmp	r3, #10
 800b590:	f200 822b 	bhi.w	800b9ea <USBH_HandleControl+0x472>
 800b594:	a201      	add	r2, pc, #4	; (adr r2, 800b59c <USBH_HandleControl+0x24>)
 800b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b5c9 	.word	0x0800b5c9
 800b5a0:	0800b5e3 	.word	0x0800b5e3
 800b5a4:	0800b685 	.word	0x0800b685
 800b5a8:	0800b6ab 	.word	0x0800b6ab
 800b5ac:	0800b737 	.word	0x0800b737
 800b5b0:	0800b763 	.word	0x0800b763
 800b5b4:	0800b825 	.word	0x0800b825
 800b5b8:	0800b847 	.word	0x0800b847
 800b5bc:	0800b8d9 	.word	0x0800b8d9
 800b5c0:	0800b901 	.word	0x0800b901
 800b5c4:	0800b993 	.word	0x0800b993
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f103 0110 	add.w	r1, r3, #16
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	795b      	ldrb	r3, [r3, #5]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fa19 	bl	800ba0c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	761a      	strb	r2, [r3, #24]
      break;
 800b5e0:	e20e      	b.n	800ba00 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	795b      	ldrb	r3, [r3, #5]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f003 fd01 	bl	800eff0 <USBH_LL_GetURBState>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5f2:	7bbb      	ldrb	r3, [r7, #14]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d12c      	bne.n	800b652 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7c1b      	ldrb	r3, [r3, #16]
 800b5fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b600:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	8adb      	ldrh	r3, [r3, #22]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00a      	beq.n	800b620 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b60a:	7b7b      	ldrb	r3, [r7, #13]
 800b60c:	2b80      	cmp	r3, #128	; 0x80
 800b60e:	d103      	bne.n	800b618 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2203      	movs	r2, #3
 800b614:	761a      	strb	r2, [r3, #24]
 800b616:	e00d      	b.n	800b634 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2205      	movs	r2, #5
 800b61c:	761a      	strb	r2, [r3, #24]
 800b61e:	e009      	b.n	800b634 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b620:	7b7b      	ldrb	r3, [r7, #13]
 800b622:	2b80      	cmp	r3, #128	; 0x80
 800b624:	d103      	bne.n	800b62e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2209      	movs	r2, #9
 800b62a:	761a      	strb	r2, [r3, #24]
 800b62c:	e002      	b.n	800b634 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2207      	movs	r2, #7
 800b632:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2203      	movs	r2, #3
 800b638:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b648:	2300      	movs	r3, #0
 800b64a:	2200      	movs	r2, #0
 800b64c:	f000 fcdc 	bl	800c008 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b650:	e1cd      	b.n	800b9ee <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	2b04      	cmp	r3, #4
 800b656:	d003      	beq.n	800b660 <USBH_HandleControl+0xe8>
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	f040 81c7 	bne.w	800b9ee <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	220b      	movs	r2, #11
 800b664:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2203      	movs	r2, #3
 800b66a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b67a:	2300      	movs	r3, #0
 800b67c:	2200      	movs	r2, #0
 800b67e:	f000 fcc3 	bl	800c008 <osMessageQueuePut>
      break;
 800b682:	e1b4      	b.n	800b9ee <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6899      	ldr	r1, [r3, #8]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	899a      	ldrh	r2, [r3, #12]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	791b      	ldrb	r3, [r3, #4]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f9f4 	bl	800ba8a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2204      	movs	r2, #4
 800b6a6:	761a      	strb	r2, [r3, #24]
      break;
 800b6a8:	e1aa      	b.n	800ba00 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	791b      	ldrb	r3, [r3, #4]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f003 fc9d 	bl	800eff0 <USBH_LL_GetURBState>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d110      	bne.n	800b6e2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2209      	movs	r2, #9
 800b6c4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2203      	movs	r2, #3
 800b6ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f000 fc93 	bl	800c008 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	2b05      	cmp	r3, #5
 800b6e6:	d110      	bne.n	800b70a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b700:	2300      	movs	r3, #0
 800b702:	2200      	movs	r2, #0
 800b704:	f000 fc80 	bl	800c008 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b708:	e173      	b.n	800b9f2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b04      	cmp	r3, #4
 800b70e:	f040 8170 	bne.w	800b9f2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	220b      	movs	r2, #11
 800b716:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2203      	movs	r2, #3
 800b71c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b72c:	2300      	movs	r3, #0
 800b72e:	2200      	movs	r2, #0
 800b730:	f000 fc6a 	bl	800c008 <osMessageQueuePut>
      break;
 800b734:	e15d      	b.n	800b9f2 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6899      	ldr	r1, [r3, #8]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	899a      	ldrh	r2, [r3, #12]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7958      	ldrb	r0, [r3, #5]
 800b742:	2301      	movs	r3, #1
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	4603      	mov	r3, r0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f979 	bl	800ba40 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b754:	b29a      	uxth	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2206      	movs	r2, #6
 800b75e:	761a      	strb	r2, [r3, #24]
      break;
 800b760:	e14e      	b.n	800ba00 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	795b      	ldrb	r3, [r3, #5]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f003 fc41 	bl	800eff0 <USBH_LL_GetURBState>
 800b76e:	4603      	mov	r3, r0
 800b770:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d111      	bne.n	800b79c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2207      	movs	r2, #7
 800b77c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2203      	movs	r2, #3
 800b782:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b792:	2300      	movs	r3, #0
 800b794:	2200      	movs	r2, #0
 800b796:	f000 fc37 	bl	800c008 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b79a:	e12c      	b.n	800b9f6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
 800b79e:	2b05      	cmp	r3, #5
 800b7a0:	d113      	bne.n	800b7ca <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	220c      	movs	r2, #12
 800b7a6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2203      	movs	r2, #3
 800b7b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f000 fc20 	bl	800c008 <osMessageQueuePut>
      break;
 800b7c8:	e115      	b.n	800b9f6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d111      	bne.n	800b7f4 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2205      	movs	r2, #5
 800b7d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2203      	movs	r2, #3
 800b7da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f000 fc0b 	bl	800c008 <osMessageQueuePut>
      break;
 800b7f2:	e100      	b.n	800b9f6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	2b04      	cmp	r3, #4
 800b7f8:	f040 80fd 	bne.w	800b9f6 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	220b      	movs	r2, #11
 800b800:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b802:	2302      	movs	r3, #2
 800b804:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2203      	movs	r2, #3
 800b80a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b81a:	2300      	movs	r3, #0
 800b81c:	2200      	movs	r2, #0
 800b81e:	f000 fbf3 	bl	800c008 <osMessageQueuePut>
      break;
 800b822:	e0e8      	b.n	800b9f6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	791b      	ldrb	r3, [r3, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	2100      	movs	r1, #0
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f92c 	bl	800ba8a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b838:	b29a      	uxth	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2208      	movs	r2, #8
 800b842:	761a      	strb	r2, [r3, #24]

      break;
 800b844:	e0dc      	b.n	800ba00 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	791b      	ldrb	r3, [r3, #4]
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f003 fbcf 	bl	800eff0 <USBH_LL_GetURBState>
 800b852:	4603      	mov	r3, r0
 800b854:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b856:	7bbb      	ldrb	r3, [r7, #14]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d113      	bne.n	800b884 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	220d      	movs	r2, #13
 800b860:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2203      	movs	r2, #3
 800b86a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b87a:	2300      	movs	r3, #0
 800b87c:	2200      	movs	r2, #0
 800b87e:	f000 fbc3 	bl	800c008 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b882:	e0ba      	b.n	800b9fa <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b04      	cmp	r3, #4
 800b888:	d111      	bne.n	800b8ae <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	220b      	movs	r2, #11
 800b88e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2203      	movs	r2, #3
 800b894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f000 fbae 	bl	800c008 <osMessageQueuePut>
      break;
 800b8ac:	e0a5      	b.n	800b9fa <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	f040 80a2 	bne.w	800b9fa <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2203      	movs	r2, #3
 800b8be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f000 fb99 	bl	800c008 <osMessageQueuePut>
      break;
 800b8d6:	e090      	b.n	800b9fa <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	795a      	ldrb	r2, [r3, #5]
 800b8dc:	2301      	movs	r3, #1
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f8aa 	bl	800ba40 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	220a      	movs	r2, #10
 800b8fc:	761a      	strb	r2, [r3, #24]
      break;
 800b8fe:	e07f      	b.n	800ba00 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	795b      	ldrb	r3, [r3, #5]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f003 fb72 	bl	800eff0 <USBH_LL_GetURBState>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d113      	bne.n	800b93e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	220d      	movs	r2, #13
 800b91e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2203      	movs	r2, #3
 800b924:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b934:	2300      	movs	r3, #0
 800b936:	2200      	movs	r2, #0
 800b938:	f000 fb66 	bl	800c008 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b93c:	e05f      	b.n	800b9fe <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	2b02      	cmp	r3, #2
 800b942:	d111      	bne.n	800b968 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2209      	movs	r2, #9
 800b948:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2203      	movs	r2, #3
 800b94e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b95e:	2300      	movs	r3, #0
 800b960:	2200      	movs	r2, #0
 800b962:	f000 fb51 	bl	800c008 <osMessageQueuePut>
      break;
 800b966:	e04a      	b.n	800b9fe <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b04      	cmp	r3, #4
 800b96c:	d147      	bne.n	800b9fe <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	220b      	movs	r2, #11
 800b972:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2203      	movs	r2, #3
 800b978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b988:	2300      	movs	r3, #0
 800b98a:	2200      	movs	r2, #0
 800b98c:	f000 fb3c 	bl	800c008 <osMessageQueuePut>
      break;
 800b990:	e035      	b.n	800b9fe <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	7e5b      	ldrb	r3, [r3, #25]
 800b996:	3301      	adds	r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	765a      	strb	r2, [r3, #25]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7e5b      	ldrb	r3, [r3, #25]
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d806      	bhi.n	800b9b4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b9b2:	e025      	b.n	800ba00 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9ba:	2106      	movs	r1, #6
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	795b      	ldrb	r3, [r3, #5]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f90d 	bl	800bbec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	791b      	ldrb	r3, [r3, #4]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f907 	bl	800bbec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e8:	e00a      	b.n	800ba00 <USBH_HandleControl+0x488>

    default:
      break;
 800b9ea:	bf00      	nop
 800b9ec:	e008      	b.n	800ba00 <USBH_HandleControl+0x488>
      break;
 800b9ee:	bf00      	nop
 800b9f0:	e006      	b.n	800ba00 <USBH_HandleControl+0x488>
      break;
 800b9f2:	bf00      	nop
 800b9f4:	e004      	b.n	800ba00 <USBH_HandleControl+0x488>
      break;
 800b9f6:	bf00      	nop
 800b9f8:	e002      	b.n	800ba00 <USBH_HandleControl+0x488>
      break;
 800b9fa:	bf00      	nop
 800b9fc:	e000      	b.n	800ba00 <USBH_HandleControl+0x488>
      break;
 800b9fe:	bf00      	nop
  }

  return status;
 800ba00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop

0800ba0c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af04      	add	r7, sp, #16
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	4613      	mov	r3, r2
 800ba18:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba1a:	79f9      	ldrb	r1, [r7, #7]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	9303      	str	r3, [sp, #12]
 800ba20:	2308      	movs	r3, #8
 800ba22:	9302      	str	r3, [sp, #8]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	2200      	movs	r2, #0
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f003 faac 	bl	800ef8e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af04      	add	r7, sp, #16
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	460b      	mov	r3, r1
 800ba50:	80fb      	strh	r3, [r7, #6]
 800ba52:	4613      	mov	r3, r2
 800ba54:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba64:	7979      	ldrb	r1, [r7, #5]
 800ba66:	7e3b      	ldrb	r3, [r7, #24]
 800ba68:	9303      	str	r3, [sp, #12]
 800ba6a:	88fb      	ldrh	r3, [r7, #6]
 800ba6c:	9302      	str	r3, [sp, #8]
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	2301      	movs	r3, #1
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	2300      	movs	r3, #0
 800ba78:	2200      	movs	r2, #0
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f003 fa87 	bl	800ef8e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b088      	sub	sp, #32
 800ba8e:	af04      	add	r7, sp, #16
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	4611      	mov	r1, r2
 800ba96:	461a      	mov	r2, r3
 800ba98:	460b      	mov	r3, r1
 800ba9a:	80fb      	strh	r3, [r7, #6]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800baa0:	7979      	ldrb	r1, [r7, #5]
 800baa2:	2300      	movs	r3, #0
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	88fb      	ldrh	r3, [r7, #6]
 800baa8:	9302      	str	r3, [sp, #8]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	2301      	movs	r3, #1
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	2300      	movs	r3, #0
 800bab4:	2201      	movs	r2, #1
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f003 fa69 	bl	800ef8e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800babc:	2300      	movs	r3, #0

}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b088      	sub	sp, #32
 800baca:	af04      	add	r7, sp, #16
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	4611      	mov	r1, r2
 800bad2:	461a      	mov	r2, r3
 800bad4:	460b      	mov	r3, r1
 800bad6:	80fb      	strh	r3, [r7, #6]
 800bad8:	4613      	mov	r3, r2
 800bada:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800baea:	7979      	ldrb	r1, [r7, #5]
 800baec:	7e3b      	ldrb	r3, [r7, #24]
 800baee:	9303      	str	r3, [sp, #12]
 800baf0:	88fb      	ldrh	r3, [r7, #6]
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	2301      	movs	r3, #1
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	2302      	movs	r3, #2
 800bafe:	2200      	movs	r2, #0
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f003 fa44 	bl	800ef8e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af04      	add	r7, sp, #16
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	460b      	mov	r3, r1
 800bb20:	80fb      	strh	r3, [r7, #6]
 800bb22:	4613      	mov	r3, r2
 800bb24:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb26:	7979      	ldrb	r1, [r7, #5]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	88fb      	ldrh	r3, [r7, #6]
 800bb2e:	9302      	str	r3, [sp, #8]
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	2301      	movs	r3, #1
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	2302      	movs	r3, #2
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f003 fa26 	bl	800ef8e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af04      	add	r7, sp, #16
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	4608      	mov	r0, r1
 800bb56:	4611      	mov	r1, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	70fb      	strb	r3, [r7, #3]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	70bb      	strb	r3, [r7, #2]
 800bb62:	4613      	mov	r3, r2
 800bb64:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bb66:	7878      	ldrb	r0, [r7, #1]
 800bb68:	78ba      	ldrb	r2, [r7, #2]
 800bb6a:	78f9      	ldrb	r1, [r7, #3]
 800bb6c:	8b3b      	ldrh	r3, [r7, #24]
 800bb6e:	9302      	str	r3, [sp, #8]
 800bb70:	7d3b      	ldrb	r3, [r7, #20]
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	7c3b      	ldrb	r3, [r7, #16]
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	4603      	mov	r3, r0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f003 f9b9 	bl	800eef2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f003 f9d8 	bl	800ef50 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f836 	bl	800bc28 <USBH_GetFreePipe>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bbc0:	89fb      	ldrh	r3, [r7, #14]
 800bbc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d00a      	beq.n	800bbe0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bbca:	78fa      	ldrb	r2, [r7, #3]
 800bbcc:	89fb      	ldrh	r3, [r7, #14]
 800bbce:	f003 030f 	and.w	r3, r3, #15
 800bbd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbd6:	6879      	ldr	r1, [r7, #4]
 800bbd8:	33e0      	adds	r3, #224	; 0xe0
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	440b      	add	r3, r1
 800bbde:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bbe0:	89fb      	ldrh	r3, [r7, #14]
 800bbe2:	b2db      	uxtb	r3, r3
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bbf8:	78fb      	ldrb	r3, [r7, #3]
 800bbfa:	2b0a      	cmp	r3, #10
 800bbfc:	d80d      	bhi.n	800bc1a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bbfe:	78fb      	ldrb	r3, [r7, #3]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	33e0      	adds	r3, #224	; 0xe0
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc10:	6879      	ldr	r1, [r7, #4]
 800bc12:	33e0      	adds	r3, #224	; 0xe0
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	440b      	add	r3, r1
 800bc18:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
 800bc38:	e00f      	b.n	800bc5a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	33e0      	adds	r3, #224	; 0xe0
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	e007      	b.n	800bc64 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	3301      	adds	r3, #1
 800bc58:	73fb      	strb	r3, [r7, #15]
 800bc5a:	7bfb      	ldrb	r3, [r7, #15]
 800bc5c:	2b0a      	cmp	r3, #10
 800bc5e:	d9ec      	bls.n	800bc3a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bc60:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800bc74:	bf00      	nop
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
	...

0800bc80 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc86:	f3ef 8305 	mrs	r3, IPSR
 800bc8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10f      	bne.n	800bcb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc92:	f3ef 8310 	mrs	r3, PRIMASK
 800bc96:	607b      	str	r3, [r7, #4]
  return(result);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d105      	bne.n	800bcaa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc9e:	f3ef 8311 	mrs	r3, BASEPRI
 800bca2:	603b      	str	r3, [r7, #0]
  return(result);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d007      	beq.n	800bcba <osKernelInitialize+0x3a>
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <osKernelInitialize+0x64>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	d103      	bne.n	800bcba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800bcb2:	f06f 0305 	mvn.w	r3, #5
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e00c      	b.n	800bcd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bcba:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <osKernelInitialize+0x64>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d105      	bne.n	800bcce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bcc2:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <osKernelInitialize+0x64>)
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	e002      	b.n	800bcd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800bcce:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	200000fc 	.word	0x200000fc

0800bce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcee:	f3ef 8305 	mrs	r3, IPSR
 800bcf2:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10f      	bne.n	800bd1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcfa:	f3ef 8310 	mrs	r3, PRIMASK
 800bcfe:	607b      	str	r3, [r7, #4]
  return(result);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d105      	bne.n	800bd12 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd06:	f3ef 8311 	mrs	r3, BASEPRI
 800bd0a:	603b      	str	r3, [r7, #0]
  return(result);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d007      	beq.n	800bd22 <osKernelStart+0x3a>
 800bd12:	4b0f      	ldr	r3, [pc, #60]	; (800bd50 <osKernelStart+0x68>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d103      	bne.n	800bd22 <osKernelStart+0x3a>
    stat = osErrorISR;
 800bd1a:	f06f 0305 	mvn.w	r3, #5
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e010      	b.n	800bd44 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd22:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <osKernelStart+0x68>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d109      	bne.n	800bd3e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd2a:	f7ff ffa1 	bl	800bc70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bd2e:	4b08      	ldr	r3, [pc, #32]	; (800bd50 <osKernelStart+0x68>)
 800bd30:	2202      	movs	r2, #2
 800bd32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bd34:	f001 fa9a 	bl	800d26c <vTaskStartScheduler>
      stat = osOK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	e002      	b.n	800bd44 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800bd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bd44:	68fb      	ldr	r3, [r7, #12]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	200000fc 	.word	0x200000fc

0800bd54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b090      	sub	sp, #64	; 0x40
 800bd58:	af04      	add	r7, sp, #16
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bd60:	2300      	movs	r3, #0
 800bd62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd64:	f3ef 8305 	mrs	r3, IPSR
 800bd68:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd6a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 808f 	bne.w	800be90 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd72:	f3ef 8310 	mrs	r3, PRIMASK
 800bd76:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd7e:	f3ef 8311 	mrs	r3, BASEPRI
 800bd82:	617b      	str	r3, [r7, #20]
  return(result);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <osThreadNew+0x3e>
 800bd8a:	4b44      	ldr	r3, [pc, #272]	; (800be9c <osThreadNew+0x148>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d07e      	beq.n	800be90 <osThreadNew+0x13c>
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d07b      	beq.n	800be90 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800bd98:	2380      	movs	r3, #128	; 0x80
 800bd9a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800bd9c:	2318      	movs	r3, #24
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800bda4:	f04f 33ff 	mov.w	r3, #4294967295
 800bda8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d045      	beq.n	800be3c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <osThreadNew+0x6a>
        name = attr->name;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d008      	beq.n	800bde4 <osThreadNew+0x90>
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	2b38      	cmp	r3, #56	; 0x38
 800bdd6:	d805      	bhi.n	800bde4 <osThreadNew+0x90>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <osThreadNew+0x94>
        return (NULL);
 800bde4:	2300      	movs	r3, #0
 800bde6:	e054      	b.n	800be92 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	089b      	lsrs	r3, r3, #2
 800bdf6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00e      	beq.n	800be1e <osThreadNew+0xca>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	2b5b      	cmp	r3, #91	; 0x5b
 800be06:	d90a      	bls.n	800be1e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d006      	beq.n	800be1e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <osThreadNew+0xca>
        mem = 1;
 800be18:	2301      	movs	r3, #1
 800be1a:	623b      	str	r3, [r7, #32]
 800be1c:	e010      	b.n	800be40 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10c      	bne.n	800be40 <osThreadNew+0xec>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d108      	bne.n	800be40 <osThreadNew+0xec>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d104      	bne.n	800be40 <osThreadNew+0xec>
          mem = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	623b      	str	r3, [r7, #32]
 800be3a:	e001      	b.n	800be40 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d110      	bne.n	800be68 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be4e:	9202      	str	r2, [sp, #8]
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f001 f833 	bl	800cec8 <xTaskCreateStatic>
 800be62:	4603      	mov	r3, r0
 800be64:	613b      	str	r3, [r7, #16]
 800be66:	e013      	b.n	800be90 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d110      	bne.n	800be90 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	b29a      	uxth	r2, r3
 800be72:	f107 0310 	add.w	r3, r7, #16
 800be76:	9301      	str	r3, [sp, #4]
 800be78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f001 f87b 	bl	800cf7c <xTaskCreate>
 800be86:	4603      	mov	r3, r0
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d001      	beq.n	800be90 <osThreadNew+0x13c>
          hTask = NULL;
 800be8c:	2300      	movs	r3, #0
 800be8e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800be90:	693b      	ldr	r3, [r7, #16]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3730      	adds	r7, #48	; 0x30
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	200000fc 	.word	0x200000fc

0800bea0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bea8:	f3ef 8305 	mrs	r3, IPSR
 800beac:	613b      	str	r3, [r7, #16]
  return(result);
 800beae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10f      	bne.n	800bed4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beb4:	f3ef 8310 	mrs	r3, PRIMASK
 800beb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d105      	bne.n	800becc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bec0:	f3ef 8311 	mrs	r3, BASEPRI
 800bec4:	60bb      	str	r3, [r7, #8]
  return(result);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d007      	beq.n	800bedc <osDelay+0x3c>
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <osDelay+0x58>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d103      	bne.n	800bedc <osDelay+0x3c>
    stat = osErrorISR;
 800bed4:	f06f 0305 	mvn.w	r3, #5
 800bed8:	617b      	str	r3, [r7, #20]
 800beda:	e007      	b.n	800beec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d002      	beq.n	800beec <osDelay+0x4c>
      vTaskDelay(ticks);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f001 f98c 	bl	800d204 <vTaskDelay>
    }
  }

  return (stat);
 800beec:	697b      	ldr	r3, [r7, #20]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	200000fc 	.word	0x200000fc

0800befc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800befc:	b580      	push	{r7, lr}
 800befe:	b08c      	sub	sp, #48	; 0x30
 800bf00:	af02      	add	r7, sp, #8
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0c:	f3ef 8305 	mrs	r3, IPSR
 800bf10:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d170      	bne.n	800bffa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf18:	f3ef 8310 	mrs	r3, PRIMASK
 800bf1c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d105      	bne.n	800bf30 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf24:	f3ef 8311 	mrs	r3, BASEPRI
 800bf28:	613b      	str	r3, [r7, #16]
  return(result);
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <osMessageQueueNew+0x3c>
 800bf30:	4b34      	ldr	r3, [pc, #208]	; (800c004 <osMessageQueueNew+0x108>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d060      	beq.n	800bffa <osMessageQueueNew+0xfe>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d05d      	beq.n	800bffa <osMessageQueueNew+0xfe>
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d05a      	beq.n	800bffa <osMessageQueueNew+0xfe>
    mem = -1;
 800bf44:	f04f 33ff 	mov.w	r3, #4294967295
 800bf48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d029      	beq.n	800bfa4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d012      	beq.n	800bf7e <osMessageQueueNew+0x82>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b4f      	cmp	r3, #79	; 0x4f
 800bf5e:	d90e      	bls.n	800bf7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00a      	beq.n	800bf7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	695a      	ldr	r2, [r3, #20]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	68b9      	ldr	r1, [r7, #8]
 800bf70:	fb01 f303 	mul.w	r3, r1, r3
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d302      	bcc.n	800bf7e <osMessageQueueNew+0x82>
        mem = 1;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	623b      	str	r3, [r7, #32]
 800bf7c:	e014      	b.n	800bfa8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d110      	bne.n	800bfa8 <osMessageQueueNew+0xac>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10c      	bne.n	800bfa8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d108      	bne.n	800bfa8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d104      	bne.n	800bfa8 <osMessageQueueNew+0xac>
          mem = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	623b      	str	r3, [r7, #32]
 800bfa2:	e001      	b.n	800bfa8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d10c      	bne.n	800bfc8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	691a      	ldr	r2, [r3, #16]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6899      	ldr	r1, [r3, #8]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 fa58 	bl	800c474 <xQueueGenericCreateStatic>
 800bfc4:	6278      	str	r0, [r7, #36]	; 0x24
 800bfc6:	e008      	b.n	800bfda <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d105      	bne.n	800bfda <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bfce:	2200      	movs	r2, #0
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 fac1 	bl	800c55a <xQueueGenericCreate>
 800bfd8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00c      	beq.n	800bffa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <osMessageQueueNew+0xf2>
        name = attr->name;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	61fb      	str	r3, [r7, #28]
 800bfec:	e001      	b.n	800bff2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bff2:	69f9      	ldr	r1, [r7, #28]
 800bff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bff6:	f000 ff0b 	bl	800ce10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3728      	adds	r7, #40	; 0x28
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	200000fc 	.word	0x200000fc

0800c008 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	4613      	mov	r3, r2
 800c016:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c020:	f3ef 8305 	mrs	r3, IPSR
 800c024:	61fb      	str	r3, [r7, #28]
  return(result);
 800c026:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10f      	bne.n	800c04c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c02c:	f3ef 8310 	mrs	r3, PRIMASK
 800c030:	61bb      	str	r3, [r7, #24]
  return(result);
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d105      	bne.n	800c044 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c038:	f3ef 8311 	mrs	r3, BASEPRI
 800c03c:	617b      	str	r3, [r7, #20]
  return(result);
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d02c      	beq.n	800c09e <osMessageQueuePut+0x96>
 800c044:	4b28      	ldr	r3, [pc, #160]	; (800c0e8 <osMessageQueuePut+0xe0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d128      	bne.n	800c09e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <osMessageQueuePut+0x56>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <osMessageQueuePut+0x56>
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800c05e:	f06f 0303 	mvn.w	r3, #3
 800c062:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c064:	e039      	b.n	800c0da <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800c066:	2300      	movs	r3, #0
 800c068:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c06a:	f107 0210 	add.w	r2, r7, #16
 800c06e:	2300      	movs	r3, #0
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	6a38      	ldr	r0, [r7, #32]
 800c074:	f000 fbce 	bl	800c814 <xQueueGenericSendFromISR>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d003      	beq.n	800c086 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800c07e:	f06f 0302 	mvn.w	r3, #2
 800c082:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c084:	e029      	b.n	800c0da <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d026      	beq.n	800c0da <osMessageQueuePut+0xd2>
 800c08c:	4b17      	ldr	r3, [pc, #92]	; (800c0ec <osMessageQueuePut+0xe4>)
 800c08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c09c:	e01d      	b.n	800c0da <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <osMessageQueuePut+0xa2>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d103      	bne.n	800c0b2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800c0aa:	f06f 0303 	mvn.w	r3, #3
 800c0ae:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b0:	e014      	b.n	800c0dc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	6a38      	ldr	r0, [r7, #32]
 800c0ba:	f000 fab1 	bl	800c620 <xQueueGenericSend>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d00b      	beq.n	800c0dc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800c0ca:	f06f 0301 	mvn.w	r3, #1
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c0d0:	e004      	b.n	800c0dc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800c0d2:	f06f 0302 	mvn.w	r3, #2
 800c0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c0d8:	e000      	b.n	800c0dc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3728      	adds	r7, #40	; 0x28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	200000fc 	.word	0x200000fc
 800c0ec:	e000ed04 	.word	0xe000ed04

0800c0f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08a      	sub	sp, #40	; 0x28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c102:	2300      	movs	r3, #0
 800c104:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c106:	f3ef 8305 	mrs	r3, IPSR
 800c10a:	61fb      	str	r3, [r7, #28]
  return(result);
 800c10c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10f      	bne.n	800c132 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c112:	f3ef 8310 	mrs	r3, PRIMASK
 800c116:	61bb      	str	r3, [r7, #24]
  return(result);
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d105      	bne.n	800c12a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c11e:	f3ef 8311 	mrs	r3, BASEPRI
 800c122:	617b      	str	r3, [r7, #20]
  return(result);
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d02c      	beq.n	800c184 <osMessageQueueGet+0x94>
 800c12a:	4b28      	ldr	r3, [pc, #160]	; (800c1cc <osMessageQueueGet+0xdc>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d128      	bne.n	800c184 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d005      	beq.n	800c144 <osMessageQueueGet+0x54>
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d002      	beq.n	800c144 <osMessageQueueGet+0x54>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d003      	beq.n	800c14c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800c144:	f06f 0303 	mvn.w	r3, #3
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c14a:	e038      	b.n	800c1be <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c150:	f107 0310 	add.w	r3, r7, #16
 800c154:	461a      	mov	r2, r3
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	6a38      	ldr	r0, [r7, #32]
 800c15a:	f000 fccb 	bl	800caf4 <xQueueReceiveFromISR>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b01      	cmp	r3, #1
 800c162:	d003      	beq.n	800c16c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800c164:	f06f 0302 	mvn.w	r3, #2
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c16a:	e028      	b.n	800c1be <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d025      	beq.n	800c1be <osMessageQueueGet+0xce>
 800c172:	4b17      	ldr	r3, [pc, #92]	; (800c1d0 <osMessageQueueGet+0xe0>)
 800c174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c182:	e01c      	b.n	800c1be <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <osMessageQueueGet+0xa0>
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d103      	bne.n	800c198 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800c190:	f06f 0303 	mvn.w	r3, #3
 800c194:	627b      	str	r3, [r7, #36]	; 0x24
 800c196:	e013      	b.n	800c1c0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	68b9      	ldr	r1, [r7, #8]
 800c19c:	6a38      	ldr	r0, [r7, #32]
 800c19e:	f000 fbcd 	bl	800c93c <xQueueReceive>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d00b      	beq.n	800c1c0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800c1ae:	f06f 0301 	mvn.w	r3, #1
 800c1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c1b4:	e004      	b.n	800c1c0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800c1b6:	f06f 0302 	mvn.w	r3, #2
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c1bc:	e000      	b.n	800c1c0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c1be:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3728      	adds	r7, #40	; 0x28
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	200000fc 	.word	0x200000fc
 800c1d0:	e000ed04 	.word	0xe000ed04

0800c1d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c1d4:	b480      	push	{r7}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4a07      	ldr	r2, [pc, #28]	; (800c200 <vApplicationGetIdleTaskMemory+0x2c>)
 800c1e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	4a06      	ldr	r2, [pc, #24]	; (800c204 <vApplicationGetIdleTaskMemory+0x30>)
 800c1ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2280      	movs	r2, #128	; 0x80
 800c1f0:	601a      	str	r2, [r3, #0]
}
 800c1f2:	bf00      	nop
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	20000100 	.word	0x20000100
 800c204:	2000015c 	.word	0x2000015c

0800c208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4a07      	ldr	r2, [pc, #28]	; (800c234 <vApplicationGetTimerTaskMemory+0x2c>)
 800c218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	4a06      	ldr	r2, [pc, #24]	; (800c238 <vApplicationGetTimerTaskMemory+0x30>)
 800c21e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c226:	601a      	str	r2, [r3, #0]
}
 800c228:	bf00      	nop
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	2000035c 	.word	0x2000035c
 800c238:	200003b8 	.word	0x200003b8

0800c23c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f103 0208 	add.w	r2, r3, #8
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f04f 32ff 	mov.w	r2, #4294967295
 800c254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f103 0208 	add.w	r2, r3, #8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f103 0208 	add.w	r2, r3, #8
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c28a:	bf00      	nop
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c296:	b480      	push	{r7}
 800c298:	b085      	sub	sp, #20
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	601a      	str	r2, [r3, #0]
}
 800c2d2:	bf00      	nop
 800c2d4:	3714      	adds	r7, #20
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b085      	sub	sp, #20
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f4:	d103      	bne.n	800c2fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	e00c      	b.n	800c318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3308      	adds	r3, #8
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	e002      	b.n	800c30c <vListInsert+0x2e>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	429a      	cmp	r2, r3
 800c316:	d2f6      	bcs.n	800c306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	683a      	ldr	r2, [r7, #0]
 800c332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6892      	ldr	r2, [r2, #8]
 800c366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	6852      	ldr	r2, [r2, #4]
 800c370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d103      	bne.n	800c384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	1e5a      	subs	r2, r3, #1
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d109      	bne.n	800c3cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	60bb      	str	r3, [r7, #8]
 800c3ca:	e7fe      	b.n	800c3ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800c3cc:	f002 f8ce 	bl	800e56c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	68f9      	ldr	r1, [r7, #12]
 800c3da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3dc:	fb01 f303 	mul.w	r3, r1, r3
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	68f9      	ldr	r1, [r7, #12]
 800c400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c402:	fb01 f303 	mul.w	r3, r1, r3
 800c406:	441a      	add	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	22ff      	movs	r2, #255	; 0xff
 800c410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	22ff      	movs	r2, #255	; 0xff
 800c418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d114      	bne.n	800c44c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01a      	beq.n	800c460 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3310      	adds	r3, #16
 800c42e:	4618      	mov	r0, r3
 800c430:	f001 f99c 	bl	800d76c <xTaskRemoveFromEventList>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d012      	beq.n	800c460 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c43a:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <xQueueGenericReset+0xcc>)
 800c43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	e009      	b.n	800c460 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3310      	adds	r3, #16
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff fef3 	bl	800c23c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3324      	adds	r3, #36	; 0x24
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff feee 	bl	800c23c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c460:	f002 f8b2 	bl	800e5c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c464:	2301      	movs	r3, #1
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08e      	sub	sp, #56	; 0x38
 800c478:	af02      	add	r7, sp, #8
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <xQueueGenericCreateStatic+0x28>
 800c488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48c:	f383 8811 	msr	BASEPRI, r3
 800c490:	f3bf 8f6f 	isb	sy
 800c494:	f3bf 8f4f 	dsb	sy
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
 800c49a:	e7fe      	b.n	800c49a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d109      	bne.n	800c4b6 <xQueueGenericCreateStatic+0x42>
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c4b4:	e7fe      	b.n	800c4b4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <xQueueGenericCreateStatic+0x4e>
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <xQueueGenericCreateStatic+0x52>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e000      	b.n	800c4c8 <xQueueGenericCreateStatic+0x54>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d109      	bne.n	800c4e0 <xQueueGenericCreateStatic+0x6c>
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	623b      	str	r3, [r7, #32]
 800c4de:	e7fe      	b.n	800c4de <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <xQueueGenericCreateStatic+0x78>
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <xQueueGenericCreateStatic+0x7c>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e000      	b.n	800c4f2 <xQueueGenericCreateStatic+0x7e>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <xQueueGenericCreateStatic+0x96>
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61fb      	str	r3, [r7, #28]
 800c508:	e7fe      	b.n	800c508 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c50a:	2350      	movs	r3, #80	; 0x50
 800c50c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b50      	cmp	r3, #80	; 0x50
 800c512:	d009      	beq.n	800c528 <xQueueGenericCreateStatic+0xb4>
 800c514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c518:	f383 8811 	msr	BASEPRI, r3
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	e7fe      	b.n	800c526 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c528:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00d      	beq.n	800c550 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c53c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	4613      	mov	r3, r2
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	68b9      	ldr	r1, [r7, #8]
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f000 f844 	bl	800c5d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c552:	4618      	mov	r0, r3
 800c554:	3730      	adds	r7, #48	; 0x30
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b08a      	sub	sp, #40	; 0x28
 800c55e:	af02      	add	r7, sp, #8
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	4613      	mov	r3, r2
 800c566:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d109      	bne.n	800c582 <xQueueGenericCreate+0x28>
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	613b      	str	r3, [r7, #16]
 800c580:	e7fe      	b.n	800c580 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	e004      	b.n	800c598 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	fb02 f303 	mul.w	r3, r2, r3
 800c596:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	3350      	adds	r3, #80	; 0x50
 800c59c:	4618      	mov	r0, r3
 800c59e:	f002 f8ff 	bl	800e7a0 <pvPortMalloc>
 800c5a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d011      	beq.n	800c5ce <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	3350      	adds	r3, #80	; 0x50
 800c5b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5bc:	79fa      	ldrb	r2, [r7, #7]
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 f805 	bl	800c5d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
	}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3720      	adds	r7, #32
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
 800c5e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d103      	bne.n	800c5f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	69ba      	ldr	r2, [r7, #24]
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	e002      	b.n	800c5fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c606:	2101      	movs	r1, #1
 800c608:	69b8      	ldr	r0, [r7, #24]
 800c60a:	f7ff fecb 	bl	800c3a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c616:	bf00      	nop
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08e      	sub	sp, #56	; 0x38
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c62e:	2300      	movs	r3, #0
 800c630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d109      	bne.n	800c650 <xQueueGenericSend+0x30>
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c64e:	e7fe      	b.n	800c64e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <xQueueGenericSend+0x3e>
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <xQueueGenericSend+0x42>
 800c65e:	2301      	movs	r3, #1
 800c660:	e000      	b.n	800c664 <xQueueGenericSend+0x44>
 800c662:	2300      	movs	r3, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d109      	bne.n	800c67c <xQueueGenericSend+0x5c>
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
 800c67a:	e7fe      	b.n	800c67a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d103      	bne.n	800c68a <xQueueGenericSend+0x6a>
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <xQueueGenericSend+0x6e>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <xQueueGenericSend+0x70>
 800c68e:	2300      	movs	r3, #0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d109      	bne.n	800c6a8 <xQueueGenericSend+0x88>
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	623b      	str	r3, [r7, #32]
 800c6a6:	e7fe      	b.n	800c6a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6a8:	f001 fa16 	bl	800dad8 <xTaskGetSchedulerState>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d102      	bne.n	800c6b8 <xQueueGenericSend+0x98>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <xQueueGenericSend+0x9c>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e000      	b.n	800c6be <xQueueGenericSend+0x9e>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d109      	bne.n	800c6d6 <xQueueGenericSend+0xb6>
 800c6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	61fb      	str	r3, [r7, #28]
 800c6d4:	e7fe      	b.n	800c6d4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6d6:	f001 ff49 	bl	800e56c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d302      	bcc.n	800c6ec <xQueueGenericSend+0xcc>
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d129      	bne.n	800c740 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6f2:	f000 fa7c 	bl	800cbee <prvCopyDataToQueue>
 800c6f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d010      	beq.n	800c722 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	3324      	adds	r3, #36	; 0x24
 800c704:	4618      	mov	r0, r3
 800c706:	f001 f831 	bl	800d76c <xTaskRemoveFromEventList>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d013      	beq.n	800c738 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c710:	4b3f      	ldr	r3, [pc, #252]	; (800c810 <xQueueGenericSend+0x1f0>)
 800c712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	e00a      	b.n	800c738 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d007      	beq.n	800c738 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c728:	4b39      	ldr	r3, [pc, #228]	; (800c810 <xQueueGenericSend+0x1f0>)
 800c72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c738:	f001 ff46 	bl	800e5c8 <vPortExitCritical>
				return pdPASS;
 800c73c:	2301      	movs	r3, #1
 800c73e:	e063      	b.n	800c808 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d103      	bne.n	800c74e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c746:	f001 ff3f 	bl	800e5c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	e05c      	b.n	800c808 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c750:	2b00      	cmp	r3, #0
 800c752:	d106      	bne.n	800c762 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c754:	f107 0314 	add.w	r3, r7, #20
 800c758:	4618      	mov	r0, r3
 800c75a:	f001 f869 	bl	800d830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c75e:	2301      	movs	r3, #1
 800c760:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c762:	f001 ff31 	bl	800e5c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c766:	f000 fde5 	bl	800d334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c76a:	f001 feff 	bl	800e56c <vPortEnterCritical>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c774:	b25b      	sxtb	r3, r3
 800c776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77a:	d103      	bne.n	800c784 <xQueueGenericSend+0x164>
 800c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c78a:	b25b      	sxtb	r3, r3
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c790:	d103      	bne.n	800c79a <xQueueGenericSend+0x17a>
 800c792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c79a:	f001 ff15 	bl	800e5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c79e:	1d3a      	adds	r2, r7, #4
 800c7a0:	f107 0314 	add.w	r3, r7, #20
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 f858 	bl	800d85c <xTaskCheckForTimeOut>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d124      	bne.n	800c7fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c7b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7b4:	f000 fb13 	bl	800cdde <prvIsQueueFull>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d018      	beq.n	800c7f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	3310      	adds	r3, #16
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 ff82 	bl	800d6d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7ce:	f000 fa9e 	bl	800cd0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c7d2:	f000 fdbd 	bl	800d350 <xTaskResumeAll>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f47f af7c 	bne.w	800c6d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c7de:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <xQueueGenericSend+0x1f0>)
 800c7e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7e4:	601a      	str	r2, [r3, #0]
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	e772      	b.n	800c6d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7f2:	f000 fa8c 	bl	800cd0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7f6:	f000 fdab 	bl	800d350 <xTaskResumeAll>
 800c7fa:	e76c      	b.n	800c6d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c7fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7fe:	f000 fa86 	bl	800cd0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c802:	f000 fda5 	bl	800d350 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c806:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3738      	adds	r7, #56	; 0x38
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	e000ed04 	.word	0xe000ed04

0800c814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08e      	sub	sp, #56	; 0x38
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d109      	bne.n	800c840 <xQueueGenericSendFromISR+0x2c>
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
 800c83e:	e7fe      	b.n	800c83e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d103      	bne.n	800c84e <xQueueGenericSendFromISR+0x3a>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d101      	bne.n	800c852 <xQueueGenericSendFromISR+0x3e>
 800c84e:	2301      	movs	r3, #1
 800c850:	e000      	b.n	800c854 <xQueueGenericSendFromISR+0x40>
 800c852:	2300      	movs	r3, #0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d109      	bne.n	800c86c <xQueueGenericSendFromISR+0x58>
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	623b      	str	r3, [r7, #32]
 800c86a:	e7fe      	b.n	800c86a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d103      	bne.n	800c87a <xQueueGenericSendFromISR+0x66>
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c876:	2b01      	cmp	r3, #1
 800c878:	d101      	bne.n	800c87e <xQueueGenericSendFromISR+0x6a>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e000      	b.n	800c880 <xQueueGenericSendFromISR+0x6c>
 800c87e:	2300      	movs	r3, #0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d109      	bne.n	800c898 <xQueueGenericSendFromISR+0x84>
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	e7fe      	b.n	800c896 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c898:	f001 ff44 	bl	800e724 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c89c:	f3ef 8211 	mrs	r2, BASEPRI
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	61ba      	str	r2, [r7, #24]
 800c8b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c8b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d302      	bcc.n	800c8ca <xQueueGenericSendFromISR+0xb6>
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d12c      	bne.n	800c924 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8da:	f000 f988 	bl	800cbee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e6:	d112      	bne.n	800c90e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d016      	beq.n	800c91e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f2:	3324      	adds	r3, #36	; 0x24
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 ff39 	bl	800d76c <xTaskRemoveFromEventList>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00e      	beq.n	800c91e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00b      	beq.n	800c91e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	e007      	b.n	800c91e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c90e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c912:	3301      	adds	r3, #1
 800c914:	b2db      	uxtb	r3, r3
 800c916:	b25a      	sxtb	r2, r3
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c91e:	2301      	movs	r3, #1
 800c920:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c922:	e001      	b.n	800c928 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c924:	2300      	movs	r3, #0
 800c926:	637b      	str	r3, [r7, #52]	; 0x34
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c934:	4618      	mov	r0, r3
 800c936:	3738      	adds	r7, #56	; 0x38
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08c      	sub	sp, #48	; 0x30
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c948:	2300      	movs	r3, #0
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b00      	cmp	r3, #0
 800c954:	d109      	bne.n	800c96a <xQueueReceive+0x2e>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	623b      	str	r3, [r7, #32]
 800c968:	e7fe      	b.n	800c968 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d103      	bne.n	800c978 <xQueueReceive+0x3c>
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <xQueueReceive+0x40>
 800c978:	2301      	movs	r3, #1
 800c97a:	e000      	b.n	800c97e <xQueueReceive+0x42>
 800c97c:	2300      	movs	r3, #0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <xQueueReceive+0x5a>
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	61fb      	str	r3, [r7, #28]
 800c994:	e7fe      	b.n	800c994 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c996:	f001 f89f 	bl	800dad8 <xTaskGetSchedulerState>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <xQueueReceive+0x6a>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <xQueueReceive+0x6e>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e000      	b.n	800c9ac <xQueueReceive+0x70>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d109      	bne.n	800c9c4 <xQueueReceive+0x88>
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	61bb      	str	r3, [r7, #24]
 800c9c2:	e7fe      	b.n	800c9c2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9c4:	f001 fdd2 	bl	800e56c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d01f      	beq.n	800ca14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9d4:	68b9      	ldr	r1, [r7, #8]
 800c9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d8:	f000 f973 	bl	800ccc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	1e5a      	subs	r2, r3, #1
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00f      	beq.n	800ca0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	3310      	adds	r3, #16
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 febb 	bl	800d76c <xTaskRemoveFromEventList>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d007      	beq.n	800ca0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9fc:	4b3c      	ldr	r3, [pc, #240]	; (800caf0 <xQueueReceive+0x1b4>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca0c:	f001 fddc 	bl	800e5c8 <vPortExitCritical>
				return pdPASS;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e069      	b.n	800cae8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d103      	bne.n	800ca22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca1a:	f001 fdd5 	bl	800e5c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e062      	b.n	800cae8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d106      	bne.n	800ca36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca28:	f107 0310 	add.w	r3, r7, #16
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 feff 	bl	800d830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca32:	2301      	movs	r3, #1
 800ca34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca36:	f001 fdc7 	bl	800e5c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca3a:	f000 fc7b 	bl	800d334 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca3e:	f001 fd95 	bl	800e56c <vPortEnterCritical>
 800ca42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca48:	b25b      	sxtb	r3, r3
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d103      	bne.n	800ca58 <xQueueReceive+0x11c>
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca5e:	b25b      	sxtb	r3, r3
 800ca60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca64:	d103      	bne.n	800ca6e <xQueueReceive+0x132>
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca6e:	f001 fdab 	bl	800e5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca72:	1d3a      	adds	r2, r7, #4
 800ca74:	f107 0310 	add.w	r3, r7, #16
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f000 feee 	bl	800d85c <xTaskCheckForTimeOut>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d123      	bne.n	800cace <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca88:	f000 f993 	bl	800cdb2 <prvIsQueueEmpty>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d017      	beq.n	800cac2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca94:	3324      	adds	r3, #36	; 0x24
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	4611      	mov	r1, r2
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fe18 	bl	800d6d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800caa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa2:	f000 f934 	bl	800cd0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800caa6:	f000 fc53 	bl	800d350 <xTaskResumeAll>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d189      	bne.n	800c9c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800cab0:	4b0f      	ldr	r3, [pc, #60]	; (800caf0 <xQueueReceive+0x1b4>)
 800cab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	e780      	b.n	800c9c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac4:	f000 f923 	bl	800cd0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cac8:	f000 fc42 	bl	800d350 <xTaskResumeAll>
 800cacc:	e77a      	b.n	800c9c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad0:	f000 f91d 	bl	800cd0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cad4:	f000 fc3c 	bl	800d350 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cada:	f000 f96a 	bl	800cdb2 <prvIsQueueEmpty>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f43f af6f 	beq.w	800c9c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cae6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3730      	adds	r7, #48	; 0x30
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	e000ed04 	.word	0xe000ed04

0800caf4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08e      	sub	sp, #56	; 0x38
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <xQueueReceiveFromISR+0x2a>
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	623b      	str	r3, [r7, #32]
 800cb1c:	e7fe      	b.n	800cb1c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d103      	bne.n	800cb2c <xQueueReceiveFromISR+0x38>
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <xQueueReceiveFromISR+0x3c>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e000      	b.n	800cb32 <xQueueReceiveFromISR+0x3e>
 800cb30:	2300      	movs	r3, #0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d109      	bne.n	800cb4a <xQueueReceiveFromISR+0x56>
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	e7fe      	b.n	800cb48 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb4a:	f001 fdeb 	bl	800e724 <vPortValidateInterruptPriority>
	__asm volatile
 800cb4e:	f3ef 8211 	mrs	r2, BASEPRI
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	61ba      	str	r2, [r7, #24]
 800cb64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cb66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d02f      	beq.n	800cbd6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb84:	f000 f89d 	bl	800ccc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	1e5a      	subs	r2, r3, #1
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cb90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb98:	d112      	bne.n	800cbc0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d016      	beq.n	800cbd0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	3310      	adds	r3, #16
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 fde0 	bl	800d76c <xTaskRemoveFromEventList>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00e      	beq.n	800cbd0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	e007      	b.n	800cbd0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	b25a      	sxtb	r2, r3
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
 800cbd4:	e001      	b.n	800cbda <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3738      	adds	r7, #56	; 0x38
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b086      	sub	sp, #24
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10d      	bne.n	800cc28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d14d      	bne.n	800ccb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 ff7b 	bl	800db14 <xTaskPriorityDisinherit>
 800cc1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	609a      	str	r2, [r3, #8]
 800cc26:	e043      	b.n	800ccb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d119      	bne.n	800cc62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6858      	ldr	r0, [r3, #4]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	461a      	mov	r2, r3
 800cc38:	68b9      	ldr	r1, [r7, #8]
 800cc3a:	f002 fac3 	bl	800f1c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc46:	441a      	add	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d32b      	bcc.n	800ccb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	605a      	str	r2, [r3, #4]
 800cc60:	e026      	b.n	800ccb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68d8      	ldr	r0, [r3, #12]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	f002 faa9 	bl	800f1c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	68da      	ldr	r2, [r3, #12]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7a:	425b      	negs	r3, r3
 800cc7c:	441a      	add	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	68da      	ldr	r2, [r3, #12]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d207      	bcs.n	800cc9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	689a      	ldr	r2, [r3, #8]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc96:	425b      	negs	r3, r3
 800cc98:	441a      	add	r2, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d105      	bne.n	800ccb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ccb8:	697b      	ldr	r3, [r7, #20]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d018      	beq.n	800cd06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccdc:	441a      	add	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	689b      	ldr	r3, [r3, #8]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d303      	bcc.n	800ccf6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68d9      	ldr	r1, [r3, #12]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6838      	ldr	r0, [r7, #0]
 800cd02:	f002 fa5f 	bl	800f1c4 <memcpy>
	}
}
 800cd06:	bf00      	nop
 800cd08:	3708      	adds	r7, #8
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b084      	sub	sp, #16
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd16:	f001 fc29 	bl	800e56c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd22:	e011      	b.n	800cd48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d012      	beq.n	800cd52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3324      	adds	r3, #36	; 0x24
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 fd1b 	bl	800d76c <xTaskRemoveFromEventList>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd3c:	f000 fdee 	bl	800d91c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dce9      	bgt.n	800cd24 <prvUnlockQueue+0x16>
 800cd50:	e000      	b.n	800cd54 <prvUnlockQueue+0x46>
					break;
 800cd52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	22ff      	movs	r2, #255	; 0xff
 800cd58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cd5c:	f001 fc34 	bl	800e5c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd60:	f001 fc04 	bl	800e56c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd6c:	e011      	b.n	800cd92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d012      	beq.n	800cd9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3310      	adds	r3, #16
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 fcf6 	bl	800d76c <xTaskRemoveFromEventList>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd86:	f000 fdc9 	bl	800d91c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	dce9      	bgt.n	800cd6e <prvUnlockQueue+0x60>
 800cd9a:	e000      	b.n	800cd9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	22ff      	movs	r2, #255	; 0xff
 800cda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cda6:	f001 fc0f 	bl	800e5c8 <vPortExitCritical>
}
 800cdaa:	bf00      	nop
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdba:	f001 fbd7 	bl	800e56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d102      	bne.n	800cdcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	e001      	b.n	800cdd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdd0:	f001 fbfa 	bl	800e5c8 <vPortExitCritical>

	return xReturn;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cde6:	f001 fbc1 	bl	800e56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d102      	bne.n	800cdfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	e001      	b.n	800ce00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce00:	f001 fbe2 	bl	800e5c8 <vPortExitCritical>

	return xReturn;
 800ce04:	68fb      	ldr	r3, [r7, #12]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
	...

0800ce10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	e014      	b.n	800ce4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce20:	4a0e      	ldr	r2, [pc, #56]	; (800ce5c <vQueueAddToRegistry+0x4c>)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10b      	bne.n	800ce44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce2c:	490b      	ldr	r1, [pc, #44]	; (800ce5c <vQueueAddToRegistry+0x4c>)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	683a      	ldr	r2, [r7, #0]
 800ce32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce36:	4a09      	ldr	r2, [pc, #36]	; (800ce5c <vQueueAddToRegistry+0x4c>)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	4413      	add	r3, r2
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce42:	e005      	b.n	800ce50 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3301      	adds	r3, #1
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b07      	cmp	r3, #7
 800ce4e:	d9e7      	bls.n	800ce20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce50:	bf00      	nop
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	20004e14 	.word	0x20004e14

0800ce60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce70:	f001 fb7c 	bl	800e56c <vPortEnterCritical>
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce7a:	b25b      	sxtb	r3, r3
 800ce7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce80:	d103      	bne.n	800ce8a <vQueueWaitForMessageRestricted+0x2a>
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce90:	b25b      	sxtb	r3, r3
 800ce92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce96:	d103      	bne.n	800cea0 <vQueueWaitForMessageRestricted+0x40>
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cea0:	f001 fb92 	bl	800e5c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d106      	bne.n	800ceba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	3324      	adds	r3, #36	; 0x24
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f000 fc2f 	bl	800d718 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceba:	6978      	ldr	r0, [r7, #20]
 800cebc:	f7ff ff27 	bl	800cd0e <prvUnlockQueue>
	}
 800cec0:	bf00      	nop
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08e      	sub	sp, #56	; 0x38
 800cecc:	af04      	add	r7, sp, #16
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d109      	bne.n	800cef0 <xTaskCreateStatic+0x28>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	623b      	str	r3, [r7, #32]
 800ceee:	e7fe      	b.n	800ceee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <xTaskCreateStatic+0x42>
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	61fb      	str	r3, [r7, #28]
 800cf08:	e7fe      	b.n	800cf08 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf0a:	235c      	movs	r3, #92	; 0x5c
 800cf0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	2b5c      	cmp	r3, #92	; 0x5c
 800cf12:	d009      	beq.n	800cf28 <xTaskCreateStatic+0x60>
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	61bb      	str	r3, [r7, #24]
 800cf26:	e7fe      	b.n	800cf26 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01e      	beq.n	800cf6e <xTaskCreateStatic+0xa6>
 800cf30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d01b      	beq.n	800cf6e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	2202      	movs	r2, #2
 800cf44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9303      	str	r3, [sp, #12]
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	9302      	str	r3, [sp, #8]
 800cf50:	f107 0314 	add.w	r3, r7, #20
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f000 f850 	bl	800d006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf68:	f000 f8dc 	bl	800d124 <prvAddNewTaskToReadyList>
 800cf6c:	e001      	b.n	800cf72 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf72:	697b      	ldr	r3, [r7, #20]
	}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3728      	adds	r7, #40	; 0x28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08c      	sub	sp, #48	; 0x30
 800cf80:	af04      	add	r7, sp, #16
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf8c:	88fb      	ldrh	r3, [r7, #6]
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4618      	mov	r0, r3
 800cf92:	f001 fc05 	bl	800e7a0 <pvPortMalloc>
 800cf96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00e      	beq.n	800cfbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf9e:	205c      	movs	r0, #92	; 0x5c
 800cfa0:	f001 fbfe 	bl	800e7a0 <pvPortMalloc>
 800cfa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	631a      	str	r2, [r3, #48]	; 0x30
 800cfb2:	e005      	b.n	800cfc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfb4:	6978      	ldr	r0, [r7, #20]
 800cfb6:	f001 fcb5 	bl	800e924 <vPortFree>
 800cfba:	e001      	b.n	800cfc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d017      	beq.n	800cff6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfce:	88fa      	ldrh	r2, [r7, #6]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	9303      	str	r3, [sp, #12]
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	9302      	str	r3, [sp, #8]
 800cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 f80e 	bl	800d006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfea:	69f8      	ldr	r0, [r7, #28]
 800cfec:	f000 f89a 	bl	800d124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cff0:	2301      	movs	r3, #1
 800cff2:	61bb      	str	r3, [r7, #24]
 800cff4:	e002      	b.n	800cffc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cff6:	f04f 33ff 	mov.w	r3, #4294967295
 800cffa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cffc:	69bb      	ldr	r3, [r7, #24]
	}
 800cffe:	4618      	mov	r0, r3
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b088      	sub	sp, #32
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d016:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	461a      	mov	r2, r3
 800d01e:	21a5      	movs	r1, #165	; 0xa5
 800d020:	f002 f8db 	bl	800f1da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d02e:	3b01      	subs	r3, #1
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	f023 0307 	bic.w	r3, r3, #7
 800d03c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	f003 0307 	and.w	r3, r3, #7
 800d044:	2b00      	cmp	r3, #0
 800d046:	d009      	beq.n	800d05c <prvInitialiseNewTask+0x56>
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	e7fe      	b.n	800d05a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d01f      	beq.n	800d0a2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d062:	2300      	movs	r3, #0
 800d064:	61fb      	str	r3, [r7, #28]
 800d066:	e012      	b.n	800d08e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	4413      	add	r3, r2
 800d06e:	7819      	ldrb	r1, [r3, #0]
 800d070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	4413      	add	r3, r2
 800d076:	3334      	adds	r3, #52	; 0x34
 800d078:	460a      	mov	r2, r1
 800d07a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	4413      	add	r3, r2
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d006      	beq.n	800d096 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	3301      	adds	r3, #1
 800d08c:	61fb      	str	r3, [r7, #28]
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	2b0f      	cmp	r3, #15
 800d092:	d9e9      	bls.n	800d068 <prvInitialiseNewTask+0x62>
 800d094:	e000      	b.n	800d098 <prvInitialiseNewTask+0x92>
			{
				break;
 800d096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0a0:	e003      	b.n	800d0aa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	2b37      	cmp	r3, #55	; 0x37
 800d0ae:	d901      	bls.n	800d0b4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0b0:	2337      	movs	r3, #55	; 0x37
 800d0b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	3304      	adds	r3, #4
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff f8d6 	bl	800c27c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	3318      	adds	r3, #24
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff f8d1 	bl	800c27c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	69b8      	ldr	r0, [r7, #24]
 800d104:	f001 f90c 	bl	800e320 <pxPortInitialiseStack>
 800d108:	4602      	mov	r2, r0
 800d10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d11a:	bf00      	nop
 800d11c:	3720      	adds	r7, #32
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
	...

0800d124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d12c:	f001 fa1e 	bl	800e56c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d130:	4b2d      	ldr	r3, [pc, #180]	; (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	4a2c      	ldr	r2, [pc, #176]	; (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d13a:	4b2c      	ldr	r3, [pc, #176]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d142:	4a2a      	ldr	r2, [pc, #168]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d148:	4b27      	ldr	r3, [pc, #156]	; (800d1e8 <prvAddNewTaskToReadyList+0xc4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d110      	bne.n	800d172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d150:	f000 fc08 	bl	800d964 <prvInitialiseTaskLists>
 800d154:	e00d      	b.n	800d172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d156:	4b26      	ldr	r3, [pc, #152]	; (800d1f0 <prvAddNewTaskToReadyList+0xcc>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d109      	bne.n	800d172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d15e:	4b23      	ldr	r3, [pc, #140]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d168:	429a      	cmp	r2, r3
 800d16a:	d802      	bhi.n	800d172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d16c:	4a1f      	ldr	r2, [pc, #124]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d172:	4b20      	ldr	r3, [pc, #128]	; (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3301      	adds	r3, #1
 800d178:	4a1e      	ldr	r2, [pc, #120]	; (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d17a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d17c:	4b1d      	ldr	r3, [pc, #116]	; (800d1f4 <prvAddNewTaskToReadyList+0xd0>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d188:	4b1b      	ldr	r3, [pc, #108]	; (800d1f8 <prvAddNewTaskToReadyList+0xd4>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d903      	bls.n	800d198 <prvAddNewTaskToReadyList+0x74>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d194:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <prvAddNewTaskToReadyList+0xd4>)
 800d196:	6013      	str	r3, [r2, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4a15      	ldr	r2, [pc, #84]	; (800d1fc <prvAddNewTaskToReadyList+0xd8>)
 800d1a6:	441a      	add	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f7ff f871 	bl	800c296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1b4:	f001 fa08 	bl	800e5c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1b8:	4b0d      	ldr	r3, [pc, #52]	; (800d1f0 <prvAddNewTaskToReadyList+0xcc>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <prvAddNewTaskToReadyList+0xc8>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d207      	bcs.n	800d1de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	; (800d200 <prvAddNewTaskToReadyList+0xdc>)
 800d1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20000c8c 	.word	0x20000c8c
 800d1ec:	200007b8 	.word	0x200007b8
 800d1f0:	20000c98 	.word	0x20000c98
 800d1f4:	20000ca8 	.word	0x20000ca8
 800d1f8:	20000c94 	.word	0x20000c94
 800d1fc:	200007bc 	.word	0x200007bc
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d016      	beq.n	800d244 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d216:	4b13      	ldr	r3, [pc, #76]	; (800d264 <vTaskDelay+0x60>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d009      	beq.n	800d232 <vTaskDelay+0x2e>
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	60bb      	str	r3, [r7, #8]
 800d230:	e7fe      	b.n	800d230 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d232:	f000 f87f 	bl	800d334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d236:	2100      	movs	r1, #0
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fcd7 	bl	800dbec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d23e:	f000 f887 	bl	800d350 <xTaskResumeAll>
 800d242:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d107      	bne.n	800d25a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d24a:	4b07      	ldr	r3, [pc, #28]	; (800d268 <vTaskDelay+0x64>)
 800d24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d250:	601a      	str	r2, [r3, #0]
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d25a:	bf00      	nop
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20000cb4 	.word	0x20000cb4
 800d268:	e000ed04 	.word	0xe000ed04

0800d26c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08a      	sub	sp, #40	; 0x28
 800d270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d276:	2300      	movs	r3, #0
 800d278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d27a:	463a      	mov	r2, r7
 800d27c:	1d39      	adds	r1, r7, #4
 800d27e:	f107 0308 	add.w	r3, r7, #8
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe ffa6 	bl	800c1d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	9202      	str	r2, [sp, #8]
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	2300      	movs	r3, #0
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	2300      	movs	r3, #0
 800d298:	460a      	mov	r2, r1
 800d29a:	4920      	ldr	r1, [pc, #128]	; (800d31c <vTaskStartScheduler+0xb0>)
 800d29c:	4820      	ldr	r0, [pc, #128]	; (800d320 <vTaskStartScheduler+0xb4>)
 800d29e:	f7ff fe13 	bl	800cec8 <xTaskCreateStatic>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	4b1f      	ldr	r3, [pc, #124]	; (800d324 <vTaskStartScheduler+0xb8>)
 800d2a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2a8:	4b1e      	ldr	r3, [pc, #120]	; (800d324 <vTaskStartScheduler+0xb8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	e001      	b.n	800d2ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d102      	bne.n	800d2c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2c0:	f000 fce8 	bl	800dc94 <xTimerCreateTimerTask>
 800d2c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d115      	bne.n	800d2f8 <vTaskStartScheduler+0x8c>
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2de:	4b12      	ldr	r3, [pc, #72]	; (800d328 <vTaskStartScheduler+0xbc>)
 800d2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <vTaskStartScheduler+0xc0>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2ec:	4b10      	ldr	r3, [pc, #64]	; (800d330 <vTaskStartScheduler+0xc4>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2f2:	f001 f89d 	bl	800e430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2f6:	e00d      	b.n	800d314 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fe:	d109      	bne.n	800d314 <vTaskStartScheduler+0xa8>
 800d300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d304:	f383 8811 	msr	BASEPRI, r3
 800d308:	f3bf 8f6f 	isb	sy
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	60fb      	str	r3, [r7, #12]
 800d312:	e7fe      	b.n	800d312 <vTaskStartScheduler+0xa6>
}
 800d314:	bf00      	nop
 800d316:	3718      	adds	r7, #24
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	0800f39c 	.word	0x0800f39c
 800d320:	0800d935 	.word	0x0800d935
 800d324:	20000cb0 	.word	0x20000cb0
 800d328:	20000cac 	.word	0x20000cac
 800d32c:	20000c98 	.word	0x20000c98
 800d330:	20000c90 	.word	0x20000c90

0800d334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d334:	b480      	push	{r7}
 800d336:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d338:	4b04      	ldr	r3, [pc, #16]	; (800d34c <vTaskSuspendAll+0x18>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3301      	adds	r3, #1
 800d33e:	4a03      	ldr	r2, [pc, #12]	; (800d34c <vTaskSuspendAll+0x18>)
 800d340:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d342:	bf00      	nop
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	20000cb4 	.word	0x20000cb4

0800d350 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d35e:	4b41      	ldr	r3, [pc, #260]	; (800d464 <xTaskResumeAll+0x114>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d109      	bne.n	800d37a <xTaskResumeAll+0x2a>
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	e7fe      	b.n	800d378 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d37a:	f001 f8f7 	bl	800e56c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d37e:	4b39      	ldr	r3, [pc, #228]	; (800d464 <xTaskResumeAll+0x114>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3b01      	subs	r3, #1
 800d384:	4a37      	ldr	r2, [pc, #220]	; (800d464 <xTaskResumeAll+0x114>)
 800d386:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d388:	4b36      	ldr	r3, [pc, #216]	; (800d464 <xTaskResumeAll+0x114>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d162      	bne.n	800d456 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d390:	4b35      	ldr	r3, [pc, #212]	; (800d468 <xTaskResumeAll+0x118>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d05e      	beq.n	800d456 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d398:	e02f      	b.n	800d3fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39a:	4b34      	ldr	r3, [pc, #208]	; (800d46c <xTaskResumeAll+0x11c>)
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3318      	adds	r3, #24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe ffd2 	bl	800c350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fe ffcd 	bl	800c350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ba:	4b2d      	ldr	r3, [pc, #180]	; (800d470 <xTaskResumeAll+0x120>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d903      	bls.n	800d3ca <xTaskResumeAll+0x7a>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	4a2a      	ldr	r2, [pc, #168]	; (800d470 <xTaskResumeAll+0x120>)
 800d3c8:	6013      	str	r3, [r2, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	4413      	add	r3, r2
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	4a27      	ldr	r2, [pc, #156]	; (800d474 <xTaskResumeAll+0x124>)
 800d3d8:	441a      	add	r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4619      	mov	r1, r3
 800d3e0:	4610      	mov	r0, r2
 800d3e2:	f7fe ff58 	bl	800c296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ea:	4b23      	ldr	r3, [pc, #140]	; (800d478 <xTaskResumeAll+0x128>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d302      	bcc.n	800d3fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d3f4:	4b21      	ldr	r3, [pc, #132]	; (800d47c <xTaskResumeAll+0x12c>)
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3fa:	4b1c      	ldr	r3, [pc, #112]	; (800d46c <xTaskResumeAll+0x11c>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1cb      	bne.n	800d39a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d408:	f000 fb46 	bl	800da98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d40c:	4b1c      	ldr	r3, [pc, #112]	; (800d480 <xTaskResumeAll+0x130>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d010      	beq.n	800d43a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d418:	f000 f846 	bl	800d4a8 <xTaskIncrementTick>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d422:	4b16      	ldr	r3, [pc, #88]	; (800d47c <xTaskResumeAll+0x12c>)
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3b01      	subs	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1f1      	bne.n	800d418 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d434:	4b12      	ldr	r3, [pc, #72]	; (800d480 <xTaskResumeAll+0x130>)
 800d436:	2200      	movs	r2, #0
 800d438:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d43a:	4b10      	ldr	r3, [pc, #64]	; (800d47c <xTaskResumeAll+0x12c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d009      	beq.n	800d456 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d442:	2301      	movs	r3, #1
 800d444:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d446:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <xTaskResumeAll+0x134>)
 800d448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d456:	f001 f8b7 	bl	800e5c8 <vPortExitCritical>

	return xAlreadyYielded;
 800d45a:	68bb      	ldr	r3, [r7, #8]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	20000cb4 	.word	0x20000cb4
 800d468:	20000c8c 	.word	0x20000c8c
 800d46c:	20000c4c 	.word	0x20000c4c
 800d470:	20000c94 	.word	0x20000c94
 800d474:	200007bc 	.word	0x200007bc
 800d478:	200007b8 	.word	0x200007b8
 800d47c:	20000ca0 	.word	0x20000ca0
 800d480:	20000c9c 	.word	0x20000c9c
 800d484:	e000ed04 	.word	0xe000ed04

0800d488 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d48e:	4b05      	ldr	r3, [pc, #20]	; (800d4a4 <xTaskGetTickCount+0x1c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d494:	687b      	ldr	r3, [r7, #4]
}
 800d496:	4618      	mov	r0, r3
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20000c90 	.word	0x20000c90

0800d4a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4b2:	4b4e      	ldr	r3, [pc, #312]	; (800d5ec <xTaskIncrementTick+0x144>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f040 8088 	bne.w	800d5cc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4bc:	4b4c      	ldr	r3, [pc, #304]	; (800d5f0 <xTaskIncrementTick+0x148>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4c4:	4a4a      	ldr	r2, [pc, #296]	; (800d5f0 <xTaskIncrementTick+0x148>)
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d11f      	bne.n	800d510 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4d0:	4b48      	ldr	r3, [pc, #288]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d009      	beq.n	800d4ee <xTaskIncrementTick+0x46>
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	e7fe      	b.n	800d4ec <xTaskIncrementTick+0x44>
 800d4ee:	4b41      	ldr	r3, [pc, #260]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	60fb      	str	r3, [r7, #12]
 800d4f4:	4b40      	ldr	r3, [pc, #256]	; (800d5f8 <xTaskIncrementTick+0x150>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a3e      	ldr	r2, [pc, #248]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	4a3e      	ldr	r2, [pc, #248]	; (800d5f8 <xTaskIncrementTick+0x150>)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6013      	str	r3, [r2, #0]
 800d502:	4b3e      	ldr	r3, [pc, #248]	; (800d5fc <xTaskIncrementTick+0x154>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3301      	adds	r3, #1
 800d508:	4a3c      	ldr	r2, [pc, #240]	; (800d5fc <xTaskIncrementTick+0x154>)
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	f000 fac4 	bl	800da98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d510:	4b3b      	ldr	r3, [pc, #236]	; (800d600 <xTaskIncrementTick+0x158>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	429a      	cmp	r2, r3
 800d518:	d349      	bcc.n	800d5ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d51a:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d104      	bne.n	800d52e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d524:	4b36      	ldr	r3, [pc, #216]	; (800d600 <xTaskIncrementTick+0x158>)
 800d526:	f04f 32ff 	mov.w	r2, #4294967295
 800d52a:	601a      	str	r2, [r3, #0]
					break;
 800d52c:	e03f      	b.n	800d5ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52e:	4b31      	ldr	r3, [pc, #196]	; (800d5f4 <xTaskIncrementTick+0x14c>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d203      	bcs.n	800d54e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d546:	4a2e      	ldr	r2, [pc, #184]	; (800d600 <xTaskIncrementTick+0x158>)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d54c:	e02f      	b.n	800d5ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	3304      	adds	r3, #4
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fefc 	bl	800c350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	3318      	adds	r3, #24
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fef3 	bl	800c350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56e:	4b25      	ldr	r3, [pc, #148]	; (800d604 <xTaskIncrementTick+0x15c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d903      	bls.n	800d57e <xTaskIncrementTick+0xd6>
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	4a22      	ldr	r2, [pc, #136]	; (800d604 <xTaskIncrementTick+0x15c>)
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d582:	4613      	mov	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	4413      	add	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <xTaskIncrementTick+0x160>)
 800d58c:	441a      	add	r2, r3
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	3304      	adds	r3, #4
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7fe fe7e 	bl	800c296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59e:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <xTaskIncrementTick+0x164>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d3b8      	bcc.n	800d51a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ac:	e7b5      	b.n	800d51a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5ae:	4b17      	ldr	r3, [pc, #92]	; (800d60c <xTaskIncrementTick+0x164>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b4:	4914      	ldr	r1, [pc, #80]	; (800d608 <xTaskIncrementTick+0x160>)
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	440b      	add	r3, r1
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d907      	bls.n	800d5d6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	e004      	b.n	800d5d6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d5cc:	4b10      	ldr	r3, [pc, #64]	; (800d610 <xTaskIncrementTick+0x168>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <xTaskIncrementTick+0x168>)
 800d5d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xTaskIncrementTick+0x16c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d5e2:	697b      	ldr	r3, [r7, #20]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20000cb4 	.word	0x20000cb4
 800d5f0:	20000c90 	.word	0x20000c90
 800d5f4:	20000c44 	.word	0x20000c44
 800d5f8:	20000c48 	.word	0x20000c48
 800d5fc:	20000ca4 	.word	0x20000ca4
 800d600:	20000cac 	.word	0x20000cac
 800d604:	20000c94 	.word	0x20000c94
 800d608:	200007bc 	.word	0x200007bc
 800d60c:	200007b8 	.word	0x200007b8
 800d610:	20000c9c 	.word	0x20000c9c
 800d614:	20000ca0 	.word	0x20000ca0

0800d618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d61e:	4b27      	ldr	r3, [pc, #156]	; (800d6bc <vTaskSwitchContext+0xa4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d626:	4b26      	ldr	r3, [pc, #152]	; (800d6c0 <vTaskSwitchContext+0xa8>)
 800d628:	2201      	movs	r2, #1
 800d62a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d62c:	e040      	b.n	800d6b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d62e:	4b24      	ldr	r3, [pc, #144]	; (800d6c0 <vTaskSwitchContext+0xa8>)
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d634:	4b23      	ldr	r3, [pc, #140]	; (800d6c4 <vTaskSwitchContext+0xac>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	e00f      	b.n	800d65c <vTaskSwitchContext+0x44>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d109      	bne.n	800d656 <vTaskSwitchContext+0x3e>
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	607b      	str	r3, [r7, #4]
 800d654:	e7fe      	b.n	800d654 <vTaskSwitchContext+0x3c>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3b01      	subs	r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	491a      	ldr	r1, [pc, #104]	; (800d6c8 <vTaskSwitchContext+0xb0>)
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	4613      	mov	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	440b      	add	r3, r1
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d0e5      	beq.n	800d63c <vTaskSwitchContext+0x24>
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a13      	ldr	r2, [pc, #76]	; (800d6c8 <vTaskSwitchContext+0xb0>)
 800d67c:	4413      	add	r3, r2
 800d67e:	60bb      	str	r3, [r7, #8]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	605a      	str	r2, [r3, #4]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	685a      	ldr	r2, [r3, #4]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	3308      	adds	r3, #8
 800d692:	429a      	cmp	r2, r3
 800d694:	d104      	bne.n	800d6a0 <vTaskSwitchContext+0x88>
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	605a      	str	r2, [r3, #4]
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	4a09      	ldr	r2, [pc, #36]	; (800d6cc <vTaskSwitchContext+0xb4>)
 800d6a8:	6013      	str	r3, [r2, #0]
 800d6aa:	4a06      	ldr	r2, [pc, #24]	; (800d6c4 <vTaskSwitchContext+0xac>)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6013      	str	r3, [r2, #0]
}
 800d6b0:	bf00      	nop
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	20000cb4 	.word	0x20000cb4
 800d6c0:	20000ca0 	.word	0x20000ca0
 800d6c4:	20000c94 	.word	0x20000c94
 800d6c8:	200007bc 	.word	0x200007bc
 800d6cc:	200007b8 	.word	0x200007b8

0800d6d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d109      	bne.n	800d6f4 <vTaskPlaceOnEventList+0x24>
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e7fe      	b.n	800d6f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6f4:	4b07      	ldr	r3, [pc, #28]	; (800d714 <vTaskPlaceOnEventList+0x44>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3318      	adds	r3, #24
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7fe fdee 	bl	800c2de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d702:	2101      	movs	r1, #1
 800d704:	6838      	ldr	r0, [r7, #0]
 800d706:	f000 fa71 	bl	800dbec <prvAddCurrentTaskToDelayedList>
}
 800d70a:	bf00      	nop
 800d70c:	3710      	adds	r7, #16
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	200007b8 	.word	0x200007b8

0800d718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d109      	bne.n	800d73e <vTaskPlaceOnEventListRestricted+0x26>
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e7fe      	b.n	800d73c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d73e:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <vTaskPlaceOnEventListRestricted+0x50>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3318      	adds	r3, #24
 800d744:	4619      	mov	r1, r3
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f7fe fda5 	bl	800c296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d752:	f04f 33ff 	mov.w	r3, #4294967295
 800d756:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	68b8      	ldr	r0, [r7, #8]
 800d75c:	f000 fa46 	bl	800dbec <prvAddCurrentTaskToDelayedList>
	}
 800d760:	bf00      	nop
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	200007b8 	.word	0x200007b8

0800d76c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d109      	bne.n	800d796 <xTaskRemoveFromEventList+0x2a>
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e7fe      	b.n	800d794 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	3318      	adds	r3, #24
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fe fdd8 	bl	800c350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7a0:	4b1d      	ldr	r3, [pc, #116]	; (800d818 <xTaskRemoveFromEventList+0xac>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d11d      	bne.n	800d7e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fdcf 	bl	800c350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b6:	4b19      	ldr	r3, [pc, #100]	; (800d81c <xTaskRemoveFromEventList+0xb0>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d903      	bls.n	800d7c6 <xTaskRemoveFromEventList+0x5a>
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	4a16      	ldr	r2, [pc, #88]	; (800d81c <xTaskRemoveFromEventList+0xb0>)
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4a13      	ldr	r2, [pc, #76]	; (800d820 <xTaskRemoveFromEventList+0xb4>)
 800d7d4:	441a      	add	r2, r3
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4610      	mov	r0, r2
 800d7de:	f7fe fd5a 	bl	800c296 <vListInsertEnd>
 800d7e2:	e005      	b.n	800d7f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	3318      	adds	r3, #24
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	480e      	ldr	r0, [pc, #56]	; (800d824 <xTaskRemoveFromEventList+0xb8>)
 800d7ec:	f7fe fd53 	bl	800c296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <xTaskRemoveFromEventList+0xbc>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d905      	bls.n	800d80a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d7fe:	2301      	movs	r3, #1
 800d800:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d802:	4b0a      	ldr	r3, [pc, #40]	; (800d82c <xTaskRemoveFromEventList+0xc0>)
 800d804:	2201      	movs	r2, #1
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	e001      	b.n	800d80e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d80a:	2300      	movs	r3, #0
 800d80c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d80e:	697b      	ldr	r3, [r7, #20]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20000cb4 	.word	0x20000cb4
 800d81c:	20000c94 	.word	0x20000c94
 800d820:	200007bc 	.word	0x200007bc
 800d824:	20000c4c 	.word	0x20000c4c
 800d828:	200007b8 	.word	0x200007b8
 800d82c:	20000ca0 	.word	0x20000ca0

0800d830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d838:	4b06      	ldr	r3, [pc, #24]	; (800d854 <vTaskInternalSetTimeOutState+0x24>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <vTaskInternalSetTimeOutState+0x28>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	605a      	str	r2, [r3, #4]
}
 800d848:	bf00      	nop
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	20000ca4 	.word	0x20000ca4
 800d858:	20000c90 	.word	0x20000c90

0800d85c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b088      	sub	sp, #32
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d109      	bne.n	800d880 <xTaskCheckForTimeOut+0x24>
 800d86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	613b      	str	r3, [r7, #16]
 800d87e:	e7fe      	b.n	800d87e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d109      	bne.n	800d89a <xTaskCheckForTimeOut+0x3e>
 800d886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	e7fe      	b.n	800d898 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d89a:	f000 fe67 	bl	800e56c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d89e:	4b1d      	ldr	r3, [pc, #116]	; (800d914 <xTaskCheckForTimeOut+0xb8>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	69ba      	ldr	r2, [r7, #24]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b6:	d102      	bne.n	800d8be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	61fb      	str	r3, [r7, #28]
 800d8bc:	e023      	b.n	800d906 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <xTaskCheckForTimeOut+0xbc>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d007      	beq.n	800d8da <xTaskCheckForTimeOut+0x7e>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d302      	bcc.n	800d8da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e015      	b.n	800d906 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d20b      	bcs.n	800d8fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	1ad2      	subs	r2, r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff ff9d 	bl	800d830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	e004      	b.n	800d906 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d902:	2301      	movs	r3, #1
 800d904:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d906:	f000 fe5f 	bl	800e5c8 <vPortExitCritical>

	return xReturn;
 800d90a:	69fb      	ldr	r3, [r7, #28]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	20000c90 	.word	0x20000c90
 800d918:	20000ca4 	.word	0x20000ca4

0800d91c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d920:	4b03      	ldr	r3, [pc, #12]	; (800d930 <vTaskMissedYield+0x14>)
 800d922:	2201      	movs	r2, #1
 800d924:	601a      	str	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	20000ca0 	.word	0x20000ca0

0800d934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d93c:	f000 f852 	bl	800d9e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d940:	4b06      	ldr	r3, [pc, #24]	; (800d95c <prvIdleTask+0x28>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d9f9      	bls.n	800d93c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d948:	4b05      	ldr	r3, [pc, #20]	; (800d960 <prvIdleTask+0x2c>)
 800d94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d958:	e7f0      	b.n	800d93c <prvIdleTask+0x8>
 800d95a:	bf00      	nop
 800d95c:	200007bc 	.word	0x200007bc
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d96a:	2300      	movs	r3, #0
 800d96c:	607b      	str	r3, [r7, #4]
 800d96e:	e00c      	b.n	800d98a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	4613      	mov	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4a12      	ldr	r2, [pc, #72]	; (800d9c4 <prvInitialiseTaskLists+0x60>)
 800d97c:	4413      	add	r3, r2
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe fc5c 	bl	800c23c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	3301      	adds	r3, #1
 800d988:	607b      	str	r3, [r7, #4]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b37      	cmp	r3, #55	; 0x37
 800d98e:	d9ef      	bls.n	800d970 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d990:	480d      	ldr	r0, [pc, #52]	; (800d9c8 <prvInitialiseTaskLists+0x64>)
 800d992:	f7fe fc53 	bl	800c23c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d996:	480d      	ldr	r0, [pc, #52]	; (800d9cc <prvInitialiseTaskLists+0x68>)
 800d998:	f7fe fc50 	bl	800c23c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d99c:	480c      	ldr	r0, [pc, #48]	; (800d9d0 <prvInitialiseTaskLists+0x6c>)
 800d99e:	f7fe fc4d 	bl	800c23c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9a2:	480c      	ldr	r0, [pc, #48]	; (800d9d4 <prvInitialiseTaskLists+0x70>)
 800d9a4:	f7fe fc4a 	bl	800c23c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9a8:	480b      	ldr	r0, [pc, #44]	; (800d9d8 <prvInitialiseTaskLists+0x74>)
 800d9aa:	f7fe fc47 	bl	800c23c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9ae:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <prvInitialiseTaskLists+0x78>)
 800d9b0:	4a05      	ldr	r2, [pc, #20]	; (800d9c8 <prvInitialiseTaskLists+0x64>)
 800d9b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9b4:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <prvInitialiseTaskLists+0x7c>)
 800d9b6:	4a05      	ldr	r2, [pc, #20]	; (800d9cc <prvInitialiseTaskLists+0x68>)
 800d9b8:	601a      	str	r2, [r3, #0]
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200007bc 	.word	0x200007bc
 800d9c8:	20000c1c 	.word	0x20000c1c
 800d9cc:	20000c30 	.word	0x20000c30
 800d9d0:	20000c4c 	.word	0x20000c4c
 800d9d4:	20000c60 	.word	0x20000c60
 800d9d8:	20000c78 	.word	0x20000c78
 800d9dc:	20000c44 	.word	0x20000c44
 800d9e0:	20000c48 	.word	0x20000c48

0800d9e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9ea:	e019      	b.n	800da20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d9ec:	f000 fdbe 	bl	800e56c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9f0:	4b0f      	ldr	r3, [pc, #60]	; (800da30 <prvCheckTasksWaitingTermination+0x4c>)
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fca7 	bl	800c350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da02:	4b0c      	ldr	r3, [pc, #48]	; (800da34 <prvCheckTasksWaitingTermination+0x50>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	3b01      	subs	r3, #1
 800da08:	4a0a      	ldr	r2, [pc, #40]	; (800da34 <prvCheckTasksWaitingTermination+0x50>)
 800da0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da0c:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <prvCheckTasksWaitingTermination+0x54>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	4a09      	ldr	r2, [pc, #36]	; (800da38 <prvCheckTasksWaitingTermination+0x54>)
 800da14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da16:	f000 fdd7 	bl	800e5c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f80e 	bl	800da3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da20:	4b05      	ldr	r3, [pc, #20]	; (800da38 <prvCheckTasksWaitingTermination+0x54>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e1      	bne.n	800d9ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da28:	bf00      	nop
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	20000c60 	.word	0x20000c60
 800da34:	20000c8c 	.word	0x20000c8c
 800da38:	20000c74 	.word	0x20000c74

0800da3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d108      	bne.n	800da60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da52:	4618      	mov	r0, r3
 800da54:	f000 ff66 	bl	800e924 <vPortFree>
				vPortFree( pxTCB );
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 ff63 	bl	800e924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da5e:	e017      	b.n	800da90 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da66:	2b01      	cmp	r3, #1
 800da68:	d103      	bne.n	800da72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 ff5a 	bl	800e924 <vPortFree>
	}
 800da70:	e00e      	b.n	800da90 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d009      	beq.n	800da90 <prvDeleteTCB+0x54>
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	60fb      	str	r3, [r7, #12]
 800da8e:	e7fe      	b.n	800da8e <prvDeleteTCB+0x52>
	}
 800da90:	bf00      	nop
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da9e:	4b0c      	ldr	r3, [pc, #48]	; (800dad0 <prvResetNextTaskUnblockTime+0x38>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d104      	bne.n	800dab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daa8:	4b0a      	ldr	r3, [pc, #40]	; (800dad4 <prvResetNextTaskUnblockTime+0x3c>)
 800daaa:	f04f 32ff 	mov.w	r2, #4294967295
 800daae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dab0:	e008      	b.n	800dac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab2:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <prvResetNextTaskUnblockTime+0x38>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4a04      	ldr	r2, [pc, #16]	; (800dad4 <prvResetNextTaskUnblockTime+0x3c>)
 800dac2:	6013      	str	r3, [r2, #0]
}
 800dac4:	bf00      	nop
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	20000c44 	.word	0x20000c44
 800dad4:	20000cac 	.word	0x20000cac

0800dad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dade:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <xTaskGetSchedulerState+0x34>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dae6:	2301      	movs	r3, #1
 800dae8:	607b      	str	r3, [r7, #4]
 800daea:	e008      	b.n	800dafe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daec:	4b08      	ldr	r3, [pc, #32]	; (800db10 <xTaskGetSchedulerState+0x38>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d102      	bne.n	800dafa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800daf4:	2302      	movs	r3, #2
 800daf6:	607b      	str	r3, [r7, #4]
 800daf8:	e001      	b.n	800dafe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dafa:	2300      	movs	r3, #0
 800dafc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dafe:	687b      	ldr	r3, [r7, #4]
	}
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	20000c98 	.word	0x20000c98
 800db10:	20000cb4 	.word	0x20000cb4

0800db14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db20:	2300      	movs	r3, #0
 800db22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d054      	beq.n	800dbd4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db2a:	4b2d      	ldr	r3, [pc, #180]	; (800dbe0 <xTaskPriorityDisinherit+0xcc>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	429a      	cmp	r2, r3
 800db32:	d009      	beq.n	800db48 <xTaskPriorityDisinherit+0x34>
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	e7fe      	b.n	800db46 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d109      	bne.n	800db64 <xTaskPriorityDisinherit+0x50>
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	60bb      	str	r3, [r7, #8]
 800db62:	e7fe      	b.n	800db62 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db68:	1e5a      	subs	r2, r3, #1
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db76:	429a      	cmp	r2, r3
 800db78:	d02c      	beq.n	800dbd4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d128      	bne.n	800dbd4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	3304      	adds	r3, #4
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fbe2 	bl	800c350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba4:	4b0f      	ldr	r3, [pc, #60]	; (800dbe4 <xTaskPriorityDisinherit+0xd0>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d903      	bls.n	800dbb4 <xTaskPriorityDisinherit+0xa0>
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb0:	4a0c      	ldr	r2, [pc, #48]	; (800dbe4 <xTaskPriorityDisinherit+0xd0>)
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb8:	4613      	mov	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4413      	add	r3, r2
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4a09      	ldr	r2, [pc, #36]	; (800dbe8 <xTaskPriorityDisinherit+0xd4>)
 800dbc2:	441a      	add	r2, r3
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	4619      	mov	r1, r3
 800dbca:	4610      	mov	r0, r2
 800dbcc:	f7fe fb63 	bl	800c296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbd4:	697b      	ldr	r3, [r7, #20]
	}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	200007b8 	.word	0x200007b8
 800dbe4:	20000c94 	.word	0x20000c94
 800dbe8:	200007bc 	.word	0x200007bc

0800dbec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dbf6:	4b21      	ldr	r3, [pc, #132]	; (800dc7c <prvAddCurrentTaskToDelayedList+0x90>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbfc:	4b20      	ldr	r3, [pc, #128]	; (800dc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3304      	adds	r3, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe fba4 	bl	800c350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0e:	d10a      	bne.n	800dc26 <prvAddCurrentTaskToDelayedList+0x3a>
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d007      	beq.n	800dc26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc16:	4b1a      	ldr	r3, [pc, #104]	; (800dc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4819      	ldr	r0, [pc, #100]	; (800dc84 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc20:	f7fe fb39 	bl	800c296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc24:	e026      	b.n	800dc74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc2e:	4b14      	ldr	r3, [pc, #80]	; (800dc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d209      	bcs.n	800dc52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc3e:	4b12      	ldr	r3, [pc, #72]	; (800dc88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3304      	adds	r3, #4
 800dc48:	4619      	mov	r1, r3
 800dc4a:	4610      	mov	r0, r2
 800dc4c:	f7fe fb47 	bl	800c2de <vListInsert>
}
 800dc50:	e010      	b.n	800dc74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc52:	4b0e      	ldr	r3, [pc, #56]	; (800dc8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe fb3d 	bl	800c2de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc64:	4b0a      	ldr	r3, [pc, #40]	; (800dc90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d202      	bcs.n	800dc74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dc6e:	4a08      	ldr	r2, [pc, #32]	; (800dc90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	6013      	str	r3, [r2, #0]
}
 800dc74:	bf00      	nop
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	20000c90 	.word	0x20000c90
 800dc80:	200007b8 	.word	0x200007b8
 800dc84:	20000c78 	.word	0x20000c78
 800dc88:	20000c48 	.word	0x20000c48
 800dc8c:	20000c44 	.word	0x20000c44
 800dc90:	20000cac 	.word	0x20000cac

0800dc94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	; 0x28
 800dc98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc9e:	f000 faff 	bl	800e2a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dca2:	4b1c      	ldr	r3, [pc, #112]	; (800dd14 <xTimerCreateTimerTask+0x80>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d021      	beq.n	800dcee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dcb2:	1d3a      	adds	r2, r7, #4
 800dcb4:	f107 0108 	add.w	r1, r7, #8
 800dcb8:	f107 030c 	add.w	r3, r7, #12
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe faa3 	bl	800c208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	9202      	str	r2, [sp, #8]
 800dcca:	9301      	str	r3, [sp, #4]
 800dccc:	2302      	movs	r3, #2
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	460a      	mov	r2, r1
 800dcd4:	4910      	ldr	r1, [pc, #64]	; (800dd18 <xTimerCreateTimerTask+0x84>)
 800dcd6:	4811      	ldr	r0, [pc, #68]	; (800dd1c <xTimerCreateTimerTask+0x88>)
 800dcd8:	f7ff f8f6 	bl	800cec8 <xTaskCreateStatic>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <xTimerCreateTimerTask+0x8c>)
 800dce0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dce2:	4b0f      	ldr	r3, [pc, #60]	; (800dd20 <xTimerCreateTimerTask+0x8c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dcea:	2301      	movs	r3, #1
 800dcec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d109      	bne.n	800dd08 <xTimerCreateTimerTask+0x74>
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	613b      	str	r3, [r7, #16]
 800dd06:	e7fe      	b.n	800dd06 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800dd08:	697b      	ldr	r3, [r7, #20]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000ce8 	.word	0x20000ce8
 800dd18:	0800f3a4 	.word	0x0800f3a4
 800dd1c:	0800de55 	.word	0x0800de55
 800dd20:	20000cec 	.word	0x20000cec

0800dd24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08a      	sub	sp, #40	; 0x28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
 800dd30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d109      	bne.n	800dd50 <xTimerGenericCommand+0x2c>
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	623b      	str	r3, [r7, #32]
 800dd4e:	e7fe      	b.n	800dd4e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd50:	4b19      	ldr	r3, [pc, #100]	; (800ddb8 <xTimerGenericCommand+0x94>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d02a      	beq.n	800ddae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b05      	cmp	r3, #5
 800dd68:	dc18      	bgt.n	800dd9c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dd6a:	f7ff feb5 	bl	800dad8 <xTaskGetSchedulerState>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d109      	bne.n	800dd88 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dd74:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <xTimerGenericCommand+0x94>)
 800dd76:	6818      	ldr	r0, [r3, #0]
 800dd78:	f107 0110 	add.w	r1, r7, #16
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd80:	f7fe fc4e 	bl	800c620 <xQueueGenericSend>
 800dd84:	6278      	str	r0, [r7, #36]	; 0x24
 800dd86:	e012      	b.n	800ddae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dd88:	4b0b      	ldr	r3, [pc, #44]	; (800ddb8 <xTimerGenericCommand+0x94>)
 800dd8a:	6818      	ldr	r0, [r3, #0]
 800dd8c:	f107 0110 	add.w	r1, r7, #16
 800dd90:	2300      	movs	r3, #0
 800dd92:	2200      	movs	r2, #0
 800dd94:	f7fe fc44 	bl	800c620 <xQueueGenericSend>
 800dd98:	6278      	str	r0, [r7, #36]	; 0x24
 800dd9a:	e008      	b.n	800ddae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dd9c:	4b06      	ldr	r3, [pc, #24]	; (800ddb8 <xTimerGenericCommand+0x94>)
 800dd9e:	6818      	ldr	r0, [r3, #0]
 800dda0:	f107 0110 	add.w	r1, r7, #16
 800dda4:	2300      	movs	r3, #0
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	f7fe fd34 	bl	800c814 <xQueueGenericSendFromISR>
 800ddac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3728      	adds	r7, #40	; 0x28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20000ce8 	.word	0x20000ce8

0800ddbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b088      	sub	sp, #32
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddc6:	4b22      	ldr	r3, [pc, #136]	; (800de50 <prvProcessExpiredTimer+0x94>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fabb 	bl	800c350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d021      	beq.n	800de2c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	699a      	ldr	r2, [r3, #24]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	18d1      	adds	r1, r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	6978      	ldr	r0, [r7, #20]
 800ddf6:	f000 f8d1 	bl	800df9c <prvInsertTimerInActiveList>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d01e      	beq.n	800de3e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de00:	2300      	movs	r3, #0
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	2300      	movs	r3, #0
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	2100      	movs	r1, #0
 800de0a:	6978      	ldr	r0, [r7, #20]
 800de0c:	f7ff ff8a 	bl	800dd24 <xTimerGenericCommand>
 800de10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d112      	bne.n	800de3e <prvProcessExpiredTimer+0x82>
 800de18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1c:	f383 8811 	msr	BASEPRI, r3
 800de20:	f3bf 8f6f 	isb	sy
 800de24:	f3bf 8f4f 	dsb	sy
 800de28:	60fb      	str	r3, [r7, #12]
 800de2a:	e7fe      	b.n	800de2a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de32:	f023 0301 	bic.w	r3, r3, #1
 800de36:	b2da      	uxtb	r2, r3
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	6978      	ldr	r0, [r7, #20]
 800de44:	4798      	blx	r3
}
 800de46:	bf00      	nop
 800de48:	3718      	adds	r7, #24
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	20000ce0 	.word	0x20000ce0

0800de54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	4618      	mov	r0, r3
 800de62:	f000 f857 	bl	800df14 <prvGetNextExpireTime>
 800de66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	4619      	mov	r1, r3
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 f803 	bl	800de78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800de72:	f000 f8d5 	bl	800e020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de76:	e7f1      	b.n	800de5c <prvTimerTask+0x8>

0800de78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800de82:	f7ff fa57 	bl	800d334 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de86:	f107 0308 	add.w	r3, r7, #8
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 f866 	bl	800df5c <prvSampleTimeNow>
 800de90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d130      	bne.n	800defa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10a      	bne.n	800deb4 <prvProcessTimerOrBlockTask+0x3c>
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d806      	bhi.n	800deb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dea6:	f7ff fa53 	bl	800d350 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deaa:	68f9      	ldr	r1, [r7, #12]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f7ff ff85 	bl	800ddbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800deb2:	e024      	b.n	800defe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d008      	beq.n	800decc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800deba:	4b13      	ldr	r3, [pc, #76]	; (800df08 <prvProcessTimerOrBlockTask+0x90>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d101      	bne.n	800dec8 <prvProcessTimerOrBlockTask+0x50>
 800dec4:	2301      	movs	r3, #1
 800dec6:	e000      	b.n	800deca <prvProcessTimerOrBlockTask+0x52>
 800dec8:	2300      	movs	r3, #0
 800deca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800decc:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <prvProcessTimerOrBlockTask+0x94>)
 800dece:	6818      	ldr	r0, [r3, #0]
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	4619      	mov	r1, r3
 800deda:	f7fe ffc1 	bl	800ce60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dede:	f7ff fa37 	bl	800d350 <xTaskResumeAll>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10a      	bne.n	800defe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dee8:	4b09      	ldr	r3, [pc, #36]	; (800df10 <prvProcessTimerOrBlockTask+0x98>)
 800deea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	f3bf 8f6f 	isb	sy
}
 800def8:	e001      	b.n	800defe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800defa:	f7ff fa29 	bl	800d350 <xTaskResumeAll>
}
 800defe:	bf00      	nop
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	20000ce4 	.word	0x20000ce4
 800df0c:	20000ce8 	.word	0x20000ce8
 800df10:	e000ed04 	.word	0xe000ed04

0800df14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df1c:	4b0e      	ldr	r3, [pc, #56]	; (800df58 <prvGetNextExpireTime+0x44>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d101      	bne.n	800df2a <prvGetNextExpireTime+0x16>
 800df26:	2201      	movs	r2, #1
 800df28:	e000      	b.n	800df2c <prvGetNextExpireTime+0x18>
 800df2a:	2200      	movs	r2, #0
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d105      	bne.n	800df44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df38:	4b07      	ldr	r3, [pc, #28]	; (800df58 <prvGetNextExpireTime+0x44>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	e001      	b.n	800df48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df44:	2300      	movs	r3, #0
 800df46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df48:	68fb      	ldr	r3, [r7, #12]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop
 800df58:	20000ce0 	.word	0x20000ce0

0800df5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800df64:	f7ff fa90 	bl	800d488 <xTaskGetTickCount>
 800df68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800df6a:	4b0b      	ldr	r3, [pc, #44]	; (800df98 <prvSampleTimeNow+0x3c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	429a      	cmp	r2, r3
 800df72:	d205      	bcs.n	800df80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800df74:	f000 f930 	bl	800e1d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	e002      	b.n	800df86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800df86:	4a04      	ldr	r2, [pc, #16]	; (800df98 <prvSampleTimeNow+0x3c>)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800df8c:	68fb      	ldr	r3, [r7, #12]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20000cf0 	.word	0x20000cf0

0800df9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d812      	bhi.n	800dfe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	1ad2      	subs	r2, r2, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	699b      	ldr	r3, [r3, #24]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d302      	bcc.n	800dfd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	617b      	str	r3, [r7, #20]
 800dfd4:	e01b      	b.n	800e00e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dfd6:	4b10      	ldr	r3, [pc, #64]	; (800e018 <prvInsertTimerInActiveList+0x7c>)
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3304      	adds	r3, #4
 800dfde:	4619      	mov	r1, r3
 800dfe0:	4610      	mov	r0, r2
 800dfe2:	f7fe f97c 	bl	800c2de <vListInsert>
 800dfe6:	e012      	b.n	800e00e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d206      	bcs.n	800dffe <prvInsertTimerInActiveList+0x62>
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d302      	bcc.n	800dffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dff8:	2301      	movs	r3, #1
 800dffa:	617b      	str	r3, [r7, #20]
 800dffc:	e007      	b.n	800e00e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dffe:	4b07      	ldr	r3, [pc, #28]	; (800e01c <prvInsertTimerInActiveList+0x80>)
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3304      	adds	r3, #4
 800e006:	4619      	mov	r1, r3
 800e008:	4610      	mov	r0, r2
 800e00a:	f7fe f968 	bl	800c2de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e00e:	697b      	ldr	r3, [r7, #20]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20000ce4 	.word	0x20000ce4
 800e01c:	20000ce0 	.word	0x20000ce0

0800e020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b08e      	sub	sp, #56	; 0x38
 800e024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e026:	e0c6      	b.n	800e1b6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	da17      	bge.n	800e05e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e02e:	1d3b      	adds	r3, r7, #4
 800e030:	3304      	adds	r3, #4
 800e032:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d109      	bne.n	800e04e <prvProcessReceivedCommands+0x2e>
 800e03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	61fb      	str	r3, [r7, #28]
 800e04c:	e7fe      	b.n	800e04c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e054:	6850      	ldr	r0, [r2, #4]
 800e056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e058:	6892      	ldr	r2, [r2, #8]
 800e05a:	4611      	mov	r1, r2
 800e05c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	f2c0 80a7 	blt.w	800e1b4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06c:	695b      	ldr	r3, [r3, #20]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d004      	beq.n	800e07c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e074:	3304      	adds	r3, #4
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe f96a 	bl	800c350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e07c:	463b      	mov	r3, r7
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff ff6c 	bl	800df5c <prvSampleTimeNow>
 800e084:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b09      	cmp	r3, #9
 800e08a:	f200 8094 	bhi.w	800e1b6 <prvProcessReceivedCommands+0x196>
 800e08e:	a201      	add	r2, pc, #4	; (adr r2, 800e094 <prvProcessReceivedCommands+0x74>)
 800e090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e094:	0800e0bd 	.word	0x0800e0bd
 800e098:	0800e0bd 	.word	0x0800e0bd
 800e09c:	0800e0bd 	.word	0x0800e0bd
 800e0a0:	0800e12f 	.word	0x0800e12f
 800e0a4:	0800e143 	.word	0x0800e143
 800e0a8:	0800e18b 	.word	0x0800e18b
 800e0ac:	0800e0bd 	.word	0x0800e0bd
 800e0b0:	0800e0bd 	.word	0x0800e0bd
 800e0b4:	0800e12f 	.word	0x0800e12f
 800e0b8:	0800e143 	.word	0x0800e143
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0c2:	f043 0301 	orr.w	r3, r3, #1
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e0ce:	68ba      	ldr	r2, [r7, #8]
 800e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d2:	699b      	ldr	r3, [r3, #24]
 800e0d4:	18d1      	adds	r1, r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0dc:	f7ff ff5e 	bl	800df9c <prvInsertTimerInActiveList>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d067      	beq.n	800e1b6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	6a1b      	ldr	r3, [r3, #32]
 800e0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0f4:	f003 0304 	and.w	r3, r3, #4
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d05c      	beq.n	800e1b6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	441a      	add	r2, r3
 800e104:	2300      	movs	r3, #0
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	2300      	movs	r3, #0
 800e10a:	2100      	movs	r1, #0
 800e10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e10e:	f7ff fe09 	bl	800dd24 <xTimerGenericCommand>
 800e112:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d14d      	bne.n	800e1b6 <prvProcessReceivedCommands+0x196>
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	61bb      	str	r3, [r7, #24]
 800e12c:	e7fe      	b.n	800e12c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e134:	f023 0301 	bic.w	r3, r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e140:	e039      	b.n	800e1b6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e148:	f043 0301 	orr.w	r3, r3, #1
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e158:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d109      	bne.n	800e176 <prvProcessReceivedCommands+0x156>
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	617b      	str	r3, [r7, #20]
 800e174:	e7fe      	b.n	800e174 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e178:	699a      	ldr	r2, [r3, #24]
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	18d1      	adds	r1, r2, r3
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e184:	f7ff ff0a 	bl	800df9c <prvInsertTimerInActiveList>
					break;
 800e188:	e015      	b.n	800e1b6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e19a:	f000 fbc3 	bl	800e924 <vPortFree>
 800e19e:	e00a      	b.n	800e1b6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1a6:	f023 0301 	bic.w	r3, r3, #1
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1b2:	e000      	b.n	800e1b6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e1b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1b6:	4b07      	ldr	r3, [pc, #28]	; (800e1d4 <prvProcessReceivedCommands+0x1b4>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	1d39      	adds	r1, r7, #4
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe fbbc 	bl	800c93c <xQueueReceive>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f47f af2e 	bne.w	800e028 <prvProcessReceivedCommands+0x8>
	}
}
 800e1cc:	bf00      	nop
 800e1ce:	3730      	adds	r7, #48	; 0x30
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20000ce8 	.word	0x20000ce8

0800e1d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1de:	e047      	b.n	800e270 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1e0:	4b2d      	ldr	r3, [pc, #180]	; (800e298 <prvSwitchTimerLists+0xc0>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ea:	4b2b      	ldr	r3, [pc, #172]	; (800e298 <prvSwitchTimerLists+0xc0>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe f8a9 	bl	800c350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6a1b      	ldr	r3, [r3, #32]
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e20c:	f003 0304 	and.w	r3, r3, #4
 800e210:	2b00      	cmp	r3, #0
 800e212:	d02d      	beq.n	800e270 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	4413      	add	r3, r2
 800e21c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	429a      	cmp	r2, r3
 800e224:	d90e      	bls.n	800e244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e232:	4b19      	ldr	r3, [pc, #100]	; (800e298 <prvSwitchTimerLists+0xc0>)
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	3304      	adds	r3, #4
 800e23a:	4619      	mov	r1, r3
 800e23c:	4610      	mov	r0, r2
 800e23e:	f7fe f84e 	bl	800c2de <vListInsert>
 800e242:	e015      	b.n	800e270 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e244:	2300      	movs	r3, #0
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2300      	movs	r3, #0
 800e24a:	693a      	ldr	r2, [r7, #16]
 800e24c:	2100      	movs	r1, #0
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f7ff fd68 	bl	800dd24 <xTimerGenericCommand>
 800e254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d109      	bne.n	800e270 <prvSwitchTimerLists+0x98>
 800e25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	603b      	str	r3, [r7, #0]
 800e26e:	e7fe      	b.n	800e26e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e270:	4b09      	ldr	r3, [pc, #36]	; (800e298 <prvSwitchTimerLists+0xc0>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1b2      	bne.n	800e1e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e27a:	4b07      	ldr	r3, [pc, #28]	; (800e298 <prvSwitchTimerLists+0xc0>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e280:	4b06      	ldr	r3, [pc, #24]	; (800e29c <prvSwitchTimerLists+0xc4>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a04      	ldr	r2, [pc, #16]	; (800e298 <prvSwitchTimerLists+0xc0>)
 800e286:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e288:	4a04      	ldr	r2, [pc, #16]	; (800e29c <prvSwitchTimerLists+0xc4>)
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	6013      	str	r3, [r2, #0]
}
 800e28e:	bf00      	nop
 800e290:	3718      	adds	r7, #24
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000ce0 	.word	0x20000ce0
 800e29c:	20000ce4 	.word	0x20000ce4

0800e2a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2a6:	f000 f961 	bl	800e56c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2aa:	4b15      	ldr	r3, [pc, #84]	; (800e300 <prvCheckForValidListAndQueue+0x60>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d120      	bne.n	800e2f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e2b2:	4814      	ldr	r0, [pc, #80]	; (800e304 <prvCheckForValidListAndQueue+0x64>)
 800e2b4:	f7fd ffc2 	bl	800c23c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e2b8:	4813      	ldr	r0, [pc, #76]	; (800e308 <prvCheckForValidListAndQueue+0x68>)
 800e2ba:	f7fd ffbf 	bl	800c23c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e2be:	4b13      	ldr	r3, [pc, #76]	; (800e30c <prvCheckForValidListAndQueue+0x6c>)
 800e2c0:	4a10      	ldr	r2, [pc, #64]	; (800e304 <prvCheckForValidListAndQueue+0x64>)
 800e2c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e2c4:	4b12      	ldr	r3, [pc, #72]	; (800e310 <prvCheckForValidListAndQueue+0x70>)
 800e2c6:	4a10      	ldr	r2, [pc, #64]	; (800e308 <prvCheckForValidListAndQueue+0x68>)
 800e2c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	4b11      	ldr	r3, [pc, #68]	; (800e314 <prvCheckForValidListAndQueue+0x74>)
 800e2d0:	4a11      	ldr	r2, [pc, #68]	; (800e318 <prvCheckForValidListAndQueue+0x78>)
 800e2d2:	2110      	movs	r1, #16
 800e2d4:	200a      	movs	r0, #10
 800e2d6:	f7fe f8cd 	bl	800c474 <xQueueGenericCreateStatic>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	4b08      	ldr	r3, [pc, #32]	; (800e300 <prvCheckForValidListAndQueue+0x60>)
 800e2de:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <prvCheckForValidListAndQueue+0x60>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <prvCheckForValidListAndQueue+0x60>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	490b      	ldr	r1, [pc, #44]	; (800e31c <prvCheckForValidListAndQueue+0x7c>)
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe fd8e 	bl	800ce10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2f4:	f000 f968 	bl	800e5c8 <vPortExitCritical>
}
 800e2f8:	bf00      	nop
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20000ce8 	.word	0x20000ce8
 800e304:	20000cb8 	.word	0x20000cb8
 800e308:	20000ccc 	.word	0x20000ccc
 800e30c:	20000ce0 	.word	0x20000ce0
 800e310:	20000ce4 	.word	0x20000ce4
 800e314:	20000d94 	.word	0x20000d94
 800e318:	20000cf4 	.word	0x20000cf4
 800e31c:	0800f3ac 	.word	0x0800f3ac

0800e320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	3b04      	subs	r3, #4
 800e330:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3b04      	subs	r3, #4
 800e33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	f023 0201 	bic.w	r2, r3, #1
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	3b04      	subs	r3, #4
 800e34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e350:	4a0c      	ldr	r2, [pc, #48]	; (800e384 <pxPortInitialiseStack+0x64>)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	3b14      	subs	r3, #20
 800e35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	3b04      	subs	r3, #4
 800e366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f06f 0202 	mvn.w	r2, #2
 800e36e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3b20      	subs	r3, #32
 800e374:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e376:	68fb      	ldr	r3, [r7, #12]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	0800e389 	.word	0x0800e389

0800e388 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e388:	b480      	push	{r7}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e392:	4b11      	ldr	r3, [pc, #68]	; (800e3d8 <prvTaskExitError+0x50>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e39a:	d009      	beq.n	800e3b0 <prvTaskExitError+0x28>
 800e39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	60fb      	str	r3, [r7, #12]
 800e3ae:	e7fe      	b.n	800e3ae <prvTaskExitError+0x26>
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3c2:	bf00      	nop
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0fc      	beq.n	800e3c4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3ca:	bf00      	nop
 800e3cc:	3714      	adds	r7, #20
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	2000002c 	.word	0x2000002c
 800e3dc:	00000000 	.word	0x00000000

0800e3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3e0:	4b07      	ldr	r3, [pc, #28]	; (800e400 <pxCurrentTCBConst2>)
 800e3e2:	6819      	ldr	r1, [r3, #0]
 800e3e4:	6808      	ldr	r0, [r1, #0]
 800e3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ea:	f380 8809 	msr	PSP, r0
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f04f 0000 	mov.w	r0, #0
 800e3f6:	f380 8811 	msr	BASEPRI, r0
 800e3fa:	4770      	bx	lr
 800e3fc:	f3af 8000 	nop.w

0800e400 <pxCurrentTCBConst2>:
 800e400:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop

0800e408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e408:	4808      	ldr	r0, [pc, #32]	; (800e42c <prvPortStartFirstTask+0x24>)
 800e40a:	6800      	ldr	r0, [r0, #0]
 800e40c:	6800      	ldr	r0, [r0, #0]
 800e40e:	f380 8808 	msr	MSP, r0
 800e412:	f04f 0000 	mov.w	r0, #0
 800e416:	f380 8814 	msr	CONTROL, r0
 800e41a:	b662      	cpsie	i
 800e41c:	b661      	cpsie	f
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	df00      	svc	0
 800e428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e42a:	bf00      	nop
 800e42c:	e000ed08 	.word	0xe000ed08

0800e430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e436:	4b44      	ldr	r3, [pc, #272]	; (800e548 <xPortStartScheduler+0x118>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a44      	ldr	r2, [pc, #272]	; (800e54c <xPortStartScheduler+0x11c>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d109      	bne.n	800e454 <xPortStartScheduler+0x24>
 800e440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	e7fe      	b.n	800e452 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e454:	4b3c      	ldr	r3, [pc, #240]	; (800e548 <xPortStartScheduler+0x118>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a3d      	ldr	r2, [pc, #244]	; (800e550 <xPortStartScheduler+0x120>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d109      	bne.n	800e472 <xPortStartScheduler+0x42>
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	e7fe      	b.n	800e470 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e472:	4b38      	ldr	r3, [pc, #224]	; (800e554 <xPortStartScheduler+0x124>)
 800e474:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	22ff      	movs	r2, #255	; 0xff
 800e482:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e48c:	78fb      	ldrb	r3, [r7, #3]
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e494:	b2da      	uxtb	r2, r3
 800e496:	4b30      	ldr	r3, [pc, #192]	; (800e558 <xPortStartScheduler+0x128>)
 800e498:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e49a:	4b30      	ldr	r3, [pc, #192]	; (800e55c <xPortStartScheduler+0x12c>)
 800e49c:	2207      	movs	r2, #7
 800e49e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4a0:	e009      	b.n	800e4b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e4a2:	4b2e      	ldr	r3, [pc, #184]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	4a2c      	ldr	r2, [pc, #176]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4ac:	78fb      	ldrb	r3, [r7, #3]
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	005b      	lsls	r3, r3, #1
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4be:	2b80      	cmp	r3, #128	; 0x80
 800e4c0:	d0ef      	beq.n	800e4a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4c2:	4b26      	ldr	r3, [pc, #152]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f1c3 0307 	rsb	r3, r3, #7
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	d009      	beq.n	800e4e2 <xPortStartScheduler+0xb2>
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	60bb      	str	r3, [r7, #8]
 800e4e0:	e7fe      	b.n	800e4e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4e2:	4b1e      	ldr	r3, [pc, #120]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	021b      	lsls	r3, r3, #8
 800e4e8:	4a1c      	ldr	r2, [pc, #112]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4ec:	4b1b      	ldr	r3, [pc, #108]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4f4:	4a19      	ldr	r2, [pc, #100]	; (800e55c <xPortStartScheduler+0x12c>)
 800e4f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e500:	4b17      	ldr	r3, [pc, #92]	; (800e560 <xPortStartScheduler+0x130>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a16      	ldr	r2, [pc, #88]	; (800e560 <xPortStartScheduler+0x130>)
 800e506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e50a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e50c:	4b14      	ldr	r3, [pc, #80]	; (800e560 <xPortStartScheduler+0x130>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a13      	ldr	r2, [pc, #76]	; (800e560 <xPortStartScheduler+0x130>)
 800e512:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e516:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e518:	f000 f8d6 	bl	800e6c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e51c:	4b11      	ldr	r3, [pc, #68]	; (800e564 <xPortStartScheduler+0x134>)
 800e51e:	2200      	movs	r2, #0
 800e520:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e522:	f000 f8f5 	bl	800e710 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e526:	4b10      	ldr	r3, [pc, #64]	; (800e568 <xPortStartScheduler+0x138>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a0f      	ldr	r2, [pc, #60]	; (800e568 <xPortStartScheduler+0x138>)
 800e52c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e530:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e532:	f7ff ff69 	bl	800e408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e536:	f7ff f86f 	bl	800d618 <vTaskSwitchContext>
	prvTaskExitError();
 800e53a:	f7ff ff25 	bl	800e388 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3718      	adds	r7, #24
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	e000ed00 	.word	0xe000ed00
 800e54c:	410fc271 	.word	0x410fc271
 800e550:	410fc270 	.word	0x410fc270
 800e554:	e000e400 	.word	0xe000e400
 800e558:	20000de4 	.word	0x20000de4
 800e55c:	20000de8 	.word	0x20000de8
 800e560:	e000ed20 	.word	0xe000ed20
 800e564:	2000002c 	.word	0x2000002c
 800e568:	e000ef34 	.word	0xe000ef34

0800e56c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e576:	f383 8811 	msr	BASEPRI, r3
 800e57a:	f3bf 8f6f 	isb	sy
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e584:	4b0e      	ldr	r3, [pc, #56]	; (800e5c0 <vPortEnterCritical+0x54>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	4a0d      	ldr	r2, [pc, #52]	; (800e5c0 <vPortEnterCritical+0x54>)
 800e58c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e58e:	4b0c      	ldr	r3, [pc, #48]	; (800e5c0 <vPortEnterCritical+0x54>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d10e      	bne.n	800e5b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e596:	4b0b      	ldr	r3, [pc, #44]	; (800e5c4 <vPortEnterCritical+0x58>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d009      	beq.n	800e5b4 <vPortEnterCritical+0x48>
 800e5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	603b      	str	r3, [r7, #0]
 800e5b2:	e7fe      	b.n	800e5b2 <vPortEnterCritical+0x46>
	}
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	2000002c 	.word	0x2000002c
 800e5c4:	e000ed04 	.word	0xe000ed04

0800e5c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5ce:	4b11      	ldr	r3, [pc, #68]	; (800e614 <vPortExitCritical+0x4c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d109      	bne.n	800e5ea <vPortExitCritical+0x22>
 800e5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	607b      	str	r3, [r7, #4]
 800e5e8:	e7fe      	b.n	800e5e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e5ea:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <vPortExitCritical+0x4c>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	4a08      	ldr	r2, [pc, #32]	; (800e614 <vPortExitCritical+0x4c>)
 800e5f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5f4:	4b07      	ldr	r3, [pc, #28]	; (800e614 <vPortExitCritical+0x4c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d104      	bne.n	800e606 <vPortExitCritical+0x3e>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e606:	bf00      	nop
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	2000002c 	.word	0x2000002c
	...

0800e620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e620:	f3ef 8009 	mrs	r0, PSP
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	4b15      	ldr	r3, [pc, #84]	; (800e680 <pxCurrentTCBConst>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	f01e 0f10 	tst.w	lr, #16
 800e630:	bf08      	it	eq
 800e632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63a:	6010      	str	r0, [r2, #0]
 800e63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e644:	f380 8811 	msr	BASEPRI, r0
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f7fe ffe2 	bl	800d618 <vTaskSwitchContext>
 800e654:	f04f 0000 	mov.w	r0, #0
 800e658:	f380 8811 	msr	BASEPRI, r0
 800e65c:	bc09      	pop	{r0, r3}
 800e65e:	6819      	ldr	r1, [r3, #0]
 800e660:	6808      	ldr	r0, [r1, #0]
 800e662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e666:	f01e 0f10 	tst.w	lr, #16
 800e66a:	bf08      	it	eq
 800e66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e670:	f380 8809 	msr	PSP, r0
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	f3af 8000 	nop.w

0800e680 <pxCurrentTCBConst>:
 800e680:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop

0800e688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6a0:	f7fe ff02 	bl	800d4a8 <xTaskIncrementTick>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6aa:	4b06      	ldr	r3, [pc, #24]	; (800e6c4 <SysTick_Handler+0x3c>)
 800e6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6bc:	bf00      	nop
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	e000ed04 	.word	0xe000ed04

0800e6c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6cc:	4b0b      	ldr	r3, [pc, #44]	; (800e6fc <vPortSetupTimerInterrupt+0x34>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6d2:	4b0b      	ldr	r3, [pc, #44]	; (800e700 <vPortSetupTimerInterrupt+0x38>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	; (800e704 <vPortSetupTimerInterrupt+0x3c>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a0a      	ldr	r2, [pc, #40]	; (800e708 <vPortSetupTimerInterrupt+0x40>)
 800e6de:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e2:	099b      	lsrs	r3, r3, #6
 800e6e4:	4a09      	ldr	r2, [pc, #36]	; (800e70c <vPortSetupTimerInterrupt+0x44>)
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ea:	4b04      	ldr	r3, [pc, #16]	; (800e6fc <vPortSetupTimerInterrupt+0x34>)
 800e6ec:	2207      	movs	r2, #7
 800e6ee:	601a      	str	r2, [r3, #0]
}
 800e6f0:	bf00      	nop
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	e000e010 	.word	0xe000e010
 800e700:	e000e018 	.word	0xe000e018
 800e704:	20000000 	.word	0x20000000
 800e708:	10624dd3 	.word	0x10624dd3
 800e70c:	e000e014 	.word	0xe000e014

0800e710 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e710:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e720 <vPortEnableVFP+0x10>
 800e714:	6801      	ldr	r1, [r0, #0]
 800e716:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e71a:	6001      	str	r1, [r0, #0]
 800e71c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e71e:	bf00      	nop
 800e720:	e000ed88 	.word	0xe000ed88

0800e724 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e72a:	f3ef 8305 	mrs	r3, IPSR
 800e72e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b0f      	cmp	r3, #15
 800e734:	d913      	bls.n	800e75e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e736:	4a16      	ldr	r2, [pc, #88]	; (800e790 <vPortValidateInterruptPriority+0x6c>)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	4413      	add	r3, r2
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e740:	4b14      	ldr	r3, [pc, #80]	; (800e794 <vPortValidateInterruptPriority+0x70>)
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	7afa      	ldrb	r2, [r7, #11]
 800e746:	429a      	cmp	r2, r3
 800e748:	d209      	bcs.n	800e75e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	607b      	str	r3, [r7, #4]
 800e75c:	e7fe      	b.n	800e75c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e75e:	4b0e      	ldr	r3, [pc, #56]	; (800e798 <vPortValidateInterruptPriority+0x74>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e766:	4b0d      	ldr	r3, [pc, #52]	; (800e79c <vPortValidateInterruptPriority+0x78>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d909      	bls.n	800e782 <vPortValidateInterruptPriority+0x5e>
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	e7fe      	b.n	800e780 <vPortValidateInterruptPriority+0x5c>
	}
 800e782:	bf00      	nop
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	e000e3f0 	.word	0xe000e3f0
 800e794:	20000de4 	.word	0x20000de4
 800e798:	e000ed0c 	.word	0xe000ed0c
 800e79c:	20000de8 	.word	0x20000de8

0800e7a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b08a      	sub	sp, #40	; 0x28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7ac:	f7fe fdc2 	bl	800d334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7b0:	4b57      	ldr	r3, [pc, #348]	; (800e910 <pvPortMalloc+0x170>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7b8:	f000 f90c 	bl	800e9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7bc:	4b55      	ldr	r3, [pc, #340]	; (800e914 <pvPortMalloc+0x174>)
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f040 808c 	bne.w	800e8e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d01c      	beq.n	800e80a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e7d0:	2208      	movs	r2, #8
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f003 0307 	and.w	r3, r3, #7
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d013      	beq.n	800e80a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f023 0307 	bic.w	r3, r3, #7
 800e7e8:	3308      	adds	r3, #8
 800e7ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f003 0307 	and.w	r3, r3, #7
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d009      	beq.n	800e80a <pvPortMalloc+0x6a>
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	617b      	str	r3, [r7, #20]
 800e808:	e7fe      	b.n	800e808 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d068      	beq.n	800e8e2 <pvPortMalloc+0x142>
 800e810:	4b41      	ldr	r3, [pc, #260]	; (800e918 <pvPortMalloc+0x178>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	429a      	cmp	r2, r3
 800e818:	d863      	bhi.n	800e8e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e81a:	4b40      	ldr	r3, [pc, #256]	; (800e91c <pvPortMalloc+0x17c>)
 800e81c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e81e:	4b3f      	ldr	r3, [pc, #252]	; (800e91c <pvPortMalloc+0x17c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e824:	e004      	b.n	800e830 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	429a      	cmp	r2, r3
 800e838:	d903      	bls.n	800e842 <pvPortMalloc+0xa2>
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1f1      	bne.n	800e826 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e842:	4b33      	ldr	r3, [pc, #204]	; (800e910 <pvPortMalloc+0x170>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e848:	429a      	cmp	r2, r3
 800e84a:	d04a      	beq.n	800e8e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e84c:	6a3b      	ldr	r3, [r7, #32]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2208      	movs	r2, #8
 800e852:	4413      	add	r3, r2
 800e854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	685a      	ldr	r2, [r3, #4]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	1ad2      	subs	r2, r2, r3
 800e866:	2308      	movs	r3, #8
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d91e      	bls.n	800e8ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	4413      	add	r3, r2
 800e874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d009      	beq.n	800e894 <pvPortMalloc+0xf4>
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	613b      	str	r3, [r7, #16]
 800e892:	e7fe      	b.n	800e892 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	1ad2      	subs	r2, r2, r3
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8a6:	69b8      	ldr	r0, [r7, #24]
 800e8a8:	f000 f8f6 	bl	800ea98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8ac:	4b1a      	ldr	r3, [pc, #104]	; (800e918 <pvPortMalloc+0x178>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	4a18      	ldr	r2, [pc, #96]	; (800e918 <pvPortMalloc+0x178>)
 800e8b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8ba:	4b17      	ldr	r3, [pc, #92]	; (800e918 <pvPortMalloc+0x178>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	4b18      	ldr	r3, [pc, #96]	; (800e920 <pvPortMalloc+0x180>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d203      	bcs.n	800e8ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8c6:	4b14      	ldr	r3, [pc, #80]	; (800e918 <pvPortMalloc+0x178>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a15      	ldr	r2, [pc, #84]	; (800e920 <pvPortMalloc+0x180>)
 800e8cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	4b10      	ldr	r3, [pc, #64]	; (800e914 <pvPortMalloc+0x174>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	431a      	orrs	r2, r3
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	2200      	movs	r2, #0
 800e8e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8e2:	f7fe fd35 	bl	800d350 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	f003 0307 	and.w	r3, r3, #7
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d009      	beq.n	800e904 <pvPortMalloc+0x164>
 800e8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f4:	f383 8811 	msr	BASEPRI, r3
 800e8f8:	f3bf 8f6f 	isb	sy
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	60fb      	str	r3, [r7, #12]
 800e902:	e7fe      	b.n	800e902 <pvPortMalloc+0x162>
	return pvReturn;
 800e904:	69fb      	ldr	r3, [r7, #28]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3728      	adds	r7, #40	; 0x28
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	200049f4 	.word	0x200049f4
 800e914:	20004a00 	.word	0x20004a00
 800e918:	200049f8 	.word	0x200049f8
 800e91c:	200049ec 	.word	0x200049ec
 800e920:	200049fc 	.word	0x200049fc

0800e924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d046      	beq.n	800e9c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e936:	2308      	movs	r3, #8
 800e938:	425b      	negs	r3, r3
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	4413      	add	r3, r2
 800e93e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <vPortFree+0xa8>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4013      	ands	r3, r2
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d109      	bne.n	800e966 <vPortFree+0x42>
 800e952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	e7fe      	b.n	800e964 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d009      	beq.n	800e982 <vPortFree+0x5e>
 800e96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	60bb      	str	r3, [r7, #8]
 800e980:	e7fe      	b.n	800e980 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	685a      	ldr	r2, [r3, #4]
 800e986:	4b11      	ldr	r3, [pc, #68]	; (800e9cc <vPortFree+0xa8>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4013      	ands	r3, r2
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d019      	beq.n	800e9c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d115      	bne.n	800e9c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	4b0b      	ldr	r3, [pc, #44]	; (800e9cc <vPortFree+0xa8>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	43db      	mvns	r3, r3
 800e9a2:	401a      	ands	r2, r3
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9a8:	f7fe fcc4 	bl	800d334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <vPortFree+0xac>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	4a06      	ldr	r2, [pc, #24]	; (800e9d0 <vPortFree+0xac>)
 800e9b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9ba:	6938      	ldr	r0, [r7, #16]
 800e9bc:	f000 f86c 	bl	800ea98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e9c0:	f7fe fcc6 	bl	800d350 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9c4:	bf00      	nop
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20004a00 	.word	0x20004a00
 800e9d0:	200049f8 	.word	0x200049f8

0800e9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e9da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e9e0:	4b27      	ldr	r3, [pc, #156]	; (800ea80 <prvHeapInit+0xac>)
 800e9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00c      	beq.n	800ea08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3307      	adds	r3, #7
 800e9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f023 0307 	bic.w	r3, r3, #7
 800e9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	4a1f      	ldr	r2, [pc, #124]	; (800ea80 <prvHeapInit+0xac>)
 800ea04:	4413      	add	r3, r2
 800ea06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea0c:	4a1d      	ldr	r2, [pc, #116]	; (800ea84 <prvHeapInit+0xb0>)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea12:	4b1c      	ldr	r3, [pc, #112]	; (800ea84 <prvHeapInit+0xb0>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea20:	2208      	movs	r2, #8
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	1a9b      	subs	r3, r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f023 0307 	bic.w	r3, r3, #7
 800ea2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4a15      	ldr	r2, [pc, #84]	; (800ea88 <prvHeapInit+0xb4>)
 800ea34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea36:	4b14      	ldr	r3, [pc, #80]	; (800ea88 <prvHeapInit+0xb4>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea3e:	4b12      	ldr	r3, [pc, #72]	; (800ea88 <prvHeapInit+0xb4>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2200      	movs	r2, #0
 800ea44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	1ad2      	subs	r2, r2, r3
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea54:	4b0c      	ldr	r3, [pc, #48]	; (800ea88 <prvHeapInit+0xb4>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	4a0a      	ldr	r2, [pc, #40]	; (800ea8c <prvHeapInit+0xb8>)
 800ea62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4a09      	ldr	r2, [pc, #36]	; (800ea90 <prvHeapInit+0xbc>)
 800ea6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea6c:	4b09      	ldr	r3, [pc, #36]	; (800ea94 <prvHeapInit+0xc0>)
 800ea6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea72:	601a      	str	r2, [r3, #0]
}
 800ea74:	bf00      	nop
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	20000dec 	.word	0x20000dec
 800ea84:	200049ec 	.word	0x200049ec
 800ea88:	200049f4 	.word	0x200049f4
 800ea8c:	200049fc 	.word	0x200049fc
 800ea90:	200049f8 	.word	0x200049f8
 800ea94:	20004a00 	.word	0x20004a00

0800ea98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eaa0:	4b28      	ldr	r3, [pc, #160]	; (800eb44 <prvInsertBlockIntoFreeList+0xac>)
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e002      	b.n	800eaac <prvInsertBlockIntoFreeList+0x14>
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	60fb      	str	r3, [r7, #12]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d8f7      	bhi.n	800eaa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	68ba      	ldr	r2, [r7, #8]
 800eac0:	4413      	add	r3, r2
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d108      	bne.n	800eada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	441a      	add	r2, r3
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d118      	bne.n	800eb20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	4b15      	ldr	r3, [pc, #84]	; (800eb48 <prvInsertBlockIntoFreeList+0xb0>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d00d      	beq.n	800eb16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	441a      	add	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	601a      	str	r2, [r3, #0]
 800eb14:	e008      	b.n	800eb28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb16:	4b0c      	ldr	r3, [pc, #48]	; (800eb48 <prvInsertBlockIntoFreeList+0xb0>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	601a      	str	r2, [r3, #0]
 800eb1e:	e003      	b.n	800eb28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d002      	beq.n	800eb36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb36:	bf00      	nop
 800eb38:	3714      	adds	r7, #20
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
 800eb44:	200049ec 	.word	0x200049ec
 800eb48:	200049f4 	.word	0x200049f4

0800eb4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eb50:	2201      	movs	r2, #1
 800eb52:	490e      	ldr	r1, [pc, #56]	; (800eb8c <MX_USB_HOST_Init+0x40>)
 800eb54:	480e      	ldr	r0, [pc, #56]	; (800eb90 <MX_USB_HOST_Init+0x44>)
 800eb56:	f7fb fb01 	bl	800a15c <USBH_Init>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d001      	beq.n	800eb64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eb60:	f7f2 fa8c 	bl	800107c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800eb64:	490b      	ldr	r1, [pc, #44]	; (800eb94 <MX_USB_HOST_Init+0x48>)
 800eb66:	480a      	ldr	r0, [pc, #40]	; (800eb90 <MX_USB_HOST_Init+0x44>)
 800eb68:	f7fb fba8 	bl	800a2bc <USBH_RegisterClass>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eb72:	f7f2 fa83 	bl	800107c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eb76:	4806      	ldr	r0, [pc, #24]	; (800eb90 <MX_USB_HOST_Init+0x44>)
 800eb78:	f7fb fc2c 	bl	800a3d4 <USBH_Start>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eb82:	f7f2 fa7b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eb86:	bf00      	nop
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	0800eb99 	.word	0x0800eb99
 800eb90:	20004e54 	.word	0x20004e54
 800eb94:	2000000c 	.word	0x2000000c

0800eb98 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eba4:	78fb      	ldrb	r3, [r7, #3]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d819      	bhi.n	800ebe0 <USBH_UserProcess+0x48>
 800ebac:	a201      	add	r2, pc, #4	; (adr r2, 800ebb4 <USBH_UserProcess+0x1c>)
 800ebae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb2:	bf00      	nop
 800ebb4:	0800ebe1 	.word	0x0800ebe1
 800ebb8:	0800ebd1 	.word	0x0800ebd1
 800ebbc:	0800ebe1 	.word	0x0800ebe1
 800ebc0:	0800ebd9 	.word	0x0800ebd9
 800ebc4:	0800ebc9 	.word	0x0800ebc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ebc8:	4b09      	ldr	r3, [pc, #36]	; (800ebf0 <USBH_UserProcess+0x58>)
 800ebca:	2203      	movs	r2, #3
 800ebcc:	701a      	strb	r2, [r3, #0]
  break;
 800ebce:	e008      	b.n	800ebe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ebd0:	4b07      	ldr	r3, [pc, #28]	; (800ebf0 <USBH_UserProcess+0x58>)
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	701a      	strb	r2, [r3, #0]
  break;
 800ebd6:	e004      	b.n	800ebe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ebd8:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <USBH_UserProcess+0x58>)
 800ebda:	2201      	movs	r2, #1
 800ebdc:	701a      	strb	r2, [r3, #0]
  break;
 800ebde:	e000      	b.n	800ebe2 <USBH_UserProcess+0x4a>

  default:
  break;
 800ebe0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ebe2:	bf00      	nop
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20004a04 	.word	0x20004a04

0800ebf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b08a      	sub	sp, #40	; 0x28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebfc:	f107 0314 	add.w	r3, r7, #20
 800ec00:	2200      	movs	r2, #0
 800ec02:	601a      	str	r2, [r3, #0]
 800ec04:	605a      	str	r2, [r3, #4]
 800ec06:	609a      	str	r2, [r3, #8]
 800ec08:	60da      	str	r2, [r3, #12]
 800ec0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec14:	d147      	bne.n	800eca6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec16:	2300      	movs	r3, #0
 800ec18:	613b      	str	r3, [r7, #16]
 800ec1a:	4b25      	ldr	r3, [pc, #148]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1e:	4a24      	ldr	r2, [pc, #144]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec20:	f043 0301 	orr.w	r3, r3, #1
 800ec24:	6313      	str	r3, [r2, #48]	; 0x30
 800ec26:	4b22      	ldr	r3, [pc, #136]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	613b      	str	r3, [r7, #16]
 800ec30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800ec32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ec40:	f107 0314 	add.w	r3, r7, #20
 800ec44:	4619      	mov	r1, r3
 800ec46:	481b      	ldr	r0, [pc, #108]	; (800ecb4 <HAL_HCD_MspInit+0xc0>)
 800ec48:	f7f3 ff36 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ec4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ec50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec52:	2302      	movs	r3, #2
 800ec54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec56:	2300      	movs	r3, #0
 800ec58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec5a:	2303      	movs	r3, #3
 800ec5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec5e:	230a      	movs	r3, #10
 800ec60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec62:	f107 0314 	add.w	r3, r7, #20
 800ec66:	4619      	mov	r1, r3
 800ec68:	4812      	ldr	r0, [pc, #72]	; (800ecb4 <HAL_HCD_MspInit+0xc0>)
 800ec6a:	f7f3 ff25 	bl	8002ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec6e:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec72:	4a0f      	ldr	r2, [pc, #60]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec78:	6353      	str	r3, [r2, #52]	; 0x34
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	60fb      	str	r3, [r7, #12]
 800ec7e:	4b0c      	ldr	r3, [pc, #48]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec82:	4a0b      	ldr	r2, [pc, #44]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec88:	6453      	str	r3, [r2, #68]	; 0x44
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <HAL_HCD_MspInit+0xbc>)
 800ec8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec96:	2200      	movs	r2, #0
 800ec98:	2100      	movs	r1, #0
 800ec9a:	2043      	movs	r0, #67	; 0x43
 800ec9c:	f7f3 fbc4 	bl	8002428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eca0:	2043      	movs	r0, #67	; 0x43
 800eca2:	f7f3 fbdd 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eca6:	bf00      	nop
 800eca8:	3728      	adds	r7, #40	; 0x28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	40023800 	.word	0x40023800
 800ecb4:	40020000 	.word	0x40020000

0800ecb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fc f831 	bl	800ad2e <USBH_LL_IncTimer>
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fc f875 	bl	800add2 <USBH_LL_Connect>
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fc f88a 	bl	800ae18 <USBH_LL_Disconnect>
}
 800ed04:	bf00      	nop
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fc f8c1 	bl	800aeaa <USBH_LL_NotifyURBChange>
#endif
}
 800ed28:	bf00      	nop
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fc f81f 	bl	800ad82 <USBH_LL_PortEnabled>
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fc f82b 	bl	800adb6 <USBH_LL_PortDisabled>
}
 800ed60:	bf00      	nop
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d12a      	bne.n	800edd0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ed7a:	4a18      	ldr	r2, [pc, #96]	; (800eddc <USBH_LL_Init+0x74>)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a15      	ldr	r2, [pc, #84]	; (800eddc <USBH_LL_Init+0x74>)
 800ed86:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed8a:	4b14      	ldr	r3, [pc, #80]	; (800eddc <USBH_LL_Init+0x74>)
 800ed8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <USBH_LL_Init+0x74>)
 800ed94:	220c      	movs	r2, #12
 800ed96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ed98:	4b10      	ldr	r3, [pc, #64]	; (800eddc <USBH_LL_Init+0x74>)
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed9e:	4b0f      	ldr	r3, [pc, #60]	; (800eddc <USBH_LL_Init+0x74>)
 800eda0:	2200      	movs	r2, #0
 800eda2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eda4:	4b0d      	ldr	r3, [pc, #52]	; (800eddc <USBH_LL_Init+0x74>)
 800eda6:	2202      	movs	r2, #2
 800eda8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800edaa:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <USBH_LL_Init+0x74>)
 800edac:	2200      	movs	r2, #0
 800edae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800edb0:	480a      	ldr	r0, [pc, #40]	; (800eddc <USBH_LL_Init+0x74>)
 800edb2:	f7f4 f847 	bl	8002e44 <HAL_HCD_Init>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d001      	beq.n	800edc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800edbc:	f7f2 f95e 	bl	800107c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800edc0:	4806      	ldr	r0, [pc, #24]	; (800eddc <USBH_LL_Init+0x74>)
 800edc2:	f7f4 fc4b 	bl	800365c <HAL_HCD_GetCurrentFrame>
 800edc6:	4603      	mov	r3, r0
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7fb ffa0 	bl	800ad10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20005238 	.word	0x20005238

0800ede0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede8:	2300      	movs	r3, #0
 800edea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7f4 fbb8 	bl	800356c <HAL_HCD_Start>
 800edfc:	4603      	mov	r3, r0
 800edfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee00:	7bfb      	ldrb	r3, [r7, #15]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f000 f95c 	bl	800f0c0 <USBH_Get_USB_Status>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7f4 fbc0 	bl	80035b2 <HAL_HCD_Stop>
 800ee32:	4603      	mov	r3, r0
 800ee34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee36:	7bfb      	ldrb	r3, [r7, #15]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f000 f941 	bl	800f0c0 <USBH_Get_USB_Status>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ee54:	2301      	movs	r3, #1
 800ee56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f4 fc0a 	bl	8003678 <HAL_HCD_GetCurrentSpeed>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d007      	beq.n	800ee7a <USBH_LL_GetSpeed+0x2e>
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d302      	bcc.n	800ee74 <USBH_LL_GetSpeed+0x28>
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d006      	beq.n	800ee80 <USBH_LL_GetSpeed+0x34>
 800ee72:	e008      	b.n	800ee86 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ee74:	2300      	movs	r3, #0
 800ee76:	73fb      	strb	r3, [r7, #15]
    break;
 800ee78:	e008      	b.n	800ee8c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee7e:	e005      	b.n	800ee8c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ee80:	2302      	movs	r3, #2
 800ee82:	73fb      	strb	r3, [r7, #15]
    break;
 800ee84:	e002      	b.n	800ee8c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ee86:	2301      	movs	r3, #1
 800ee88:	73fb      	strb	r3, [r7, #15]
    break;
 800ee8a:	bf00      	nop
  }
  return  speed;
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f4 fb9d 	bl	80035ec <HAL_HCD_ResetPort>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 f901 	bl	800f0c0 <USBH_Get_USB_Status>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eede:	78fa      	ldrb	r2, [r7, #3]
 800eee0:	4611      	mov	r1, r2
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f4 fba5 	bl	8003632 <HAL_HCD_HC_GetXferCount>
 800eee8:	4603      	mov	r3, r0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eef2:	b590      	push	{r4, r7, lr}
 800eef4:	b089      	sub	sp, #36	; 0x24
 800eef6:	af04      	add	r7, sp, #16
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	4608      	mov	r0, r1
 800eefc:	4611      	mov	r1, r2
 800eefe:	461a      	mov	r2, r3
 800ef00:	4603      	mov	r3, r0
 800ef02:	70fb      	strb	r3, [r7, #3]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70bb      	strb	r3, [r7, #2]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef1a:	787c      	ldrb	r4, [r7, #1]
 800ef1c:	78ba      	ldrb	r2, [r7, #2]
 800ef1e:	78f9      	ldrb	r1, [r7, #3]
 800ef20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef22:	9302      	str	r3, [sp, #8]
 800ef24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef28:	9301      	str	r3, [sp, #4]
 800ef2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	4623      	mov	r3, r4
 800ef32:	f7f3 ffe9 	bl	8002f08 <HAL_HCD_HC_Init>
 800ef36:	4603      	mov	r3, r0
 800ef38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef3a:	7bfb      	ldrb	r3, [r7, #15]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f000 f8bf 	bl	800f0c0 <USBH_Get_USB_Status>
 800ef42:	4603      	mov	r3, r0
 800ef44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3714      	adds	r7, #20
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd90      	pop	{r4, r7, pc}

0800ef50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	460b      	mov	r3, r1
 800ef5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef6a:	78fa      	ldrb	r2, [r7, #3]
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f4 f862 	bl	8003038 <HAL_HCD_HC_Halt>
 800ef74:	4603      	mov	r3, r0
 800ef76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 f8a0 	bl	800f0c0 <USBH_Get_USB_Status>
 800ef80:	4603      	mov	r3, r0
 800ef82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ef8e:	b590      	push	{r4, r7, lr}
 800ef90:	b089      	sub	sp, #36	; 0x24
 800ef92:	af04      	add	r7, sp, #16
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	4608      	mov	r0, r1
 800ef98:	4611      	mov	r1, r2
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	70fb      	strb	r3, [r7, #3]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70bb      	strb	r3, [r7, #2]
 800efa4:	4613      	mov	r3, r2
 800efa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800efb6:	787c      	ldrb	r4, [r7, #1]
 800efb8:	78ba      	ldrb	r2, [r7, #2]
 800efba:	78f9      	ldrb	r1, [r7, #3]
 800efbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800efc0:	9303      	str	r3, [sp, #12]
 800efc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efc4:	9302      	str	r3, [sp, #8]
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	4623      	mov	r3, r4
 800efd2:	f7f4 f855 	bl	8003080 <HAL_HCD_HC_SubmitRequest>
 800efd6:	4603      	mov	r3, r0
 800efd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800efda:	7bfb      	ldrb	r3, [r7, #15]
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 f86f 	bl	800f0c0 <USBH_Get_USB_Status>
 800efe2:	4603      	mov	r3, r0
 800efe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3714      	adds	r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	bd90      	pop	{r4, r7, pc}

0800eff0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	460b      	mov	r3, r1
 800effa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f002:	78fa      	ldrb	r2, [r7, #3]
 800f004:	4611      	mov	r1, r2
 800f006:	4618      	mov	r0, r3
 800f008:	f7f4 fafe 	bl	8003608 <HAL_HCD_HC_GetURBState>
 800f00c:	4603      	mov	r3, r0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	460b      	mov	r3, r1
 800f020:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d103      	bne.n	800f034 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f02c:	78fb      	ldrb	r3, [r7, #3]
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 f872 	bl	800f118 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f034:	20c8      	movs	r0, #200	; 0xc8
 800f036:	f7f2 feab 	bl	8001d90 <HAL_Delay>
  return USBH_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70fb      	strb	r3, [r7, #3]
 800f050:	4613      	mov	r3, r2
 800f052:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f05a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f05c:	78fa      	ldrb	r2, [r7, #3]
 800f05e:	68f9      	ldr	r1, [r7, #12]
 800f060:	4613      	mov	r3, r2
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	4413      	add	r3, r2
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	440b      	add	r3, r1
 800f06a:	333b      	adds	r3, #59	; 0x3b
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00a      	beq.n	800f088 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f072:	78fa      	ldrb	r2, [r7, #3]
 800f074:	68f9      	ldr	r1, [r7, #12]
 800f076:	4613      	mov	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4413      	add	r3, r2
 800f07c:	00db      	lsls	r3, r3, #3
 800f07e:	440b      	add	r3, r1
 800f080:	3350      	adds	r3, #80	; 0x50
 800f082:	78ba      	ldrb	r2, [r7, #2]
 800f084:	701a      	strb	r2, [r3, #0]
 800f086:	e009      	b.n	800f09c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f088:	78fa      	ldrb	r2, [r7, #3]
 800f08a:	68f9      	ldr	r1, [r7, #12]
 800f08c:	4613      	mov	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4413      	add	r3, r2
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	440b      	add	r3, r1
 800f096:	3351      	adds	r3, #81	; 0x51
 800f098:	78ba      	ldrb	r2, [r7, #2]
 800f09a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3714      	adds	r7, #20
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b082      	sub	sp, #8
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7f2 fe6c 	bl	8001d90 <HAL_Delay>
}
 800f0b8:	bf00      	nop
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	2b03      	cmp	r3, #3
 800f0d2:	d817      	bhi.n	800f104 <USBH_Get_USB_Status+0x44>
 800f0d4:	a201      	add	r2, pc, #4	; (adr r2, 800f0dc <USBH_Get_USB_Status+0x1c>)
 800f0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0da:	bf00      	nop
 800f0dc:	0800f0ed 	.word	0x0800f0ed
 800f0e0:	0800f0f3 	.word	0x0800f0f3
 800f0e4:	0800f0f9 	.word	0x0800f0f9
 800f0e8:	0800f0ff 	.word	0x0800f0ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f0f0:	e00b      	b.n	800f10a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f0f2:	2302      	movs	r3, #2
 800f0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0f6:	e008      	b.n	800f10a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f0fc:	e005      	b.n	800f10a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f0fe:	2302      	movs	r3, #2
 800f100:	73fb      	strb	r3, [r7, #15]
    break;
 800f102:	e002      	b.n	800f10a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f104:	2302      	movs	r3, #2
 800f106:	73fb      	strb	r3, [r7, #15]
    break;
 800f108:	bf00      	nop
  }
  return usb_status;
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3714      	adds	r7, #20
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	4603      	mov	r3, r0
 800f120:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f122:	79fb      	ldrb	r3, [r7, #7]
 800f124:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f126:	79fb      	ldrb	r3, [r7, #7]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d102      	bne.n	800f132 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f12c:	2301      	movs	r3, #1
 800f12e:	73fb      	strb	r3, [r7, #15]
 800f130:	e001      	b.n	800f136 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f132:	2300      	movs	r3, #0
 800f134:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800f136:	7bfb      	ldrb	r3, [r7, #15]
 800f138:	461a      	mov	r2, r3
 800f13a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f13e:	4803      	ldr	r0, [pc, #12]	; (800f14c <MX_DriverVbusFS+0x34>)
 800f140:	f7f3 fe4c 	bl	8002ddc <HAL_GPIO_WritePin>
}
 800f144:	bf00      	nop
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	40021800 	.word	0x40021800

0800f150 <__errno>:
 800f150:	4b01      	ldr	r3, [pc, #4]	; (800f158 <__errno+0x8>)
 800f152:	6818      	ldr	r0, [r3, #0]
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	20000030 	.word	0x20000030

0800f15c <__libc_init_array>:
 800f15c:	b570      	push	{r4, r5, r6, lr}
 800f15e:	4e0d      	ldr	r6, [pc, #52]	; (800f194 <__libc_init_array+0x38>)
 800f160:	4c0d      	ldr	r4, [pc, #52]	; (800f198 <__libc_init_array+0x3c>)
 800f162:	1ba4      	subs	r4, r4, r6
 800f164:	10a4      	asrs	r4, r4, #2
 800f166:	2500      	movs	r5, #0
 800f168:	42a5      	cmp	r5, r4
 800f16a:	d109      	bne.n	800f180 <__libc_init_array+0x24>
 800f16c:	4e0b      	ldr	r6, [pc, #44]	; (800f19c <__libc_init_array+0x40>)
 800f16e:	4c0c      	ldr	r4, [pc, #48]	; (800f1a0 <__libc_init_array+0x44>)
 800f170:	f000 f8f6 	bl	800f360 <_init>
 800f174:	1ba4      	subs	r4, r4, r6
 800f176:	10a4      	asrs	r4, r4, #2
 800f178:	2500      	movs	r5, #0
 800f17a:	42a5      	cmp	r5, r4
 800f17c:	d105      	bne.n	800f18a <__libc_init_array+0x2e>
 800f17e:	bd70      	pop	{r4, r5, r6, pc}
 800f180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f184:	4798      	blx	r3
 800f186:	3501      	adds	r5, #1
 800f188:	e7ee      	b.n	800f168 <__libc_init_array+0xc>
 800f18a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f18e:	4798      	blx	r3
 800f190:	3501      	adds	r5, #1
 800f192:	e7f2      	b.n	800f17a <__libc_init_array+0x1e>
 800f194:	0800f41c 	.word	0x0800f41c
 800f198:	0800f41c 	.word	0x0800f41c
 800f19c:	0800f41c 	.word	0x0800f41c
 800f1a0:	0800f420 	.word	0x0800f420

0800f1a4 <malloc>:
 800f1a4:	4b02      	ldr	r3, [pc, #8]	; (800f1b0 <malloc+0xc>)
 800f1a6:	4601      	mov	r1, r0
 800f1a8:	6818      	ldr	r0, [r3, #0]
 800f1aa:	f000 b86d 	b.w	800f288 <_malloc_r>
 800f1ae:	bf00      	nop
 800f1b0:	20000030 	.word	0x20000030

0800f1b4 <free>:
 800f1b4:	4b02      	ldr	r3, [pc, #8]	; (800f1c0 <free+0xc>)
 800f1b6:	4601      	mov	r1, r0
 800f1b8:	6818      	ldr	r0, [r3, #0]
 800f1ba:	f000 b817 	b.w	800f1ec <_free_r>
 800f1be:	bf00      	nop
 800f1c0:	20000030 	.word	0x20000030

0800f1c4 <memcpy>:
 800f1c4:	b510      	push	{r4, lr}
 800f1c6:	1e43      	subs	r3, r0, #1
 800f1c8:	440a      	add	r2, r1
 800f1ca:	4291      	cmp	r1, r2
 800f1cc:	d100      	bne.n	800f1d0 <memcpy+0xc>
 800f1ce:	bd10      	pop	{r4, pc}
 800f1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1d8:	e7f7      	b.n	800f1ca <memcpy+0x6>

0800f1da <memset>:
 800f1da:	4402      	add	r2, r0
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d100      	bne.n	800f1e4 <memset+0xa>
 800f1e2:	4770      	bx	lr
 800f1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800f1e8:	e7f9      	b.n	800f1de <memset+0x4>
	...

0800f1ec <_free_r>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4605      	mov	r5, r0
 800f1f0:	2900      	cmp	r1, #0
 800f1f2:	d045      	beq.n	800f280 <_free_r+0x94>
 800f1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1f8:	1f0c      	subs	r4, r1, #4
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	bfb8      	it	lt
 800f1fe:	18e4      	addlt	r4, r4, r3
 800f200:	f000 f8ac 	bl	800f35c <__malloc_lock>
 800f204:	4a1f      	ldr	r2, [pc, #124]	; (800f284 <_free_r+0x98>)
 800f206:	6813      	ldr	r3, [r2, #0]
 800f208:	4610      	mov	r0, r2
 800f20a:	b933      	cbnz	r3, 800f21a <_free_r+0x2e>
 800f20c:	6063      	str	r3, [r4, #4]
 800f20e:	6014      	str	r4, [r2, #0]
 800f210:	4628      	mov	r0, r5
 800f212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f216:	f000 b8a2 	b.w	800f35e <__malloc_unlock>
 800f21a:	42a3      	cmp	r3, r4
 800f21c:	d90c      	bls.n	800f238 <_free_r+0x4c>
 800f21e:	6821      	ldr	r1, [r4, #0]
 800f220:	1862      	adds	r2, r4, r1
 800f222:	4293      	cmp	r3, r2
 800f224:	bf04      	itt	eq
 800f226:	681a      	ldreq	r2, [r3, #0]
 800f228:	685b      	ldreq	r3, [r3, #4]
 800f22a:	6063      	str	r3, [r4, #4]
 800f22c:	bf04      	itt	eq
 800f22e:	1852      	addeq	r2, r2, r1
 800f230:	6022      	streq	r2, [r4, #0]
 800f232:	6004      	str	r4, [r0, #0]
 800f234:	e7ec      	b.n	800f210 <_free_r+0x24>
 800f236:	4613      	mov	r3, r2
 800f238:	685a      	ldr	r2, [r3, #4]
 800f23a:	b10a      	cbz	r2, 800f240 <_free_r+0x54>
 800f23c:	42a2      	cmp	r2, r4
 800f23e:	d9fa      	bls.n	800f236 <_free_r+0x4a>
 800f240:	6819      	ldr	r1, [r3, #0]
 800f242:	1858      	adds	r0, r3, r1
 800f244:	42a0      	cmp	r0, r4
 800f246:	d10b      	bne.n	800f260 <_free_r+0x74>
 800f248:	6820      	ldr	r0, [r4, #0]
 800f24a:	4401      	add	r1, r0
 800f24c:	1858      	adds	r0, r3, r1
 800f24e:	4282      	cmp	r2, r0
 800f250:	6019      	str	r1, [r3, #0]
 800f252:	d1dd      	bne.n	800f210 <_free_r+0x24>
 800f254:	6810      	ldr	r0, [r2, #0]
 800f256:	6852      	ldr	r2, [r2, #4]
 800f258:	605a      	str	r2, [r3, #4]
 800f25a:	4401      	add	r1, r0
 800f25c:	6019      	str	r1, [r3, #0]
 800f25e:	e7d7      	b.n	800f210 <_free_r+0x24>
 800f260:	d902      	bls.n	800f268 <_free_r+0x7c>
 800f262:	230c      	movs	r3, #12
 800f264:	602b      	str	r3, [r5, #0]
 800f266:	e7d3      	b.n	800f210 <_free_r+0x24>
 800f268:	6820      	ldr	r0, [r4, #0]
 800f26a:	1821      	adds	r1, r4, r0
 800f26c:	428a      	cmp	r2, r1
 800f26e:	bf04      	itt	eq
 800f270:	6811      	ldreq	r1, [r2, #0]
 800f272:	6852      	ldreq	r2, [r2, #4]
 800f274:	6062      	str	r2, [r4, #4]
 800f276:	bf04      	itt	eq
 800f278:	1809      	addeq	r1, r1, r0
 800f27a:	6021      	streq	r1, [r4, #0]
 800f27c:	605c      	str	r4, [r3, #4]
 800f27e:	e7c7      	b.n	800f210 <_free_r+0x24>
 800f280:	bd38      	pop	{r3, r4, r5, pc}
 800f282:	bf00      	nop
 800f284:	20004a08 	.word	0x20004a08

0800f288 <_malloc_r>:
 800f288:	b570      	push	{r4, r5, r6, lr}
 800f28a:	1ccd      	adds	r5, r1, #3
 800f28c:	f025 0503 	bic.w	r5, r5, #3
 800f290:	3508      	adds	r5, #8
 800f292:	2d0c      	cmp	r5, #12
 800f294:	bf38      	it	cc
 800f296:	250c      	movcc	r5, #12
 800f298:	2d00      	cmp	r5, #0
 800f29a:	4606      	mov	r6, r0
 800f29c:	db01      	blt.n	800f2a2 <_malloc_r+0x1a>
 800f29e:	42a9      	cmp	r1, r5
 800f2a0:	d903      	bls.n	800f2aa <_malloc_r+0x22>
 800f2a2:	230c      	movs	r3, #12
 800f2a4:	6033      	str	r3, [r6, #0]
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	bd70      	pop	{r4, r5, r6, pc}
 800f2aa:	f000 f857 	bl	800f35c <__malloc_lock>
 800f2ae:	4a21      	ldr	r2, [pc, #132]	; (800f334 <_malloc_r+0xac>)
 800f2b0:	6814      	ldr	r4, [r2, #0]
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	b991      	cbnz	r1, 800f2dc <_malloc_r+0x54>
 800f2b6:	4c20      	ldr	r4, [pc, #128]	; (800f338 <_malloc_r+0xb0>)
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	b91b      	cbnz	r3, 800f2c4 <_malloc_r+0x3c>
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f000 f83d 	bl	800f33c <_sbrk_r>
 800f2c2:	6020      	str	r0, [r4, #0]
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f000 f838 	bl	800f33c <_sbrk_r>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d124      	bne.n	800f31a <_malloc_r+0x92>
 800f2d0:	230c      	movs	r3, #12
 800f2d2:	6033      	str	r3, [r6, #0]
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	f000 f842 	bl	800f35e <__malloc_unlock>
 800f2da:	e7e4      	b.n	800f2a6 <_malloc_r+0x1e>
 800f2dc:	680b      	ldr	r3, [r1, #0]
 800f2de:	1b5b      	subs	r3, r3, r5
 800f2e0:	d418      	bmi.n	800f314 <_malloc_r+0x8c>
 800f2e2:	2b0b      	cmp	r3, #11
 800f2e4:	d90f      	bls.n	800f306 <_malloc_r+0x7e>
 800f2e6:	600b      	str	r3, [r1, #0]
 800f2e8:	50cd      	str	r5, [r1, r3]
 800f2ea:	18cc      	adds	r4, r1, r3
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	f000 f836 	bl	800f35e <__malloc_unlock>
 800f2f2:	f104 000b 	add.w	r0, r4, #11
 800f2f6:	1d23      	adds	r3, r4, #4
 800f2f8:	f020 0007 	bic.w	r0, r0, #7
 800f2fc:	1ac3      	subs	r3, r0, r3
 800f2fe:	d0d3      	beq.n	800f2a8 <_malloc_r+0x20>
 800f300:	425a      	negs	r2, r3
 800f302:	50e2      	str	r2, [r4, r3]
 800f304:	e7d0      	b.n	800f2a8 <_malloc_r+0x20>
 800f306:	428c      	cmp	r4, r1
 800f308:	684b      	ldr	r3, [r1, #4]
 800f30a:	bf16      	itet	ne
 800f30c:	6063      	strne	r3, [r4, #4]
 800f30e:	6013      	streq	r3, [r2, #0]
 800f310:	460c      	movne	r4, r1
 800f312:	e7eb      	b.n	800f2ec <_malloc_r+0x64>
 800f314:	460c      	mov	r4, r1
 800f316:	6849      	ldr	r1, [r1, #4]
 800f318:	e7cc      	b.n	800f2b4 <_malloc_r+0x2c>
 800f31a:	1cc4      	adds	r4, r0, #3
 800f31c:	f024 0403 	bic.w	r4, r4, #3
 800f320:	42a0      	cmp	r0, r4
 800f322:	d005      	beq.n	800f330 <_malloc_r+0xa8>
 800f324:	1a21      	subs	r1, r4, r0
 800f326:	4630      	mov	r0, r6
 800f328:	f000 f808 	bl	800f33c <_sbrk_r>
 800f32c:	3001      	adds	r0, #1
 800f32e:	d0cf      	beq.n	800f2d0 <_malloc_r+0x48>
 800f330:	6025      	str	r5, [r4, #0]
 800f332:	e7db      	b.n	800f2ec <_malloc_r+0x64>
 800f334:	20004a08 	.word	0x20004a08
 800f338:	20004a0c 	.word	0x20004a0c

0800f33c <_sbrk_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4c06      	ldr	r4, [pc, #24]	; (800f358 <_sbrk_r+0x1c>)
 800f340:	2300      	movs	r3, #0
 800f342:	4605      	mov	r5, r0
 800f344:	4608      	mov	r0, r1
 800f346:	6023      	str	r3, [r4, #0]
 800f348:	f7f2 fc6a 	bl	8001c20 <_sbrk>
 800f34c:	1c43      	adds	r3, r0, #1
 800f34e:	d102      	bne.n	800f356 <_sbrk_r+0x1a>
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	b103      	cbz	r3, 800f356 <_sbrk_r+0x1a>
 800f354:	602b      	str	r3, [r5, #0]
 800f356:	bd38      	pop	{r3, r4, r5, pc}
 800f358:	200054fc 	.word	0x200054fc

0800f35c <__malloc_lock>:
 800f35c:	4770      	bx	lr

0800f35e <__malloc_unlock>:
 800f35e:	4770      	bx	lr

0800f360 <_init>:
 800f360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f362:	bf00      	nop
 800f364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f366:	bc08      	pop	{r3}
 800f368:	469e      	mov	lr, r3
 800f36a:	4770      	bx	lr

0800f36c <_fini>:
 800f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36e:	bf00      	nop
 800f370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f372:	bc08      	pop	{r3}
 800f374:	469e      	mov	lr, r3
 800f376:	4770      	bx	lr
