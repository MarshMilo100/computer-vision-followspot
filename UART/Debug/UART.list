
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f388  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800f568  0800f568  0001f568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f604  0800f604  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800f604  0800f604  0001f604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f60c  0800f60c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f60c  0800f60c  0001f60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f610  0800f610  0001f610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800f614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000546c  20000094  0800f6a8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  0800f6a8  00025500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003647d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006509  00000000  00000000  00056541  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002930  00000000  00000000  0005ca50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002658  00000000  00000000  0005f380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009e4c  00000000  00000000  000619d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000258be  00000000  00000000  0006b824  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6560  00000000  00000000  000910e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00187642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b164  00000000  00000000  001876c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f550 	.word	0x0800f550

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000098 	.word	0x20000098
 800021c:	0800f550 	.word	0x0800f550

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_UART_RxCpltCallback>:
void DefaultThread(void *argument);
void MainThread(void *argument);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart6, Rx_Data, 4);
 8000528:	2204      	movs	r2, #4
 800052a:	4909      	ldr	r1, [pc, #36]	; (8000550 <HAL_UART_RxCpltCallback+0x30>)
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_UART_RxCpltCallback+0x34>)
 800052e:	f006 ffff 	bl	8007530 <HAL_UART_Receive_IT>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000532:	2108      	movs	r1, #8
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <HAL_UART_RxCpltCallback+0x38>)
 8000536:	f002 fc7a 	bl	8002e2e <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart6, Rx_Data, 4, 10);
 800053a:	230a      	movs	r3, #10
 800053c:	2204      	movs	r2, #4
 800053e:	4904      	ldr	r1, [pc, #16]	; (8000550 <HAL_UART_RxCpltCallback+0x30>)
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <HAL_UART_RxCpltCallback+0x34>)
 8000542:	f006 ff5c 	bl	80073fe <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20004c40 	.word	0x20004c40
 8000554:	20004cd0 	.word	0x20004cd0
 8000558:	40021000 	.word	0x40021000

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f001 fbe4 	bl	8001d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f83a 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 fb0a 	bl	8000b80 <MX_GPIO_Init>
  MX_ADC1_Init();
 800056c:	f000 f8d6 	bl	800071c <MX_ADC1_Init>
  MX_DAC_Init();
 8000570:	f000 f926 	bl	80007c0 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000574:	f000 f94e 	bl	8000814 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000578:	f000 f984 	bl	8000884 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800057c:	f000 f9ec 	bl	8000958 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000580:	f000 fca6 	bl	8000ed0 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000584:	f000 fa1e 	bl	80009c4 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000588:	f000 fa4a 	bl	8000a20 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 800058c:	f000 fa74 	bl	8000a78 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000590:	f000 faa2 	bl	8000ad8 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000594:	f000 faca 	bl	8000b2c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f00b fc66 	bl	800be68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(DefaultThread, NULL, &blink01_attributes);
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <main+0x68>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <main+0x6c>)
 80005a2:	f00b fccb 	bl	800bf3c <osThreadNew>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <main+0x70>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* creation of mainThread */
  mainThreadHandle = osThreadNew(MainThread, NULL, &mainThread_attributes);
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <main+0x74>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x78>)
 80005b2:	f00b fcc3 	bl	800bf3c <osThreadNew>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <main+0x7c>)
 80005ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f00b fc88 	bl	800bed0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x64>
 80005c2:	bf00      	nop
 80005c4:	0800f5a4 	.word	0x0800f5a4
 80005c8:	08001035 	.word	0x08001035
 80005cc:	20004d10 	.word	0x20004d10
 80005d0:	0800f5c8 	.word	0x0800f5c8
 80005d4:	08001069 	.word	0x08001069
 80005d8:	20004d14 	.word	0x20004d14

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0aa      	sub	sp, #168	; 0xa8
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005e6:	2234      	movs	r2, #52	; 0x34
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f00e feed 	bl	800f3ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2258      	movs	r2, #88	; 0x58
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f00e fede 	bl	800f3ca <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b40      	ldr	r3, [pc, #256]	; (8000714 <SystemClock_Config+0x138>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	4a3f      	ldr	r2, [pc, #252]	; (8000714 <SystemClock_Config+0x138>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	; 0x40
 800061e:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <SystemClock_Config+0x138>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <SystemClock_Config+0x13c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a39      	ldr	r2, [pc, #228]	; (8000718 <SystemClock_Config+0x13c>)
 8000634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4b37      	ldr	r3, [pc, #220]	; (8000718 <SystemClock_Config+0x13c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000646:	2303      	movs	r3, #3
 8000648:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800066a:	230f      	movs	r3, #15
 800066c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800067c:	2305      	movs	r3, #5
 800067e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800068c:	4618      	mov	r0, r3
 800068e:	f005 fc39 	bl	8005f04 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000698:	f000 fd00 	bl	800109c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fe4a 	bl	8005350 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006c2:	f000 fceb 	bl	800109c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80006c6:	f240 1371 	movw	r3, #369	; 0x171
 80006ca:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80006d0:	230c      	movs	r3, #12
 80006d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80006e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80006ea:	2300      	movs	r3, #0
 80006ec:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80006f2:	2300      	movs	r3, #0
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 f826 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000706:	f000 fcc9 	bl	800109c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	37a8      	adds	r7, #168	; 0xa8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <MX_ADC1_Init+0x9c>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_ADC1_Init+0x98>)
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_ADC1_Init+0xa0>)
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000768:	2201      	movs	r2, #1
 800076a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ADC1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC1_Init+0x98>)
 8000776:	2201      	movs	r2, #1
 8000778:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077a:	480e      	ldr	r0, [pc, #56]	; (80007b4 <MX_ADC1_Init+0x98>)
 800077c:	f001 fb3a 	bl	8001df4 <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fc89 	bl	800109c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800078a:	230a      	movs	r3, #10
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_ADC1_Init+0x98>)
 800079c:	f001 fb6e 	bl	8001e7c <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007a6:	f000 fc79 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20004b48 	.word	0x20004b48
 80007b8:	40012000 	.word	0x40012000
 80007bc:	0f000001 	.word	0x0f000001

080007c0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_DAC_Init+0x4c>)
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <MX_DAC_Init+0x50>)
 80007d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_DAC_Init+0x4c>)
 80007d6:	f001 fe61 	bl	800249c <HAL_DAC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e0:	f000 fc5c 	bl	800109c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_DAC_Init+0x4c>)
 80007f4:	f001 fec8 	bl	8002588 <HAL_DAC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007fe:	f000 fc4d 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20004b90 	.word	0x20004b90
 8000810:	40007400 	.word	0x40007400

08000814 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_DFSDM1_Init+0x68>)
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <MX_DFSDM1_Init+0x6c>)
 800081c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_DFSDM1_Init+0x68>)
 800082c:	2202      	movs	r2, #2
 800082e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_DFSDM1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000844:	2202      	movs	r2, #2
 8000846:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DFSDM1_Init+0x68>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000856:	2201      	movs	r2, #1
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_DFSDM1_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_DFSDM1_Init+0x68>)
 8000868:	f001 fee6 	bl	8002638 <HAL_DFSDM_ChannelInit>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000872:	f000 fc13 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004a10 	.word	0x20004a10
 8000880:	40016020 	.word	0x40016020

08000884 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <MX_DFSDM2_Init+0xc8>)
 800088c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 8000890:	2201      	movs	r2, #1
 8000892:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000894:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800089a:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80008d6:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_DFSDM2_Init+0xc4>)
 80008d8:	f001 feae 	bl	8002638 <HAL_DFSDM_ChannelInit>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80008e2:	f000 fbdb 	bl	800109c <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <MX_DFSDM2_Init+0xd0>)
 80008ea:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000912:	2202      	movs	r2, #2
 8000914:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000924:	2201      	movs	r2, #1
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_DFSDM2_Init+0xcc>)
 8000936:	f001 fe7f 	bl	8002638 <HAL_DFSDM_ChannelInit>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000940:	f000 fbac 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20004b10 	.word	0x20004b10
 800094c:	40016420 	.word	0x40016420
 8000950:	20004a48 	.word	0x20004a48
 8000954:	400164e0 	.word	0x400164e0

08000958 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_FMPI2C1_Init+0x64>)
 8000960:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 8000964:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <MX_FMPI2C1_Init+0x68>)
 8000966:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 8000994:	f001 ffc6 	bl	8002924 <HAL_FMPI2C_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 fb7d 	bl	800109c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_FMPI2C1_Init+0x60>)
 80009a6:	f002 f84c 	bl	8002a42 <HAL_FMPI2CEx_ConfigAnalogFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 fb74 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20004ba4 	.word	0x20004ba4
 80009bc:	40006000 	.word	0x40006000
 80009c0:	00303d5b 	.word	0x00303d5b

080009c4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <MX_I2S2_Init+0x58>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009f0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2S2_Init+0x54>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2S2_Init+0x54>)
 8000a06:	f003 ff1f 	bl	8004848 <HAL_I2S_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a10:	f000 fb44 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20004d18 	.word	0x20004d18
 8000a1c:	40003800 	.word	0x40003800

08000a20 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_QUADSPI_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a5c:	f004 fbb6 	bl	80051cc <HAL_QSPI_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f000 fb19 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20004d60 	.word	0x20004d60
 8000a74:	a0001000 	.word	0xa0001000

08000a78 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <MX_SDIO_SD_Init+0x5c>)
 8000a80:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000aa8:	f005 fc6e 	bl	8006388 <HAL_SD_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ab2:	f000 faf3 	bl	800109c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000abc:	f005 fe98 	bl	80067f0 <HAL_SD_ConfigWideBusOperation>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f000 fae9 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20004c4c 	.word	0x20004c4c
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_UART10_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_UART10_Init+0x4c>)
 8000b10:	f006 fc28 	bl	8007364 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 fabf 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20004a80 	.word	0x20004a80
 8000b28:	40011c00 	.word	0x40011c00

08000b2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_USART6_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART6_UART_Init+0x4c>)
 8000b64:	f006 fbfe 	bl	8007364 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 fa95 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20004cd0 	.word	0x20004cd0
 8000b7c:	40011400 	.word	0x40011400

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	4bb0      	ldr	r3, [pc, #704]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4aaf      	ldr	r2, [pc, #700]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4bad      	ldr	r3, [pc, #692]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	4ba9      	ldr	r3, [pc, #676]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4aa8      	ldr	r2, [pc, #672]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4ba6      	ldr	r3, [pc, #664]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4ba2      	ldr	r3, [pc, #648]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4aa1      	ldr	r2, [pc, #644]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bd8:	f043 0320 	orr.w	r3, r3, #32
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b9f      	ldr	r3, [pc, #636]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b9b      	ldr	r3, [pc, #620]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a9a      	ldr	r2, [pc, #616]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b98      	ldr	r3, [pc, #608]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b94      	ldr	r3, [pc, #592]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a93      	ldr	r2, [pc, #588]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b91      	ldr	r3, [pc, #580]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b8d      	ldr	r3, [pc, #564]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a8c      	ldr	r2, [pc, #560]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b8a      	ldr	r3, [pc, #552]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a85      	ldr	r2, [pc, #532]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b83      	ldr	r3, [pc, #524]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b7f      	ldr	r3, [pc, #508]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a7e      	ldr	r2, [pc, #504]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b7c      	ldr	r3, [pc, #496]	; (8000e5c <MX_GPIO_Init+0x2dc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2138      	movs	r1, #56	; 0x38
 8000c7a:	4879      	ldr	r0, [pc, #484]	; (8000e60 <MX_GPIO_Init+0x2e0>)
 8000c7c:	f002 f8be 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	4877      	ldr	r0, [pc, #476]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000c86:	f002 f8b9 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c90:	4875      	ldr	r0, [pc, #468]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000c92:	f002 f8b3 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000c9c:	4873      	ldr	r0, [pc, #460]	; (8000e6c <MX_GPIO_Init+0x2ec>)
 8000c9e:	f002 f8ad 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000ca2:	2338      	movs	r3, #56	; 0x38
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4869      	ldr	r0, [pc, #420]	; (8000e60 <MX_GPIO_Init+0x2e0>)
 8000cba:	f001 ff0d 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000cbe:	2340      	movs	r3, #64	; 0x40
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4861      	ldr	r0, [pc, #388]	; (8000e60 <MX_GPIO_Init+0x2e0>)
 8000cda:	f001 fefd 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	485d      	ldr	r0, [pc, #372]	; (8000e70 <MX_GPIO_Init+0x2f0>)
 8000cfc:	f001 feec 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000d00:	2302      	movs	r3, #2
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d04:	4b5b      	ldr	r3, [pc, #364]	; (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4854      	ldr	r0, [pc, #336]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000d14:	f001 fee0 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1c:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4853      	ldr	r0, [pc, #332]	; (8000e78 <MX_GPIO_Init+0x2f8>)
 8000d2c:	f001 fed4 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d30:	2320      	movs	r3, #32
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4847      	ldr	r0, [pc, #284]	; (8000e64 <MX_GPIO_Init+0x2e4>)
 8000d48:	f001 fec6 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4840      	ldr	r0, [pc, #256]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000d68:	f001 feb6 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <MX_GPIO_Init+0x2f4>)
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	483b      	ldr	r0, [pc, #236]	; (8000e70 <MX_GPIO_Init+0x2f0>)
 8000d82:	f001 fea9 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4831      	ldr	r0, [pc, #196]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000da4:	f001 fe98 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000dc6:	f001 fe87 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000dca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_GPIO_Init+0x2e8>)
 8000de4:	f001 fe78 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000de8:	f248 0380 	movw	r3, #32896	; 0x8080
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_GPIO_Init+0x2f4>)
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481b      	ldr	r0, [pc, #108]	; (8000e6c <MX_GPIO_Init+0x2ec>)
 8000dfe:	f001 fe6b 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000e02:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_GPIO_Init+0x2ec>)
 8000e1c:	f001 fe5c 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e32:	2301      	movs	r3, #1
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_GPIO_Init+0x2f8>)
 8000e3e:	f001 fe4b 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e42:	2330      	movs	r3, #48	; 0x30
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e52:	2306      	movs	r3, #6
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	e00f      	b.n	8000e7c <MX_GPIO_Init+0x2fc>
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	40021400 	.word	0x40021400
 8000e74:	10110000 	.word	0x10110000
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <MX_GPIO_Init+0x348>)
 8000e80:	f001 fe2a 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_GPIO_Init+0x34c>)
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0x348>)
 8000e98:	f001 fe1e 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_GPIO_Init+0x348>)
 8000eba:	f001 fe0d 	bl	8002ad8 <HAL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	10110000 	.word	0x10110000

08000ed0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ee8:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <MX_FSMC_Init+0x158>)
 8000eea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000eee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ef0:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <MX_FSMC_Init+0x158>)
 8000ef2:	4a4e      	ldr	r2, [pc, #312]	; (800102c <MX_FSMC_Init+0x15c>)
 8000ef4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <MX_FSMC_Init+0x158>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000efc:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <MX_FSMC_Init+0x158>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f0a:	2210      	movs	r2, #16
 8000f0c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f0e:	4b46      	ldr	r3, [pc, #280]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f1a:	4b43      	ldr	r3, [pc, #268]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f26:	4b40      	ldr	r3, [pc, #256]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f50:	230f      	movs	r3, #15
 8000f52:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f54:	230f      	movs	r3, #15
 8000f56:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f58:	23ff      	movs	r3, #255	; 0xff
 8000f5a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f60:	2310      	movs	r3, #16
 8000f62:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f64:	2311      	movs	r3, #17
 8000f66:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	482d      	ldr	r0, [pc, #180]	; (8001028 <MX_FSMC_Init+0x158>)
 8000f74:	f005 ff74 	bl	8006e60 <HAL_SRAM_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000f7e:	f000 f88d 	bl	800109c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_FSMC_Init+0x160>)
 8000f84:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f88:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <MX_FSMC_Init+0x160>)
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <MX_FSMC_Init+0x15c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MX_FSMC_Init+0x160>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <MX_FSMC_Init+0x160>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_FSMC_Init+0x160>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_FSMC_Init+0x160>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_FSMC_Init+0x160>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fec:	230f      	movs	r3, #15
 8000fee:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ff4:	23ff      	movs	r3, #255	; 0xff
 8000ff6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001000:	2311      	movs	r3, #17
 8001002:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <MX_FSMC_Init+0x160>)
 8001010:	f005 ff26 	bl	8006e60 <HAL_SRAM_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800101a:	f000 f83f 	bl	800109c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20004ac0 	.word	0x20004ac0
 800102c:	a0000104 	.word	0xa0000104
 8001030:	20004bf0 	.word	0x20004bf0

08001034 <DefaultThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultThread */
void DefaultThread(void *argument)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800103c:	f00d fe7e 	bl	800ed3c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_UART_Receive_IT(&huart6, Rx_Data, 4);
 8001040:	2204      	movs	r2, #4
 8001042:	4906      	ldr	r1, [pc, #24]	; (800105c <DefaultThread+0x28>)
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <DefaultThread+0x2c>)
 8001046:	f006 fa73 	bl	8007530 <HAL_UART_Receive_IT>
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800104a:	2120      	movs	r1, #32
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <DefaultThread+0x30>)
 800104e:	f001 feee 	bl	8002e2e <HAL_GPIO_TogglePin>
    osDelay(500);
 8001052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001056:	f00b f817 	bl	800c088 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800105a:	e7f6      	b.n	800104a <DefaultThread+0x16>
 800105c:	20004c40 	.word	0x20004c40
 8001060:	20004cd0 	.word	0x20004cd0
 8001064:	40020800 	.word	0x40020800

08001068 <MainThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainThread */
void MainThread(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainThread */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f00b f809 	bl	800c088 <osDelay>
 8001076:	e7fb      	b.n	8001070 <MainThread+0x8>

08001078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108a:	f000 fe71 	bl	8001d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40001000 	.word	0x40001000

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_MspInit+0x4c>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x4c>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d15b      	bne.n	80011d6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800118e:	2311      	movs	r3, #17
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <HAL_ADC_MspInit+0xec>)
 80011a2:	f001 fc99 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80011a6:	2326      	movs	r3, #38	; 0x26
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_ADC_MspInit+0xf0>)
 80011ba:	f001 fc8d 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <HAL_ADC_MspInit+0xf4>)
 80011d2:	f001 fc81 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40012000 	.word	0x40012000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_DAC_MspInit+0x8c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d12f      	bne.n	8001276 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_DAC_MspInit+0x90>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_DAC_MspInit+0x90>)
 8001220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_DAC_MspInit+0x90>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_DAC_MspInit+0x90>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_DAC_MspInit+0x90>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_DAC_MspInit+0x90>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800124e:	2310      	movs	r3, #16
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	; (8001288 <HAL_DAC_MspInit+0x94>)
 8001262:	f001 fc39 	bl	8002ad8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2036      	movs	r0, #54	; 0x36
 800126c:	f001 f8ec 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001270:	2036      	movs	r0, #54	; 0x36
 8001272:	f001 f905 	bl	8002480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40007400 	.word	0x40007400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a77      	ldr	r2, [pc, #476]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00e      	beq.n	80012cc <HAL_DFSDM_ChannelMspInit+0x40>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a76      	ldr	r2, [pc, #472]	; (800148c <HAL_DFSDM_ChannelMspInit+0x200>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d009      	beq.n	80012cc <HAL_DFSDM_ChannelMspInit+0x40>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a74      	ldr	r2, [pc, #464]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x204>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d004      	beq.n	80012cc <HAL_DFSDM_ChannelMspInit+0x40>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a73      	ldr	r2, [pc, #460]	; (8001494 <HAL_DFSDM_ChannelMspInit+0x208>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d154      	bne.n	8001376 <HAL_DFSDM_ChannelMspInit+0xea>
 80012cc:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d150      	bne.n	8001376 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	4a6f      	ldr	r2, [pc, #444]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e2:	6453      	str	r3, [r2, #68]	; 0x44
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a68      	ldr	r2, [pc, #416]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	4b62      	ldr	r3, [pc, #392]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a61      	ldr	r2, [pc, #388]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800133a:	2306      	movs	r3, #6
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4856      	ldr	r0, [pc, #344]	; (80014a0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001346:	f001 fbc7 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800134a:	2340      	movs	r3, #64	; 0x40
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800135a:	2306      	movs	r3, #6
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	484f      	ldr	r0, [pc, #316]	; (80014a4 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001366:	f001 fbb7 	bl	8002ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a49      	ldr	r2, [pc, #292]	; (8001498 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001372:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001374:	e084      	b.n	8001480 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a43      	ldr	r2, [pc, #268]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d07f      	beq.n	8001480 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a41      	ldr	r2, [pc, #260]	; (800148c <HAL_DFSDM_ChannelMspInit+0x200>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d07a      	beq.n	8001480 <HAL_DFSDM_ChannelMspInit+0x1f4>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a40      	ldr	r2, [pc, #256]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d075      	beq.n	8001480 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a3e      	ldr	r2, [pc, #248]	; (8001494 <HAL_DFSDM_ChannelMspInit+0x208>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d070      	beq.n	8001480 <HAL_DFSDM_ChannelMspInit+0x1f4>
 800139e:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d16c      	bne.n	8001480 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a34      	ldr	r2, [pc, #208]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_DFSDM_ChannelMspInit+0x210>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001426:	2307      	movs	r3, #7
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	481b      	ldr	r0, [pc, #108]	; (80014a0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001432:	f001 fb51 	bl	8002ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001436:	2304      	movs	r3, #4
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001446:	2303      	movs	r3, #3
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	4814      	ldr	r0, [pc, #80]	; (80014a4 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001452:	f001 fb41 	bl	8002ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001466:	2306      	movs	r3, #6
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	480e      	ldr	r0, [pc, #56]	; (80014ac <HAL_DFSDM_ChannelMspInit+0x220>)
 8001472:	f001 fb31 	bl	8002ad8 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	3738      	adds	r7, #56	; 0x38
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40016000 	.word	0x40016000
 800148c:	40016020 	.word	0x40016020
 8001490:	40016040 	.word	0x40016040
 8001494:	40016060 	.word	0x40016060
 8001498:	200000b0 	.word	0x200000b0
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	200000b4 	.word	0x200000b4
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <HAL_FMPI2C_MspInit+0x84>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d12b      	bne.n	800152a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_FMPI2C_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <HAL_FMPI2C_MspInit+0x88>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_FMPI2C_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80014ee:	23c0      	movs	r3, #192	; 0xc0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f2:	2312      	movs	r3, #18
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80014fe:	2304      	movs	r3, #4
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <HAL_FMPI2C_MspInit+0x8c>)
 800150a:	f001 fae5 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_FMPI2C_MspInit+0x88>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_FMPI2C_MspInit+0x88>)
 8001518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_FMPI2C_MspInit+0x88>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40006000 	.word	0x40006000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800

08001540 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_I2S_MspInit+0x15c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	f040 8097 	bne.w	8001692 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 800156e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a37      	ldr	r2, [pc, #220]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_I2S_MspInit+0x160>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80015f0:	2304      	movs	r3, #4
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001600:	2306      	movs	r3, #6
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4826      	ldr	r0, [pc, #152]	; (80016a4 <HAL_I2S_MspInit+0x164>)
 800160c:	f001 fa64 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001610:	2308      	movs	r3, #8
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001620:	2305      	movs	r3, #5
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	481e      	ldr	r0, [pc, #120]	; (80016a4 <HAL_I2S_MspInit+0x164>)
 800162c:	f001 fa54 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001630:	2308      	movs	r3, #8
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001640:	2305      	movs	r3, #5
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <HAL_I2S_MspInit+0x168>)
 800164c:	f001 fa44 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001660:	2305      	movs	r3, #5
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4810      	ldr	r0, [pc, #64]	; (80016ac <HAL_I2S_MspInit+0x16c>)
 800166c:	f001 fa34 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001682:	2305      	movs	r3, #5
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <HAL_I2S_MspInit+0x170>)
 800168e:	f001 fa23 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40003800 	.word	0x40003800
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40020400 	.word	0x40020400

080016b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a56      	ldr	r2, [pc, #344]	; (800182c <HAL_QSPI_MspInit+0x178>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f040 80a6 	bne.w	8001824 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
 80016dc:	4b54      	ldr	r3, [pc, #336]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	4a53      	ldr	r2, [pc, #332]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	6393      	str	r3, [r2, #56]	; 0x38
 80016e8:	4b51      	ldr	r3, [pc, #324]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
 80016f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a4c      	ldr	r2, [pc, #304]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a45      	ldr	r2, [pc, #276]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 800171a:	f043 0320 	orr.w	r3, r3, #32
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b43      	ldr	r3, [pc, #268]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a3e      	ldr	r2, [pc, #248]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	4b38      	ldr	r3, [pc, #224]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a37      	ldr	r2, [pc, #220]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b35      	ldr	r3, [pc, #212]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a30      	ldr	r2, [pc, #192]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 800176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <HAL_QSPI_MspInit+0x17c>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001780:	2304      	movs	r3, #4
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001790:	2309      	movs	r3, #9
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	4826      	ldr	r0, [pc, #152]	; (8001834 <HAL_QSPI_MspInit+0x180>)
 800179c:	f001 f99c 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80017a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b2:	230a      	movs	r3, #10
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	481e      	ldr	r0, [pc, #120]	; (8001838 <HAL_QSPI_MspInit+0x184>)
 80017be:	f001 f98b 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80017c2:	2304      	movs	r3, #4
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017d2:	2309      	movs	r3, #9
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4817      	ldr	r0, [pc, #92]	; (800183c <HAL_QSPI_MspInit+0x188>)
 80017de:	f001 f97b 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017f4:	2309      	movs	r3, #9
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <HAL_QSPI_MspInit+0x18c>)
 8001800:	f001 f96a 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001804:	2340      	movs	r3, #64	; 0x40
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001814:	230a      	movs	r3, #10
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <HAL_QSPI_MspInit+0x190>)
 8001820:	f001 f95a 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3738      	adds	r7, #56	; 0x38
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	a0001000 	.word	0xa0001000
 8001830:	40023800 	.word	0x40023800
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40020400 	.word	0x40020400
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021800 	.word	0x40021800

08001848 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_SD_MspInit+0xc0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d14a      	bne.n	8001900 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_SD_MspInit+0xc4>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_SD_MspInit+0xc4>)
 8001874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_SD_MspInit+0xc4>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_SD_MspInit+0xc4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <HAL_SD_MspInit+0xc4>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_SD_MspInit+0xc4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_SD_MspInit+0xc4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <HAL_SD_MspInit+0xc4>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_SD_MspInit+0xc4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80018be:	2340      	movs	r3, #64	; 0x40
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018ce:	230c      	movs	r3, #12
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <HAL_SD_MspInit+0xc8>)
 80018da:	f001 f8fd 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80018de:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018e2:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018f0:	230c      	movs	r3, #12
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	; (8001914 <HAL_SD_MspInit+0xcc>)
 80018fc:	f001 f8ec 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020800 	.word	0x40020800

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <HAL_UART_MspInit+0xfc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12d      	bne.n	8001996 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_UART_MspInit+0x100>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a35      	ldr	r2, [pc, #212]	; (8001a18 <HAL_UART_MspInit+0x100>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_UART_MspInit+0x100>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <HAL_UART_MspInit+0x100>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a2e      	ldr	r2, [pc, #184]	; (8001a18 <HAL_UART_MspInit+0x100>)
 8001960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_UART_MspInit+0x100>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001972:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197c:	2301      	movs	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001984:	230b      	movs	r3, #11
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <HAL_UART_MspInit+0x104>)
 8001990:	f001 f8a2 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001994:	e039      	b.n	8001a0a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <HAL_UART_MspInit+0x108>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d134      	bne.n	8001a0a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_UART_MspInit+0x100>)
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_UART_MspInit+0x100>)
 80019aa:	f043 0320 	orr.w	r3, r3, #32
 80019ae:	6453      	str	r3, [r2, #68]	; 0x44
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_UART_MspInit+0x100>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_UART_MspInit+0x100>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_UART_MspInit+0x100>)
 80019c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_UART_MspInit+0x100>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80019d8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019ea:	2308      	movs	r3, #8
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_UART_MspInit+0x104>)
 80019f6:	f001 f86f 	bl	8002ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	2047      	movs	r0, #71	; 0x47
 8001a00:	f000 fd22 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a04:	2047      	movs	r0, #71	; 0x47
 8001a06:	f000 fd3b 	bl	8002480 <HAL_NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	; 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40011c00 	.word	0x40011c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40011400 	.word	0x40011400

08001a24 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001a38:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_FSMC_MspInit+0xc8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d151      	bne.n	8001ae4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_FSMC_MspInit+0xc8>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <HAL_FSMC_MspInit+0xcc>)
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <HAL_FSMC_MspInit+0xcc>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6393      	str	r3, [r2, #56]	; 0x38
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_FSMC_MspInit+0xcc>)
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001a62:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a66:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a74:	230c      	movs	r3, #12
 8001a76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481d      	ldr	r0, [pc, #116]	; (8001af4 <HAL_FSMC_MspInit+0xd0>)
 8001a7e:	f001 f82b 	bl	8002ad8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001a82:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a86:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a94:	230c      	movs	r3, #12
 8001a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4816      	ldr	r0, [pc, #88]	; (8001af8 <HAL_FSMC_MspInit+0xd4>)
 8001a9e:	f001 f81b 	bl	8002ad8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001aa2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001aa6:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	480f      	ldr	r0, [pc, #60]	; (8001afc <HAL_FSMC_MspInit+0xd8>)
 8001abe:	f001 f80b 	bl	8002ad8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001ac2:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001ac6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4808      	ldr	r0, [pc, #32]	; (8001b00 <HAL_FSMC_MspInit+0xdc>)
 8001ade:	f000 fffb 	bl	8002ad8 <HAL_GPIO_Init>
 8001ae2:	e000      	b.n	8001ae6 <HAL_FSMC_MspInit+0xc2>
    return;
 8001ae4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200000b8 	.word	0x200000b8
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40021400 	.word	0x40021400
 8001af8:	40021800 	.word	0x40021800
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40020c00 	.word	0x40020c00

08001b04 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001b0c:	f7ff ff8a 	bl	8001a24 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	2036      	movs	r0, #54	; 0x36
 8001b2e:	f000 fc8b 	bl	8002448 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b32:	2036      	movs	r0, #54	; 0x36
 8001b34:	f000 fca4 	bl	8002480 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_InitTick+0xa0>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <HAL_InitTick+0xa0>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6413      	str	r3, [r2, #64]	; 0x40
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_InitTick+0xa0>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b54:	f107 0210 	add.w	r2, r7, #16
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fdc2 	bl	80056e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b64:	f003 fd98 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 8001b68:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <HAL_InitTick+0xa4>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0c9b      	lsrs	r3, r3, #18
 8001b74:	3b01      	subs	r3, #1
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_InitTick+0xac>)
 8001b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001b9a:	f005 f9a5 	bl	8006ee8 <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <HAL_InitTick+0xa8>)
 8001ba6:	f005 f9d4 	bl	8006f52 <HAL_TIM_Base_Start_IT>
 8001baa:	4603      	mov	r3, r0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3730      	adds	r7, #48	; 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	20004dac 	.word	0x20004dac
 8001bc4:	40001000 	.word	0x40001000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <TIM6_DAC_IRQHandler+0x14>)
 8001c02:	f000 fc6d 	bl	80024e0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <TIM6_DAC_IRQHandler+0x18>)
 8001c08:	f005 f9c7 	bl	8006f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20004b90 	.word	0x20004b90
 8001c14:	20004dac 	.word	0x20004dac

08001c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <OTG_FS_IRQHandler+0x10>)
 8001c1e:	f001 fbb1 	bl	8003384 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20005238 	.word	0x20005238

08001c2c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART6_IRQHandler+0x10>)
 8001c32:	f005 fcd3 	bl	80075dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20004cd0 	.word	0x20004cd0

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f00d fb66 	bl	800f340 <__errno>
 8001c74:	4602      	mov	r2, r0
 8001c76:	230c      	movs	r3, #12
 8001c78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20050000 	.word	0x20050000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	200000bc 	.word	0x200000bc
 8001ca8:	20005500 	.word	0x20005500

08001cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <SystemInit+0x28>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <SystemInit+0x28>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SystemInit+0x28>)
 8001cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001cdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cde:	e003      	b.n	8001ce8 <LoopCopyDataInit>

08001ce0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ce2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ce4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ce6:	3104      	adds	r1, #4

08001ce8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cf0:	d3f6      	bcc.n	8001ce0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cf4:	e002      	b.n	8001cfc <LoopFillZerobss>

08001cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001cf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cf8:	f842 3b04 	str.w	r3, [r2], #4

08001cfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d00:	d3f9      	bcc.n	8001cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d02:	f7ff ffd3 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d06:	f00d fb21 	bl	800f34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0a:	f7fe fc27 	bl	800055c <main>
  bx  lr    
 8001d0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d10:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d14:	0800f614 	.word	0x0800f614
  ldr  r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d1c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001d20:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001d24:	20005500 	.word	0x20005500

08001d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d28:	e7fe      	b.n	8001d28 <ADC_IRQHandler>
	...

08001d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_Init+0x40>)
 8001d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_Init+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_Init+0x40>)
 8001d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_Init+0x40>)
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 fb6c 	bl	8002432 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fedc 	bl	8001b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d60:	f7ff f9a4 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20004dec 	.word	0x20004dec

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20004dec 	.word	0x20004dec

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d005      	beq.n	8001dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_Delay+0x40>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd6:	bf00      	nop
 8001dd8:	f7ff ffde 	bl	8001d98 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8f7      	bhi.n	8001dd8 <HAL_Delay+0x28>
  {
  }
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e033      	b.n	8001e72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff f972 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e3a:	f023 0302 	bic.w	r3, r3, #2
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f94a 	bl	80020e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
 8001e62:	e001      	b.n	8001e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1c>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e113      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x244>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	d925      	bls.n	8001ef4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b1e      	subs	r3, #30
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68d9      	ldr	r1, [r3, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4403      	add	r3, r0
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	e022      	b.n	8001f3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6919      	ldr	r1, [r3, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4403      	add	r3, r0
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d824      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b05      	subs	r3, #5
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b05      	subs	r3, #5
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
 8001f8a:	e04c      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d824      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b23      	subs	r3, #35	; 0x23
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b23      	subs	r3, #35	; 0x23
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e023      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	3b41      	subs	r3, #65	; 0x41
 8001ff0:	221f      	movs	r2, #31
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b41      	subs	r3, #65	; 0x41
 800201a:	fa00 f203 	lsl.w	r2, r0, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_ADC_ConfigChannel+0x250>)
 8002028:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_ADC_ConfigChannel+0x254>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10f      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1d8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b12      	cmp	r3, #18
 800203a:	d10b      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_ADC_ConfigChannel+0x254>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12b      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_ADC_ConfigChannel+0x258>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x1f4>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b11      	cmp	r3, #17
 800206e:	d122      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_ADC_ConfigChannel+0x258>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_ADC_ConfigChannel+0x25c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_ConfigChannel+0x260>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	0c9a      	lsrs	r2, r3, #18
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40012300 	.word	0x40012300
 80020d0:	40012000 	.word	0x40012000
 80020d4:	10000012 	.word	0x10000012
 80020d8:	20000000 	.word	0x20000000
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e8:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <ADC_Init+0x1f0>)
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021a      	lsls	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <ADC_Init+0x1f4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d022      	beq.n	80021be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002186:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6899      	ldr	r1, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00f      	b.n	80021de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0202 	bic.w	r2, r2, #2
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
 80021f8:	005a      	lsls	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800222a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	3b01      	subs	r3, #1
 8002238:	035a      	lsls	r2, r3, #13
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	e007      	b.n	8002254 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	3b01      	subs	r3, #1
 8002270:	051a      	lsls	r2, r3, #20
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002296:	025a      	lsls	r2, r3, #9
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	029a      	lsls	r2, r3, #10
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40012300 	.word	0x40012300
 80022d4:	0f000001 	.word	0x0f000001

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ff4c 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245a:	f7ff ff61 	bl	8002320 <__NVIC_GetPriorityGrouping>
 800245e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7ff ffb1 	bl	80023cc <NVIC_EncodePriority>
 800246a:	4602      	mov	r2, r0
 800246c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff80 	bl	8002378 <__NVIC_SetPriority>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff54 	bl	800233c <__NVIC_EnableIRQ>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e014      	b.n	80024d8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	791b      	ldrb	r3, [r3, #4]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fe98 	bl	80011f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f6:	d118      	bne.n	800252a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002522:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f825 	bl	8002574 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002538:	d118      	bne.n	800256c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f043 0202 	orr.w	r2, r3, #2
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002564:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f85b 	bl	8002622 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	795b      	ldrb	r3, [r3, #5]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_DAC_ConfigChannel+0x20>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e036      	b.n	8002616 <HAL_DAC_ConfigChannel+0x8e>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2202      	movs	r2, #2
 80025b2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80025bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4013      	ands	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	22c0      	movs	r2, #192	; 0xc0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	400a      	ands	r2, r1
 8002606:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0cf      	b.n	80027ea <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_DFSDM_ChannelInit+0x3a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <HAL_DFSDM_ChannelInit+0x1c0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_DFSDM_ChannelInit+0x3a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a66      	ldr	r2, [pc, #408]	; (80027fc <HAL_DFSDM_ChannelInit+0x1c4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_DFSDM_ChannelInit+0x3a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a64      	ldr	r2, [pc, #400]	; (8002800 <HAL_DFSDM_ChannelInit+0x1c8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d106      	bne.n	8002680 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002674:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002676:	4b64      	ldr	r3, [pc, #400]	; (8002808 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002678:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800267a:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_DFSDM_ChannelInit+0x1bc>)
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e005      	b.n	800268c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002680:	4b62      	ldr	r3, [pc, #392]	; (800280c <HAL_DFSDM_ChannelInit+0x1d4>)
 8002682:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002684:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_DFSDM_ChannelInit+0x1d8>)
 8002686:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002688:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_DFSDM_ChannelInit+0x1dc>)
 800268a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f8c1 	bl	8002818 <DFSDM_GetChannelFromInstance>
 8002696:	4603      	mov	r3, r0
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0a0      	b.n	80027ea <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7fe fdef 	bl	800128c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d125      	bne.n	800270c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	791b      	ldrb	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800271a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800272a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002730:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 020f 	bic.w	r2, r2, #15
 8002748:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002770:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 0207 	and.w	r2, r2, #7
 800279c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027c8:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f81e 	bl	8002818 <DFSDM_GetChannelFromInstance>
 80027dc:	4603      	mov	r3, r0
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40016000 	.word	0x40016000
 80027f8:	40016020 	.word	0x40016020
 80027fc:	40016040 	.word	0x40016040
 8002800:	40016060 	.word	0x40016060
 8002804:	200000c0 	.word	0x200000c0
 8002808:	200000c4 	.word	0x200000c4
 800280c:	200000d4 	.word	0x200000d4
 8002810:	200000d8 	.word	0x200000d8
 8002814:	40016400 	.word	0x40016400

08002818 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <DFSDM_GetChannelFromInstance+0x9c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <DFSDM_GetChannelFromInstance+0x18>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <DFSDM_GetChannelFromInstance+0xa0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d102      	bne.n	8002836 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e037      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a20      	ldr	r2, [pc, #128]	; (80028bc <DFSDM_GetChannelFromInstance+0xa4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <DFSDM_GetChannelFromInstance+0x2e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d102      	bne.n	800284c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e02c      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <DFSDM_GetChannelFromInstance+0xac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <DFSDM_GetChannelFromInstance+0x44>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <DFSDM_GetChannelFromInstance+0xb0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d102      	bne.n	8002862 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800285c:	2302      	movs	r3, #2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e021      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <DFSDM_GetChannelFromInstance+0xb4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <DFSDM_GetChannelFromInstance+0x5a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <DFSDM_GetChannelFromInstance+0xb8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d102      	bne.n	8002878 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8002872:	2303      	movs	r3, #3
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e016      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <DFSDM_GetChannelFromInstance+0xbc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d102      	bne.n	8002886 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002880:	2304      	movs	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e00f      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <DFSDM_GetChannelFromInstance+0xc0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d102      	bne.n	8002894 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800288e:	2305      	movs	r3, #5
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e008      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a11      	ldr	r2, [pc, #68]	; (80028dc <DFSDM_GetChannelFromInstance+0xc4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d102      	bne.n	80028a2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800289c:	2306      	movs	r3, #6
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e001      	b.n	80028a6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80028a2:	2307      	movs	r3, #7
 80028a4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40016000 	.word	0x40016000
 80028b8:	40016400 	.word	0x40016400
 80028bc:	40016020 	.word	0x40016020
 80028c0:	40016420 	.word	0x40016420
 80028c4:	40016040 	.word	0x40016040
 80028c8:	40016440 	.word	0x40016440
 80028cc:	40016060 	.word	0x40016060
 80028d0:	40016460 	.word	0x40016460
 80028d4:	40016480 	.word	0x40016480
 80028d8:	400164a0 	.word	0x400164a0
 80028dc:	400164c0 	.word	0x400164c0

080028e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00c      	b.n	8002918 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2205      	movs	r2, #5
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e081      	b.n	8002a3a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fdb0 	bl	80014b0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002974:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002984:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e006      	b.n	80029ac <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	ea42 0103 	orr.w	r1, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	021a      	lsls	r2, r3, #8
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69d9      	ldr	r1, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d138      	bne.n	8002aca <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e032      	b.n	8002acc <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2224      	movs	r2, #36	; 0x24
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e165      	b.n	8002dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8154 	bne.w	8002dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d00b      	beq.n	8002b32 <HAL_GPIO_Init+0x5a>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d007      	beq.n	8002b32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b26:	2b11      	cmp	r3, #17
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b12      	cmp	r3, #18
 8002b30:	d130      	bne.n	8002b94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0xfc>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b12      	cmp	r3, #18
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80ae 	beq.w	8002dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a5b      	ldr	r2, [pc, #364]	; (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_GPIO_Init+0x308>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x216>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_GPIO_Init+0x30c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x212>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_GPIO_Init+0x310>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4a      	ldr	r2, [pc, #296]	; (8002dec <HAL_GPIO_Init+0x314>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x20a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	; (8002df0 <HAL_GPIO_Init+0x318>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x206>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x31c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x202>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <HAL_GPIO_Init+0x300>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d12:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d36:	4a30      	ldr	r2, [pc, #192]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db4:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_GPIO_Init+0x320>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae96 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3724      	adds	r7, #36	; 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40020800 	.word	0x40020800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40021400 	.word	0x40021400
 8002df4:	40021800 	.word	0x40021800
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	401a      	ands	r2, r3
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d104      	bne.n	8002e52 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e48:	887b      	ldrh	r3, [r7, #2]
 8002e4a:	041a      	lsls	r2, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e66:	b08f      	sub	sp, #60	; 0x3c
 8002e68:	af0a      	add	r7, sp, #40	; 0x28
 8002e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e054      	b.n	8002f20 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f00b ffa7 	bl	800ede4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f005 ffa7 	bl	8008e08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	687e      	ldr	r6, [r7, #4]
 8002ec2:	466d      	mov	r5, sp
 8002ec4:	f106 0410 	add.w	r4, r6, #16
 8002ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed8:	1d33      	adds	r3, r6, #4
 8002eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002edc:	6838      	ldr	r0, [r7, #0]
 8002ede:	f005 ff21 	bl	8008d24 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f005 ff9e 	bl	8008e2a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	687e      	ldr	r6, [r7, #4]
 8002ef6:	466d      	mov	r5, sp
 8002ef8:	f106 0410 	add.w	r4, r6, #16
 8002efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f08:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f0c:	1d33      	adds	r3, r6, #4
 8002f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f006 f8b1 	bl	8009078 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f28 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	70fb      	strb	r3, [r7, #3]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70bb      	strb	r3, [r7, #2]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_HCD_HC_Init+0x28>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e07f      	b.n	8003050 <HAL_HCD_HC_Init+0x128>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	333d      	adds	r3, #61	; 0x3d
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	787a      	ldrb	r2, [r7, #1]
 8002f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3340      	adds	r3, #64	; 0x40
 8002f90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3339      	adds	r3, #57	; 0x39
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	333f      	adds	r3, #63	; 0x3f
 8002fb8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	78bb      	ldrb	r3, [r7, #2]
 8002fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc6:	b2d8      	uxtb	r0, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	333a      	adds	r3, #58	; 0x3a
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da0a      	bge.n	8002ff8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	333b      	adds	r3, #59	; 0x3b
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e009      	b.n	800300c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	440b      	add	r3, r1
 8003006:	333b      	adds	r3, #59	; 0x3b
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	333c      	adds	r3, #60	; 0x3c
 800301c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003020:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	787c      	ldrb	r4, [r7, #1]
 8003028:	78ba      	ldrb	r2, [r7, #2]
 800302a:	78f9      	ldrb	r1, [r7, #3]
 800302c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	f897 3020 	ldrb.w	r3, [r7, #32]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4623      	mov	r3, r4
 800303e:	f006 f997 	bl	8009370 <USB_HC_Init>
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_HCD_HC_Halt+0x1e>
 8003072:	2302      	movs	r3, #2
 8003074:	e00f      	b.n	8003096 <HAL_HCD_HC_Halt+0x3e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f006 fbd3 	bl	8009832 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	70fb      	strb	r3, [r7, #3]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70bb      	strb	r3, [r7, #2]
 80030b6:	4613      	mov	r3, r2
 80030b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	333b      	adds	r3, #59	; 0x3b
 80030ca:	78ba      	ldrb	r2, [r7, #2]
 80030cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	333f      	adds	r3, #63	; 0x3f
 80030de:	787a      	ldrb	r2, [r7, #1]
 80030e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030e2:	7c3b      	ldrb	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d114      	bne.n	8003112 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	3342      	adds	r3, #66	; 0x42
 80030f8:	2203      	movs	r2, #3
 80030fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	333d      	adds	r3, #61	; 0x3d
 800310c:	7f3a      	ldrb	r2, [r7, #28]
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e009      	b.n	8003126 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	3342      	adds	r3, #66	; 0x42
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003126:	787b      	ldrb	r3, [r7, #1]
 8003128:	2b03      	cmp	r3, #3
 800312a:	f200 80d6 	bhi.w	80032da <HAL_HCD_HC_SubmitRequest+0x23a>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003145 	.word	0x08003145
 8003138:	080032c5 	.word	0x080032c5
 800313c:	080031b1 	.word	0x080031b1
 8003140:	0800323b 	.word	0x0800323b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003144:	7c3b      	ldrb	r3, [r7, #16]
 8003146:	2b01      	cmp	r3, #1
 8003148:	f040 80c9 	bne.w	80032de <HAL_HCD_HC_SubmitRequest+0x23e>
 800314c:	78bb      	ldrb	r3, [r7, #2]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 80c5 	bne.w	80032de <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003154:	8b3b      	ldrh	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	3351      	adds	r3, #81	; 0x51
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	3351      	adds	r3, #81	; 0x51
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	3342      	adds	r3, #66	; 0x42
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003198:	e0a1      	b.n	80032de <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	3342      	adds	r3, #66	; 0x42
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
      break;
 80031ae:	e096      	b.n	80032de <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031b0:	78bb      	ldrb	r3, [r7, #2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d120      	bne.n	80031f8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	3351      	adds	r3, #81	; 0x51
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	3342      	adds	r3, #66	; 0x42
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031e0:	e07e      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	3342      	adds	r3, #66	; 0x42
 80031f2:	2202      	movs	r2, #2
 80031f4:	701a      	strb	r2, [r3, #0]
      break;
 80031f6:	e073      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	440b      	add	r3, r1
 8003206:	3350      	adds	r3, #80	; 0x50
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	3342      	adds	r3, #66	; 0x42
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
      break;
 8003222:	e05d      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	3342      	adds	r3, #66	; 0x42
 8003234:	2202      	movs	r2, #2
 8003236:	701a      	strb	r2, [r3, #0]
      break;
 8003238:	e052      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800323a:	78bb      	ldrb	r3, [r7, #2]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d120      	bne.n	8003282 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3351      	adds	r3, #81	; 0x51
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3342      	adds	r3, #66	; 0x42
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800326a:	e039      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	3342      	adds	r3, #66	; 0x42
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
      break;
 8003280:	e02e      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	3350      	adds	r3, #80	; 0x50
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	3342      	adds	r3, #66	; 0x42
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
      break;
 80032ac:	e018      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	3342      	adds	r3, #66	; 0x42
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
      break;
 80032c2:	e00d      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	3342      	adds	r3, #66	; 0x42
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
      break;
 80032d8:	e002      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80032de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	3344      	adds	r3, #68	; 0x44
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	8b39      	ldrh	r1, [r7, #24]
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4403      	add	r3, r0
 8003304:	3348      	adds	r3, #72	; 0x48
 8003306:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	335c      	adds	r3, #92	; 0x5c
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	334c      	adds	r3, #76	; 0x4c
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	3339      	adds	r3, #57	; 0x39
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	335d      	adds	r3, #93	; 0x5d
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	3338      	adds	r3, #56	; 0x38
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	18d1      	adds	r1, r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	f006 f906 	bl	8009584 <USB_HC_StartXfer>
 8003378:	4603      	mov	r3, r0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop

08003384 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f005 fe29 	bl	8008ff2 <USB_GetMode>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f040 80ef 	bne.w	8003586 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f005 fe0d 	bl	8008fcc <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80e5 	beq.w	8003584 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 fe04 	bl	8008fcc <USB_ReadInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ce:	d104      	bne.n	80033da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 fdf4 	bl	8008fcc <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ee:	d104      	bne.n	80033fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 fde4 	bl	8008fcc <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800340a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340e:	d104      	bne.n	800341a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f005 fdd4 	bl	8008fcc <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2202      	movs	r2, #2
 8003434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f005 fdc6 	bl	8008fcc <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800344a:	d115      	bne.n	8003478 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003454:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f00b fd3a 	bl	800eee0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f005 feb6 	bl	80091e4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f005 fda5 	bl	8008fcc <USB_ReadInterrupts>
 8003482:	4603      	mov	r3, r0
 8003484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d102      	bne.n	8003494 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 f966 	bl	8004760 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f005 fd97 	bl	8008fcc <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d106      	bne.n	80034b6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f00b fcfd 	bl	800eea8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2208      	movs	r2, #8
 80034b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f005 fd86 	bl	8008fcc <USB_ReadInterrupts>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ca:	d138      	bne.n	800353e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f006 f99d 	bl	8009810 <USB_HC_ReadInterrupt>
 80034d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e025      	b.n	800352a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d018      	beq.n	8003524 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003508:	d106      	bne.n	8003518 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8cf 	bl	80036b4 <HCD_HC_IN_IRQHandler>
 8003516:	e005      	b.n	8003524 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fcfd 	bl	8003f1e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	d3d4      	bcc.n	80034de <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800353c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f005 fd42 	bl	8008fcc <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b10      	cmp	r3, #16
 8003550:	d101      	bne.n	8003556 <HAL_HCD_IRQHandler+0x1d2>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_HCD_IRQHandler+0x1d4>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d014      	beq.n	8003586 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0210 	bic.w	r2, r2, #16
 800356a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 f84b 	bl	8004608 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0210 	orr.w	r2, r2, #16
 8003580:	619a      	str	r2, [r3, #24]
 8003582:	e000      	b.n	8003586 <HAL_HCD_IRQHandler+0x202>
      return;
 8003584:	bf00      	nop
    }
  }
}
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_HCD_Start+0x16>
 800359e:	2302      	movs	r3, #2
 80035a0:	e013      	b.n	80035ca <HAL_HCD_Start+0x3e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f005 fc19 	bl	8008de6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f005 fe76 	bl	80092ac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_HCD_Stop+0x16>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e00d      	b.n	8003604 <HAL_HCD_Stop+0x32>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f006 fa57 	bl	8009aa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f005 fe1d 	bl	8009258 <USB_ResetPort>
 800361e:	4603      	mov	r3, r0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	335c      	adds	r3, #92	; 0x5c
 8003644:	781b      	ldrb	r3, [r3, #0]
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	440b      	add	r3, r1
 800366c:	334c      	adds	r3, #76	; 0x4c
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f005 fe5f 	bl	800934c <USB_GetCurrentFrame>
 800368e:	4603      	mov	r3, r0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f005 fe3a 	bl	800931e <USB_GetHostSpeed>
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d119      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	2304      	movs	r3, #4
 80036f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	440a      	add	r2, r1
 800370c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	60d3      	str	r3, [r2, #12]
 8003716:	e0ce      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d12c      	bne.n	800378a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4413      	add	r3, r2
 8003738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373c:	461a      	mov	r2, r3
 800373e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003742:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	335d      	adds	r3, #93	; 0x5d
 8003754:	2207      	movs	r2, #7
 8003756:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	440a      	add	r2, r1
 800376e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f006 f855 	bl	8009832 <USB_HC_Halt>
 8003788:	e095      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d109      	bne.n	80037b4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	2320      	movs	r3, #32
 80037b0:	6093      	str	r3, [r2, #8]
 80037b2:	e080      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d134      	bne.n	8003834 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	335d      	adds	r3, #93	; 0x5d
 80037fa:	2205      	movs	r2, #5
 80037fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	461a      	mov	r2, r3
 800380c:	2310      	movs	r3, #16
 800380e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	461a      	mov	r2, r3
 800381e:	2308      	movs	r3, #8
 8003820:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f006 f800 	bl	8009832 <USB_HC_Halt>
 8003832:	e040      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d134      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	440a      	add	r2, r1
 8003862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f005 ffdb 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003888:	461a      	mov	r2, r3
 800388a:	2310      	movs	r3, #16
 800388c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	335d      	adds	r3, #93	; 0x5d
 800389e:	2208      	movs	r2, #8
 80038a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	d122      	bne.n	8003914 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f005 ff9a 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	461a      	mov	r2, r3
 800390c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003910:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003912:	e300      	b.n	8003f16 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	f040 80fd 	bne.w	8003b26 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3348      	adds	r3, #72	; 0x48
 8003944:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0159      	lsls	r1, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	440b      	add	r3, r1
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003958:	1ad1      	subs	r1, r2, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4403      	add	r3, r0
 8003968:	334c      	adds	r3, #76	; 0x4c
 800396a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	335d      	adds	r3, #93	; 0x5d
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	3358      	adds	r3, #88	; 0x58
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	2301      	movs	r3, #1
 80039a4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	333f      	adds	r3, #63	; 0x3f
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	333f      	adds	r3, #63	; 0x3f
 80039cc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d121      	bne.n	8003a16 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 ff18 	bl	8009832 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2310      	movs	r3, #16
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	e070      	b.n	8003af8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	333f      	adds	r3, #63	; 0x3f
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d12a      	bne.n	8003a82 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	335c      	adds	r3, #92	; 0x5c
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	b2d8      	uxtb	r0, r3
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	335c      	adds	r3, #92	; 0x5c
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4601      	mov	r1, r0
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f00b fa3e 	bl	800eefc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a80:	e03a      	b.n	8003af8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	440b      	add	r3, r1
 8003a90:	333f      	adds	r3, #63	; 0x3f
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d12f      	bne.n	8003af8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	440b      	add	r3, r1
 8003aa6:	335c      	adds	r3, #92	; 0x5c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	3350      	adds	r3, #80	; 0x50
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2d8      	uxtb	r0, r3
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3350      	adds	r3, #80	; 0x50
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	b2d8      	uxtb	r0, r3
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	335c      	adds	r3, #92	; 0x5c
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	4601      	mov	r1, r0
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f00b fa02 	bl	800eefc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	3350      	adds	r3, #80	; 0x50
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2d8      	uxtb	r0, r3
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3350      	adds	r3, #80	; 0x50
 8003b20:	4602      	mov	r2, r0
 8003b22:	701a      	strb	r2, [r3, #0]
}
 8003b24:	e1f7      	b.n	8003f16 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f040 811a 	bne.w	8003d72 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b58:	f023 0302 	bic.w	r3, r3, #2
 8003b5c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	335d      	adds	r3, #93	; 0x5d
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10a      	bne.n	8003b8a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	335c      	adds	r3, #92	; 0x5c
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e0d9      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	335d      	adds	r3, #93	; 0x5d
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d10a      	bne.n	8003bb6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	335c      	adds	r3, #92	; 0x5c
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e0c3      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	335d      	adds	r3, #93	; 0x5d
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b06      	cmp	r3, #6
 8003bca:	d00a      	beq.n	8003be2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	335d      	adds	r3, #93	; 0x5d
 8003bdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d156      	bne.n	8003c90 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	3358      	adds	r3, #88	; 0x58
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c59      	adds	r1, r3, #1
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4403      	add	r3, r0
 8003c04:	3358      	adds	r3, #88	; 0x58
 8003c06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	3358      	adds	r3, #88	; 0x58
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d914      	bls.n	8003c48 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3358      	adds	r3, #88	; 0x58
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	335c      	adds	r3, #92	; 0x5c
 8003c42:	2204      	movs	r2, #4
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e009      	b.n	8003c5c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	335c      	adds	r3, #92	; 0x5c
 8003c58:	2202      	movs	r2, #2
 8003c5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e056      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	335d      	adds	r3, #93	; 0x5d
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d123      	bne.n	8003cee <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	440b      	add	r3, r1
 8003cb4:	335c      	adds	r3, #92	; 0x5c
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cd0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cd8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e027      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	335d      	adds	r3, #93	; 0x5d
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d11c      	bne.n	8003d3e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	440b      	add	r3, r1
 8003d12:	3358      	adds	r3, #88	; 0x58
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4403      	add	r3, r0
 8003d26:	3358      	adds	r3, #88	; 0x58
 8003d28:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	335c      	adds	r3, #92	; 0x5c
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	b2d8      	uxtb	r0, r3
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	335c      	adds	r3, #92	; 0x5c
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	4601      	mov	r1, r0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f00b f8c6 	bl	800eefc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d70:	e0d1      	b.n	8003f16 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d13e      	bne.n	8003e06 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da2:	f043 0302 	orr.w	r3, r3, #2
 8003da6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	3358      	adds	r3, #88	; 0x58
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	1c59      	adds	r1, r3, #1
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4403      	add	r3, r0
 8003dca:	3358      	adds	r3, #88	; 0x58
 8003dcc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	335d      	adds	r3, #93	; 0x5d
 8003dde:	2206      	movs	r2, #6
 8003de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f005 fd20 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	e087      	b.n	8003f16 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d17c      	bne.n	8003f16 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	333f      	adds	r3, #63	; 0x3f
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d122      	bne.n	8003e78 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	440b      	add	r3, r1
 8003e40:	3358      	adds	r3, #88	; 0x58
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 fcde 	bl	8009832 <USB_HC_Halt>
 8003e76:	e045      	b.n	8003f04 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	333f      	adds	r3, #63	; 0x3f
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	333f      	adds	r3, #63	; 0x3f
 8003e9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d12f      	bne.n	8003f04 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3358      	adds	r3, #88	; 0x58
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d121      	bne.n	8003f04 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	335d      	adds	r3, #93	; 0x5d
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eee:	f043 0302 	orr.w	r3, r3, #2
 8003ef2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f005 fc97 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	461a      	mov	r2, r3
 8003f12:	2310      	movs	r3, #16
 8003f14:	6093      	str	r3, [r2, #8]
}
 8003f16:	bf00      	nop
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d119      	bne.n	8003f82 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	0151      	lsls	r1, r2, #5
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	440a      	add	r2, r1
 8003f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f80:	e33e      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d141      	bne.n	800401c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	333d      	adds	r3, #61	; 0x3d
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 831f 	bne.w	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	333d      	adds	r3, #61	; 0x3d
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	440b      	add	r3, r1
 8003fe4:	335c      	adds	r3, #92	; 0x5c
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f005 fc0c 	bl	8009832 <USB_HC_Halt>
}
 800401a:	e2f1      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d13f      	bne.n	80040b2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	335d      	adds	r3, #93	; 0x5d
 8004042:	2204      	movs	r2, #4
 8004044:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	333d      	adds	r3, #61	; 0x3d
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	3358      	adds	r3, #88	; 0x58
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	440a      	add	r2, r1
 8004084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f005 fbca 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	461a      	mov	r2, r3
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	6093      	str	r3, [r2, #8]
}
 80040b0:	e2a6      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d122      	bne.n	8004110 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f005 fb9c 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	461a      	mov	r2, r3
 8004108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800410c:	6093      	str	r3, [r2, #8]
}
 800410e:	e277      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d135      	bne.n	8004192 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	440b      	add	r3, r1
 8004134:	3358      	adds	r3, #88	; 0x58
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	440a      	add	r2, r1
 8004150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f005 fb64 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	461a      	mov	r2, r3
 8004178:	2301      	movs	r3, #1
 800417a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	335d      	adds	r3, #93	; 0x5d
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
}
 8004190:	e236      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d12b      	bne.n	8004200 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b4:	461a      	mov	r2, r3
 80041b6:	2308      	movs	r3, #8
 80041b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 fb24 	bl	8009832 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	335d      	adds	r3, #93	; 0x5d
 80041fa:	2205      	movs	r2, #5
 80041fc:	701a      	strb	r2, [r3, #0]
}
 80041fe:	e1ff      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d155      	bne.n	80042c2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	440b      	add	r3, r1
 8004224:	3358      	adds	r3, #88	; 0x58
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	440b      	add	r3, r1
 8004238:	335d      	adds	r3, #93	; 0x5d
 800423a:	2203      	movs	r2, #3
 800423c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	440b      	add	r3, r1
 800424c:	333d      	adds	r3, #61	; 0x3d
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d114      	bne.n	800427e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	440b      	add	r3, r1
 8004262:	333c      	adds	r3, #60	; 0x3c
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	333d      	adds	r3, #61	; 0x3d
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	440a      	add	r2, r1
 8004294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f005 fac2 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	2310      	movs	r3, #16
 80042be:	6093      	str	r3, [r2, #8]
}
 80042c0:	e19e      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d12b      	bne.n	8004330 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	0151      	lsls	r1, r2, #5
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	440a      	add	r2, r1
 80042ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f005 fa95 	bl	8009832 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	440b      	add	r3, r1
 8004316:	335d      	adds	r3, #93	; 0x5d
 8004318:	2206      	movs	r2, #6
 800431a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004328:	461a      	mov	r2, r3
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	6093      	str	r3, [r2, #8]
}
 800432e:	e167      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d135      	bne.n	80043b4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	440a      	add	r2, r1
 800435e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004362:	f043 0302 	orr.w	r3, r3, #2
 8004366:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f005 fa5d 	bl	8009832 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	2310      	movs	r3, #16
 8004388:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800439c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	440b      	add	r3, r1
 80043ac:	335d      	adds	r3, #93	; 0x5d
 80043ae:	2208      	movs	r2, #8
 80043b0:	701a      	strb	r2, [r3, #0]
}
 80043b2:	e125      	b.n	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 811a 	bne.w	8004600 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e6:	f023 0302 	bic.w	r3, r3, #2
 80043ea:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	335d      	adds	r3, #93	; 0x5d
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d137      	bne.n	8004472 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	440b      	add	r3, r1
 8004410:	335c      	adds	r3, #92	; 0x5c
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	440b      	add	r3, r1
 8004424:	333f      	adds	r3, #63	; 0x3f
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d00b      	beq.n	8004444 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	440b      	add	r3, r1
 800443a:	333f      	adds	r3, #63	; 0x3f
 800443c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800443e:	2b03      	cmp	r3, #3
 8004440:	f040 80c5 	bne.w	80045ce <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	3351      	adds	r3, #81	; 0x51
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	3351      	adds	r3, #81	; 0x51
 800446c:	4602      	mov	r2, r0
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e0ad      	b.n	80045ce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	440b      	add	r3, r1
 8004480:	335d      	adds	r3, #93	; 0x5d
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d10a      	bne.n	800449e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	335c      	adds	r3, #92	; 0x5c
 8004498:	2202      	movs	r2, #2
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e097      	b.n	80045ce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	335d      	adds	r3, #93	; 0x5d
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d10a      	bne.n	80044ca <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	335c      	adds	r3, #92	; 0x5c
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e081      	b.n	80045ce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	440b      	add	r3, r1
 80044d8:	335d      	adds	r3, #93	; 0x5d
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d10a      	bne.n	80044f6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	440b      	add	r3, r1
 80044ee:	335c      	adds	r3, #92	; 0x5c
 80044f0:	2205      	movs	r2, #5
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e06b      	b.n	80045ce <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	335d      	adds	r3, #93	; 0x5d
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b06      	cmp	r3, #6
 800450a:	d00a      	beq.n	8004522 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	335d      	adds	r3, #93	; 0x5d
 800451c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800451e:	2b08      	cmp	r3, #8
 8004520:	d155      	bne.n	80045ce <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	3358      	adds	r3, #88	; 0x58
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4403      	add	r3, r0
 8004544:	3358      	adds	r3, #88	; 0x58
 8004546:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	440b      	add	r3, r1
 8004556:	3358      	adds	r3, #88	; 0x58
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d914      	bls.n	8004588 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	3358      	adds	r3, #88	; 0x58
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	2204      	movs	r2, #4
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e009      	b.n	800459c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	335c      	adds	r3, #92	; 0x5c
 8004598:	2202      	movs	r2, #2
 800459a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c8:	461a      	mov	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	461a      	mov	r2, r3
 80045dc:	2302      	movs	r3, #2
 80045de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	b2d8      	uxtb	r0, r3
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	440b      	add	r3, r1
 80045f2:	335c      	adds	r3, #92	; 0x5c
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	4601      	mov	r1, r0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f00a fc7e 	bl	800eefc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	0c5b      	lsrs	r3, r3, #17
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800463c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d003      	beq.n	800464c <HCD_RXQLVL_IRQHandler+0x44>
 8004644:	2b05      	cmp	r3, #5
 8004646:	f000 8082 	beq.w	800474e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800464a:	e083      	b.n	8004754 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d07f      	beq.n	8004752 <HCD_RXQLVL_IRQHandler+0x14a>
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	3344      	adds	r3, #68	; 0x44
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d074      	beq.n	8004752 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	440b      	add	r3, r1
 800467a:	3344      	adds	r3, #68	; 0x44
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	b292      	uxth	r2, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f004 fc79 	bl	8008f7a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3344      	adds	r3, #68	; 0x44
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	18d1      	adds	r1, r2, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4403      	add	r3, r0
 80046ac:	3344      	adds	r3, #68	; 0x44
 80046ae:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	440b      	add	r3, r1
 80046be:	334c      	adds	r3, #76	; 0x4c
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	18d1      	adds	r1, r2, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4403      	add	r3, r0
 80046d4:	334c      	adds	r3, #76	; 0x4c
 80046d6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <HCD_RXQLVL_IRQHandler+0x154>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d031      	beq.n	8004752 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004704:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800470c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	440b      	add	r3, r1
 800472e:	3350      	adds	r3, #80	; 0x50
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f083 0301 	eor.w	r3, r3, #1
 8004736:	b2d8      	uxtb	r0, r3
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	3350      	adds	r3, #80	; 0x50
 8004748:	4602      	mov	r2, r0
 800474a:	701a      	strb	r2, [r3, #0]
      break;
 800474c:	e001      	b.n	8004752 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004752:	bf00      	nop
  }
}
 8004754:	bf00      	nop
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	1ff80000 	.word	0x1ff80000

08004760 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800478c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b02      	cmp	r3, #2
 8004796:	d10b      	bne.n	80047b0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d102      	bne.n	80047a8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f00a fb8e 	bl	800eec4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d132      	bne.n	8004820 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f043 0308 	orr.w	r3, r3, #8
 80047c0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d126      	bne.n	800481a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d113      	bne.n	80047fc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047de:	d106      	bne.n	80047ee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 fcfc 	bl	80091e4 <USB_InitFSLSPClkSel>
 80047ec:	e011      	b.n	8004812 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f004 fcf5 	bl	80091e4 <USB_InitFSLSPClkSel>
 80047fa:	e00a      	b.n	8004812 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480a:	461a      	mov	r2, r3
 800480c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004810:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f00a fb84 	bl	800ef20 <HAL_HCD_PortEnabled_Callback>
 8004818:	e002      	b.n	8004820 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f00a fb8e 	bl	800ef3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b20      	cmp	r3, #32
 8004828:	d103      	bne.n	8004832 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0320 	orr.w	r3, r3, #32
 8004830:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004838:	461a      	mov	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6013      	str	r3, [r2, #0]
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e154      	b.n	8004b04 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a98      	ldr	r2, [pc, #608]	; (8004ad4 <HAL_I2S_Init+0x28c>)
 8004872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fc fe63 	bl	8001540 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004890:	f023 030f 	bic.w	r3, r3, #15
 8004894:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2202      	movs	r2, #2
 800489c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d06f      	beq.n	8004986 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048ae:	2310      	movs	r3, #16
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e001      	b.n	80048b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048b4:	2320      	movs	r3, #32
 80048b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d802      	bhi.n	80048c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a83      	ldr	r2, [pc, #524]	; (8004ad8 <HAL_I2S_Init+0x290>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_I2S_Init+0x92>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a81      	ldr	r2, [pc, #516]	; (8004adc <HAL_I2S_Init+0x294>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d104      	bne.n	80048e4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80048da:	2001      	movs	r0, #1
 80048dc:	f001 f9c2 	bl	8005c64 <HAL_RCCEx_GetPeriphCLKFreq>
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	e003      	b.n	80048ec <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80048e4:	2002      	movs	r0, #2
 80048e6:	f001 f9bd 	bl	8005c64 <HAL_RCCEx_GetPeriphCLKFreq>
 80048ea:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d125      	bne.n	8004942 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	fbb2 f3f3 	udiv	r3, r2, r3
 800491a:	3305      	adds	r3, #5
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e01f      	b.n	8004960 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	fbb2 f2f3 	udiv	r2, r2, r3
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	3305      	adds	r3, #5
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	e00e      	b.n	8004960 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fbb2 f2f3 	udiv	r2, r2, r3
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	461a      	mov	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	3305      	adds	r3, #5
 800495e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4a5f      	ldr	r2, [pc, #380]	; (8004ae0 <HAL_I2S_Init+0x298>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e003      	b.n	800498e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004986:	2302      	movs	r3, #2
 8004988:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d902      	bls.n	800499a <HAL_I2S_Init+0x152>
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2bff      	cmp	r3, #255	; 0xff
 8004998:	d907      	bls.n	80049aa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f043 0210 	orr.w	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0ac      	b.n	8004b04 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	ea42 0103 	orr.w	r1, r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6851      	ldr	r1, [r2, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68d2      	ldr	r2, [r2, #12]
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6992      	ldr	r2, [r2, #24]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ec:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b30      	cmp	r3, #48	; 0x30
 80049f4:	d003      	beq.n	80049fe <HAL_I2S_Init+0x1b6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2bb0      	cmp	r3, #176	; 0xb0
 80049fc:	d107      	bne.n	8004a0e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a0c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d16e      	bne.n	8004af4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a32      	ldr	r2, [pc, #200]	; (8004ae4 <HAL_I2S_Init+0x29c>)
 8004a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2d      	ldr	r2, [pc, #180]	; (8004ad8 <HAL_I2S_Init+0x290>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_I2S_Init+0x1e2>
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_I2S_Init+0x2a0>)
 8004a28:	e001      	b.n	8004a2e <HAL_I2S_Init+0x1e6>
 8004a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	4928      	ldr	r1, [pc, #160]	; (8004ad8 <HAL_I2S_Init+0x290>)
 8004a36:	428a      	cmp	r2, r1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2S_Init+0x1f6>
 8004a3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <HAL_I2S_Init+0x2a0>)
 8004a3c:	e001      	b.n	8004a42 <HAL_I2S_Init+0x1fa>
 8004a3e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a46:	f023 030f 	bic.w	r3, r3, #15
 8004a4a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <HAL_I2S_Init+0x290>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_I2S_Init+0x212>
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_I2S_Init+0x2a0>)
 8004a58:	e001      	b.n	8004a5e <HAL_I2S_Init+0x216>
 8004a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a5e:	2202      	movs	r2, #2
 8004a60:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_I2S_Init+0x290>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_I2S_Init+0x228>
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_I2S_Init+0x2a0>)
 8004a6e:	e001      	b.n	8004a74 <HAL_I2S_Init+0x22c>
 8004a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a80:	d003      	beq.n	8004a8a <HAL_I2S_Init+0x242>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e001      	b.n	8004a96 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	b299      	uxth	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004aac:	4303      	orrs	r3, r0
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	897b      	ldrh	r3, [r7, #10]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ac2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <HAL_I2S_Init+0x290>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10e      	bne.n	8004aec <HAL_I2S_Init+0x2a4>
 8004ace:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_I2S_Init+0x2a0>)
 8004ad0:	e00e      	b.n	8004af0 <HAL_I2S_Init+0x2a8>
 8004ad2:	bf00      	nop
 8004ad4:	08004c03 	.word	0x08004c03
 8004ad8:	40003800 	.word	0x40003800
 8004adc:	40003c00 	.word	0x40003c00
 8004ae0:	cccccccd 	.word	0xcccccccd
 8004ae4:	08004d19 	.word	0x08004d19
 8004ae8:	40003400 	.word	0x40003400
 8004aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af0:	897a      	ldrh	r2, [r7, #10]
 8004af2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10e      	bne.n	8004b9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff ffb8 	bl	8004b0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10e      	bne.n	8004bfa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff93 	bl	8004b20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b086      	sub	sp, #24
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d13a      	bne.n	8004c94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d109      	bne.n	8004c3c <I2S_IRQHandler+0x3a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d102      	bne.n	8004c3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ffb4 	bl	8004ba4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d126      	bne.n	8004c94 <I2S_IRQHandler+0x92>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d11f      	bne.n	8004c94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f043 0202 	orr.w	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff ff50 	bl	8004b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d136      	bne.n	8004d0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d109      	bne.n	8004cbe <I2S_IRQHandler+0xbc>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d102      	bne.n	8004cbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff45 	bl	8004b48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d122      	bne.n	8004d0e <I2S_IRQHandler+0x10c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d11b      	bne.n	8004d0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	f043 0204 	orr.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff ff13 	bl	8004b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4aa2      	ldr	r2, [pc, #648]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d32:	4ba2      	ldr	r3, [pc, #648]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d34:	e001      	b.n	8004d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a9b      	ldr	r2, [pc, #620]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d50:	4b9a      	ldr	r3, [pc, #616]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d52:	e001      	b.n	8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	d004      	beq.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 8099 	bne.w	8004ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d107      	bne.n	8004d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f925 	bl	8004fd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d107      	bne.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f9c8 	bl	8005134 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d13a      	bne.n	8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d035      	beq.n	8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7e      	ldr	r2, [pc, #504]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004dc2:	4b7e      	ldr	r3, [pc, #504]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dc4:	e001      	b.n	8004dca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4979      	ldr	r1, [pc, #484]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dd2:	428b      	cmp	r3, r1
 8004dd4:	d101      	bne.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004dd6:	4b79      	ldr	r3, [pc, #484]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dd8:	e001      	b.n	8004dde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004de2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004df2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fe88 	bl	8004b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	f040 80be 	bne.w	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80b8 	beq.w	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a59      	ldr	r2, [pc, #356]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e56:	4b59      	ldr	r3, [pc, #356]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e58:	e001      	b.n	8004e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4954      	ldr	r1, [pc, #336]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e66:	428b      	cmp	r3, r1
 8004e68:	d101      	bne.n	8004e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e6a:	4b54      	ldr	r3, [pc, #336]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e6c:	e001      	b.n	8004e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f043 0204 	orr.w	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fe4a 	bl	8004b34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ea0:	e084      	b.n	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d107      	bne.n	8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8be 	bl	8005038 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8fd 	bl	80050d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d12f      	bne.n	8004f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d02a      	beq.n	8004f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ef8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f06:	e001      	b.n	8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4929      	ldr	r1, [pc, #164]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f14:	428b      	cmp	r3, r1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f1a:	e001      	b.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff fdfa 	bl	8004b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d131      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02c      	beq.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f60:	e001      	b.n	8004f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4912      	ldr	r1, [pc, #72]	; (8004fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f6e:	428b      	cmp	r3, r1
 8004f70:	d101      	bne.n	8004f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f74:	e001      	b.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f7e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f8e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fdc5 	bl	8004b34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004faa:	e000      	b.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fac:	bf00      	nop
}
 8004fae:	bf00      	nop
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40003800 	.word	0x40003800
 8004fbc:	40003400 	.word	0x40003400

08004fc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	1c99      	adds	r1, r3, #2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6251      	str	r1, [r2, #36]	; 0x24
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d113      	bne.n	800502e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005014:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffc9 	bl	8004fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c99      	adds	r1, r3, #2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6251      	str	r1, [r2, #36]	; 0x24
 800504a:	8819      	ldrh	r1, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <I2SEx_TxISR_I2SExt+0x90>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <I2SEx_TxISR_I2SExt+0x22>
 8005056:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <I2SEx_TxISR_I2SExt+0x94>)
 8005058:	e001      	b.n	800505e <I2SEx_TxISR_I2SExt+0x26>
 800505a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505e:	460a      	mov	r2, r1
 8005060:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d121      	bne.n	80050be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <I2SEx_TxISR_I2SExt+0x90>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d101      	bne.n	8005088 <I2SEx_TxISR_I2SExt+0x50>
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <I2SEx_TxISR_I2SExt+0x94>)
 8005086:	e001      	b.n	800508c <I2SEx_TxISR_I2SExt+0x54>
 8005088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	490d      	ldr	r1, [pc, #52]	; (80050c8 <I2SEx_TxISR_I2SExt+0x90>)
 8005094:	428b      	cmp	r3, r1
 8005096:	d101      	bne.n	800509c <I2SEx_TxISR_I2SExt+0x64>
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <I2SEx_TxISR_I2SExt+0x94>)
 800509a:	e001      	b.n	80050a0 <I2SEx_TxISR_I2SExt+0x68>
 800509c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ff81 	bl	8004fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40003800 	.word	0x40003800
 80050cc:	40003400 	.word	0x40003400

080050d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68d8      	ldr	r0, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	1c99      	adds	r1, r3, #2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050e8:	b282      	uxth	r2, r0
 80050ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005112:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ff4a 	bl	8004fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <I2SEx_RxISR_I2SExt+0x16>
 8005146:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005148:	e001      	b.n	800514e <I2SEx_RxISR_I2SExt+0x1a>
 800514a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514e:	68d8      	ldr	r0, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	1c99      	adds	r1, r3, #2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	62d1      	str	r1, [r2, #44]	; 0x2c
 800515a:	b282      	uxth	r2, r0
 800515c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d121      	bne.n	80051ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <I2SEx_RxISR_I2SExt+0x90>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <I2SEx_RxISR_I2SExt+0x50>
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005182:	e001      	b.n	8005188 <I2SEx_RxISR_I2SExt+0x54>
 8005184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	490d      	ldr	r1, [pc, #52]	; (80051c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005190:	428b      	cmp	r3, r1
 8005192:	d101      	bne.n	8005198 <I2SEx_RxISR_I2SExt+0x64>
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005196:	e001      	b.n	800519c <I2SEx_RxISR_I2SExt+0x68>
 8005198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800519c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ff03 	bl	8004fc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40003800 	.word	0x40003800
 80051c8:	40003400 	.word	0x40003400

080051cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051d4:	f7fc fde0 	bl	8001d98 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e069      	b.n	80052b8 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7fc fa5b 	bl	80016b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80051fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f85e 	bl	80052c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	3b01      	subs	r3, #1
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	2120      	movs	r1, #32
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f856 	bl	80052e0 <QSPI_WaitFlagStateUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d137      	bne.n	80052ae <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005248:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6852      	ldr	r2, [r2, #4]
 8005250:	0611      	lsls	r1, r2, #24
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68d2      	ldr	r2, [r2, #12]
 8005256:	4311      	orrs	r1, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	69d2      	ldr	r2, [r2, #28]
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6a12      	ldr	r2, [r2, #32]
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <HAL_QSPI_Init+0xf4>)
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6912      	ldr	r2, [r2, #16]
 800527a:	0411      	lsls	r1, r2, #16
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6952      	ldr	r2, [r2, #20]
 8005280:	4311      	orrs	r1, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6992      	ldr	r2, [r2, #24]
 8005286:	4311      	orrs	r1, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	430b      	orrs	r3, r1
 800528e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80052b6:	7afb      	ldrb	r3, [r7, #11]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	ffe0f8fe 	.word	0xffe0f8fe

080052c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80052f0:	e01a      	b.n	8005328 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d016      	beq.n	8005328 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fa:	f7fc fd4d 	bl	8001d98 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2204      	movs	r2, #4
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	f043 0201 	orr.w	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e00e      	b.n	8005346 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	429a      	cmp	r2, r3
 8005342:	d1d6      	bne.n	80052f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0cc      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b68      	ldr	r3, [pc, #416]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d90c      	bls.n	800538c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b65      	ldr	r3, [pc, #404]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b63      	ldr	r3, [pc, #396]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0b8      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a58      	ldr	r2, [pc, #352]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053bc:	4b53      	ldr	r3, [pc, #332]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4a52      	ldr	r2, [pc, #328]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c8:	4b50      	ldr	r3, [pc, #320]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	494d      	ldr	r1, [pc, #308]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d044      	beq.n	8005470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b47      	ldr	r3, [pc, #284]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d119      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e07f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d003      	beq.n	800540e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540a:	2b03      	cmp	r3, #3
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	4b3f      	ldr	r3, [pc, #252]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541e:	4b3b      	ldr	r3, [pc, #236]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e067      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542e:	4b37      	ldr	r3, [pc, #220]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 0203 	bic.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4934      	ldr	r1, [pc, #208]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005440:	f7fc fcaa 	bl	8001d98 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	e00a      	b.n	800545e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005448:	f7fc fca6 	bl	8001d98 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	; 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	4b2b      	ldr	r3, [pc, #172]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 020c 	and.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	429a      	cmp	r2, r3
 800546e:	d1eb      	bne.n	8005448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d20c      	bcs.n	8005498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b22      	ldr	r3, [pc, #136]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e032      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4916      	ldr	r1, [pc, #88]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	490e      	ldr	r1, [pc, #56]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054d6:	f000 f821 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80054da:	4601      	mov	r1, r0
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
 80054ea:	fa21 f303 	lsr.w	r3, r1, r3
 80054ee:	4a09      	ldr	r2, [pc, #36]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc fb0e 	bl	8001b18 <HAL_InitTick>

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023c00 	.word	0x40023c00
 800550c:	40023800 	.word	0x40023800
 8005510:	0800f5ec 	.word	0x0800f5ec
 8005514:	20000000 	.word	0x20000000
 8005518:	20000004 	.word	0x20000004

0800551c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005532:	4b50      	ldr	r3, [pc, #320]	; (8005674 <HAL_RCC_GetSysClockFreq+0x158>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b04      	cmp	r3, #4
 800553c:	d007      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x32>
 800553e:	2b08      	cmp	r3, #8
 8005540:	d008      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x38>
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 808d 	bne.w	8005662 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005548:	4b4b      	ldr	r3, [pc, #300]	; (8005678 <HAL_RCC_GetSysClockFreq+0x15c>)
 800554a:	60bb      	str	r3, [r7, #8]
       break;
 800554c:	e08c      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554e:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_RCC_GetSysClockFreq+0x160>)
 8005550:	60bb      	str	r3, [r7, #8]
      break;
 8005552:	e089      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005554:	4b47      	ldr	r3, [pc, #284]	; (8005674 <HAL_RCC_GetSysClockFreq+0x158>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800555e:	4b45      	ldr	r3, [pc, #276]	; (8005674 <HAL_RCC_GetSysClockFreq+0x158>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d023      	beq.n	80055b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b42      	ldr	r3, [pc, #264]	; (8005674 <HAL_RCC_GetSysClockFreq+0x158>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	f04f 0400 	mov.w	r4, #0
 8005574:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	ea03 0501 	and.w	r5, r3, r1
 8005580:	ea04 0602 	and.w	r6, r4, r2
 8005584:	4a3d      	ldr	r2, [pc, #244]	; (800567c <HAL_RCC_GetSysClockFreq+0x160>)
 8005586:	fb02 f106 	mul.w	r1, r2, r6
 800558a:	2200      	movs	r2, #0
 800558c:	fb02 f205 	mul.w	r2, r2, r5
 8005590:	440a      	add	r2, r1
 8005592:	493a      	ldr	r1, [pc, #232]	; (800567c <HAL_RCC_GetSysClockFreq+0x160>)
 8005594:	fba5 0101 	umull	r0, r1, r5, r1
 8005598:	1853      	adds	r3, r2, r1
 800559a:	4619      	mov	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f04f 0400 	mov.w	r4, #0
 80055a2:	461a      	mov	r2, r3
 80055a4:	4623      	mov	r3, r4
 80055a6:	f7fa fe3b 	bl	8000220 <__aeabi_uldivmod>
 80055aa:	4603      	mov	r3, r0
 80055ac:	460c      	mov	r4, r1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e049      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b2:	4b30      	ldr	r3, [pc, #192]	; (8005674 <HAL_RCC_GetSysClockFreq+0x158>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	099b      	lsrs	r3, r3, #6
 80055b8:	f04f 0400 	mov.w	r4, #0
 80055bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	ea03 0501 	and.w	r5, r3, r1
 80055c8:	ea04 0602 	and.w	r6, r4, r2
 80055cc:	4629      	mov	r1, r5
 80055ce:	4632      	mov	r2, r6
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	f04f 0400 	mov.w	r4, #0
 80055d8:	0154      	lsls	r4, r2, #5
 80055da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055de:	014b      	lsls	r3, r1, #5
 80055e0:	4619      	mov	r1, r3
 80055e2:	4622      	mov	r2, r4
 80055e4:	1b49      	subs	r1, r1, r5
 80055e6:	eb62 0206 	sbc.w	r2, r2, r6
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f04f 0400 	mov.w	r4, #0
 80055f2:	0194      	lsls	r4, r2, #6
 80055f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055f8:	018b      	lsls	r3, r1, #6
 80055fa:	1a5b      	subs	r3, r3, r1
 80055fc:	eb64 0402 	sbc.w	r4, r4, r2
 8005600:	f04f 0100 	mov.w	r1, #0
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	00e2      	lsls	r2, r4, #3
 800560a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800560e:	00d9      	lsls	r1, r3, #3
 8005610:	460b      	mov	r3, r1
 8005612:	4614      	mov	r4, r2
 8005614:	195b      	adds	r3, r3, r5
 8005616:	eb44 0406 	adc.w	r4, r4, r6
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	02a2      	lsls	r2, r4, #10
 8005624:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005628:	0299      	lsls	r1, r3, #10
 800562a:	460b      	mov	r3, r1
 800562c:	4614      	mov	r4, r2
 800562e:	4618      	mov	r0, r3
 8005630:	4621      	mov	r1, r4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f04f 0400 	mov.w	r4, #0
 8005638:	461a      	mov	r2, r3
 800563a:	4623      	mov	r3, r4
 800563c:	f7fa fdf0 	bl	8000220 <__aeabi_uldivmod>
 8005640:	4603      	mov	r3, r0
 8005642:	460c      	mov	r4, r1
 8005644:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_GetSysClockFreq+0x158>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	3301      	adds	r3, #1
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	60bb      	str	r3, [r7, #8]
      break;
 8005660:	e002      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005664:	60bb      	str	r3, [r7, #8]
      break;
 8005666:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005668:	68bb      	ldr	r3, [r7, #8]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005672:	bf00      	nop
 8005674:	40023800 	.word	0x40023800
 8005678:	00f42400 	.word	0x00f42400
 800567c:	017d7840 	.word	0x017d7840

08005680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005684:	4b03      	ldr	r3, [pc, #12]	; (8005694 <HAL_RCC_GetHCLKFreq+0x14>)
 8005686:	681b      	ldr	r3, [r3, #0]
}
 8005688:	4618      	mov	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000000 	.word	0x20000000

08005698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800569c:	f7ff fff0 	bl	8005680 <HAL_RCC_GetHCLKFreq>
 80056a0:	4601      	mov	r1, r0
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	0a9b      	lsrs	r3, r3, #10
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	4a03      	ldr	r2, [pc, #12]	; (80056bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ae:	5cd3      	ldrb	r3, [r2, r3]
 80056b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40023800 	.word	0x40023800
 80056bc:	0800f5fc 	.word	0x0800f5fc

080056c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056c4:	f7ff ffdc 	bl	8005680 <HAL_RCC_GetHCLKFreq>
 80056c8:	4601      	mov	r1, r0
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	0b5b      	lsrs	r3, r3, #13
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	4a03      	ldr	r2, [pc, #12]	; (80056e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d6:	5cd3      	ldrb	r3, [r2, r3]
 80056d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40023800 	.word	0x40023800
 80056e4:	0800f5fc 	.word	0x0800f5fc

080056e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	220f      	movs	r2, #15
 80056f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056f8:	4b12      	ldr	r3, [pc, #72]	; (8005744 <HAL_RCC_GetClockConfig+0x5c>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0203 	and.w	r2, r3, #3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <HAL_RCC_GetClockConfig+0x5c>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <HAL_RCC_GetClockConfig+0x5c>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <HAL_RCC_GetClockConfig+0x5c>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <HAL_RCC_GetClockConfig+0x60>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	40023c00 	.word	0x40023c00

0800574c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005770:	4b7a      	ldr	r3, [pc, #488]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005776:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	4977      	ldr	r1, [pc, #476]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800578e:	2301      	movs	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d010      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800579e:	4b6f      	ldr	r3, [pc, #444]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	496b      	ldr	r1, [pc, #428]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80057bc:	2301      	movs	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d022      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80057cc:	4b63      	ldr	r3, [pc, #396]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057da:	4960      	ldr	r1, [pc, #384]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f6:	d10c      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80057f8:	4b58      	ldr	r3, [pc, #352]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	3b01      	subs	r3, #1
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	4954      	ldr	r1, [pc, #336]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d022      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800581e:	4b4f      	ldr	r3, [pc, #316]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005824:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582c:	494b      	ldr	r1, [pc, #300]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800583c:	2301      	movs	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005848:	d10c      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800584a:	4b44      	ldr	r3, [pc, #272]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800584c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005850:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	3b01      	subs	r3, #1
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	493f      	ldr	r1, [pc, #252]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 808a 	beq.w	8005986 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	4b39      	ldr	r3, [pc, #228]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	4a38      	ldr	r2, [pc, #224]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6413      	str	r3, [r2, #64]	; 0x40
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800588e:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a33      	ldr	r2, [pc, #204]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800589a:	f7fc fa7d 	bl	8001d98 <HAL_GetTick>
 800589e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058a2:	f7fc fa79 	bl	8001d98 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e1d1      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058b4:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058c0:	4b26      	ldr	r3, [pc, #152]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02f      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d028      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058de:	4b1f      	ldr	r3, [pc, #124]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058f4:	4a19      	ldr	r2, [pc, #100]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058fa:	4b18      	ldr	r3, [pc, #96]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d114      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005906:	f7fc fa47 	bl	8001d98 <HAL_GetTick>
 800590a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590c:	e00a      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590e:	f7fc fa43 	bl	8001d98 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f241 3288 	movw	r2, #5000	; 0x1388
 800591c:	4293      	cmp	r3, r2
 800591e:	d901      	bls.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e199      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005924:	4b0d      	ldr	r3, [pc, #52]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ee      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593c:	d114      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	4902      	ldr	r1, [pc, #8]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005954:	4313      	orrs	r3, r2
 8005956:	608b      	str	r3, [r1, #8]
 8005958:	e00c      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800
 8005960:	40007000 	.word	0x40007000
 8005964:	42470e40 	.word	0x42470e40
 8005968:	4b89      	ldr	r3, [pc, #548]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4a88      	ldr	r2, [pc, #544]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800596e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005972:	6093      	str	r3, [r2, #8]
 8005974:	4b86      	ldr	r3, [pc, #536]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005980:	4983      	ldr	r1, [pc, #524]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005982:	4313      	orrs	r3, r2
 8005984:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005998:	4b7e      	ldr	r3, [pc, #504]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800599a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80059a8:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4976      	ldr	r1, [pc, #472]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d011      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059ca:	4b71      	ldr	r3, [pc, #452]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	496d      	ldr	r1, [pc, #436]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059e8:	d101      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80059ea:	2301      	movs	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80059fa:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	4961      	ldr	r1, [pc, #388]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d004      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	f040 80c6 	bne.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a20:	4b5d      	ldr	r3, [pc, #372]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a26:	f7fc f9b7 	bl	8001d98 <HAL_GetTick>
 8005a2a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a2e:	f7fc f9b3 	bl	8001d98 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e10b      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a40:	4b53      	ldr	r3, [pc, #332]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1f0      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005a4c:	4a53      	ldr	r2, [pc, #332]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d023      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d019      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a90:	d00e      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d019      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d115      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aae:	d110      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	019b      	lsls	r3, r3, #6
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	061b      	lsls	r3, r3, #24
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	071b      	lsls	r3, r3, #28
 8005aca:	4931      	ldr	r1, [pc, #196]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d026      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d122      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005afa:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b00:	0e1b      	lsrs	r3, r3, #24
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	431a      	orrs	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	061b      	lsls	r3, r3, #24
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	071b      	lsls	r3, r3, #28
 8005b20:	491b      	ldr	r1, [pc, #108]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2e:	f023 021f 	bic.w	r2, r3, #31
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4915      	ldr	r1, [pc, #84]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	061b      	lsls	r3, r3, #24
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	071b      	lsls	r3, r3, #28
 8005b66:	490a      	ldr	r1, [pc, #40]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b74:	f7fc f910 	bl	8001d98 <HAL_GetTick>
 8005b78:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b7a:	e011      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b7c:	f7fc f90c 	bl	8001d98 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d90a      	bls.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e064      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	424711e0 	.word	0x424711e0
 8005b98:	42470068 	.word	0x42470068
 8005b9c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ba0:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0e7      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb8:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	4926      	ldr	r1, [pc, #152]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bda:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	491d      	ldr	r1, [pc, #116]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005bfc:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	4915      	ldr	r1, [pc, #84]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005c1e:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c24:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	490c      	ldr	r1, [pc, #48]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c46:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	4904      	ldr	r1, [pc, #16]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40023800 	.word	0x40023800

08005c64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d003      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	f000 8098 	beq.w	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005c88:	e12d      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005c8a:	4b9a      	ldr	r3, [pc, #616]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c90:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005c94:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ca2:	d802      	bhi.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005ca8:	e082      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cae:	d047      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005cb0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005cb4:	d06f      	beq.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8005cb6:	e07b      	b.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cb8:	4b8f      	ldr	r3, [pc, #572]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cba:	617b      	str	r3, [r7, #20]
          break;
 8005cbc:	e07b      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005cbe:	4b8d      	ldr	r3, [pc, #564]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ccc:	d109      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cce:	4b89      	ldr	r3, [pc, #548]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd8:	4a87      	ldr	r2, [pc, #540]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	e019      	b.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ce2:	4b84      	ldr	r3, [pc, #528]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cee:	d109      	bne.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cf0:	4b80      	ldr	r3, [pc, #512]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfa:	4a80      	ldr	r2, [pc, #512]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	e008      	b.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005d04:	4b7b      	ldr	r3, [pc, #492]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0e:	4a7c      	ldr	r2, [pc, #496]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d16:	4b77      	ldr	r3, [pc, #476]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	099b      	lsrs	r3, r3, #6
 8005d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d2a:	4b72      	ldr	r3, [pc, #456]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d30:	0f1b      	lsrs	r3, r3, #28
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]
          break;
 8005d3e:	e03a      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d40:	4b6c      	ldr	r3, [pc, #432]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4c:	d108      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d4e:	4b69      	ldr	r3, [pc, #420]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d56:	4a69      	ldr	r2, [pc, #420]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e007      	b.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d60:	4b64      	ldr	r3, [pc, #400]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d68:	4a65      	ldr	r2, [pc, #404]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005d70:	4b60      	ldr	r3, [pc, #384]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	099b      	lsrs	r3, r3, #6
 8005d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005d82:	4b5c      	ldr	r3, [pc, #368]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	0f1b      	lsrs	r3, r3, #28
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d92:	617b      	str	r3, [r7, #20]
          break;
 8005d94:	e00f      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d96:	4b57      	ldr	r3, [pc, #348]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da2:	d102      	bne.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005da4:	4b55      	ldr	r3, [pc, #340]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005da6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005da8:	e005      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005daa:	4b55      	ldr	r3, [pc, #340]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005dac:	617b      	str	r3, [r7, #20]
          break;
 8005dae:	e002      	b.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]
          break;
 8005db4:	bf00      	nop
        }
      }
      break;
 8005db6:	e096      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005db8:	4b4e      	ldr	r3, [pc, #312]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbe:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005dc2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dca:	d00c      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd0:	d802      	bhi.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005dd6:	e082      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ddc:	d047      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005dde:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005de2:	d06f      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005de4:	e07b      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005de6:	4b44      	ldr	r3, [pc, #272]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005de8:	617b      	str	r3, [r7, #20]
          break;
 8005dea:	e07b      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005dec:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfa:	d109      	bne.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005dfc:	4b3d      	ldr	r3, [pc, #244]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e06:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	e019      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e10:	4b38      	ldr	r3, [pc, #224]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1c:	d109      	bne.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e1e:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e28:	4a34      	ldr	r2, [pc, #208]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	e008      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e32:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e3c:	4a30      	ldr	r2, [pc, #192]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e44:	4b2b      	ldr	r3, [pc, #172]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4a:	099b      	lsrs	r3, r3, #6
 8005e4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	fb02 f303 	mul.w	r3, r2, r3
 8005e56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e58:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5e:	0f1b      	lsrs	r3, r3, #28
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6a:	617b      	str	r3, [r7, #20]
          break;
 8005e6c:	e03a      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e6e:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e7a:	d108      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e007      	b.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e8e:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e96:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005e9e:	4b15      	ldr	r3, [pc, #84]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	099b      	lsrs	r3, r3, #6
 8005ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005eb0:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	0f1b      	lsrs	r3, r3, #28
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
          break;
 8005ec2:	e00f      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed0:	d102      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ed4:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005ed6:	e005      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005eda:	617b      	str	r3, [r7, #20]
          break;
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	617b      	str	r3, [r7, #20]
          break;
 8005ee2:	bf00      	nop
        }
      }
      break;
 8005ee4:	bf00      	nop
    }
  }
  return frequency;
 8005ee6:	697b      	ldr	r3, [r7, #20]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	00bb8000 	.word	0x00bb8000
 8005efc:	017d7840 	.word	0x017d7840
 8005f00:	00f42400 	.word	0x00f42400

08005f04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d075      	beq.n	8006008 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f1c:	4ba2      	ldr	r3, [pc, #648]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d00c      	beq.n	8005f42 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f28:	4b9f      	ldr	r3, [pc, #636]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d112      	bne.n	8005f5a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f34:	4b9c      	ldr	r3, [pc, #624]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f40:	d10b      	bne.n	8005f5a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f42:	4b99      	ldr	r3, [pc, #612]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d05b      	beq.n	8006006 <HAL_RCC_OscConfig+0x102>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d157      	bne.n	8006006 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e20b      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f62:	d106      	bne.n	8005f72 <HAL_RCC_OscConfig+0x6e>
 8005f64:	4b90      	ldr	r3, [pc, #576]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a8f      	ldr	r2, [pc, #572]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e01d      	b.n	8005fae <HAL_RCC_OscConfig+0xaa>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f7a:	d10c      	bne.n	8005f96 <HAL_RCC_OscConfig+0x92>
 8005f7c:	4b8a      	ldr	r3, [pc, #552]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a89      	ldr	r2, [pc, #548]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	4b87      	ldr	r3, [pc, #540]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a86      	ldr	r2, [pc, #536]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	e00b      	b.n	8005fae <HAL_RCC_OscConfig+0xaa>
 8005f96:	4b84      	ldr	r3, [pc, #528]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a83      	ldr	r2, [pc, #524]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b81      	ldr	r3, [pc, #516]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a80      	ldr	r2, [pc, #512]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d013      	beq.n	8005fde <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fb feef 	bl	8001d98 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fbe:	f7fb feeb 	bl	8001d98 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b64      	cmp	r3, #100	; 0x64
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e1d0      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd0:	4b75      	ldr	r3, [pc, #468]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0xba>
 8005fdc:	e014      	b.n	8006008 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fde:	f7fb fedb 	bl	8001d98 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe6:	f7fb fed7 	bl	8001d98 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b64      	cmp	r3, #100	; 0x64
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e1bc      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff8:	4b6b      	ldr	r3, [pc, #428]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <HAL_RCC_OscConfig+0xe2>
 8006004:	e000      	b.n	8006008 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006006:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d063      	beq.n	80060dc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006014:	4b64      	ldr	r3, [pc, #400]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006020:	4b61      	ldr	r3, [pc, #388]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006028:	2b08      	cmp	r3, #8
 800602a:	d11c      	bne.n	8006066 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800602c:	4b5e      	ldr	r3, [pc, #376]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d116      	bne.n	8006066 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006038:	4b5b      	ldr	r3, [pc, #364]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <HAL_RCC_OscConfig+0x14c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d001      	beq.n	8006050 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e190      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006050:	4b55      	ldr	r3, [pc, #340]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4952      	ldr	r1, [pc, #328]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006064:	e03a      	b.n	80060dc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d020      	beq.n	80060b0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800606e:	4b4f      	ldr	r3, [pc, #316]	; (80061ac <HAL_RCC_OscConfig+0x2a8>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fb fe90 	bl	8001d98 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800607c:	f7fb fe8c 	bl	8001d98 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e171      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608e:	4b46      	ldr	r3, [pc, #280]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609a:	4b43      	ldr	r3, [pc, #268]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	493f      	ldr	r1, [pc, #252]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	600b      	str	r3, [r1, #0]
 80060ae:	e015      	b.n	80060dc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b0:	4b3e      	ldr	r3, [pc, #248]	; (80061ac <HAL_RCC_OscConfig+0x2a8>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fb fe6f 	bl	8001d98 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060be:	f7fb fe6b 	bl	8001d98 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e150      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d0:	4b35      	ldr	r3, [pc, #212]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d030      	beq.n	800614a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f0:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fb fe4f 	bl	8001d98 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060fe:	f7fb fe4b 	bl	8001d98 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e130      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0x1fa>
 800611c:	e015      	b.n	800614a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800611e:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <HAL_RCC_OscConfig+0x2ac>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006124:	f7fb fe38 	bl	8001d98 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800612c:	f7fb fe34 	bl	8001d98 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e119      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 809f 	beq.w	8006296 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006158:	2300      	movs	r3, #0
 800615a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006176:	6413      	str	r3, [r2, #64]	; 0x40
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_OscConfig+0x2a4>)
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006184:	2301      	movs	r3, #1
 8006186:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d120      	bne.n	80061d6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a06      	ldr	r2, [pc, #24]	; (80061b4 <HAL_RCC_OscConfig+0x2b0>)
 800619a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a0:	f7fb fdfa 	bl	8001d98 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a6:	e010      	b.n	80061ca <HAL_RCC_OscConfig+0x2c6>
 80061a8:	40023800 	.word	0x40023800
 80061ac:	42470000 	.word	0x42470000
 80061b0:	42470e80 	.word	0x42470e80
 80061b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b8:	f7fb fdee 	bl	8001d98 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e0d3      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ca:	4b6c      	ldr	r3, [pc, #432]	; (800637c <HAL_RCC_OscConfig+0x478>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d106      	bne.n	80061ec <HAL_RCC_OscConfig+0x2e8>
 80061de:	4b68      	ldr	r3, [pc, #416]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a67      	ldr	r2, [pc, #412]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ea:	e01c      	b.n	8006226 <HAL_RCC_OscConfig+0x322>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d10c      	bne.n	800620e <HAL_RCC_OscConfig+0x30a>
 80061f4:	4b62      	ldr	r3, [pc, #392]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	4a61      	ldr	r2, [pc, #388]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 80061fa:	f043 0304 	orr.w	r3, r3, #4
 80061fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006200:	4b5f      	ldr	r3, [pc, #380]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006204:	4a5e      	ldr	r2, [pc, #376]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6713      	str	r3, [r2, #112]	; 0x70
 800620c:	e00b      	b.n	8006226 <HAL_RCC_OscConfig+0x322>
 800620e:	4b5c      	ldr	r3, [pc, #368]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	4a5b      	ldr	r2, [pc, #364]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	6713      	str	r3, [r2, #112]	; 0x70
 800621a:	4b59      	ldr	r3, [pc, #356]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	4a58      	ldr	r2, [pc, #352]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d015      	beq.n	800625a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622e:	f7fb fdb3 	bl	8001d98 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fb fdaf 	bl	8001d98 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e092      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624c:	4b4c      	ldr	r3, [pc, #304]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ee      	beq.n	8006236 <HAL_RCC_OscConfig+0x332>
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fb fd9d 	bl	8001d98 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fb fd99 	bl	8001d98 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e07c      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006278:	4b41      	ldr	r3, [pc, #260]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ee      	bne.n	8006262 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628a:	4b3d      	ldr	r3, [pc, #244]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a3c      	ldr	r2, [pc, #240]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d068      	beq.n	8006370 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800629e:	4b38      	ldr	r3, [pc, #224]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d060      	beq.n	800636c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d145      	bne.n	800633e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	4b34      	ldr	r3, [pc, #208]	; (8006384 <HAL_RCC_OscConfig+0x480>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fb fd6e 	bl	8001d98 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fb fd6a 	bl	8001d98 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e04f      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d2:	4b2b      	ldr	r3, [pc, #172]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	061b      	lsls	r3, r3, #24
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	071b      	lsls	r3, r3, #28
 800630a:	491d      	ldr	r1, [pc, #116]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006310:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <HAL_RCC_OscConfig+0x480>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fb fd3f 	bl	8001d98 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800631e:	f7fb fd3b 	bl	8001d98 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e020      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006330:	4b13      	ldr	r3, [pc, #76]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x41a>
 800633c:	e018      	b.n	8006370 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <HAL_RCC_OscConfig+0x480>)
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006344:	f7fb fd28 	bl	8001d98 <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634c:	f7fb fd24 	bl	8001d98 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e009      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635e:	4b08      	ldr	r3, [pc, #32]	; (8006380 <HAL_RCC_OscConfig+0x47c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1f0      	bne.n	800634c <HAL_RCC_OscConfig+0x448>
 800636a:	e001      	b.n	8006370 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40007000 	.word	0x40007000
 8006380:	40023800 	.word	0x40023800
 8006384:	42470060 	.word	0x42470060

08006388 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e022      	b.n	80063e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d105      	bne.n	80063b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fb fa4b 	bl	8001848 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f814 	bl	80063e8 <HAL_SD_InitCard>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e00a      	b.n	80063e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063e8:	b5b0      	push	{r4, r5, r7, lr}
 80063ea:	b08e      	sub	sp, #56	; 0x38
 80063ec:	af04      	add	r7, sp, #16
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006404:	2376      	movs	r3, #118	; 0x76
 8006406:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681d      	ldr	r5, [r3, #0]
 800640c:	466c      	mov	r4, sp
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006420:	4628      	mov	r0, r5
 8006422:	f001 fff7 	bl	8008414 <SDIO_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800642c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e031      	b.n	800649c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006438:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <HAL_SD_InitCard+0xbc>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f002 f81e 	bl	8008484 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <HAL_SD_InitCard+0xbc>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb18 	bl	8006a84 <SD_PowerON>
 8006454:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e013      	b.n	800649c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fa37 	bl	80068e8 <SD_InitCard>
 800647a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bdb0      	pop	{r4, r5, r7, pc}
 80064a4:	422580a0 	.word	0x422580a0

080064a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b6:	0f9b      	lsrs	r3, r3, #30
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c2:	0e9b      	lsrs	r3, r3, #26
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d4:	0e1b      	lsrs	r3, r3, #24
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f2:	0a1b      	lsrs	r3, r3, #8
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006508:	0d1b      	lsrs	r3, r3, #20
 800650a:	b29a      	uxth	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	b2da      	uxtb	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006526:	0bdb      	lsrs	r3, r3, #15
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006538:	0b9b      	lsrs	r3, r3, #14
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	b2da      	uxtb	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654a:	0b5b      	lsrs	r3, r3, #13
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	b2da      	uxtb	r2, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655c:	0b1b      	lsrs	r3, r3, #12
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	b2da      	uxtb	r2, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2200      	movs	r2, #0
 800656e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006574:	2b00      	cmp	r3, #0
 8006576:	d163      	bne.n	8006640 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657c:	009a      	lsls	r2, r3, #2
 800657e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006582:	4013      	ands	r3, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006588:	0f92      	lsrs	r2, r2, #30
 800658a:	431a      	orrs	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006594:	0edb      	lsrs	r3, r3, #27
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	b2da      	uxtb	r2, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a6:	0e1b      	lsrs	r3, r3, #24
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	0d5b      	lsrs	r3, r3, #21
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ca:	0c9b      	lsrs	r3, r3, #18
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065dc:	0bdb      	lsrs	r3, r3, #15
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	7e1b      	ldrb	r3, [r3, #24]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	3302      	adds	r3, #2
 8006600:	2201      	movs	r2, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800660a:	fb02 f203 	mul.w	r2, r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	7a1b      	ldrb	r3, [r3, #8]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	2201      	movs	r2, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800662c:	0a52      	lsrs	r2, r2, #9
 800662e:	fb02 f203 	mul.w	r2, r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663c:	661a      	str	r2, [r3, #96]	; 0x60
 800663e:	e031      	b.n	80066a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	2b01      	cmp	r3, #1
 8006646:	d11d      	bne.n	8006684 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	0c1b      	lsrs	r3, r3, #16
 8006658:	431a      	orrs	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	3301      	adds	r3, #1
 8006664:	029a      	lsls	r2, r3, #10
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006678:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	661a      	str	r2, [r3, #96]	; 0x60
 8006682:	e00f      	b.n	80066a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a58      	ldr	r2, [pc, #352]	; (80067ec <HAL_SD_GetCardCSD+0x344>)
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e09d      	b.n	80067e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a8:	0b9b      	lsrs	r3, r3, #14
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	0fdb      	lsrs	r3, r3, #31
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e8:	0f5b      	lsrs	r3, r3, #29
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	0e9b      	lsrs	r3, r3, #26
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	b2da      	uxtb	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670c:	0d9b      	lsrs	r3, r3, #22
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	0d5b      	lsrs	r3, r3, #21
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	b2da      	uxtb	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	0bdb      	lsrs	r3, r3, #15
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	0b9b      	lsrs	r3, r3, #14
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	0b5b      	lsrs	r3, r3, #13
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	0b1b      	lsrs	r3, r3, #12
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	b2da      	uxtb	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	0a9b      	lsrs	r3, r3, #10
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	004005ff 	.word	0x004005ff

080067f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b08e      	sub	sp, #56	; 0x38
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	2b03      	cmp	r3, #3
 8006808:	d02e      	beq.n	8006868 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d106      	bne.n	8006820 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
 800681e:	e029      	b.n	8006874 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d10a      	bne.n	800683e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9b9 	bl	8006ba0 <SD_WideBus_Enable>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
 800683c:	e01a      	b.n	8006874 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f9f6 	bl	8006c36 <SD_WideBus_Disable>
 800684a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
 8006858:	e00c      	b.n	8006874 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	639a      	str	r2, [r3, #56]	; 0x38
 8006866:	e005      	b.n	8006874 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e024      	b.n	80068da <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	466c      	mov	r4, sp
 80068b8:	f107 0318 	add.w	r3, r7, #24
 80068bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ca:	4628      	mov	r0, r5
 80068cc:	f001 fda2 	bl	8008414 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3728      	adds	r7, #40	; 0x28
 80068de:	46bd      	mov	sp, r7
 80068e0:	bdb0      	pop	{r4, r5, r7, pc}
 80068e2:	bf00      	nop
 80068e4:	004005ff 	.word	0x004005ff

080068e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068e8:	b5b0      	push	{r4, r5, r7, lr}
 80068ea:	b094      	sub	sp, #80	; 0x50
 80068ec:	af04      	add	r7, sp, #16
 80068ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068f0:	2301      	movs	r3, #1
 80068f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 fdd2 	bl	80084a2 <SDIO_GetPowerState>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006904:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006908:	e0b7      	b.n	8006a7a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690e:	2b03      	cmp	r3, #3
 8006910:	d02f      	beq.n	8006972 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f001 ff51 	bl	80087be <SDMMC_CmdSendCID>
 800691c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800691e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <SD_InitCard+0x40>
    {
      return errorstate;
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	e0a8      	b.n	8006a7a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f001 fdfc 	bl	800852c <SDIO_GetResponse>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2104      	movs	r1, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fdf3 	bl	800852c <SDIO_GetResponse>
 8006946:	4602      	mov	r2, r0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2108      	movs	r1, #8
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fdea 	bl	800852c <SDIO_GetResponse>
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	210c      	movs	r1, #12
 8006964:	4618      	mov	r0, r3
 8006966:	f001 fde1 	bl	800852c <SDIO_GetResponse>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	2b03      	cmp	r3, #3
 8006978:	d00d      	beq.n	8006996 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f107 020e 	add.w	r2, r7, #14
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f001 ff57 	bl	8008838 <SDMMC_CmdSetRelAdd>
 800698a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800698c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <SD_InitCard+0xae>
    {
      return errorstate;
 8006992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006994:	e071      	b.n	8006a7a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	2b03      	cmp	r3, #3
 800699c:	d036      	beq.n	8006a0c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800699e:	89fb      	ldrh	r3, [r7, #14]
 80069a0:	461a      	mov	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ae:	041b      	lsls	r3, r3, #16
 80069b0:	4619      	mov	r1, r3
 80069b2:	4610      	mov	r0, r2
 80069b4:	f001 ff21 	bl	80087fa <SDMMC_CmdSendCSD>
 80069b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	e05a      	b.n	8006a7a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fdae 	bl	800852c <SDIO_GetResponse>
 80069d0:	4602      	mov	r2, r0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2104      	movs	r1, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 fda5 	bl	800852c <SDIO_GetResponse>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2108      	movs	r1, #8
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 fd9c 	bl	800852c <SDIO_GetResponse>
 80069f4:	4602      	mov	r2, r0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	210c      	movs	r1, #12
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 fd93 	bl	800852c <SDIO_GetResponse>
 8006a06:	4602      	mov	r2, r0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2104      	movs	r1, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f001 fd8a 	bl	800852c <SDIO_GetResponse>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	0d1a      	lsrs	r2, r3, #20
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a20:	f107 0310 	add.w	r3, r7, #16
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fd3e 	bl	80064a8 <HAL_SD_GetCardCSD>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a36:	e020      	b.n	8006a7a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	f04f 0400 	mov.w	r4, #0
 8006a46:	461a      	mov	r2, r3
 8006a48:	4623      	mov	r3, r4
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	f001 fdcf 	bl	80085ee <SDMMC_CmdSelDesel>
 8006a50:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <SD_InitCard+0x174>
  {
    return errorstate;
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	e00e      	b.n	8006a7a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681d      	ldr	r5, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	466c      	mov	r4, sp
 8006a64:	f103 0210 	add.w	r2, r3, #16
 8006a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a6e:	3304      	adds	r3, #4
 8006a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a72:	4628      	mov	r0, r5
 8006a74:	f001 fcce 	bl	8008414 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3740      	adds	r7, #64	; 0x40
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a84 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fdc9 	bl	8008634 <SDMMC_CmdGoIdleState>
 8006aa2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <SD_PowerON+0x2a>
  {
    return errorstate;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	e072      	b.n	8006b94 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fddc 	bl	8008670 <SDMMC_CmdOperCond>
 8006ab8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00d      	beq.n	8006adc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fdb2 	bl	8008634 <SDMMC_CmdGoIdleState>
 8006ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	e05b      	b.n	8006b94 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d137      	bne.n	8006b5a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 fddc 	bl	80086ae <SDMMC_CmdAppCommand>
 8006af6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d02d      	beq.n	8006b5a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b02:	e047      	b.n	8006b94 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 fdcf 	bl	80086ae <SDMMC_CmdAppCommand>
 8006b10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <SD_PowerON+0x98>
    {
      return errorstate;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	e03b      	b.n	8006b94 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	491e      	ldr	r1, [pc, #120]	; (8006b9c <SD_PowerON+0x118>)
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 fde5 	bl	80086f2 <SDMMC_CmdAppOperCommand>
 8006b28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b34:	e02e      	b.n	8006b94 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 fcf5 	bl	800852c <SDIO_GetResponse>
 8006b42:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	0fdb      	lsrs	r3, r3, #31
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <SD_PowerON+0xcc>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <SD_PowerON+0xce>
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]

    count++;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d802      	bhi.n	8006b6a <SD_PowerON+0xe6>
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0cc      	beq.n	8006b04 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d902      	bls.n	8006b7a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b78:	e00c      	b.n	8006b94 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	645a      	str	r2, [r3, #68]	; 0x44
 8006b8a:	e002      	b.n	8006b92 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	c1100000 	.word	0xc1100000

08006ba0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	2300      	movs	r3, #0
 8006bae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fcb8 	bl	800852c <SDIO_GetResponse>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bc6:	d102      	bne.n	8006bce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bcc:	e02f      	b.n	8006c2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006bce:	f107 030c 	add.w	r3, r7, #12
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f879 	bl	8006ccc <SD_FindSCR>
 8006bda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	e023      	b.n	8006c2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01c      	beq.n	8006c2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f001 fd56 	bl	80086ae <SDMMC_CmdAppCommand>
 8006c02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	e00f      	b.n	8006c2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2102      	movs	r1, #2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fd8f 	bl	8008738 <SDMMC_CmdBusWidth>
 8006c1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e003      	b.n	8006c2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e001      	b.n	8006c2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 fc6d 	bl	800852c <SDIO_GetResponse>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5c:	d102      	bne.n	8006c64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c62:	e02f      	b.n	8006cc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c64:	f107 030c 	add.w	r3, r7, #12
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f82e 	bl	8006ccc <SD_FindSCR>
 8006c70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	e023      	b.n	8006cc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d01c      	beq.n	8006cc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f001 fd0b 	bl	80086ae <SDMMC_CmdAppCommand>
 8006c98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	e00f      	b.n	8006cc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fd44 	bl	8008738 <SDMMC_CmdBusWidth>
 8006cb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	e003      	b.n	8006cc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e001      	b.n	8006cc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b08f      	sub	sp, #60	; 0x3c
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006cd6:	f7fb f85f 	bl	8001d98 <HAL_GetTick>
 8006cda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2108      	movs	r1, #8
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fc59 	bl	80085aa <SDMMC_CmdBlockLength>
 8006cf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	e0a9      	b.n	8006e58 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f001 fccc 	bl	80086ae <SDMMC_CmdAppCommand>
 8006d16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	e09a      	b.n	8006e58 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295
 8006d26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d28:	2308      	movs	r3, #8
 8006d2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006d2c:	2330      	movs	r3, #48	; 0x30
 8006d2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d30:	2302      	movs	r3, #2
 8006d32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f107 0210 	add.w	r2, r7, #16
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fc03 	bl	8008552 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fd13 	bl	800877c <SDMMC_CmdSendSCR>
 8006d56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d022      	beq.n	8006da4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	e07a      	b.n	8006e58 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	f107 0208 	add.w	r2, r7, #8
 8006d7c:	18d4      	adds	r4, r2, r3
 8006d7e:	4608      	mov	r0, r1
 8006d80:	f001 fb73 	bl	800846a <SDIO_ReadFIFO>
 8006d84:	4603      	mov	r3, r0
 8006d86:	6023      	str	r3, [r4, #0]
      index++;
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d8e:	f7fb f803 	bl	8001d98 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d102      	bne.n	8006da4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006da2:	e059      	b.n	8006e58 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006daa:	f240 432a 	movw	r3, #1066	; 0x42a
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0d6      	beq.n	8006d62 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d005      	beq.n	8006dce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2208      	movs	r2, #8
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006dca:	2308      	movs	r3, #8
 8006dcc:	e044      	b.n	8006e58 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2202      	movs	r2, #2
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	e037      	b.n	8006e58 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006dfe:	2320      	movs	r3, #32
 8006e00:	e02a      	b.n	8006e58 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	061a      	lsls	r2, r3, #24
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e18:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	0a1b      	lsrs	r3, r3, #8
 8006e1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e22:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	0e1b      	lsrs	r3, r3, #24
 8006e28:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	601a      	str	r2, [r3, #0]
    scr++;
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	3304      	adds	r3, #4
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	061a      	lsls	r2, r3, #24
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e40:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e4a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	0e1b      	lsrs	r3, r3, #24
 8006e50:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	373c      	adds	r7, #60	; 0x3c
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd90      	pop	{r4, r7, pc}

08006e60 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e034      	b.n	8006ee0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7fa fe3a 	bl	8001b04 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3308      	adds	r3, #8
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f001 f9b6 	bl	800820c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	f001 fa1e 	bl	80082ec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6858      	ldr	r0, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	f001 fa69 	bl	8008394 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	6892      	ldr	r2, [r2, #8]
 8006eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	6892      	ldr	r2, [r2, #8]
 8006ed6:	f041 0101 	orr.w	r1, r1, #1
 8006eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e01d      	b.n	8006f36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f815 	bl	8006f3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f000 f968 	bl	80071fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0201 	orr.w	r2, r2, #1
 8006f68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b06      	cmp	r3, #6
 8006f7a:	d007      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d122      	bne.n	8006ff6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d11b      	bne.n	8006ff6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f06f 0202 	mvn.w	r2, #2
 8006fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f8ee 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006fe2:	e005      	b.n	8006ff0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8e0 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8f1 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b04      	cmp	r3, #4
 8007002:	d122      	bne.n	800704a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b04      	cmp	r3, #4
 8007010:	d11b      	bne.n	800704a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f06f 0204 	mvn.w	r2, #4
 800701a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8c4 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8007036:	e005      	b.n	8007044 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f8b6 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8c7 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b08      	cmp	r3, #8
 8007056:	d122      	bne.n	800709e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f003 0308 	and.w	r3, r3, #8
 8007062:	2b08      	cmp	r3, #8
 8007064:	d11b      	bne.n	800709e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f06f 0208 	mvn.w	r2, #8
 800706e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2204      	movs	r2, #4
 8007074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f89a 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 800708a:	e005      	b.n	8007098 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f88c 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f89d 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d122      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d11b      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f06f 0210 	mvn.w	r2, #16
 80070c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2208      	movs	r2, #8
 80070c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f870 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 80070de:	e005      	b.n	80070ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f862 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f873 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10e      	bne.n	800711e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b01      	cmp	r3, #1
 800710c:	d107      	bne.n	800711e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f06f 0201 	mvn.w	r2, #1
 8007116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7f9 ffad 	bl	8001078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007128:	2b80      	cmp	r3, #128	; 0x80
 800712a:	d10e      	bne.n	800714a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007136:	2b80      	cmp	r3, #128	; 0x80
 8007138:	d107      	bne.n	800714a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f903 	bl	8007350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d10e      	bne.n	8007176 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d107      	bne.n	8007176 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800716e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f838 	bl	80071e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b20      	cmp	r3, #32
 8007182:	d10e      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0220 	mvn.w	r2, #32
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8cd 	bl	800733c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a40      	ldr	r2, [pc, #256]	; (8007310 <TIM_Base_SetConfig+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d00f      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a3d      	ldr	r2, [pc, #244]	; (8007314 <TIM_Base_SetConfig+0x118>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00b      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a3c      	ldr	r2, [pc, #240]	; (8007318 <TIM_Base_SetConfig+0x11c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d007      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a3b      	ldr	r2, [pc, #236]	; (800731c <TIM_Base_SetConfig+0x120>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d003      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a3a      	ldr	r2, [pc, #232]	; (8007320 <TIM_Base_SetConfig+0x124>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d108      	bne.n	800724e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <TIM_Base_SetConfig+0x114>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d02b      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d027      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <TIM_Base_SetConfig+0x118>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d023      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a2b      	ldr	r2, [pc, #172]	; (8007318 <TIM_Base_SetConfig+0x11c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01f      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a2a      	ldr	r2, [pc, #168]	; (800731c <TIM_Base_SetConfig+0x120>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d01b      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a29      	ldr	r2, [pc, #164]	; (8007320 <TIM_Base_SetConfig+0x124>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d017      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a28      	ldr	r2, [pc, #160]	; (8007324 <TIM_Base_SetConfig+0x128>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a27      	ldr	r2, [pc, #156]	; (8007328 <TIM_Base_SetConfig+0x12c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00f      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a26      	ldr	r2, [pc, #152]	; (800732c <TIM_Base_SetConfig+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00b      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a25      	ldr	r2, [pc, #148]	; (8007330 <TIM_Base_SetConfig+0x134>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d007      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a24      	ldr	r2, [pc, #144]	; (8007334 <TIM_Base_SetConfig+0x138>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a23      	ldr	r2, [pc, #140]	; (8007338 <TIM_Base_SetConfig+0x13c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d108      	bne.n	80072c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <TIM_Base_SetConfig+0x114>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_Base_SetConfig+0xf8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <TIM_Base_SetConfig+0x124>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d103      	bne.n	80072fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	615a      	str	r2, [r3, #20]
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40010000 	.word	0x40010000
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00
 8007320:	40010400 	.word	0x40010400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800
 8007330:	40001800 	.word	0x40001800
 8007334:	40001c00 	.word	0x40001c00
 8007338:	40002000 	.word	0x40002000

0800733c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e03f      	b.n	80073f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa fac4 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2224      	movs	r2, #36	; 0x24
 8007394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fb97 	bl	8007adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b088      	sub	sp, #32
 8007402:	af02      	add	r7, sp, #8
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	603b      	str	r3, [r7, #0]
 800740a:	4613      	mov	r3, r2
 800740c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b20      	cmp	r3, #32
 800741c:	f040 8083 	bne.w	8007526 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_UART_Transmit+0x2e>
 8007426:	88fb      	ldrh	r3, [r7, #6]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e07b      	b.n	8007528 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_UART_Transmit+0x40>
 800743a:	2302      	movs	r3, #2
 800743c:	e074      	b.n	8007528 <HAL_UART_Transmit+0x12a>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2221      	movs	r2, #33	; 0x21
 8007450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007454:	f7fa fca0 	bl	8001d98 <HAL_GetTick>
 8007458:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	88fa      	ldrh	r2, [r7, #6]
 8007464:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800746e:	e042      	b.n	80074f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007486:	d122      	bne.n	80074ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2200      	movs	r2, #0
 8007490:	2180      	movs	r1, #128	; 0x80
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f9b6 	bl	8007804 <UART_WaitOnFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e042      	b.n	8007528 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	3302      	adds	r3, #2
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	e017      	b.n	80074f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	e013      	b.n	80074f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2180      	movs	r1, #128	; 0x80
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f993 	bl	8007804 <UART_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e01f      	b.n	8007528 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	60ba      	str	r2, [r7, #8]
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1b7      	bne.n	8007470 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f97a 	bl	8007804 <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e006      	b.n	8007528 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e000      	b.n	8007528 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007526:	2302      	movs	r3, #2
  }
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b20      	cmp	r3, #32
 8007548:	d140      	bne.n	80075cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_UART_Receive_IT+0x26>
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e039      	b.n	80075ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_UART_Receive_IT+0x38>
 8007564:	2302      	movs	r3, #2
 8007566:	e032      	b.n	80075ce <HAL_UART_Receive_IT+0x9e>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2222      	movs	r2, #34	; 0x22
 800758c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0220 	orr.w	r2, r2, #32
 80075c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e000      	b.n	80075ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
	...

080075dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10d      	bne.n	800762e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_UART_IRQHandler+0x52>
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9d6 	bl	80079d8 <UART_Receive_IT>
      return;
 800762c:	e0d1      	b.n	80077d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 80b0 	beq.w	8007796 <HAL_UART_IRQHandler+0x1ba>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d105      	bne.n	800764c <HAL_UART_IRQHandler+0x70>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80a5 	beq.w	8007796 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_UART_IRQHandler+0x90>
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_UART_IRQHandler+0xb0>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007684:	f043 0202 	orr.w	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <HAL_UART_IRQHandler+0xd0>
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	f043 0204 	orr.w	r2, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00f      	beq.n	80076d6 <HAL_UART_IRQHandler+0xfa>
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <HAL_UART_IRQHandler+0xee>
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	f043 0208 	orr.w	r2, r3, #8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d078      	beq.n	80077d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <HAL_UART_IRQHandler+0x11c>
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f970 	bl	80079d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	bf0c      	ite	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	2300      	movne	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_UART_IRQHandler+0x144>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d031      	beq.n	8007784 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f8b9 	bl	8007898 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d123      	bne.n	800777c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007742:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007748:	2b00      	cmp	r3, #0
 800774a:	d013      	beq.n	8007774 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <HAL_UART_IRQHandler+0x1fc>)
 8007752:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007758:	4618      	mov	r0, r3
 800775a:	f7fb f8c1 	bl	80028e0 <HAL_DMA_Abort_IT>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800776e:	4610      	mov	r0, r2
 8007770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007772:	e00e      	b.n	8007792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f83b 	bl	80077f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	e00a      	b.n	8007792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f837 	bl	80077f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007782:	e006      	b.n	8007792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f833 	bl	80077f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007790:	e01e      	b.n	80077d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007792:	bf00      	nop
    return;
 8007794:	e01c      	b.n	80077d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_UART_IRQHandler+0x1d6>
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8a6 	bl	80078fc <UART_Transmit_IT>
    return;
 80077b0:	e00f      	b.n	80077d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <HAL_UART_IRQHandler+0x1f6>
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f8ee 	bl	80079a8 <UART_EndTransmit_IT>
    return;
 80077cc:	bf00      	nop
 80077ce:	e000      	b.n	80077d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80077d0:	bf00      	nop
  }
}
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	080078d5 	.word	0x080078d5

080077dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007814:	e02c      	b.n	8007870 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d028      	beq.n	8007870 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <UART_WaitOnFlagUntilTimeout+0x30>
 8007824:	f7fa fab8 	bl	8001d98 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	429a      	cmp	r2, r3
 8007832:	d21d      	bcs.n	8007870 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007842:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0201 	bic.w	r2, r2, #1
 8007852:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e00f      	b.n	8007890 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	4013      	ands	r3, r2
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	429a      	cmp	r2, r3
 800788c:	d0c3      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7ff ff7e 	bl	80077f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b21      	cmp	r3, #33	; 0x21
 800790e:	d144      	bne.n	800799a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007918:	d11a      	bne.n	8007950 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	621a      	str	r2, [r3, #32]
 8007942:	e00e      	b.n	8007962 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]
 800794e:	e008      	b.n	8007962 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	1c59      	adds	r1, r3, #1
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6211      	str	r1, [r2, #32]
 800795a:	781a      	ldrb	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29b      	uxth	r3, r3
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4619      	mov	r1, r3
 8007970:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10f      	bne.n	8007996 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007984:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff07 	bl	80077dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b22      	cmp	r3, #34	; 0x22
 80079ea:	d171      	bne.n	8007ad0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f4:	d123      	bne.n	8007a3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10e      	bne.n	8007a22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a20:	e029      	b.n	8007a76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a3c:	e01b      	b.n	8007a76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6858      	ldr	r0, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	1c59      	adds	r1, r3, #1
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6291      	str	r1, [r2, #40]	; 0x28
 8007a56:	b2c2      	uxtb	r2, r0
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	e00c      	b.n	8007a76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	1c58      	adds	r0, r3, #1
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	6288      	str	r0, [r1, #40]	; 0x28
 8007a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4619      	mov	r1, r3
 8007a84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d120      	bne.n	8007acc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0220 	bic.w	r2, r2, #32
 8007a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0201 	bic.w	r2, r2, #1
 8007ab8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7f8 fd2c 	bl	8000520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e002      	b.n	8007ad2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	e000      	b.n	8007ad2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b1e:	f023 030c 	bic.w	r3, r3, #12
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	6812      	ldr	r2, [r2, #0]
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4a:	f040 8199 	bne.w	8007e80 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4ac6      	ldr	r2, [pc, #792]	; (8007e6c <UART_SetConfig+0x390>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00f      	beq.n	8007b78 <UART_SetConfig+0x9c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4ac4      	ldr	r2, [pc, #784]	; (8007e70 <UART_SetConfig+0x394>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00a      	beq.n	8007b78 <UART_SetConfig+0x9c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4ac3      	ldr	r2, [pc, #780]	; (8007e74 <UART_SetConfig+0x398>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d005      	beq.n	8007b78 <UART_SetConfig+0x9c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4ac1      	ldr	r2, [pc, #772]	; (8007e78 <UART_SetConfig+0x39c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	f040 80bd 	bne.w	8007cf2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b78:	f7fd fda2 	bl	80056c0 <HAL_RCC_GetPCLK2Freq>
 8007b7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	461d      	mov	r5, r3
 8007b82:	f04f 0600 	mov.w	r6, #0
 8007b86:	46a8      	mov	r8, r5
 8007b88:	46b1      	mov	r9, r6
 8007b8a:	eb18 0308 	adds.w	r3, r8, r8
 8007b8e:	eb49 0409 	adc.w	r4, r9, r9
 8007b92:	4698      	mov	r8, r3
 8007b94:	46a1      	mov	r9, r4
 8007b96:	eb18 0805 	adds.w	r8, r8, r5
 8007b9a:	eb49 0906 	adc.w	r9, r9, r6
 8007b9e:	f04f 0100 	mov.w	r1, #0
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007baa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bb2:	4688      	mov	r8, r1
 8007bb4:	4691      	mov	r9, r2
 8007bb6:	eb18 0005 	adds.w	r0, r8, r5
 8007bba:	eb49 0106 	adc.w	r1, r9, r6
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	f04f 0600 	mov.w	r6, #0
 8007bc8:	196b      	adds	r3, r5, r5
 8007bca:	eb46 0406 	adc.w	r4, r6, r6
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	f7f8 fb25 	bl	8000220 <__aeabi_uldivmod>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	460c      	mov	r4, r1
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4ba7      	ldr	r3, [pc, #668]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007bde:	fba3 2302 	umull	r2, r3, r3, r2
 8007be2:	095b      	lsrs	r3, r3, #5
 8007be4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	461d      	mov	r5, r3
 8007bec:	f04f 0600 	mov.w	r6, #0
 8007bf0:	46a9      	mov	r9, r5
 8007bf2:	46b2      	mov	sl, r6
 8007bf4:	eb19 0309 	adds.w	r3, r9, r9
 8007bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8007bfc:	4699      	mov	r9, r3
 8007bfe:	46a2      	mov	sl, r4
 8007c00:	eb19 0905 	adds.w	r9, r9, r5
 8007c04:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c08:	f04f 0100 	mov.w	r1, #0
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c1c:	4689      	mov	r9, r1
 8007c1e:	4692      	mov	sl, r2
 8007c20:	eb19 0005 	adds.w	r0, r9, r5
 8007c24:	eb4a 0106 	adc.w	r1, sl, r6
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	461d      	mov	r5, r3
 8007c2e:	f04f 0600 	mov.w	r6, #0
 8007c32:	196b      	adds	r3, r5, r5
 8007c34:	eb46 0406 	adc.w	r4, r6, r6
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4623      	mov	r3, r4
 8007c3c:	f7f8 faf0 	bl	8000220 <__aeabi_uldivmod>
 8007c40:	4603      	mov	r3, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b8d      	ldr	r3, [pc, #564]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007c48:	fba3 1302 	umull	r1, r3, r3, r2
 8007c4c:	095b      	lsrs	r3, r3, #5
 8007c4e:	2164      	movs	r1, #100	; 0x64
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	3332      	adds	r3, #50	; 0x32
 8007c5a:	4a88      	ldr	r2, [pc, #544]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c68:	4498      	add	r8, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	461d      	mov	r5, r3
 8007c6e:	f04f 0600 	mov.w	r6, #0
 8007c72:	46a9      	mov	r9, r5
 8007c74:	46b2      	mov	sl, r6
 8007c76:	eb19 0309 	adds.w	r3, r9, r9
 8007c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c7e:	4699      	mov	r9, r3
 8007c80:	46a2      	mov	sl, r4
 8007c82:	eb19 0905 	adds.w	r9, r9, r5
 8007c86:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c8a:	f04f 0100 	mov.w	r1, #0
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	4692      	mov	sl, r2
 8007ca2:	eb19 0005 	adds.w	r0, r9, r5
 8007ca6:	eb4a 0106 	adc.w	r1, sl, r6
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	461d      	mov	r5, r3
 8007cb0:	f04f 0600 	mov.w	r6, #0
 8007cb4:	196b      	adds	r3, r5, r5
 8007cb6:	eb46 0406 	adc.w	r4, r6, r6
 8007cba:	461a      	mov	r2, r3
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	f7f8 faaf 	bl	8000220 <__aeabi_uldivmod>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	4b6c      	ldr	r3, [pc, #432]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007cca:	fba3 1302 	umull	r1, r3, r3, r2
 8007cce:	095b      	lsrs	r3, r3, #5
 8007cd0:	2164      	movs	r1, #100	; 0x64
 8007cd2:	fb01 f303 	mul.w	r3, r1, r3
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	3332      	adds	r3, #50	; 0x32
 8007cdc:	4a67      	ldr	r2, [pc, #412]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007cde:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce2:	095b      	lsrs	r3, r3, #5
 8007ce4:	f003 0207 	and.w	r2, r3, #7
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4442      	add	r2, r8
 8007cee:	609a      	str	r2, [r3, #8]
 8007cf0:	e27d      	b.n	80081ee <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cf2:	f7fd fcd1 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 8007cf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	461d      	mov	r5, r3
 8007cfc:	f04f 0600 	mov.w	r6, #0
 8007d00:	46a8      	mov	r8, r5
 8007d02:	46b1      	mov	r9, r6
 8007d04:	eb18 0308 	adds.w	r3, r8, r8
 8007d08:	eb49 0409 	adc.w	r4, r9, r9
 8007d0c:	4698      	mov	r8, r3
 8007d0e:	46a1      	mov	r9, r4
 8007d10:	eb18 0805 	adds.w	r8, r8, r5
 8007d14:	eb49 0906 	adc.w	r9, r9, r6
 8007d18:	f04f 0100 	mov.w	r1, #0
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d2c:	4688      	mov	r8, r1
 8007d2e:	4691      	mov	r9, r2
 8007d30:	eb18 0005 	adds.w	r0, r8, r5
 8007d34:	eb49 0106 	adc.w	r1, r9, r6
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	461d      	mov	r5, r3
 8007d3e:	f04f 0600 	mov.w	r6, #0
 8007d42:	196b      	adds	r3, r5, r5
 8007d44:	eb46 0406 	adc.w	r4, r6, r6
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	f7f8 fa68 	bl	8000220 <__aeabi_uldivmod>
 8007d50:	4603      	mov	r3, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b49      	ldr	r3, [pc, #292]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007d58:	fba3 2302 	umull	r2, r3, r3, r2
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	461d      	mov	r5, r3
 8007d66:	f04f 0600 	mov.w	r6, #0
 8007d6a:	46a9      	mov	r9, r5
 8007d6c:	46b2      	mov	sl, r6
 8007d6e:	eb19 0309 	adds.w	r3, r9, r9
 8007d72:	eb4a 040a 	adc.w	r4, sl, sl
 8007d76:	4699      	mov	r9, r3
 8007d78:	46a2      	mov	sl, r4
 8007d7a:	eb19 0905 	adds.w	r9, r9, r5
 8007d7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d82:	f04f 0100 	mov.w	r1, #0
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d96:	4689      	mov	r9, r1
 8007d98:	4692      	mov	sl, r2
 8007d9a:	eb19 0005 	adds.w	r0, r9, r5
 8007d9e:	eb4a 0106 	adc.w	r1, sl, r6
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	461d      	mov	r5, r3
 8007da8:	f04f 0600 	mov.w	r6, #0
 8007dac:	196b      	adds	r3, r5, r5
 8007dae:	eb46 0406 	adc.w	r4, r6, r6
 8007db2:	461a      	mov	r2, r3
 8007db4:	4623      	mov	r3, r4
 8007db6:	f7f8 fa33 	bl	8000220 <__aeabi_uldivmod>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4b2e      	ldr	r3, [pc, #184]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	2164      	movs	r1, #100	; 0x64
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	3332      	adds	r3, #50	; 0x32
 8007dd4:	4a29      	ldr	r2, [pc, #164]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007de2:	4498      	add	r8, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	461d      	mov	r5, r3
 8007de8:	f04f 0600 	mov.w	r6, #0
 8007dec:	46a9      	mov	r9, r5
 8007dee:	46b2      	mov	sl, r6
 8007df0:	eb19 0309 	adds.w	r3, r9, r9
 8007df4:	eb4a 040a 	adc.w	r4, sl, sl
 8007df8:	4699      	mov	r9, r3
 8007dfa:	46a2      	mov	sl, r4
 8007dfc:	eb19 0905 	adds.w	r9, r9, r5
 8007e00:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e04:	f04f 0100 	mov.w	r1, #0
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e18:	4689      	mov	r9, r1
 8007e1a:	4692      	mov	sl, r2
 8007e1c:	eb19 0005 	adds.w	r0, r9, r5
 8007e20:	eb4a 0106 	adc.w	r1, sl, r6
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	461d      	mov	r5, r3
 8007e2a:	f04f 0600 	mov.w	r6, #0
 8007e2e:	196b      	adds	r3, r5, r5
 8007e30:	eb46 0406 	adc.w	r4, r6, r6
 8007e34:	461a      	mov	r2, r3
 8007e36:	4623      	mov	r3, r4
 8007e38:	f7f8 f9f2 	bl	8000220 <__aeabi_uldivmod>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	461a      	mov	r2, r3
 8007e42:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007e44:	fba3 1302 	umull	r1, r3, r3, r2
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	2164      	movs	r1, #100	; 0x64
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	3332      	adds	r3, #50	; 0x32
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <UART_SetConfig+0x3a0>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	f003 0207 	and.w	r2, r3, #7
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4442      	add	r2, r8
 8007e68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007e6a:	e1c0      	b.n	80081ee <UART_SetConfig+0x712>
 8007e6c:	40011000 	.word	0x40011000
 8007e70:	40011400 	.word	0x40011400
 8007e74:	40011800 	.word	0x40011800
 8007e78:	40011c00 	.word	0x40011c00
 8007e7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4adc      	ldr	r2, [pc, #880]	; (80081f8 <UART_SetConfig+0x71c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00f      	beq.n	8007eaa <UART_SetConfig+0x3ce>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4adb      	ldr	r2, [pc, #876]	; (80081fc <UART_SetConfig+0x720>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00a      	beq.n	8007eaa <UART_SetConfig+0x3ce>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4ad9      	ldr	r2, [pc, #868]	; (8008200 <UART_SetConfig+0x724>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d005      	beq.n	8007eaa <UART_SetConfig+0x3ce>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4ad8      	ldr	r2, [pc, #864]	; (8008204 <UART_SetConfig+0x728>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	f040 80d1 	bne.w	800804c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eaa:	f7fd fc09 	bl	80056c0 <HAL_RCC_GetPCLK2Freq>
 8007eae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	469a      	mov	sl, r3
 8007eb4:	f04f 0b00 	mov.w	fp, #0
 8007eb8:	46d0      	mov	r8, sl
 8007eba:	46d9      	mov	r9, fp
 8007ebc:	eb18 0308 	adds.w	r3, r8, r8
 8007ec0:	eb49 0409 	adc.w	r4, r9, r9
 8007ec4:	4698      	mov	r8, r3
 8007ec6:	46a1      	mov	r9, r4
 8007ec8:	eb18 080a 	adds.w	r8, r8, sl
 8007ecc:	eb49 090b 	adc.w	r9, r9, fp
 8007ed0:	f04f 0100 	mov.w	r1, #0
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007edc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ee0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ee4:	4688      	mov	r8, r1
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	eb1a 0508 	adds.w	r5, sl, r8
 8007eec:	eb4b 0609 	adc.w	r6, fp, r9
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f04f 0200 	mov.w	r2, #0
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	f04f 0400 	mov.w	r4, #0
 8007f02:	0094      	lsls	r4, r2, #2
 8007f04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f08:	008b      	lsls	r3, r1, #2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4631      	mov	r1, r6
 8007f12:	f7f8 f985 	bl	8000220 <__aeabi_uldivmod>
 8007f16:	4603      	mov	r3, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4bba      	ldr	r3, [pc, #744]	; (8008208 <UART_SetConfig+0x72c>)
 8007f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	469b      	mov	fp, r3
 8007f2c:	f04f 0c00 	mov.w	ip, #0
 8007f30:	46d9      	mov	r9, fp
 8007f32:	46e2      	mov	sl, ip
 8007f34:	eb19 0309 	adds.w	r3, r9, r9
 8007f38:	eb4a 040a 	adc.w	r4, sl, sl
 8007f3c:	4699      	mov	r9, r3
 8007f3e:	46a2      	mov	sl, r4
 8007f40:	eb19 090b 	adds.w	r9, r9, fp
 8007f44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f48:	f04f 0100 	mov.w	r1, #0
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f5c:	4689      	mov	r9, r1
 8007f5e:	4692      	mov	sl, r2
 8007f60:	eb1b 0509 	adds.w	r5, fp, r9
 8007f64:	eb4c 060a 	adc.w	r6, ip, sl
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	f04f 0400 	mov.w	r4, #0
 8007f7a:	0094      	lsls	r4, r2, #2
 8007f7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f80:	008b      	lsls	r3, r1, #2
 8007f82:	461a      	mov	r2, r3
 8007f84:	4623      	mov	r3, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	4631      	mov	r1, r6
 8007f8a:	f7f8 f949 	bl	8000220 <__aeabi_uldivmod>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	461a      	mov	r2, r3
 8007f94:	4b9c      	ldr	r3, [pc, #624]	; (8008208 <UART_SetConfig+0x72c>)
 8007f96:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	2164      	movs	r1, #100	; 0x64
 8007f9e:	fb01 f303 	mul.w	r3, r1, r3
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	3332      	adds	r3, #50	; 0x32
 8007fa8:	4a97      	ldr	r2, [pc, #604]	; (8008208 <UART_SetConfig+0x72c>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb4:	4498      	add	r8, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	469b      	mov	fp, r3
 8007fba:	f04f 0c00 	mov.w	ip, #0
 8007fbe:	46d9      	mov	r9, fp
 8007fc0:	46e2      	mov	sl, ip
 8007fc2:	eb19 0309 	adds.w	r3, r9, r9
 8007fc6:	eb4a 040a 	adc.w	r4, sl, sl
 8007fca:	4699      	mov	r9, r3
 8007fcc:	46a2      	mov	sl, r4
 8007fce:	eb19 090b 	adds.w	r9, r9, fp
 8007fd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fd6:	f04f 0100 	mov.w	r1, #0
 8007fda:	f04f 0200 	mov.w	r2, #0
 8007fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fe2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fe6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fea:	4689      	mov	r9, r1
 8007fec:	4692      	mov	sl, r2
 8007fee:	eb1b 0509 	adds.w	r5, fp, r9
 8007ff2:	eb4c 060a 	adc.w	r6, ip, sl
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	f04f 0400 	mov.w	r4, #0
 8008008:	0094      	lsls	r4, r2, #2
 800800a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	461a      	mov	r2, r3
 8008012:	4623      	mov	r3, r4
 8008014:	4628      	mov	r0, r5
 8008016:	4631      	mov	r1, r6
 8008018:	f7f8 f902 	bl	8000220 <__aeabi_uldivmod>
 800801c:	4603      	mov	r3, r0
 800801e:	460c      	mov	r4, r1
 8008020:	461a      	mov	r2, r3
 8008022:	4b79      	ldr	r3, [pc, #484]	; (8008208 <UART_SetConfig+0x72c>)
 8008024:	fba3 1302 	umull	r1, r3, r3, r2
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	2164      	movs	r1, #100	; 0x64
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	3332      	adds	r3, #50	; 0x32
 8008036:	4a74      	ldr	r2, [pc, #464]	; (8008208 <UART_SetConfig+0x72c>)
 8008038:	fba2 2303 	umull	r2, r3, r2, r3
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4442      	add	r2, r8
 8008048:	609a      	str	r2, [r3, #8]
 800804a:	e0d0      	b.n	80081ee <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800804c:	f7fd fb24 	bl	8005698 <HAL_RCC_GetPCLK1Freq>
 8008050:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	469a      	mov	sl, r3
 8008056:	f04f 0b00 	mov.w	fp, #0
 800805a:	46d0      	mov	r8, sl
 800805c:	46d9      	mov	r9, fp
 800805e:	eb18 0308 	adds.w	r3, r8, r8
 8008062:	eb49 0409 	adc.w	r4, r9, r9
 8008066:	4698      	mov	r8, r3
 8008068:	46a1      	mov	r9, r4
 800806a:	eb18 080a 	adds.w	r8, r8, sl
 800806e:	eb49 090b 	adc.w	r9, r9, fp
 8008072:	f04f 0100 	mov.w	r1, #0
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800807e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008082:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008086:	4688      	mov	r8, r1
 8008088:	4691      	mov	r9, r2
 800808a:	eb1a 0508 	adds.w	r5, sl, r8
 800808e:	eb4b 0609 	adc.w	r6, fp, r9
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	4619      	mov	r1, r3
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	f04f 0400 	mov.w	r4, #0
 80080a4:	0094      	lsls	r4, r2, #2
 80080a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080aa:	008b      	lsls	r3, r1, #2
 80080ac:	461a      	mov	r2, r3
 80080ae:	4623      	mov	r3, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	4631      	mov	r1, r6
 80080b4:	f7f8 f8b4 	bl	8000220 <__aeabi_uldivmod>
 80080b8:	4603      	mov	r3, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	461a      	mov	r2, r3
 80080be:	4b52      	ldr	r3, [pc, #328]	; (8008208 <UART_SetConfig+0x72c>)
 80080c0:	fba3 2302 	umull	r2, r3, r3, r2
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	469b      	mov	fp, r3
 80080ce:	f04f 0c00 	mov.w	ip, #0
 80080d2:	46d9      	mov	r9, fp
 80080d4:	46e2      	mov	sl, ip
 80080d6:	eb19 0309 	adds.w	r3, r9, r9
 80080da:	eb4a 040a 	adc.w	r4, sl, sl
 80080de:	4699      	mov	r9, r3
 80080e0:	46a2      	mov	sl, r4
 80080e2:	eb19 090b 	adds.w	r9, r9, fp
 80080e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80080ea:	f04f 0100 	mov.w	r1, #0
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080fe:	4689      	mov	r9, r1
 8008100:	4692      	mov	sl, r2
 8008102:	eb1b 0509 	adds.w	r5, fp, r9
 8008106:	eb4c 060a 	adc.w	r6, ip, sl
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	4619      	mov	r1, r3
 8008110:	f04f 0200 	mov.w	r2, #0
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	f04f 0400 	mov.w	r4, #0
 800811c:	0094      	lsls	r4, r2, #2
 800811e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008122:	008b      	lsls	r3, r1, #2
 8008124:	461a      	mov	r2, r3
 8008126:	4623      	mov	r3, r4
 8008128:	4628      	mov	r0, r5
 800812a:	4631      	mov	r1, r6
 800812c:	f7f8 f878 	bl	8000220 <__aeabi_uldivmod>
 8008130:	4603      	mov	r3, r0
 8008132:	460c      	mov	r4, r1
 8008134:	461a      	mov	r2, r3
 8008136:	4b34      	ldr	r3, [pc, #208]	; (8008208 <UART_SetConfig+0x72c>)
 8008138:	fba3 1302 	umull	r1, r3, r3, r2
 800813c:	095b      	lsrs	r3, r3, #5
 800813e:	2164      	movs	r1, #100	; 0x64
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	3332      	adds	r3, #50	; 0x32
 800814a:	4a2f      	ldr	r2, [pc, #188]	; (8008208 <UART_SetConfig+0x72c>)
 800814c:	fba2 2303 	umull	r2, r3, r2, r3
 8008150:	095b      	lsrs	r3, r3, #5
 8008152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008156:	4498      	add	r8, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	469b      	mov	fp, r3
 800815c:	f04f 0c00 	mov.w	ip, #0
 8008160:	46d9      	mov	r9, fp
 8008162:	46e2      	mov	sl, ip
 8008164:	eb19 0309 	adds.w	r3, r9, r9
 8008168:	eb4a 040a 	adc.w	r4, sl, sl
 800816c:	4699      	mov	r9, r3
 800816e:	46a2      	mov	sl, r4
 8008170:	eb19 090b 	adds.w	r9, r9, fp
 8008174:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008178:	f04f 0100 	mov.w	r1, #0
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008184:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008188:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800818c:	4689      	mov	r9, r1
 800818e:	4692      	mov	sl, r2
 8008190:	eb1b 0509 	adds.w	r5, fp, r9
 8008194:	eb4c 060a 	adc.w	r6, ip, sl
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4619      	mov	r1, r3
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	f04f 0400 	mov.w	r4, #0
 80081aa:	0094      	lsls	r4, r2, #2
 80081ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081b0:	008b      	lsls	r3, r1, #2
 80081b2:	461a      	mov	r2, r3
 80081b4:	4623      	mov	r3, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	4631      	mov	r1, r6
 80081ba:	f7f8 f831 	bl	8000220 <__aeabi_uldivmod>
 80081be:	4603      	mov	r3, r0
 80081c0:	460c      	mov	r4, r1
 80081c2:	461a      	mov	r2, r3
 80081c4:	4b10      	ldr	r3, [pc, #64]	; (8008208 <UART_SetConfig+0x72c>)
 80081c6:	fba3 1302 	umull	r1, r3, r3, r2
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	2164      	movs	r1, #100	; 0x64
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	3332      	adds	r3, #50	; 0x32
 80081d8:	4a0b      	ldr	r2, [pc, #44]	; (8008208 <UART_SetConfig+0x72c>)
 80081da:	fba2 2303 	umull	r2, r3, r2, r3
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	f003 020f 	and.w	r2, r3, #15
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4442      	add	r2, r8
 80081ea:	609a      	str	r2, [r3, #8]
}
 80081ec:	e7ff      	b.n	80081ee <UART_SetConfig+0x712>
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	40011000 	.word	0x40011000
 80081fc:	40011400 	.word	0x40011400
 8008200:	40011800 	.word	0x40011800
 8008204:	40011c00 	.word	0x40011c00
 8008208:	51eb851f 	.word	0x51eb851f

0800820c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008224:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4b2f      	ldr	r3, [pc, #188]	; (80082e8 <FSMC_NORSRAM_Init+0xdc>)
 800822a:	4013      	ands	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008236:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800823c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008242:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008248:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800824e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008254:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800825a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008260:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008266:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800826c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008272:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008278:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800827e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b08      	cmp	r3, #8
 800828c:	d103      	bne.n	8008296 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008294:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68f9      	ldr	r1, [r7, #12]
 800829e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082aa:	d10a      	bne.n	80082c2 <FSMC_NORSRAM_Init+0xb6>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d006      	beq.n	80082c2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082bc:	431a      	orrs	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	ffc00480 	.word	0xffc00480

080082ec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800830e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800831a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008322:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800832a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	3b01      	subs	r3, #1
 8008332:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008334:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	3b02      	subs	r3, #2
 800833c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800833e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008344:	4313      	orrs	r3, r2
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6979      	ldr	r1, [r7, #20]
 8008354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008364:	d10e      	bne.n	8008384 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800836e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	3b01      	subs	r3, #1
 8008376:	051b      	lsls	r3, r3, #20
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
	...

08008394 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083ac:	d122      	bne.n	80083f4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4b15      	ldr	r3, [pc, #84]	; (8008410 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80083bc:	4013      	ands	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083ca:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80083d2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80083da:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083e0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6979      	ldr	r1, [r7, #20]
 80083ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80083f2:	e005      	b.n	8008400 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80083fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	cff00000 	.word	0xcff00000

08008414 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008414:	b084      	sub	sp, #16
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	f107 001c 	add.w	r0, r7, #28
 8008422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800842a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800842c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800842e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008432:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008436:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800843a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800843e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800844e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	431a      	orrs	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	b004      	add	sp, #16
 8008468:	4770      	bx	lr

0800846a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2203      	movs	r2, #3
 8008490:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008492:	2002      	movs	r0, #2
 8008494:	f7f9 fc8c 	bl	8001db0 <HAL_Delay>
  
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0303 	and.w	r3, r3, #3
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084f8:	f023 030f 	bic.w	r3, r3, #15
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	b2db      	uxtb	r3, r3
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3314      	adds	r3, #20
 800853a:	461a      	mov	r2, r3
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	4413      	add	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
}  
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008578:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800857e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008584:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4313      	orrs	r3, r2
 800858a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800859c:	2300      	movs	r3, #0

}
 800859e:	4618      	mov	r0, r3
 80085a0:	3714      	adds	r7, #20
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b088      	sub	sp, #32
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085b8:	2310      	movs	r3, #16
 80085ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085ca:	f107 0308 	add.w	r3, r7, #8
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7ff ff74 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80085d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085da:	2110      	movs	r1, #16
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f975 	bl	80088cc <SDMMC_GetCmdResp1>
 80085e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e4:	69fb      	ldr	r3, [r7, #28]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b08a      	sub	sp, #40	; 0x28
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80085fe:	2307      	movs	r3, #7
 8008600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008602:	2340      	movs	r3, #64	; 0x40
 8008604:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800860a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008610:	f107 0310 	add.w	r3, r7, #16
 8008614:	4619      	mov	r1, r3
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff ff51 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800861c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008620:	2107      	movs	r1, #7
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f952 	bl	80088cc <SDMMC_GetCmdResp1>
 8008628:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800862c:	4618      	mov	r0, r3
 800862e:	3728      	adds	r7, #40	; 0x28
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800864c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008650:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008652:	f107 0308 	add.w	r3, r7, #8
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff ff30 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f90c 	bl	800887c <SDMMC_GetCmdError>
 8008664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008666:	69fb      	ldr	r3, [r7, #28]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008678:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800867c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800867e:	2308      	movs	r3, #8
 8008680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008682:	2340      	movs	r3, #64	; 0x40
 8008684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800868a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff ff11 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 faf5 	bl	8008c8c <SDMMC_GetCmdResp7>
 80086a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a4:	69fb      	ldr	r3, [r7, #28]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b088      	sub	sp, #32
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80086bc:	2337      	movs	r3, #55	; 0x37
 80086be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086c0:	2340      	movs	r3, #64	; 0x40
 80086c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086ce:	f107 0308 	add.w	r3, r7, #8
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fef2 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80086da:	f241 3288 	movw	r2, #5000	; 0x1388
 80086de:	2137      	movs	r1, #55	; 0x37
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f8f3 	bl	80088cc <SDMMC_GetCmdResp1>
 80086e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086e8:	69fb      	ldr	r3, [r7, #28]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b088      	sub	sp, #32
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008708:	2329      	movs	r3, #41	; 0x29
 800870a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008718:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fecc 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa02 	bl	8008b30 <SDMMC_GetCmdResp3>
 800872c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800872e:	69fb      	ldr	r3, [r7, #28]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008746:	2306      	movs	r3, #6
 8008748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800874a:	2340      	movs	r3, #64	; 0x40
 800874c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008756:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fead 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008764:	f241 3288 	movw	r2, #5000	; 0x1388
 8008768:	2106      	movs	r1, #6
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f8ae 	bl	80088cc <SDMMC_GetCmdResp1>
 8008770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008772:	69fb      	ldr	r3, [r7, #28]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008788:	2333      	movs	r3, #51	; 0x33
 800878a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008790:	2300      	movs	r3, #0
 8008792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008798:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800879a:	f107 0308 	add.w	r3, r7, #8
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff fe8c 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80087a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087aa:	2133      	movs	r1, #51	; 0x33
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f88d 	bl	80088cc <SDMMC_GetCmdResp1>
 80087b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b4:	69fb      	ldr	r3, [r7, #28]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3720      	adds	r7, #32
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b088      	sub	sp, #32
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087ca:	2302      	movs	r3, #2
 80087cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087ce:	23c0      	movs	r3, #192	; 0xc0
 80087d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087d2:	2300      	movs	r3, #0
 80087d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087dc:	f107 0308 	add.w	r3, r7, #8
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7ff fe6b 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f95b 	bl	8008aa4 <SDMMC_GetCmdResp2>
 80087ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f0:	69fb      	ldr	r3, [r7, #28]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b088      	sub	sp, #32
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008808:	2309      	movs	r3, #9
 800880a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800880c:	23c0      	movs	r3, #192	; 0xc0
 800880e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff fe4c 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f93c 	bl	8008aa4 <SDMMC_GetCmdResp2>
 800882c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800882e:	69fb      	ldr	r3, [r7, #28]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3720      	adds	r7, #32
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008846:	2303      	movs	r3, #3
 8008848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800884a:	2340      	movs	r3, #64	; 0x40
 800884c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008858:	f107 0308 	add.w	r3, r7, #8
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fe2d 	bl	80084be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	2103      	movs	r1, #3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f99b 	bl	8008ba4 <SDMMC_GetCmdResp6>
 800886e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008870:	69fb      	ldr	r3, [r7, #28]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800887c:	b490      	push	{r4, r7}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008884:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <SDMMC_GetCmdError+0x48>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a0f      	ldr	r2, [pc, #60]	; (80088c8 <SDMMC_GetCmdError+0x4c>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	0a5b      	lsrs	r3, r3, #9
 8008890:	f241 3288 	movw	r2, #5000	; 0x1388
 8008894:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008898:	4623      	mov	r3, r4
 800889a:	1e5c      	subs	r4, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d102      	bne.n	80088a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088a4:	e009      	b.n	80088ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f2      	beq.n	8008898 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	22c5      	movs	r2, #197	; 0xc5
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc90      	pop	{r4, r7}
 80088c2:	4770      	bx	lr
 80088c4:	20000000 	.word	0x20000000
 80088c8:	10624dd3 	.word	0x10624dd3

080088cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088cc:	b590      	push	{r4, r7, lr}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	460b      	mov	r3, r1
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80088da:	4b6f      	ldr	r3, [pc, #444]	; (8008a98 <SDMMC_GetCmdResp1+0x1cc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a6f      	ldr	r2, [pc, #444]	; (8008a9c <SDMMC_GetCmdResp1+0x1d0>)
 80088e0:	fba2 2303 	umull	r2, r3, r2, r3
 80088e4:	0a5b      	lsrs	r3, r3, #9
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088ec:	4623      	mov	r3, r4
 80088ee:	1e5c      	subs	r4, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088f8:	e0c9      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f0      	beq.n	80088ec <SDMMC_GetCmdResp1+0x20>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1eb      	bne.n	80088ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d004      	beq.n	800892a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2204      	movs	r2, #4
 8008924:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008926:	2304      	movs	r3, #4
 8008928:	e0b1      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800893c:	2301      	movs	r3, #1
 800893e:	e0a6      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	22c5      	movs	r2, #197	; 0xc5
 8008944:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff fde3 	bl	8008512 <SDIO_GetCommandResponse>
 800894c:	4603      	mov	r3, r0
 800894e:	461a      	mov	r2, r3
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	4293      	cmp	r3, r2
 8008954:	d001      	beq.n	800895a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008956:	2301      	movs	r3, #1
 8008958:	e099      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800895a:	2100      	movs	r1, #0
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff fde5 	bl	800852c <SDIO_GetResponse>
 8008962:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4b4e      	ldr	r3, [pc, #312]	; (8008aa0 <SDMMC_GetCmdResp1+0x1d4>)
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800896e:	2300      	movs	r3, #0
 8008970:	e08d      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da02      	bge.n	800897e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800897c:	e087      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	e080      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008996:	2380      	movs	r3, #128	; 0x80
 8008998:	e079      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80089a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089a8:	e071      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80089b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b8:	e069      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c8:	e061      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089d8:	e059      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089e8:	e051      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089f8:	e049      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a08:	e041      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a18:	e039      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a28:	e031      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a38:	e029      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a48:	e021      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a58:	e019      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a68:	e011      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d002      	beq.n	8008a7a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a78:	e009      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a88:	e001      	b.n	8008a8e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd90      	pop	{r4, r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000000 	.word	0x20000000
 8008a9c:	10624dd3 	.word	0x10624dd3
 8008aa0:	fdffe008 	.word	0xfdffe008

08008aa4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008aa4:	b490      	push	{r4, r7}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008aac:	4b1e      	ldr	r3, [pc, #120]	; (8008b28 <SDMMC_GetCmdResp2+0x84>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1e      	ldr	r2, [pc, #120]	; (8008b2c <SDMMC_GetCmdResp2+0x88>)
 8008ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab6:	0a5b      	lsrs	r3, r3, #9
 8008ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008abc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	1e5c      	subs	r4, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008acc:	e026      	b.n	8008b1c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <SDMMC_GetCmdResp2+0x1c>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1eb      	bne.n	8008ac0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d004      	beq.n	8008afe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2204      	movs	r2, #4
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008afa:	2304      	movs	r3, #4
 8008afc:	e00e      	b.n	8008b1c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e003      	b.n	8008b1c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	22c5      	movs	r2, #197	; 0xc5
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bc90      	pop	{r4, r7}
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000000 	.word	0x20000000
 8008b2c:	10624dd3 	.word	0x10624dd3

08008b30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b30:	b490      	push	{r4, r7}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b38:	4b18      	ldr	r3, [pc, #96]	; (8008b9c <SDMMC_GetCmdResp3+0x6c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a18      	ldr	r2, [pc, #96]	; (8008ba0 <SDMMC_GetCmdResp3+0x70>)
 8008b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b42:	0a5b      	lsrs	r3, r3, #9
 8008b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	1e5c      	subs	r4, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d102      	bne.n	8008b5a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b58:	e01b      	b.n	8008b92 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0f0      	beq.n	8008b4c <SDMMC_GetCmdResp3+0x1c>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1eb      	bne.n	8008b4c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2204      	movs	r2, #4
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b86:	2304      	movs	r3, #4
 8008b88:	e003      	b.n	8008b92 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	22c5      	movs	r2, #197	; 0xc5
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc90      	pop	{r4, r7}
 8008b9a:	4770      	bx	lr
 8008b9c:	20000000 	.word	0x20000000
 8008ba0:	10624dd3 	.word	0x10624dd3

08008ba4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	460b      	mov	r3, r1
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bb2:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <SDMMC_GetCmdResp6+0xe0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a34      	ldr	r2, [pc, #208]	; (8008c88 <SDMMC_GetCmdResp6+0xe4>)
 8008bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bbc:	0a5b      	lsrs	r3, r3, #9
 8008bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	1e5c      	subs	r4, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bd2:	e052      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0f0      	beq.n	8008bc6 <SDMMC_GetCmdResp6+0x22>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1eb      	bne.n	8008bc6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c00:	2304      	movs	r3, #4
 8008c02:	e03a      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e02f      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff fc79 	bl	8008512 <SDIO_GetCommandResponse>
 8008c20:	4603      	mov	r3, r0
 8008c22:	461a      	mov	r2, r3
 8008c24:	7afb      	ldrb	r3, [r7, #11]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d001      	beq.n	8008c2e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e025      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	22c5      	movs	r2, #197	; 0xc5
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c34:	2100      	movs	r1, #0
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff fc78 	bl	800852c <SDIO_GetResponse>
 8008c3c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	0c1b      	lsrs	r3, r3, #16
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	e011      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c64:	e009      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c74:	e001      	b.n	8008c7a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd90      	pop	{r4, r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000000 	.word	0x20000000
 8008c88:	10624dd3 	.word	0x10624dd3

08008c8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008c8c:	b490      	push	{r4, r7}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c94:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <SDMMC_GetCmdResp7+0x90>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a21      	ldr	r2, [pc, #132]	; (8008d20 <SDMMC_GetCmdResp7+0x94>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	0a5b      	lsrs	r3, r3, #9
 8008ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008ca8:	4623      	mov	r3, r4
 8008caa:	1e5c      	subs	r4, r3, #1
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cb4:	e02c      	b.n	8008d10 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0f0      	beq.n	8008ca8 <SDMMC_GetCmdResp7+0x1c>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1eb      	bne.n	8008ca8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d004      	beq.n	8008ce6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ce2:	2304      	movs	r3, #4
 8008ce4:	e014      	b.n	8008d10 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d004      	beq.n	8008cfc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e009      	b.n	8008d10 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2240      	movs	r2, #64	; 0x40
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d0e:	2300      	movs	r3, #0
  
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc90      	pop	{r4, r7}
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20000000 	.word	0x20000000
 8008d20:	10624dd3 	.word	0x10624dd3

08008d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d24:	b084      	sub	sp, #16
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	f107 001c 	add.w	r0, r7, #28
 8008d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d122      	bne.n	8008d82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d105      	bne.n	8008d76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f94a 	bl	8009010 <USB_CoreReset>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
 8008d80:	e01a      	b.n	8008db8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f93e 	bl	8009010 <USB_CoreReset>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
 8008daa:	e005      	b.n	8008db8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d10b      	bne.n	8008dd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f043 0206 	orr.w	r2, r3, #6
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f043 0220 	orr.w	r2, r3, #32
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008de2:	b004      	add	sp, #16
 8008de4:	4770      	bx	lr

08008de6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f043 0201 	orr.w	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f023 0201 	bic.w	r2, r3, #1
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d106      	bne.n	8008e56 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]
 8008e54:	e00b      	b.n	8008e6e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]
 8008e68:	e001      	b.n	8008e6e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e003      	b.n	8008e76 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008e6e:	2032      	movs	r0, #50	; 0x32
 8008e70:	f7f8 ff9e 	bl	8001db0 <HAL_Delay>

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	019b      	lsls	r3, r3, #6
 8008e92:	f043 0220 	orr.w	r2, r3, #32
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a09      	ldr	r2, [pc, #36]	; (8008ec8 <USB_FlushTxFifo+0x48>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d901      	bls.n	8008eac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e006      	b.n	8008eba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d0f0      	beq.n	8008e9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	00030d40 	.word	0x00030d40

08008ecc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2210      	movs	r2, #16
 8008edc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <USB_FlushRxFifo+0x40>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d901      	bls.n	8008ef0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e006      	b.n	8008efe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d0f0      	beq.n	8008ede <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	00030d40 	.word	0x00030d40

08008f10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b089      	sub	sp, #36	; 0x24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	460b      	mov	r3, r1
 8008f20:	71fb      	strb	r3, [r7, #7]
 8008f22:	4613      	mov	r3, r2
 8008f24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d11a      	bne.n	8008f6c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f36:	88bb      	ldrh	r3, [r7, #4]
 8008f38:	3303      	adds	r3, #3
 8008f3a:	089b      	lsrs	r3, r3, #2
 8008f3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61bb      	str	r3, [r7, #24]
 8008f42:	e00f      	b.n	8008f64 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	031a      	lsls	r2, r3, #12
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f50:	461a      	mov	r2, r3
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	3301      	adds	r3, #1
 8008f62:	61bb      	str	r3, [r7, #24]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3eb      	bcc.n	8008f44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3724      	adds	r7, #36	; 0x24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b089      	sub	sp, #36	; 0x24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	3303      	adds	r3, #3
 8008f94:	089b      	lsrs	r3, r3, #2
 8008f96:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61bb      	str	r3, [r7, #24]
 8008f9c:	e00b      	b.n	8008fb6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	601a      	str	r2, [r3, #0]
    pDest++;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	3304      	adds	r3, #4
 8008fae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	61bb      	str	r3, [r7, #24]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d3ef      	bcc.n	8008f9e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008fbe:	69fb      	ldr	r3, [r7, #28]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3724      	adds	r7, #36	; 0x24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
	...

08009010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009018:	2300      	movs	r3, #0
 800901a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3301      	adds	r3, #1
 8009020:	60fb      	str	r3, [r7, #12]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4a13      	ldr	r2, [pc, #76]	; (8009074 <USB_CoreReset+0x64>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d901      	bls.n	800902e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e01b      	b.n	8009066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	daf2      	bge.n	800901c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	f043 0201 	orr.w	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4a09      	ldr	r2, [pc, #36]	; (8009074 <USB_CoreReset+0x64>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d901      	bls.n	8009058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e006      	b.n	8009066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b01      	cmp	r3, #1
 8009062:	d0f0      	beq.n	8009046 <USB_CoreReset+0x36>

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	00030d40 	.word	0x00030d40

08009078 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009078:	b084      	sub	sp, #16
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	f107 001c 	add.w	r0, r7, #28
 8009086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009094:	461a      	mov	r2, r3
 8009096:	2300      	movs	r3, #0
 8009098:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d018      	beq.n	80090f0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d10a      	bne.n	80090da <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090d2:	f043 0304 	orr.w	r3, r3, #4
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	e014      	b.n	8009104 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090e8:	f023 0304 	bic.w	r3, r3, #4
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	e009      	b.n	8009104 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090fe:	f023 0304 	bic.w	r3, r3, #4
 8009102:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009104:	2110      	movs	r1, #16
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff feba 	bl	8008e80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff fedd 	bl	8008ecc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e015      	b.n	8009144 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4413      	add	r3, r2
 8009120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009124:	461a      	mov	r2, r3
 8009126:	f04f 33ff 	mov.w	r3, #4294967295
 800912a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4413      	add	r3, r2
 8009134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009138:	461a      	mov	r2, r3
 800913a:	2300      	movs	r3, #0
 800913c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	429a      	cmp	r2, r3
 800914a:	d3e5      	bcc.n	8009118 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800914c:	2101      	movs	r1, #1
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f8ac 	bl	80092ac <USB_DriveVbus>

  HAL_Delay(200U);
 8009154:	20c8      	movs	r0, #200	; 0xc8
 8009156:	f7f8 fe2b 	bl	8001db0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800917a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a14      	ldr	r2, [pc, #80]	; (80091d0 <USB_HostInit+0x158>)
 8009180:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a13      	ldr	r2, [pc, #76]	; (80091d4 <USB_HostInit+0x15c>)
 8009186:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800918a:	e009      	b.n	80091a0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2280      	movs	r2, #128	; 0x80
 8009190:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a10      	ldr	r2, [pc, #64]	; (80091d8 <USB_HostInit+0x160>)
 8009196:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a10      	ldr	r2, [pc, #64]	; (80091dc <USB_HostInit+0x164>)
 800919c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d105      	bne.n	80091b2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	f043 0210 	orr.w	r2, r3, #16
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <USB_HostInit+0x168>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091ca:	b004      	add	sp, #16
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	01000200 	.word	0x01000200
 80091d4:	00e00300 	.word	0x00e00300
 80091d8:	00600080 	.word	0x00600080
 80091dc:	004000e0 	.word	0x004000e0
 80091e0:	a3200008 	.word	0xa3200008

080091e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800921c:	4313      	orrs	r3, r2
 800921e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d107      	bne.n	8009236 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800922c:	461a      	mov	r2, r3
 800922e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009232:	6053      	str	r3, [r2, #4]
 8009234:	e009      	b.n	800924a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d106      	bne.n	800924a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009242:	461a      	mov	r2, r3
 8009244:	f241 7370 	movw	r3, #6000	; 0x1770
 8009248:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009278:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009286:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009288:	2064      	movs	r0, #100	; 0x64
 800928a:	f7f8 fd91 	bl	8001db0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800929a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800929c:	200a      	movs	r0, #10
 800929e:	f7f8 fd87 	bl	8001db0 <HAL_Delay>

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80092d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d109      	bne.n	80092f0 <USB_DriveVbus+0x44>
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d106      	bne.n	80092f0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80092ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092ee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fa:	d109      	bne.n	8009310 <USB_DriveVbus+0x64>
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800930a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800930e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800931e:	b480      	push	{r7}
 8009320:	b085      	sub	sp, #20
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	0c5b      	lsrs	r3, r3, #17
 800933c:	f003 0303 	and.w	r3, r3, #3
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	b29b      	uxth	r3, r3
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	4608      	mov	r0, r1
 800937a:	4611      	mov	r1, r2
 800937c:	461a      	mov	r2, r3
 800937e:	4603      	mov	r3, r0
 8009380:	70fb      	strb	r3, [r7, #3]
 8009382:	460b      	mov	r3, r1
 8009384:	70bb      	strb	r3, [r7, #2]
 8009386:	4613      	mov	r3, r2
 8009388:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4413      	add	r3, r2
 800939a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800939e:	461a      	mov	r2, r3
 80093a0:	f04f 33ff 	mov.w	r3, #4294967295
 80093a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80093a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d87e      	bhi.n	80094ac <USB_HC_Init+0x13c>
 80093ae:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <USB_HC_Init+0x44>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093c5 	.word	0x080093c5
 80093b8:	0800946f 	.word	0x0800946f
 80093bc:	080093c5 	.word	0x080093c5
 80093c0:	08009431 	.word	0x08009431
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d0:	461a      	mov	r2, r3
 80093d2:	f240 439d 	movw	r3, #1181	; 0x49d
 80093d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80093d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da10      	bge.n	8009402 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093fe:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009400:	e057      	b.n	80094b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	2b00      	cmp	r3, #0
 800940c:	d051      	beq.n	80094b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	440a      	add	r2, r1
 8009424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009428:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800942c:	60d3      	str	r3, [r2, #12]
      break;
 800942e:	e040      	b.n	80094b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4413      	add	r3, r2
 8009438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943c:	461a      	mov	r2, r3
 800943e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009442:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009444:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009448:	2b00      	cmp	r3, #0
 800944a:	da34      	bge.n	80094b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4413      	add	r3, r2
 8009454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	78fa      	ldrb	r2, [r7, #3]
 800945c:	0151      	lsls	r1, r2, #5
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	440a      	add	r2, r1
 8009462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800946a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800946c:	e023      	b.n	80094b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4413      	add	r3, r2
 8009476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947a:	461a      	mov	r2, r3
 800947c:	f240 2325 	movw	r3, #549	; 0x225
 8009480:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009482:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009486:	2b00      	cmp	r3, #0
 8009488:	da17      	bge.n	80094ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80094a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80094aa:	e006      	b.n	80094ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	75fb      	strb	r3, [r7, #23]
      break;
 80094b0:	e004      	b.n	80094bc <USB_HC_Init+0x14c>
      break;
 80094b2:	bf00      	nop
 80094b4:	e002      	b.n	80094bc <USB_HC_Init+0x14c>
      break;
 80094b6:	bf00      	nop
 80094b8:	e000      	b.n	80094bc <USB_HC_Init+0x14c>
      break;
 80094ba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	2101      	movs	r1, #1
 80094cc:	fa01 f303 	lsl.w	r3, r1, r3
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80094d6:	4313      	orrs	r3, r2
 80094d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80094e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da03      	bge.n	80094f6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80094ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094f2:	613b      	str	r3, [r7, #16]
 80094f4:	e001      	b.n	80094fa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80094fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d103      	bne.n	800950a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	e001      	b.n	800950e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800950e:	787b      	ldrb	r3, [r7, #1]
 8009510:	059b      	lsls	r3, r3, #22
 8009512:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009516:	78bb      	ldrb	r3, [r7, #2]
 8009518:	02db      	lsls	r3, r3, #11
 800951a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800951e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009524:	049b      	lsls	r3, r3, #18
 8009526:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800952a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800952c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800952e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009532:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	0159      	lsls	r1, r3, #5
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	440b      	add	r3, r1
 8009540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009544:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800954a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800954c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009550:	2b03      	cmp	r3, #3
 8009552:	d10f      	bne.n	8009574 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009572:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop

08009584 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08c      	sub	sp, #48	; 0x30
 8009588:	af02      	add	r7, sp, #8
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800959c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d028      	beq.n	8009600 <USB_HC_StartXfer+0x7c>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	791b      	ldrb	r3, [r3, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d124      	bne.n	8009600 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <USB_HC_StartXfer+0x50>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	795b      	ldrb	r3, [r3, #5]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d107      	bne.n	80095d4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	4619      	mov	r1, r3
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fa30 	bl	8009a30 <USB_DoPing>
      return HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	e114      	b.n	80097fe <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d112      	bne.n	8009600 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	6a3a      	ldr	r2, [r7, #32]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80095f8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2200      	movs	r2, #0
 80095fe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d018      	beq.n	800963a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	8912      	ldrh	r2, [r2, #8]
 8009610:	4413      	add	r3, r2
 8009612:	3b01      	subs	r3, #1
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	8912      	ldrh	r2, [r2, #8]
 8009618:	fbb3 f3f2 	udiv	r3, r3, r2
 800961c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800961e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009620:	8b7b      	ldrh	r3, [r7, #26]
 8009622:	429a      	cmp	r2, r3
 8009624:	d90b      	bls.n	800963e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8009626:	8b7b      	ldrh	r3, [r7, #26]
 8009628:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800962a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	8912      	ldrh	r2, [r2, #8]
 8009630:	fb02 f203 	mul.w	r2, r2, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	611a      	str	r2, [r3, #16]
 8009638:	e001      	b.n	800963e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800963a:	2301      	movs	r3, #1
 800963c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	78db      	ldrb	r3, [r3, #3]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	8912      	ldrh	r2, [r2, #8]
 800964c:	fb02 f203 	mul.w	r2, r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800965c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800965e:	04d9      	lsls	r1, r3, #19
 8009660:	4b69      	ldr	r3, [pc, #420]	; (8009808 <USB_HC_StartXfer+0x284>)
 8009662:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009664:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	7a9b      	ldrb	r3, [r3, #10]
 800966a:	075b      	lsls	r3, r3, #29
 800966c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009670:	69f9      	ldr	r1, [r7, #28]
 8009672:	0148      	lsls	r0, r1, #5
 8009674:	6a39      	ldr	r1, [r7, #32]
 8009676:	4401      	add	r1, r0
 8009678:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800967c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800967e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d009      	beq.n	800969a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	68d9      	ldr	r1, [r3, #12]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	4413      	add	r3, r2
 8009692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009696:	460a      	mov	r2, r1
 8009698:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bf0c      	ite	eq
 80096aa:	2301      	moveq	r3, #1
 80096ac:	2300      	movne	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	0151      	lsls	r1, r2, #5
 80096c4:	6a3a      	ldr	r2, [r7, #32]
 80096c6:	440a      	add	r2, r1
 80096c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	7e7b      	ldrb	r3, [r7, #25]
 80096e2:	075b      	lsls	r3, r3, #29
 80096e4:	69f9      	ldr	r1, [r7, #28]
 80096e6:	0148      	lsls	r0, r1, #5
 80096e8:	6a39      	ldr	r1, [r7, #32]
 80096ea:	4401      	add	r1, r0
 80096ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80096f0:	4313      	orrs	r3, r2
 80096f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a42      	ldr	r2, [pc, #264]	; (800980c <USB_HC_StartXfer+0x288>)
 8009704:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009706:	4b41      	ldr	r3, [pc, #260]	; (800980c <USB_HC_StartXfer+0x288>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800970e:	4a3f      	ldr	r2, [pc, #252]	; (800980c <USB_HC_StartXfer+0x288>)
 8009710:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	78db      	ldrb	r3, [r3, #3]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d006      	beq.n	8009728 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800971a:	4b3c      	ldr	r3, [pc, #240]	; (800980c <USB_HC_StartXfer+0x288>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009722:	4a3a      	ldr	r2, [pc, #232]	; (800980c <USB_HC_StartXfer+0x288>)
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	e005      	b.n	8009734 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009728:	4b38      	ldr	r3, [pc, #224]	; (800980c <USB_HC_StartXfer+0x288>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009730:	4a36      	ldr	r2, [pc, #216]	; (800980c <USB_HC_StartXfer+0x288>)
 8009732:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009734:	4b35      	ldr	r3, [pc, #212]	; (800980c <USB_HC_StartXfer+0x288>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800973c:	4a33      	ldr	r2, [pc, #204]	; (800980c <USB_HC_StartXfer+0x288>)
 800973e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	4413      	add	r3, r2
 8009748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800974c:	461a      	mov	r2, r3
 800974e:	4b2f      	ldr	r3, [pc, #188]	; (800980c <USB_HC_StartXfer+0x288>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	e04f      	b.n	80097fe <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	78db      	ldrb	r3, [r3, #3]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d14a      	bne.n	80097fc <USB_HC_StartXfer+0x278>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d046      	beq.n	80097fc <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	79db      	ldrb	r3, [r3, #7]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d830      	bhi.n	80097d8 <USB_HC_StartXfer+0x254>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <USB_HC_StartXfer+0x1f8>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	0800978d 	.word	0x0800978d
 8009780:	080097b1 	.word	0x080097b1
 8009784:	0800978d 	.word	0x0800978d
 8009788:	080097b1 	.word	0x080097b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	3303      	adds	r3, #3
 8009792:	089b      	lsrs	r3, r3, #2
 8009794:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009796:	8afa      	ldrh	r2, [r7, #22]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	b29b      	uxth	r3, r3
 800979e:	429a      	cmp	r2, r3
 80097a0:	d91c      	bls.n	80097dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	f043 0220 	orr.w	r2, r3, #32
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80097ae:	e015      	b.n	80097dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	3303      	adds	r3, #3
 80097b6:	089b      	lsrs	r3, r3, #2
 80097b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80097ba:	8afa      	ldrh	r2, [r7, #22]
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d90a      	bls.n	80097e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80097d6:	e003      	b.n	80097e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80097d8:	bf00      	nop
 80097da:	e002      	b.n	80097e2 <USB_HC_StartXfer+0x25e>
        break;
 80097dc:	bf00      	nop
 80097de:	e000      	b.n	80097e2 <USB_HC_StartXfer+0x25e>
        break;
 80097e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	68d9      	ldr	r1, [r3, #12]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	785a      	ldrb	r2, [r3, #1]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	b298      	uxth	r0, r3
 80097f0:	2300      	movs	r3, #0
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	4603      	mov	r3, r0
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff fb8a 	bl	8008f10 <USB_WritePacket>
  }

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	1ff80000 	.word	0x1ff80000
 800980c:	200000f8 	.word	0x200000f8

08009810 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	b29b      	uxth	r3, r3
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009832:	b480      	push	{r7}
 8009834:	b087      	sub	sp, #28
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	0c9b      	lsrs	r3, r3, #18
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <USB_HC_Halt+0x3a>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d16c      	bne.n	8009946 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	440a      	add	r2, r1
 8009882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800988a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d143      	bne.n	8009920 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	0151      	lsls	r1, r2, #5
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	440a      	add	r2, r1
 80098ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	0151      	lsls	r1, r2, #5
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	440a      	add	r2, r1
 80098ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098f6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	3301      	adds	r3, #1
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009904:	d81d      	bhi.n	8009942 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800991c:	d0ec      	beq.n	80098f8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800991e:	e080      	b.n	8009a22 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	0151      	lsls	r1, r2, #5
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	440a      	add	r2, r1
 8009936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800993a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800993e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009940:	e06f      	b.n	8009a22 <USB_HC_Halt+0x1f0>
          break;
 8009942:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009944:	e06d      	b.n	8009a22 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	4413      	add	r3, r2
 800994e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	0151      	lsls	r1, r2, #5
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	440a      	add	r2, r1
 800995c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009964:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d143      	bne.n	80099fe <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	0151      	lsls	r1, r2, #5
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	440a      	add	r2, r1
 800998c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009994:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	4413      	add	r3, r2
 800999e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	0151      	lsls	r1, r2, #5
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	440a      	add	r2, r1
 80099ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	0151      	lsls	r1, r2, #5
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	440a      	add	r2, r1
 80099cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099d4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	3301      	adds	r3, #1
 80099da:	617b      	str	r3, [r7, #20]
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099e2:	d81d      	bhi.n	8009a20 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099fa:	d0ec      	beq.n	80099d6 <USB_HC_Halt+0x1a4>
 80099fc:	e011      	b.n	8009a22 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	e000      	b.n	8009a22 <USB_HC_Halt+0x1f0>
          break;
 8009a20:	bf00      	nop
    }
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009a44:	2301      	movs	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	04da      	lsls	r2, r3, #19
 8009a4c:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <USB_DoPing+0x74>)
 8009a4e:	4013      	ands	r3, r2
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a8e:	461a      	mov	r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	1ff80000 	.word	0x1ff80000

08009aa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff f9a5 	bl	8008e08 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009abe:	2110      	movs	r1, #16
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff f9dd 	bl	8008e80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff fa00 	bl	8008ecc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009acc:	2300      	movs	r3, #0
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	e01f      	b.n	8009b12 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ae8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009af8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b06:	461a      	mov	r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	613b      	str	r3, [r7, #16]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b0f      	cmp	r3, #15
 8009b16:	d9dc      	bls.n	8009ad2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	e034      	b.n	8009b88 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b34:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b3c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b44:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b52:	461a      	mov	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b64:	d80c      	bhi.n	8009b80 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b7c:	d0ec      	beq.n	8009b58 <USB_StopHost+0xb0>
 8009b7e:	e000      	b.n	8009b82 <USB_StopHost+0xda>
        break;
 8009b80:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3301      	adds	r3, #1
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	d9c7      	bls.n	8009b1e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b94:	461a      	mov	r2, r3
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff f91e 	bl	8008de6 <USB_EnableGlobalInt>

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009bb4:	b590      	push	{r4, r7, lr}
 8009bb6:	b089      	sub	sp, #36	; 0x24
 8009bb8:	af04      	add	r7, sp, #16
 8009bba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	2102      	movs	r1, #2
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fcb4 	bl	800a530 <USBH_FindInterface>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2bff      	cmp	r3, #255	; 0xff
 8009bd0:	d002      	beq.n	8009bd8 <USBH_CDC_InterfaceInit+0x24>
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d901      	bls.n	8009bdc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bd8:	2302      	movs	r3, #2
 8009bda:	e13d      	b.n	8009e58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fc89 	bl	800a4f8 <USBH_SelectInterface>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e131      	b.n	8009e58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009bfa:	2050      	movs	r0, #80	; 0x50
 8009bfc:	f005 fbca 	bl	800f394 <malloc>
 8009c00:	4603      	mov	r3, r0
 8009c02:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009c14:	2302      	movs	r3, #2
 8009c16:	e11f      	b.n	8009e58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009c18:	2250      	movs	r2, #80	; 0x50
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	68b8      	ldr	r0, [r7, #8]
 8009c1e:	f005 fbd4 	bl	800f3ca <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	211a      	movs	r1, #26
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da15      	bge.n	8009c66 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	211a      	movs	r1, #26
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	4413      	add	r3, r2
 8009c46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	211a      	movs	r1, #26
 8009c56:	fb01 f303 	mul.w	r3, r1, r3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c60:	881a      	ldrh	r2, [r3, #0]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	785b      	ldrb	r3, [r3, #1]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f002 f890 	bl	800bd92 <USBH_AllocPipe>
 8009c72:	4603      	mov	r3, r0
 8009c74:	461a      	mov	r2, r3
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	7819      	ldrb	r1, [r3, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	7858      	ldrb	r0, [r3, #1]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	8952      	ldrh	r2, [r2, #10]
 8009c92:	9202      	str	r2, [sp, #8]
 8009c94:	2203      	movs	r2, #3
 8009c96:	9201      	str	r2, [sp, #4]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	4623      	mov	r3, r4
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f002 f848 	bl	800bd34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f005 fac1 	bl	800f234 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	210a      	movs	r1, #10
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fc39 	bl	800a530 <USBH_FindInterface>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	2bff      	cmp	r3, #255	; 0xff
 8009cc6:	d002      	beq.n	8009cce <USBH_CDC_InterfaceInit+0x11a>
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d901      	bls.n	8009cd2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e0c2      	b.n	8009e58 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	211a      	movs	r1, #26
 8009cd8:	fb01 f303 	mul.w	r3, r1, r3
 8009cdc:	4413      	add	r3, r2
 8009cde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	b25b      	sxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da16      	bge.n	8009d18 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	211a      	movs	r1, #26
 8009cf0:	fb01 f303 	mul.w	r3, r1, r3
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009cfa:	781a      	ldrb	r2, [r3, #0]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	211a      	movs	r1, #26
 8009d06:	fb01 f303 	mul.w	r3, r1, r3
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d10:	881a      	ldrh	r2, [r3, #0]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	835a      	strh	r2, [r3, #26]
 8009d16:	e015      	b.n	8009d44 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	211a      	movs	r1, #26
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	211a      	movs	r1, #26
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009d3e:	881a      	ldrh	r2, [r3, #0]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	211a      	movs	r1, #26
 8009d4a:	fb01 f303 	mul.w	r3, r1, r3
 8009d4e:	4413      	add	r3, r2
 8009d50:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da16      	bge.n	8009d8a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	211a      	movs	r1, #26
 8009d62:	fb01 f303 	mul.w	r3, r1, r3
 8009d66:	4413      	add	r3, r2
 8009d68:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d6c:	781a      	ldrb	r2, [r3, #0]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	211a      	movs	r1, #26
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009d82:	881a      	ldrh	r2, [r3, #0]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	835a      	strh	r2, [r3, #26]
 8009d88:	e015      	b.n	8009db6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	211a      	movs	r1, #26
 8009d90:	fb01 f303 	mul.w	r3, r1, r3
 8009d94:	4413      	add	r3, r2
 8009d96:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	211a      	movs	r1, #26
 8009da6:	fb01 f303 	mul.w	r3, r1, r3
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009db0:	881a      	ldrh	r2, [r3, #0]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	7b9b      	ldrb	r3, [r3, #14]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 ffe8 	bl	800bd92 <USBH_AllocPipe>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	7bdb      	ldrb	r3, [r3, #15]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 ffde 	bl	800bd92 <USBH_AllocPipe>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	461a      	mov	r2, r3
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	7b59      	ldrb	r1, [r3, #13]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	7b98      	ldrb	r0, [r3, #14]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	8b12      	ldrh	r2, [r2, #24]
 8009df6:	9202      	str	r2, [sp, #8]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	9201      	str	r2, [sp, #4]
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	4623      	mov	r3, r4
 8009e00:	4602      	mov	r2, r0
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 ff96 	bl	800bd34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	7b19      	ldrb	r1, [r3, #12]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	7bd8      	ldrb	r0, [r3, #15]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	8b52      	ldrh	r2, [r2, #26]
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	2202      	movs	r2, #2
 8009e24:	9201      	str	r2, [sp, #4]
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	4623      	mov	r3, r4
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 ff81 	bl	800bd34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	7b5b      	ldrb	r3, [r3, #13]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f005 f9f6 	bl	800f234 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	7b1b      	ldrb	r3, [r3, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f005 f9ef 	bl	800f234 <USBH_LL_SetToggle>

  return USBH_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd90      	pop	{r4, r7, pc}

08009e60 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00e      	beq.n	8009e98 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 ff76 	bl	800bd72 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 ffa1 	bl	800bdd4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7b1b      	ldrb	r3, [r3, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00e      	beq.n	8009ebe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	7b1b      	ldrb	r3, [r3, #12]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 ff63 	bl	800bd72 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	7b1b      	ldrb	r3, [r3, #12]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 ff8e 	bl	800bdd4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	7b5b      	ldrb	r3, [r3, #13]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00e      	beq.n	8009ee4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	7b5b      	ldrb	r3, [r3, #13]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 ff50 	bl	800bd72 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	7b5b      	ldrb	r3, [r3, #13]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 ff7b 	bl	800bdd4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f005 fa53 	bl	800f3a4 <free>
    phost->pActiveClass->pData = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f04:	2200      	movs	r2, #0
 8009f06:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3340      	adds	r3, #64	; 0x40
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f8b1 	bl	800a092 <GetLineCoding>
 8009f30:	4603      	mov	r3, r0
 8009f32:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d105      	bne.n	8009f46 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f40:	2102      	movs	r1, #2
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009f46:	7afb      	ldrb	r3, [r7, #11]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d877      	bhi.n	800a064 <USBH_CDC_Process+0x114>
 8009f74:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <USBH_CDC_Process+0x2c>)
 8009f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7a:	bf00      	nop
 8009f7c:	08009f91 	.word	0x08009f91
 8009f80:	08009f97 	.word	0x08009f97
 8009f84:	08009fc7 	.word	0x08009fc7
 8009f88:	0800a03b 	.word	0x0800a03b
 8009f8c:	0800a049 	.word	0x0800a049
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73fb      	strb	r3, [r7, #15]
      break;
 8009f94:	e06d      	b.n	800a072 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f897 	bl	800a0d0 <SetLineCoding>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009fb4:	e058      	b.n	800a068 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d055      	beq.n	800a068 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2204      	movs	r2, #4
 8009fc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009fc4:	e050      	b.n	800a068 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3340      	adds	r3, #64	; 0x40
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f860 	bl	800a092 <GetLineCoding>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d126      	bne.n	800a02a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fee:	791b      	ldrb	r3, [r3, #4]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d13b      	bne.n	800a06c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ffe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a000:	429a      	cmp	r2, r3
 800a002:	d133      	bne.n	800a06c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a00e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a010:	429a      	cmp	r2, r3
 800a012:	d12b      	bne.n	800a06c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a01e:	429a      	cmp	r2, r3
 800a020:	d124      	bne.n	800a06c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f984 	bl	800a330 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a028:	e020      	b.n	800a06c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d01d      	beq.n	800a06c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2204      	movs	r2, #4
 800a034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a038:	e018      	b.n	800a06c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f867 	bl	800a10e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f8f8 	bl	800a236 <CDC_ProcessReception>
      break;
 800a046:	e014      	b.n	800a072 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a048:	2100      	movs	r1, #0
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 f94f 	bl	800b2ee <USBH_ClrFeature>
 800a050:	4603      	mov	r3, r0
 800a052:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a054:	7bbb      	ldrb	r3, [r7, #14]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10a      	bne.n	800a070 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a062:	e005      	b.n	800a070 <USBH_CDC_Process+0x120>

    default:
      break;
 800a064:	bf00      	nop
 800a066:	e004      	b.n	800a072 <USBH_CDC_Process+0x122>
      break;
 800a068:	bf00      	nop
 800a06a:	e002      	b.n	800a072 <USBH_CDC_Process+0x122>
      break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <USBH_CDC_Process+0x122>
      break;
 800a070:	bf00      	nop

  }

  return status;
 800a072:	7bfb      	ldrb	r3, [r7, #15]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	22a1      	movs	r2, #161	; 0xa1
 800a0a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2221      	movs	r2, #33	; 0x21
 800a0a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2207      	movs	r2, #7
 800a0b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2207      	movs	r2, #7
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 faf4 	bl	800b6ae <USBH_CtlReq>
 800a0c6:	4603      	mov	r3, r0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2221      	movs	r2, #33	; 0x21
 800a0de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2207      	movs	r2, #7
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 fad5 	bl	800b6ae <USBH_CtlReq>
 800a104:	4603      	mov	r3, r0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b086      	sub	sp, #24
 800a112:	af02      	add	r7, sp, #8
 800a114:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a120:	2300      	movs	r3, #0
 800a122:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d002      	beq.n	800a134 <CDC_ProcessTransmission+0x26>
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d025      	beq.n	800a17e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800a132:	e07c      	b.n	800a22e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	8b12      	ldrh	r2, [r2, #24]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d90c      	bls.n	800a15a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	69d9      	ldr	r1, [r3, #28]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8b1a      	ldrh	r2, [r3, #24]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	7b58      	ldrb	r0, [r3, #13]
 800a14c:	2301      	movs	r3, #1
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f001 fdab 	bl	800bcae <USBH_BulkSendData>
 800a158:	e00c      	b.n	800a174 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	7b58      	ldrb	r0, [r3, #13]
 800a168:	2301      	movs	r3, #1
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	4603      	mov	r3, r0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fd9d 	bl	800bcae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a17c:	e057      	b.n	800a22e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	7b5b      	ldrb	r3, [r3, #13]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f005 f82b 	bl	800f1e0 <USBH_LL_GetURBState>
 800a18a:	4603      	mov	r3, r0
 800a18c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d136      	bne.n	800a202 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	8b12      	ldrh	r2, [r2, #24]
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d90e      	bls.n	800a1be <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	8b12      	ldrh	r2, [r2, #24]
 800a1a8:	1a9a      	subs	r2, r3, r2
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	8b12      	ldrh	r2, [r2, #24]
 800a1b6:	441a      	add	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	61da      	str	r2, [r3, #28]
 800a1bc:	e002      	b.n	800a1c4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a1d4:	e006      	b.n	800a1e4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f892 	bl	800a308 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2204      	movs	r2, #4
 800a1e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f001 fff8 	bl	800c1f0 <osMessageQueuePut>
      break;
 800a200:	e014      	b.n	800a22c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d111      	bne.n	800a22c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2204      	movs	r2, #4
 800a214:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	f001 ffe2 	bl	800c1f0 <osMessageQueuePut>
      break;
 800a22c:	bf00      	nop
  }
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b086      	sub	sp, #24
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a248:	2300      	movs	r3, #0
 800a24a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a252:	2b03      	cmp	r3, #3
 800a254:	d002      	beq.n	800a25c <CDC_ProcessReception+0x26>
 800a256:	2b04      	cmp	r3, #4
 800a258:	d00e      	beq.n	800a278 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a25a:	e051      	b.n	800a300 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	6a19      	ldr	r1, [r3, #32]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	8b5a      	ldrh	r2, [r3, #26]
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	7b1b      	ldrb	r3, [r3, #12]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f001 fd45 	bl	800bcf8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2204      	movs	r2, #4
 800a272:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a276:	e043      	b.n	800a300 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	7b1b      	ldrb	r3, [r3, #12]
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f004 ffae 	bl	800f1e0 <USBH_LL_GetURBState>
 800a284:	4603      	mov	r3, r0
 800a286:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a288:	7cfb      	ldrb	r3, [r7, #19]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d137      	bne.n	800a2fe <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	7b1b      	ldrb	r3, [r3, #12]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f004 ff11 	bl	800f0bc <USBH_LL_GetLastXferSize>
 800a29a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d016      	beq.n	800a2d4 <CDC_ProcessReception+0x9e>
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	8b5b      	ldrh	r3, [r3, #26]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d910      	bls.n	800a2d4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	1ad2      	subs	r2, r2, r3
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6a1a      	ldr	r2, [r3, #32]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	441a      	add	r2, r3
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a2d2:	e006      	b.n	800a2e2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f81d 	bl	800a31c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f001 ff79 	bl	800c1f0 <osMessageQueuePut>
      break;
 800a2fe:	bf00      	nop
  }
}
 800a300:	bf00      	nop
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a358:	2302      	movs	r3, #2
 800a35a:	e044      	b.n	800a3e6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	79fa      	ldrb	r2, [r7, #7]
 800a360:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f000 f841 	bl	800a3fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2104      	movs	r1, #4
 800a3ac:	2010      	movs	r0, #16
 800a3ae:	f001 fe99 	bl	800c0e4 <osMessageQueueNew>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a3ba:	4b0d      	ldr	r3, [pc, #52]	; (800a3f0 <USBH_Init+0xac>)
 800a3bc:	4a0d      	ldr	r2, [pc, #52]	; (800a3f4 <USBH_Init+0xb0>)
 800a3be:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <USBH_Init+0xac>)
 800a3c2:	2280      	movs	r2, #128	; 0x80
 800a3c4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a3c6:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <USBH_Init+0xac>)
 800a3c8:	2218      	movs	r2, #24
 800a3ca:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a3cc:	4a08      	ldr	r2, [pc, #32]	; (800a3f0 <USBH_Init+0xac>)
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	4809      	ldr	r0, [pc, #36]	; (800a3f8 <USBH_Init+0xb4>)
 800a3d2:	f001 fdb3 	bl	800bf3c <osThreadNew>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f004 fdba 	bl	800ef58 <USBH_LL_Init>

  return USBH_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20004df0 	.word	0x20004df0
 800a3f4:	0800f580 	.word	0x0800f580
 800a3f8:	0800b065 	.word	0x0800b065

0800a3fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	e009      	b.n	800a422 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	33e0      	adds	r3, #224	; 0xe0
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	2200      	movs	r2, #0
 800a41a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3301      	adds	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2b0e      	cmp	r3, #14
 800a426:	d9f2      	bls.n	800a40e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a428:	2300      	movs	r3, #0
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	e009      	b.n	800a442 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4413      	add	r3, r2
 800a434:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a438:	2200      	movs	r2, #0
 800a43a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3301      	adds	r3, #1
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a448:	d3f1      	bcc.n	800a42e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2240      	movs	r2, #64	; 0x40
 800a46e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d016      	beq.n	800a4e6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10e      	bne.n	800a4e0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4c8:	1c59      	adds	r1, r3, #1
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	33de      	adds	r3, #222	; 0xde
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]
 800a4de:	e004      	b.n	800a4ea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	73fb      	strb	r3, [r7, #15]
 800a4e4:	e001      	b.n	800a4ea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a50e:	78fa      	ldrb	r2, [r7, #3]
 800a510:	429a      	cmp	r2, r3
 800a512:	d204      	bcs.n	800a51e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	78fa      	ldrb	r2, [r7, #3]
 800a518:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a51c:	e001      	b.n	800a522 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a51e:	2302      	movs	r3, #2
 800a520:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a522:	7bfb      	ldrb	r3, [r7, #15]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	4608      	mov	r0, r1
 800a53a:	4611      	mov	r1, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	4603      	mov	r3, r0
 800a540:	70fb      	strb	r3, [r7, #3]
 800a542:	460b      	mov	r3, r1
 800a544:	70bb      	strb	r3, [r7, #2]
 800a546:	4613      	mov	r3, r2
 800a548:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a54e:	2300      	movs	r3, #0
 800a550:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a558:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a55a:	e025      	b.n	800a5a8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	221a      	movs	r2, #26
 800a560:	fb02 f303 	mul.w	r3, r2, r3
 800a564:	3308      	adds	r3, #8
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	3302      	adds	r3, #2
 800a56c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	795b      	ldrb	r3, [r3, #5]
 800a572:	78fa      	ldrb	r2, [r7, #3]
 800a574:	429a      	cmp	r2, r3
 800a576:	d002      	beq.n	800a57e <USBH_FindInterface+0x4e>
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	2bff      	cmp	r3, #255	; 0xff
 800a57c:	d111      	bne.n	800a5a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a582:	78ba      	ldrb	r2, [r7, #2]
 800a584:	429a      	cmp	r2, r3
 800a586:	d002      	beq.n	800a58e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a588:	78bb      	ldrb	r3, [r7, #2]
 800a58a:	2bff      	cmp	r3, #255	; 0xff
 800a58c:	d109      	bne.n	800a5a2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a592:	787a      	ldrb	r2, [r7, #1]
 800a594:	429a      	cmp	r2, r3
 800a596:	d002      	beq.n	800a59e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a598:	787b      	ldrb	r3, [r7, #1]
 800a59a:	2bff      	cmp	r3, #255	; 0xff
 800a59c:	d101      	bne.n	800a5a2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
 800a5a0:	e006      	b.n	800a5b0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d9d6      	bls.n	800a55c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a5ae:	23ff      	movs	r3, #255	; 0xff
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f004 fd03 	bl	800efd0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f004 fe1a 	bl	800f206 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af04      	add	r7, sp, #16
 800a5e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d102      	bne.n	800a5fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2203      	movs	r2, #3
 800a5fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b0b      	cmp	r3, #11
 800a606:	f200 823c 	bhi.w	800aa82 <USBH_Process+0x4a6>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <USBH_Process+0x34>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a641 	.word	0x0800a641
 800a614:	0800a68f 	.word	0x0800a68f
 800a618:	0800a713 	.word	0x0800a713
 800a61c:	0800aa01 	.word	0x0800aa01
 800a620:	0800aa83 	.word	0x0800aa83
 800a624:	0800a7d3 	.word	0x0800a7d3
 800a628:	0800a98b 	.word	0x0800a98b
 800a62c:	0800a825 	.word	0x0800a825
 800a630:	0800a861 	.word	0x0800a861
 800a634:	0800a89b 	.word	0x0800a89b
 800a638:	0800a8e3 	.word	0x0800a8e3
 800a63c:	0800a9e9 	.word	0x0800a9e9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a646:	b2db      	uxtb	r3, r3
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 821c 	beq.w	800aa86 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a654:	20c8      	movs	r0, #200	; 0xc8
 800a656:	f004 fe20 	bl	800f29a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f004 fd13 	bl	800f086 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a684:	2300      	movs	r3, #0
 800a686:	2200      	movs	r2, #0
 800a688:	f001 fdb2 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a68c:	e1fb      	b.n	800aa86 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a694:	2b01      	cmp	r3, #1
 800a696:	d107      	bne.n	800a6a8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	701a      	strb	r2, [r3, #0]
 800a6a6:	e025      	b.n	800a6f4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6b2:	d914      	bls.n	800a6de <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d903      	bls.n	800a6d6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	220d      	movs	r2, #13
 800a6d2:	701a      	strb	r2, [r3, #0]
 800a6d4:	e00e      	b.n	800a6f4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
 800a6dc:	e00a      	b.n	800a6f4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6e4:	f103 020a 	add.w	r2, r3, #10
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a6ee:	200a      	movs	r0, #10
 800a6f0:	f004 fdd3 	bl	800f29a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a708:	2300      	movs	r3, #0
 800a70a:	2200      	movs	r2, #0
 800a70c:	f001 fd70 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800a710:	e1c0      	b.n	800aa94 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a722:	2104      	movs	r1, #4
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a728:	2064      	movs	r0, #100	; 0x64
 800a72a:	f004 fdb6 	bl	800f29a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f004 fc84 	bl	800f03c <USBH_LL_GetSpeed>
 800a734:	4603      	mov	r3, r0
 800a736:	461a      	mov	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2205      	movs	r2, #5
 800a742:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a744:	2100      	movs	r1, #0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 fb23 	bl	800bd92 <USBH_AllocPipe>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461a      	mov	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a754:	2180      	movs	r1, #128	; 0x80
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f001 fb1b 	bl	800bd92 <USBH_AllocPipe>
 800a75c:	4603      	mov	r3, r0
 800a75e:	461a      	mov	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	7919      	ldrb	r1, [r3, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a778:	b292      	uxth	r2, r2
 800a77a:	9202      	str	r2, [sp, #8]
 800a77c:	2200      	movs	r2, #0
 800a77e:	9201      	str	r2, [sp, #4]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4603      	mov	r3, r0
 800a784:	2280      	movs	r2, #128	; 0x80
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 fad4 	bl	800bd34 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7959      	ldrb	r1, [r3, #5]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a7a0:	b292      	uxth	r2, r2
 800a7a2:	9202      	str	r2, [sp, #8]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	9201      	str	r2, [sp, #4]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f001 fac0 	bl	800bd34 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f001 fd10 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800a7d0:	e160      	b.n	800aa94 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f964 	bl	800aaa0 <USBH_HandleEnum>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f040 8152 	bne.w	800aa8a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d103      	bne.n	800a800 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2208      	movs	r2, #8
 800a7fc:	701a      	strb	r2, [r3, #0]
 800a7fe:	e002      	b.n	800a806 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2207      	movs	r2, #7
 800a804:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2205      	movs	r2, #5
 800a80a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a81a:	2300      	movs	r3, #0
 800a81c:	2200      	movs	r2, #0
 800a81e:	f001 fce7 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800a822:	e132      	b.n	800aa8a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f000 812f 	beq.w	800aa8e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a836:	2101      	movs	r1, #1
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2208      	movs	r2, #8
 800a840:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2205      	movs	r2, #5
 800a846:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a856:	2300      	movs	r3, #0
 800a858:	2200      	movs	r2, #0
 800a85a:	f001 fcc9 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800a85e:	e116      	b.n	800aa8e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a866:	b29b      	uxth	r3, r3
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fcf8 	bl	800b260 <USBH_SetCfg>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d102      	bne.n	800a87c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2209      	movs	r2, #9
 800a87a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	f001 fcac 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800a898:	e0fc      	b.n	800aa94 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00a      	beq.n	800a8be <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fcfb 	bl	800b2a6 <USBH_SetFeature>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	220a      	movs	r2, #10
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e002      	b.n	800a8c4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	220a      	movs	r2, #10
 800a8c2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f001 fc88 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800a8e0:	e0d8      	b.n	800aa94 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d03f      	beq.n	800a96c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	e016      	b.n	800a928 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a8fa:	7bfa      	ldrb	r2, [r7, #15]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	32de      	adds	r2, #222	; 0xde
 800a900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a904:	791a      	ldrb	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d108      	bne.n	800a922 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a910:	7bfa      	ldrb	r2, [r7, #15]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	32de      	adds	r2, #222	; 0xde
 800a916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a920:	e005      	b.n	800a92e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	3301      	adds	r3, #1
 800a926:	73fb      	strb	r3, [r7, #15]
 800a928:	7bfb      	ldrb	r3, [r7, #15]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0e5      	beq.n	800a8fa <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d016      	beq.n	800a966 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	4798      	blx	r3
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2206      	movs	r2, #6
 800a94e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a956:	2103      	movs	r1, #3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	4798      	blx	r3
 800a95c:	e006      	b.n	800a96c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	220d      	movs	r2, #13
 800a962:	701a      	strb	r2, [r3, #0]
 800a964:	e002      	b.n	800a96c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	220d      	movs	r2, #13
 800a96a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2205      	movs	r2, #5
 800a970:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a980:	2300      	movs	r3, #0
 800a982:	2200      	movs	r2, #0
 800a984:	f001 fc34 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800a988:	e084      	b.n	800aa94 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a990:	2b00      	cmp	r3, #0
 800a992:	d017      	beq.n	800a9c4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	4798      	blx	r3
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	220b      	movs	r2, #11
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e00a      	b.n	800a9ca <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d106      	bne.n	800a9ca <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	220d      	movs	r2, #13
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	e002      	b.n	800a9ca <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	220d      	movs	r2, #13
 800a9c8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2205      	movs	r2, #5
 800a9ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f001 fc05 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800a9e6:	e055      	b.n	800aa94 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d04f      	beq.n	800aa92 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
      }
      break;
 800a9fe:	e048      	b.n	800aa92 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff fcf7 	bl	800a3fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d009      	beq.n	800aa2c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d005      	beq.n	800aa42 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa3c:	2105      	movs	r1, #5
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d107      	bne.n	800aa5e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff fdb0 	bl	800a5bc <USBH_Start>
 800aa5c:	e002      	b.n	800aa64 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f004 fab6 	bl	800efd0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f001 fbb8 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      break;
 800aa80:	e008      	b.n	800aa94 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800aa82:	bf00      	nop
 800aa84:	e006      	b.n	800aa94 <USBH_Process+0x4b8>
      break;
 800aa86:	bf00      	nop
 800aa88:	e004      	b.n	800aa94 <USBH_Process+0x4b8>
      break;
 800aa8a:	bf00      	nop
 800aa8c:	e002      	b.n	800aa94 <USBH_Process+0x4b8>
    break;
 800aa8e:	bf00      	nop
 800aa90:	e000      	b.n	800aa94 <USBH_Process+0x4b8>
      break;
 800aa92:	bf00      	nop
  }
  return USBH_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop

0800aaa0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af04      	add	r7, sp, #16
 800aaa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	785b      	ldrb	r3, [r3, #1]
 800aab4:	2b07      	cmp	r3, #7
 800aab6:	f200 8208 	bhi.w	800aeca <USBH_HandleEnum+0x42a>
 800aaba:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <USBH_HandleEnum+0x20>)
 800aabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac0:	0800aae1 	.word	0x0800aae1
 800aac4:	0800ab9f 	.word	0x0800ab9f
 800aac8:	0800ac09 	.word	0x0800ac09
 800aacc:	0800ac97 	.word	0x0800ac97
 800aad0:	0800ad01 	.word	0x0800ad01
 800aad4:	0800ad71 	.word	0x0800ad71
 800aad8:	0800ae0d 	.word	0x0800ae0d
 800aadc:	0800ae8b 	.word	0x0800ae8b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800aae0:	2108      	movs	r1, #8
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 faec 	bl	800b0c0 <USBH_Get_DevDesc>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d130      	bne.n	800ab54 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7919      	ldrb	r1, [r3, #4]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab16:	b292      	uxth	r2, r2
 800ab18:	9202      	str	r2, [sp, #8]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	9201      	str	r2, [sp, #4]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4603      	mov	r3, r0
 800ab22:	2280      	movs	r2, #128	; 0x80
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f905 	bl	800bd34 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	7959      	ldrb	r1, [r3, #5]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab3e:	b292      	uxth	r2, r2
 800ab40:	9202      	str	r2, [sp, #8]
 800ab42:	2200      	movs	r2, #0
 800ab44:	9201      	str	r2, [sp, #4]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 f8f1 	bl	800bd34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab52:	e1bc      	b.n	800aece <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	f040 81b9 	bne.w	800aece <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab62:	3301      	adds	r3, #1
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d903      	bls.n	800ab7e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	220d      	movs	r2, #13
 800ab7a:	701a      	strb	r2, [r3, #0]
      break;
 800ab7c:	e1a7      	b.n	800aece <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	795b      	ldrb	r3, [r3, #5]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f001 f925 	bl	800bdd4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	791b      	ldrb	r3, [r3, #4]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 f91f 	bl	800bdd4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	701a      	strb	r2, [r3, #0]
      break;
 800ab9c:	e197      	b.n	800aece <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ab9e:	2112      	movs	r1, #18
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fa8d 	bl	800b0c0 <USBH_Get_DevDesc>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abb6:	e18c      	b.n	800aed2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	2b03      	cmp	r3, #3
 800abbc:	f040 8189 	bne.w	800aed2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abc6:	3301      	adds	r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d903      	bls.n	800abe2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	220d      	movs	r2, #13
 800abde:	701a      	strb	r2, [r3, #0]
      break;
 800abe0:	e177      	b.n	800aed2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	795b      	ldrb	r3, [r3, #5]
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f001 f8f3 	bl	800bdd4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	791b      	ldrb	r3, [r3, #4]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f001 f8ed 	bl	800bdd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	701a      	strb	r2, [r3, #0]
      break;
 800ac06:	e164      	b.n	800aed2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ac08:	2101      	movs	r1, #1
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fb04 	bl	800b218 <USBH_SetAddress>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d132      	bne.n	800ac80 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ac1a:	2002      	movs	r0, #2
 800ac1c:	f004 fb3d 	bl	800f29a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7919      	ldrb	r1, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ac42:	b292      	uxth	r2, r2
 800ac44:	9202      	str	r2, [sp, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	9201      	str	r2, [sp, #4]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2280      	movs	r2, #128	; 0x80
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f001 f86f 	bl	800bd34 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	7959      	ldrb	r1, [r3, #5]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	9202      	str	r2, [sp, #8]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	9201      	str	r2, [sp, #4]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4603      	mov	r3, r0
 800ac76:	2200      	movs	r2, #0
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 f85b 	bl	800bd34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac7e:	e12a      	b.n	800aed6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	f040 8127 	bne.w	800aed6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	220d      	movs	r2, #13
 800ac8c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	705a      	strb	r2, [r3, #1]
      break;
 800ac94:	e11f      	b.n	800aed6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ac96:	2109      	movs	r1, #9
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa39 	bl	800b110 <USBH_Get_CfgDesc>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d103      	bne.n	800acb0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2204      	movs	r2, #4
 800acac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800acae:	e114      	b.n	800aeda <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	f040 8111 	bne.w	800aeda <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acbe:	3301      	adds	r3, #1
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d903      	bls.n	800acda <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	220d      	movs	r2, #13
 800acd6:	701a      	strb	r2, [r3, #0]
      break;
 800acd8:	e0ff      	b.n	800aeda <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	795b      	ldrb	r3, [r3, #5]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 f877 	bl	800bdd4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	791b      	ldrb	r3, [r3, #4]
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 f871 	bl	800bdd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
      break;
 800acfe:	e0ec      	b.n	800aeda <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa01 	bl	800b110 <USBH_Get_CfgDesc>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2205      	movs	r2, #5
 800ad1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad1e:	e0de      	b.n	800aede <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	f040 80db 	bne.w	800aede <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad2e:	3301      	adds	r3, #1
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d903      	bls.n	800ad4a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	220d      	movs	r2, #13
 800ad46:	701a      	strb	r2, [r3, #0]
      break;
 800ad48:	e0c9      	b.n	800aede <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	795b      	ldrb	r3, [r3, #5]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f001 f83f 	bl	800bdd4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	791b      	ldrb	r3, [r3, #4]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f001 f839 	bl	800bdd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
      break;
 800ad6e:	e0b6      	b.n	800aede <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d036      	beq.n	800ade8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ad86:	23ff      	movs	r3, #255	; 0xff
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f9e5 	bl	800b158 <USBH_Get_StringDesc>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d111      	bne.n	800adbc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2206      	movs	r2, #6
 800ad9c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2205      	movs	r2, #5
 800ada2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adb2:	2300      	movs	r3, #0
 800adb4:	2200      	movs	r2, #0
 800adb6:	f001 fa1b 	bl	800c1f0 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800adba:	e092      	b.n	800aee2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	f040 808f 	bne.w	800aee2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2206      	movs	r2, #6
 800adc8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2205      	movs	r2, #5
 800adce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800adde:	2300      	movs	r3, #0
 800ade0:	2200      	movs	r2, #0
 800ade2:	f001 fa05 	bl	800c1f0 <osMessageQueuePut>
      break;
 800ade6:	e07c      	b.n	800aee2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2206      	movs	r2, #6
 800adec:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2205      	movs	r2, #5
 800adf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae02:	2300      	movs	r3, #0
 800ae04:	2200      	movs	r2, #0
 800ae06:	f001 f9f3 	bl	800c1f0 <osMessageQueuePut>
      break;
 800ae0a:	e06a      	b.n	800aee2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d027      	beq.n	800ae66 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae22:	23ff      	movs	r3, #255	; 0xff
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f997 	bl	800b158 <USBH_Get_StringDesc>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d103      	bne.n	800ae3c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2207      	movs	r2, #7
 800ae38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ae3a:	e054      	b.n	800aee6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d151      	bne.n	800aee6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2207      	movs	r2, #7
 800ae46:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2205      	movs	r2, #5
 800ae4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f001 f9c6 	bl	800c1f0 <osMessageQueuePut>
      break;
 800ae64:	e03f      	b.n	800aee6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2207      	movs	r2, #7
 800ae6a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2205      	movs	r2, #5
 800ae70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae80:	2300      	movs	r3, #0
 800ae82:	2200      	movs	r2, #0
 800ae84:	f001 f9b4 	bl	800c1f0 <osMessageQueuePut>
      break;
 800ae88:	e02d      	b.n	800aee6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d017      	beq.n	800aec4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aea0:	23ff      	movs	r3, #255	; 0xff
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f958 	bl	800b158 <USBH_Get_StringDesc>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d102      	bne.n	800aeb8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aeb6:	e018      	b.n	800aeea <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	2b03      	cmp	r3, #3
 800aebc:	d115      	bne.n	800aeea <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
      break;
 800aec2:	e012      	b.n	800aeea <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
      break;
 800aec8:	e00f      	b.n	800aeea <USBH_HandleEnum+0x44a>

    default:
      break;
 800aeca:	bf00      	nop
 800aecc:	e00e      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aece:	bf00      	nop
 800aed0:	e00c      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aed2:	bf00      	nop
 800aed4:	e00a      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aed6:	bf00      	nop
 800aed8:	e008      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aeda:	bf00      	nop
 800aedc:	e006      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aede:	bf00      	nop
 800aee0:	e004      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aee2:	bf00      	nop
 800aee4:	e002      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aee6:	bf00      	nop
 800aee8:	e000      	b.n	800aeec <USBH_HandleEnum+0x44c>
      break;
 800aeea:	bf00      	nop
  }
  return Status;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop

0800aef8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800af0a:	bf00      	nop
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f804 	bl	800af3a <USBH_HandleSof>
}
 800af32:	bf00      	nop
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b0b      	cmp	r3, #11
 800af4a:	d10a      	bne.n	800af62 <USBH_HandleSof+0x28>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d005      	beq.n	800af62 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
  }
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af8e:	2300      	movs	r3, #0
 800af90:	2200      	movs	r2, #0
 800af92:	f001 f92d 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif

  return;
 800af96:	bf00      	nop
}
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800afae:	bf00      	nop
}
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800afee:	2300      	movs	r3, #0
 800aff0:	2200      	movs	r2, #0
 800aff2:	f001 f8fd 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f003 fff0 	bl	800f006 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	791b      	ldrb	r3, [r3, #4]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fed1 	bl	800bdd4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	795b      	ldrb	r3, [r3, #5]
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fecb 	bl	800bdd4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b052:	2300      	movs	r3, #0
 800b054:	2200      	movs	r2, #0
 800b056:	f001 f8cb 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b078:	f04f 33ff 	mov.w	r3, #4294967295
 800b07c:	2200      	movs	r2, #0
 800b07e:	f001 f92b 	bl	800c2d8 <osMessageQueueGet>
 800b082:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1f0      	bne.n	800b06c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff faa6 	bl	800a5dc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800b090:	e7ec      	b.n	800b06c <USBH_Process_OS+0x8>

0800b092 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f001 f89d 	bl	800c1f0 <osMessageQueuePut>
#endif

  return USBH_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b0d2:	78fb      	ldrb	r3, [r7, #3]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f864 	bl	800b1ae <USBH_GetDescriptor>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73fb      	strb	r3, [r7, #15]
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	b292      	uxth	r2, r2
 800b100:	4619      	mov	r1, r3
 800b102:	f000 f918 	bl	800b336 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af02      	add	r7, sp, #8
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	331c      	adds	r3, #28
 800b120:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b122:	887b      	ldrh	r3, [r7, #2]
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b12c:	2100      	movs	r1, #0
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f83d 	bl	800b1ae <USBH_GetDescriptor>
 800b134:	4603      	mov	r3, r0
 800b136:	72fb      	strb	r3, [r7, #11]
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b144:	887a      	ldrh	r2, [r7, #2]
 800b146:	68f9      	ldr	r1, [r7, #12]
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f964 	bl	800b416 <USBH_ParseCfgDesc>
  }

  return status;
 800b14e:	7afb      	ldrb	r3, [r7, #11]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af02      	add	r7, sp, #8
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	607a      	str	r2, [r7, #4]
 800b162:	461a      	mov	r2, r3
 800b164:	460b      	mov	r3, r1
 800b166:	72fb      	strb	r3, [r7, #11]
 800b168:	4613      	mov	r3, r2
 800b16a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b174:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b17c:	893b      	ldrh	r3, [r7, #8]
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	460b      	mov	r3, r1
 800b182:	2100      	movs	r1, #0
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f812 	bl	800b1ae <USBH_GetDescriptor>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d107      	bne.n	800b1a4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b19a:	893a      	ldrh	r2, [r7, #8]
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fa37 	bl	800b612 <USBH_ParseStringDesc>
  }

  return status;
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	607b      	str	r3, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	72fb      	strb	r3, [r7, #11]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	789b      	ldrb	r3, [r3, #2]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d11c      	bne.n	800b202 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b1c8:	7afb      	ldrb	r3, [r7, #11]
 800b1ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2206      	movs	r2, #6
 800b1d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	893a      	ldrh	r2, [r7, #8]
 800b1de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b1e0:	893b      	ldrh	r3, [r7, #8]
 800b1e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1ea:	d104      	bne.n	800b1f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f240 4209 	movw	r2, #1033	; 0x409
 800b1f2:	829a      	strh	r2, [r3, #20]
 800b1f4:	e002      	b.n	800b1fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	8b3a      	ldrh	r2, [r7, #24]
 800b200:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b202:	8b3b      	ldrh	r3, [r7, #24]
 800b204:	461a      	mov	r2, r3
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fa50 	bl	800b6ae <USBH_CtlReq>
 800b20e:	4603      	mov	r3, r0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	460b      	mov	r3, r1
 800b222:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	789b      	ldrb	r3, [r3, #2]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d10f      	bne.n	800b24c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2205      	movs	r2, #5
 800b236:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b24c:	2200      	movs	r2, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fa2c 	bl	800b6ae <USBH_CtlReq>
 800b256:	4603      	mov	r3, r0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	789b      	ldrb	r3, [r3, #2]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d10e      	bne.n	800b292 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2209      	movs	r2, #9
 800b27e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	887a      	ldrh	r2, [r7, #2]
 800b284:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b292:	2200      	movs	r2, #0
 800b294:	2100      	movs	r1, #0
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fa09 	bl	800b6ae <USBH_CtlReq>
 800b29c:	4603      	mov	r3, r0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	789b      	ldrb	r3, [r3, #2]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d10f      	bne.n	800b2da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2100      	movs	r1, #0
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f9e5 	bl	800b6ae <USBH_CtlReq>
 800b2e4:	4603      	mov	r3, r0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	789b      	ldrb	r3, [r3, #2]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d10f      	bne.n	800b322 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2202      	movs	r2, #2
 800b306:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b314:	78fb      	ldrb	r3, [r7, #3]
 800b316:	b29a      	uxth	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b322:	2200      	movs	r2, #0
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f9c1 	bl	800b6ae <USBH_CtlReq>
 800b32c:	4603      	mov	r3, r0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	4613      	mov	r3, r2
 800b342:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	781a      	ldrb	r2, [r3, #0]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	785a      	ldrb	r2, [r3, #1]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	3302      	adds	r3, #2
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	3303      	adds	r3, #3
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	b29b      	uxth	r3, r3
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	b29b      	uxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	791a      	ldrb	r2, [r3, #4]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	795a      	ldrb	r2, [r3, #5]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	799a      	ldrb	r2, [r3, #6]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	79da      	ldrb	r2, [r3, #7]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b390:	88fb      	ldrh	r3, [r7, #6]
 800b392:	2b08      	cmp	r3, #8
 800b394:	d939      	bls.n	800b40a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	3308      	adds	r3, #8
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	3309      	adds	r3, #9
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	330a      	adds	r3, #10
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	330b      	adds	r3, #11
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	021b      	lsls	r3, r3, #8
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	330c      	adds	r3, #12
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	330d      	adds	r3, #13
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	021b      	lsls	r3, r3, #8
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	7b9a      	ldrb	r2, [r3, #14]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	7bda      	ldrb	r2, [r3, #15]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	7c1a      	ldrb	r2, [r3, #16]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	7c5a      	ldrb	r2, [r3, #17]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	745a      	strb	r2, [r3, #17]
  }
}
 800b40a:	bf00      	nop
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b08a      	sub	sp, #40	; 0x28
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	60b9      	str	r1, [r7, #8]
 800b420:	4613      	mov	r3, r2
 800b422:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	785a      	ldrb	r2, [r3, #1]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3302      	adds	r3, #2
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	3303      	adds	r3, #3
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b29b      	uxth	r3, r3
 800b458:	021b      	lsls	r3, r3, #8
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4313      	orrs	r3, r2
 800b45e:	b29a      	uxth	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	791a      	ldrb	r2, [r3, #4]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	795a      	ldrb	r2, [r3, #5]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	799a      	ldrb	r2, [r3, #6]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	79da      	ldrb	r2, [r3, #7]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	7a1a      	ldrb	r2, [r3, #8]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b48c:	88fb      	ldrh	r3, [r7, #6]
 800b48e:	2b09      	cmp	r3, #9
 800b490:	d95f      	bls.n	800b552 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b492:	2309      	movs	r3, #9
 800b494:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b49a:	e051      	b.n	800b540 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b49c:	f107 0316 	add.w	r3, r7, #22
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4a4:	f000 f8e8 	bl	800b678 <USBH_GetNextDesc>
 800b4a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d146      	bne.n	800b540 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b4b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4b6:	221a      	movs	r2, #26
 800b4b8:	fb02 f303 	mul.w	r3, r2, r3
 800b4bc:	3308      	adds	r3, #8
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	3302      	adds	r3, #2
 800b4c4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4c8:	69f8      	ldr	r0, [r7, #28]
 800b4ca:	f000 f846 	bl	800b55a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b4d8:	e022      	b.n	800b520 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b4da:	f107 0316 	add.w	r3, r7, #22
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4e2:	f000 f8c9 	bl	800b678 <USBH_GetNextDesc>
 800b4e6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	785b      	ldrb	r3, [r3, #1]
 800b4ec:	2b05      	cmp	r3, #5
 800b4ee:	d117      	bne.n	800b520 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b4f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b4f8:	3201      	adds	r2, #1
 800b4fa:	00d2      	lsls	r2, r2, #3
 800b4fc:	211a      	movs	r1, #26
 800b4fe:	fb01 f303 	mul.w	r3, r1, r3
 800b502:	4413      	add	r3, r2
 800b504:	3308      	adds	r3, #8
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4413      	add	r3, r2
 800b50a:	3304      	adds	r3, #4
 800b50c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b50e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b510:	69b8      	ldr	r0, [r7, #24]
 800b512:	f000 f851 	bl	800b5b8 <USBH_ParseEPDesc>
            ep_ix++;
 800b516:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b51a:	3301      	adds	r3, #1
 800b51c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	791b      	ldrb	r3, [r3, #4]
 800b524:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b528:	429a      	cmp	r2, r3
 800b52a:	d204      	bcs.n	800b536 <USBH_ParseCfgDesc+0x120>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	885a      	ldrh	r2, [r3, #2]
 800b530:	8afb      	ldrh	r3, [r7, #22]
 800b532:	429a      	cmp	r2, r3
 800b534:	d8d1      	bhi.n	800b4da <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b53a:	3301      	adds	r3, #1
 800b53c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b544:	2b01      	cmp	r3, #1
 800b546:	d804      	bhi.n	800b552 <USBH_ParseCfgDesc+0x13c>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	885a      	ldrh	r2, [r3, #2]
 800b54c:	8afb      	ldrh	r3, [r7, #22]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d8a4      	bhi.n	800b49c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b552:	bf00      	nop
 800b554:	3728      	adds	r7, #40	; 0x28
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
 800b562:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	785a      	ldrb	r2, [r3, #1]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	789a      	ldrb	r2, [r3, #2]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	78da      	ldrb	r2, [r3, #3]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	791a      	ldrb	r2, [r3, #4]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	795a      	ldrb	r2, [r3, #5]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	799a      	ldrb	r2, [r3, #6]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	79da      	ldrb	r2, [r3, #7]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	7a1a      	ldrb	r2, [r3, #8]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	721a      	strb	r2, [r3, #8]
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	785a      	ldrb	r2, [r3, #1]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	789a      	ldrb	r2, [r3, #2]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	78da      	ldrb	r2, [r3, #3]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	3305      	adds	r3, #5
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	021b      	lsls	r3, r3, #8
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	799a      	ldrb	r2, [r3, #6]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	719a      	strb	r2, [r3, #6]
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b612:	b480      	push	{r7}
 800b614:	b087      	sub	sp, #28
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	4613      	mov	r3, r2
 800b61e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b03      	cmp	r3, #3
 800b628:	d120      	bne.n	800b66c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	1e9a      	subs	r2, r3, #2
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	4293      	cmp	r3, r2
 800b634:	bf28      	it	cs
 800b636:	4613      	movcs	r3, r2
 800b638:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3302      	adds	r3, #2
 800b63e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b640:	2300      	movs	r3, #0
 800b642:	82fb      	strh	r3, [r7, #22]
 800b644:	e00b      	b.n	800b65e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b646:	8afb      	ldrh	r3, [r7, #22]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4413      	add	r3, r2
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	3301      	adds	r3, #1
 800b656:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b658:	8afb      	ldrh	r3, [r7, #22]
 800b65a:	3302      	adds	r3, #2
 800b65c:	82fb      	strh	r3, [r7, #22]
 800b65e:	8afa      	ldrh	r2, [r7, #22]
 800b660:	8abb      	ldrh	r3, [r7, #20]
 800b662:	429a      	cmp	r2, r3
 800b664:	d3ef      	bcc.n	800b646 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2200      	movs	r2, #0
 800b66a:	701a      	strb	r2, [r3, #0]
  }
}
 800b66c:	bf00      	nop
 800b66e:	371c      	adds	r7, #28
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	881a      	ldrh	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	4413      	add	r3, r2
 800b68e:	b29a      	uxth	r2, r3
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b086      	sub	sp, #24
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	789b      	ldrb	r3, [r3, #2]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d002      	beq.n	800b6ce <USBH_CtlReq+0x20>
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d01d      	beq.n	800b708 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b6cc:	e043      	b.n	800b756 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	88fa      	ldrh	r2, [r7, #6]
 800b6d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b6fe:	2300      	movs	r3, #0
 800b700:	2200      	movs	r2, #0
 800b702:	f000 fd75 	bl	800c1f0 <osMessageQueuePut>
      break;
 800b706:	e026      	b.n	800b756 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 f829 	bl	800b760 <USBH_HandleControl>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <USBH_CtlReq+0x70>
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d106      	bne.n	800b72c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	761a      	strb	r2, [r3, #24]
 800b72a:	e005      	b.n	800b738 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d102      	bne.n	800b738 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2201      	movs	r2, #1
 800b736:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2203      	movs	r2, #3
 800b73c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b74c:	2300      	movs	r3, #0
 800b74e:	2200      	movs	r2, #0
 800b750:	f000 fd4e 	bl	800c1f0 <osMessageQueuePut>
      break;
 800b754:	bf00      	nop
  }
  return status;
 800b756:	7dfb      	ldrb	r3, [r7, #23]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b768:	2301      	movs	r3, #1
 800b76a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	7e1b      	ldrb	r3, [r3, #24]
 800b774:	3b01      	subs	r3, #1
 800b776:	2b0a      	cmp	r3, #10
 800b778:	f200 822b 	bhi.w	800bbd2 <USBH_HandleControl+0x472>
 800b77c:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <USBH_HandleControl+0x24>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b7b1 	.word	0x0800b7b1
 800b788:	0800b7cb 	.word	0x0800b7cb
 800b78c:	0800b86d 	.word	0x0800b86d
 800b790:	0800b893 	.word	0x0800b893
 800b794:	0800b91f 	.word	0x0800b91f
 800b798:	0800b94b 	.word	0x0800b94b
 800b79c:	0800ba0d 	.word	0x0800ba0d
 800b7a0:	0800ba2f 	.word	0x0800ba2f
 800b7a4:	0800bac1 	.word	0x0800bac1
 800b7a8:	0800bae9 	.word	0x0800bae9
 800b7ac:	0800bb7b 	.word	0x0800bb7b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f103 0110 	add.w	r1, r3, #16
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	795b      	ldrb	r3, [r3, #5]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fa19 	bl	800bbf4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2202      	movs	r2, #2
 800b7c6:	761a      	strb	r2, [r3, #24]
      break;
 800b7c8:	e20e      	b.n	800bbe8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	795b      	ldrb	r3, [r3, #5]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f003 fd05 	bl	800f1e0 <USBH_LL_GetURBState>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d12c      	bne.n	800b83a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7c1b      	ldrb	r3, [r3, #16]
 800b7e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8adb      	ldrh	r3, [r3, #22]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00a      	beq.n	800b808 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7f2:	7b7b      	ldrb	r3, [r7, #13]
 800b7f4:	2b80      	cmp	r3, #128	; 0x80
 800b7f6:	d103      	bne.n	800b800 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2203      	movs	r2, #3
 800b7fc:	761a      	strb	r2, [r3, #24]
 800b7fe:	e00d      	b.n	800b81c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2205      	movs	r2, #5
 800b804:	761a      	strb	r2, [r3, #24]
 800b806:	e009      	b.n	800b81c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b808:	7b7b      	ldrb	r3, [r7, #13]
 800b80a:	2b80      	cmp	r3, #128	; 0x80
 800b80c:	d103      	bne.n	800b816 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2209      	movs	r2, #9
 800b812:	761a      	strb	r2, [r3, #24]
 800b814:	e002      	b.n	800b81c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2207      	movs	r2, #7
 800b81a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2203      	movs	r2, #3
 800b820:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b830:	2300      	movs	r3, #0
 800b832:	2200      	movs	r2, #0
 800b834:	f000 fcdc 	bl	800c1f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b838:	e1cd      	b.n	800bbd6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b83a:	7bbb      	ldrb	r3, [r7, #14]
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d003      	beq.n	800b848 <USBH_HandleControl+0xe8>
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b02      	cmp	r3, #2
 800b844:	f040 81c7 	bne.w	800bbd6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	220b      	movs	r2, #11
 800b84c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2203      	movs	r2, #3
 800b852:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b862:	2300      	movs	r3, #0
 800b864:	2200      	movs	r2, #0
 800b866:	f000 fcc3 	bl	800c1f0 <osMessageQueuePut>
      break;
 800b86a:	e1b4      	b.n	800bbd6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b872:	b29a      	uxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6899      	ldr	r1, [r3, #8]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	899a      	ldrh	r2, [r3, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	791b      	ldrb	r3, [r3, #4]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f9f4 	bl	800bc72 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2204      	movs	r2, #4
 800b88e:	761a      	strb	r2, [r3, #24]
      break;
 800b890:	e1aa      	b.n	800bbe8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	791b      	ldrb	r3, [r3, #4]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f003 fca1 	bl	800f1e0 <USBH_LL_GetURBState>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d110      	bne.n	800b8ca <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2209      	movs	r2, #9
 800b8ac:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2203      	movs	r2, #3
 800b8b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f000 fc93 	bl	800c1f0 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
 800b8cc:	2b05      	cmp	r3, #5
 800b8ce:	d110      	bne.n	800b8f2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f000 fc80 	bl	800c1f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8f0:	e173      	b.n	800bbda <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	f040 8170 	bne.w	800bbda <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	220b      	movs	r2, #11
 800b8fe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2203      	movs	r2, #3
 800b904:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b914:	2300      	movs	r3, #0
 800b916:	2200      	movs	r2, #0
 800b918:	f000 fc6a 	bl	800c1f0 <osMessageQueuePut>
      break;
 800b91c:	e15d      	b.n	800bbda <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6899      	ldr	r1, [r3, #8]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	899a      	ldrh	r2, [r3, #12]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7958      	ldrb	r0, [r3, #5]
 800b92a:	2301      	movs	r3, #1
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	4603      	mov	r3, r0
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f979 	bl	800bc28 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2206      	movs	r2, #6
 800b946:	761a      	strb	r2, [r3, #24]
      break;
 800b948:	e14e      	b.n	800bbe8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	795b      	ldrb	r3, [r3, #5]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f003 fc45 	bl	800f1e0 <USBH_LL_GetURBState>
 800b956:	4603      	mov	r3, r0
 800b958:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d111      	bne.n	800b984 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2207      	movs	r2, #7
 800b964:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2203      	movs	r2, #3
 800b96a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b97a:	2300      	movs	r3, #0
 800b97c:	2200      	movs	r2, #0
 800b97e:	f000 fc37 	bl	800c1f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b982:	e12c      	b.n	800bbde <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b05      	cmp	r3, #5
 800b988:	d113      	bne.n	800b9b2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	220c      	movs	r2, #12
 800b98e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b990:	2303      	movs	r3, #3
 800b992:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2203      	movs	r2, #3
 800b998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f000 fc20 	bl	800c1f0 <osMessageQueuePut>
      break;
 800b9b0:	e115      	b.n	800bbde <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d111      	bne.n	800b9dc <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2205      	movs	r2, #5
 800b9bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2203      	movs	r2, #3
 800b9c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f000 fc0b 	bl	800c1f0 <osMessageQueuePut>
      break;
 800b9da:	e100      	b.n	800bbde <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	f040 80fd 	bne.w	800bbde <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	220b      	movs	r2, #11
 800b9e8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2203      	movs	r2, #3
 800b9f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba02:	2300      	movs	r3, #0
 800ba04:	2200      	movs	r2, #0
 800ba06:	f000 fbf3 	bl	800c1f0 <osMessageQueuePut>
      break;
 800ba0a:	e0e8      	b.n	800bbde <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	791b      	ldrb	r3, [r3, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	2100      	movs	r1, #0
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f92c 	bl	800bc72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2208      	movs	r2, #8
 800ba2a:	761a      	strb	r2, [r3, #24]

      break;
 800ba2c:	e0dc      	b.n	800bbe8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	791b      	ldrb	r3, [r3, #4]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f003 fbd3 	bl	800f1e0 <USBH_LL_GetURBState>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d113      	bne.n	800ba6c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	220d      	movs	r2, #13
 800ba48:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2203      	movs	r2, #3
 800ba52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba62:	2300      	movs	r3, #0
 800ba64:	2200      	movs	r2, #0
 800ba66:	f000 fbc3 	bl	800c1f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba6a:	e0ba      	b.n	800bbe2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d111      	bne.n	800ba96 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	220b      	movs	r2, #11
 800ba76:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f000 fbae 	bl	800c1f0 <osMessageQueuePut>
      break;
 800ba94:	e0a5      	b.n	800bbe2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	2b05      	cmp	r3, #5
 800ba9a:	f040 80a2 	bne.w	800bbe2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2203      	movs	r2, #3
 800baa6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bab6:	2300      	movs	r3, #0
 800bab8:	2200      	movs	r2, #0
 800baba:	f000 fb99 	bl	800c1f0 <osMessageQueuePut>
      break;
 800babe:	e090      	b.n	800bbe2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	795a      	ldrb	r2, [r3, #5]
 800bac4:	2301      	movs	r3, #1
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	4613      	mov	r3, r2
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f8aa 	bl	800bc28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bada:	b29a      	uxth	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	220a      	movs	r2, #10
 800bae4:	761a      	strb	r2, [r3, #24]
      break;
 800bae6:	e07f      	b.n	800bbe8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	795b      	ldrb	r3, [r3, #5]
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f003 fb76 	bl	800f1e0 <USBH_LL_GetURBState>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d113      	bne.n	800bb26 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	220d      	movs	r2, #13
 800bb06:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2203      	movs	r2, #3
 800bb0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f000 fb66 	bl	800c1f0 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb24:	e05f      	b.n	800bbe6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d111      	bne.n	800bb50 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2209      	movs	r2, #9
 800bb30:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2203      	movs	r2, #3
 800bb36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb46:	2300      	movs	r3, #0
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f000 fb51 	bl	800c1f0 <osMessageQueuePut>
      break;
 800bb4e:	e04a      	b.n	800bbe6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d147      	bne.n	800bbe6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	220b      	movs	r2, #11
 800bb5a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb70:	2300      	movs	r3, #0
 800bb72:	2200      	movs	r2, #0
 800bb74:	f000 fb3c 	bl	800c1f0 <osMessageQueuePut>
      break;
 800bb78:	e035      	b.n	800bbe6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	7e5b      	ldrb	r3, [r3, #25]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	765a      	strb	r2, [r3, #25]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	7e5b      	ldrb	r3, [r3, #25]
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d806      	bhi.n	800bb9c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bb9a:	e025      	b.n	800bbe8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bba2:	2106      	movs	r1, #6
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	795b      	ldrb	r3, [r3, #5]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f90d 	bl	800bdd4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	791b      	ldrb	r3, [r3, #4]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f907 	bl	800bdd4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd0:	e00a      	b.n	800bbe8 <USBH_HandleControl+0x488>

    default:
      break;
 800bbd2:	bf00      	nop
 800bbd4:	e008      	b.n	800bbe8 <USBH_HandleControl+0x488>
      break;
 800bbd6:	bf00      	nop
 800bbd8:	e006      	b.n	800bbe8 <USBH_HandleControl+0x488>
      break;
 800bbda:	bf00      	nop
 800bbdc:	e004      	b.n	800bbe8 <USBH_HandleControl+0x488>
      break;
 800bbde:	bf00      	nop
 800bbe0:	e002      	b.n	800bbe8 <USBH_HandleControl+0x488>
      break;
 800bbe2:	bf00      	nop
 800bbe4:	e000      	b.n	800bbe8 <USBH_HandleControl+0x488>
      break;
 800bbe6:	bf00      	nop
  }

  return status;
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop

0800bbf4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af04      	add	r7, sp, #16
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc02:	79f9      	ldrb	r1, [r7, #7]
 800bc04:	2300      	movs	r3, #0
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	2308      	movs	r3, #8
 800bc0a:	9302      	str	r3, [sp, #8]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	9301      	str	r3, [sp, #4]
 800bc10:	2300      	movs	r3, #0
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	2300      	movs	r3, #0
 800bc16:	2200      	movs	r2, #0
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f003 fab0 	bl	800f17e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af04      	add	r7, sp, #16
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	4611      	mov	r1, r2
 800bc34:	461a      	mov	r2, r3
 800bc36:	460b      	mov	r3, r1
 800bc38:	80fb      	strh	r3, [r7, #6]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc4c:	7979      	ldrb	r1, [r7, #5]
 800bc4e:	7e3b      	ldrb	r3, [r7, #24]
 800bc50:	9303      	str	r3, [sp, #12]
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	9302      	str	r3, [sp, #8]
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	2200      	movs	r2, #0
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f003 fa8b 	bl	800f17e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b088      	sub	sp, #32
 800bc76:	af04      	add	r7, sp, #16
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	461a      	mov	r2, r3
 800bc80:	460b      	mov	r3, r1
 800bc82:	80fb      	strh	r3, [r7, #6]
 800bc84:	4613      	mov	r3, r2
 800bc86:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc88:	7979      	ldrb	r1, [r7, #5]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9303      	str	r3, [sp, #12]
 800bc8e:	88fb      	ldrh	r3, [r7, #6]
 800bc90:	9302      	str	r3, [sp, #8]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	2301      	movs	r3, #1
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f003 fa6d 	bl	800f17e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bca4:	2300      	movs	r3, #0

}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b088      	sub	sp, #32
 800bcb2:	af04      	add	r7, sp, #16
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	4611      	mov	r1, r2
 800bcba:	461a      	mov	r2, r3
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	80fb      	strh	r3, [r7, #6]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcd2:	7979      	ldrb	r1, [r7, #5]
 800bcd4:	7e3b      	ldrb	r3, [r7, #24]
 800bcd6:	9303      	str	r3, [sp, #12]
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	9302      	str	r3, [sp, #8]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	2301      	movs	r3, #1
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	2302      	movs	r3, #2
 800bce6:	2200      	movs	r2, #0
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f003 fa48 	bl	800f17e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af04      	add	r7, sp, #16
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	4611      	mov	r1, r2
 800bd04:	461a      	mov	r2, r3
 800bd06:	460b      	mov	r3, r1
 800bd08:	80fb      	strh	r3, [r7, #6]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd0e:	7979      	ldrb	r1, [r7, #5]
 800bd10:	2300      	movs	r3, #0
 800bd12:	9303      	str	r3, [sp, #12]
 800bd14:	88fb      	ldrh	r3, [r7, #6]
 800bd16:	9302      	str	r3, [sp, #8]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	2302      	movs	r3, #2
 800bd22:	2201      	movs	r2, #1
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f003 fa2a 	bl	800f17e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af04      	add	r7, sp, #16
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	4611      	mov	r1, r2
 800bd40:	461a      	mov	r2, r3
 800bd42:	4603      	mov	r3, r0
 800bd44:	70fb      	strb	r3, [r7, #3]
 800bd46:	460b      	mov	r3, r1
 800bd48:	70bb      	strb	r3, [r7, #2]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd4e:	7878      	ldrb	r0, [r7, #1]
 800bd50:	78ba      	ldrb	r2, [r7, #2]
 800bd52:	78f9      	ldrb	r1, [r7, #3]
 800bd54:	8b3b      	ldrh	r3, [r7, #24]
 800bd56:	9302      	str	r3, [sp, #8]
 800bd58:	7d3b      	ldrb	r3, [r7, #20]
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	7c3b      	ldrb	r3, [r7, #16]
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	4603      	mov	r3, r0
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f003 f9bd 	bl	800f0e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f003 f9dc 	bl	800f140 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f836 	bl	800be10 <USBH_GetFreePipe>
 800bda4:	4603      	mov	r3, r0
 800bda6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bda8:	89fb      	ldrh	r3, [r7, #14]
 800bdaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d00a      	beq.n	800bdc8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bdb2:	78fa      	ldrb	r2, [r7, #3]
 800bdb4:	89fb      	ldrh	r3, [r7, #14]
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdbe:	6879      	ldr	r1, [r7, #4]
 800bdc0:	33e0      	adds	r3, #224	; 0xe0
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	b2db      	uxtb	r3, r3
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bde0:	78fb      	ldrb	r3, [r7, #3]
 800bde2:	2b0a      	cmp	r3, #10
 800bde4:	d80d      	bhi.n	800be02 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bde6:	78fb      	ldrb	r3, [r7, #3]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	33e0      	adds	r3, #224	; 0xe0
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	78fb      	ldrb	r3, [r7, #3]
 800bdf4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	33e0      	adds	r3, #224	; 0xe0
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	440b      	add	r3, r1
 800be00:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
 800be20:	e00f      	b.n	800be42 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be22:	7bfb      	ldrb	r3, [r7, #15]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	33e0      	adds	r3, #224	; 0xe0
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d102      	bne.n	800be3c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	e007      	b.n	800be4c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	3301      	adds	r3, #1
 800be40:	73fb      	strb	r3, [r7, #15]
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	2b0a      	cmp	r3, #10
 800be46:	d9ec      	bls.n	800be22 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be48:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800be5c:	bf00      	nop
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
	...

0800be68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6e:	f3ef 8305 	mrs	r3, IPSR
 800be72:	60bb      	str	r3, [r7, #8]
  return(result);
 800be74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10f      	bne.n	800be9a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be7a:	f3ef 8310 	mrs	r3, PRIMASK
 800be7e:	607b      	str	r3, [r7, #4]
  return(result);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800be86:	f3ef 8311 	mrs	r3, BASEPRI
 800be8a:	603b      	str	r3, [r7, #0]
  return(result);
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <osKernelInitialize+0x3a>
 800be92:	4b0e      	ldr	r3, [pc, #56]	; (800becc <osKernelInitialize+0x64>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d103      	bne.n	800bea2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800be9a:	f06f 0305 	mvn.w	r3, #5
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	e00c      	b.n	800bebc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <osKernelInitialize+0x64>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800beaa:	4b08      	ldr	r3, [pc, #32]	; (800becc <osKernelInitialize+0x64>)
 800beac:	2201      	movs	r2, #1
 800beae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e002      	b.n	800bebc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800beb6:	f04f 33ff 	mov.w	r3, #4294967295
 800beba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bebc:	68fb      	ldr	r3, [r7, #12]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	200000fc 	.word	0x200000fc

0800bed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bed6:	f3ef 8305 	mrs	r3, IPSR
 800beda:	60bb      	str	r3, [r7, #8]
  return(result);
 800bedc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10f      	bne.n	800bf02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bee2:	f3ef 8310 	mrs	r3, PRIMASK
 800bee6:	607b      	str	r3, [r7, #4]
  return(result);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800beee:	f3ef 8311 	mrs	r3, BASEPRI
 800bef2:	603b      	str	r3, [r7, #0]
  return(result);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d007      	beq.n	800bf0a <osKernelStart+0x3a>
 800befa:	4b0f      	ldr	r3, [pc, #60]	; (800bf38 <osKernelStart+0x68>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	d103      	bne.n	800bf0a <osKernelStart+0x3a>
    stat = osErrorISR;
 800bf02:	f06f 0305 	mvn.w	r3, #5
 800bf06:	60fb      	str	r3, [r7, #12]
 800bf08:	e010      	b.n	800bf2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf0a:	4b0b      	ldr	r3, [pc, #44]	; (800bf38 <osKernelStart+0x68>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d109      	bne.n	800bf26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf12:	f7ff ffa1 	bl	800be58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf16:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <osKernelStart+0x68>)
 800bf18:	2202      	movs	r2, #2
 800bf1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf1c:	f001 fa9a 	bl	800d454 <vTaskStartScheduler>
      stat = osOK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e002      	b.n	800bf2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200000fc 	.word	0x200000fc

0800bf3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b090      	sub	sp, #64	; 0x40
 800bf40:	af04      	add	r7, sp, #16
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf4c:	f3ef 8305 	mrs	r3, IPSR
 800bf50:	61fb      	str	r3, [r7, #28]
  return(result);
 800bf52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f040 808f 	bne.w	800c078 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf5a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf5e:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf66:	f3ef 8311 	mrs	r3, BASEPRI
 800bf6a:	617b      	str	r3, [r7, #20]
  return(result);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <osThreadNew+0x3e>
 800bf72:	4b44      	ldr	r3, [pc, #272]	; (800c084 <osThreadNew+0x148>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d07e      	beq.n	800c078 <osThreadNew+0x13c>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d07b      	beq.n	800c078 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800bf80:	2380      	movs	r3, #128	; 0x80
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800bf84:	2318      	movs	r3, #24
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d045      	beq.n	800c024 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <osThreadNew+0x6a>
        name = attr->name;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d008      	beq.n	800bfcc <osThreadNew+0x90>
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	2b38      	cmp	r3, #56	; 0x38
 800bfbe:	d805      	bhi.n	800bfcc <osThreadNew+0x90>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <osThreadNew+0x94>
        return (NULL);
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e054      	b.n	800c07a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	089b      	lsrs	r3, r3, #2
 800bfde:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00e      	beq.n	800c006 <osThreadNew+0xca>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b5b      	cmp	r3, #91	; 0x5b
 800bfee:	d90a      	bls.n	800c006 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d006      	beq.n	800c006 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <osThreadNew+0xca>
        mem = 1;
 800c000:	2301      	movs	r3, #1
 800c002:	623b      	str	r3, [r7, #32]
 800c004:	e010      	b.n	800c028 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10c      	bne.n	800c028 <osThreadNew+0xec>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d108      	bne.n	800c028 <osThreadNew+0xec>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d104      	bne.n	800c028 <osThreadNew+0xec>
          mem = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	623b      	str	r3, [r7, #32]
 800c022:	e001      	b.n	800c028 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d110      	bne.n	800c050 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c036:	9202      	str	r2, [sp, #8]
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f001 f833 	bl	800d0b0 <xTaskCreateStatic>
 800c04a:	4603      	mov	r3, r0
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	e013      	b.n	800c078 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d110      	bne.n	800c078 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	b29a      	uxth	r2, r3
 800c05a:	f107 0310 	add.w	r3, r7, #16
 800c05e:	9301      	str	r3, [sp, #4]
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f001 f87b 	bl	800d164 <xTaskCreate>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b01      	cmp	r3, #1
 800c072:	d001      	beq.n	800c078 <osThreadNew+0x13c>
          hTask = NULL;
 800c074:	2300      	movs	r3, #0
 800c076:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c078:	693b      	ldr	r3, [r7, #16]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3730      	adds	r7, #48	; 0x30
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	200000fc 	.word	0x200000fc

0800c088 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c090:	f3ef 8305 	mrs	r3, IPSR
 800c094:	613b      	str	r3, [r7, #16]
  return(result);
 800c096:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10f      	bne.n	800c0bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c09c:	f3ef 8310 	mrs	r3, PRIMASK
 800c0a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d105      	bne.n	800c0b4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c0a8:	f3ef 8311 	mrs	r3, BASEPRI
 800c0ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d007      	beq.n	800c0c4 <osDelay+0x3c>
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <osDelay+0x58>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d103      	bne.n	800c0c4 <osDelay+0x3c>
    stat = osErrorISR;
 800c0bc:	f06f 0305 	mvn.w	r3, #5
 800c0c0:	617b      	str	r3, [r7, #20]
 800c0c2:	e007      	b.n	800c0d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 f98c 	bl	800d3ec <vTaskDelay>
    }
  }

  return (stat);
 800c0d4:	697b      	ldr	r3, [r7, #20]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	200000fc 	.word	0x200000fc

0800c0e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08c      	sub	sp, #48	; 0x30
 800c0e8:	af02      	add	r7, sp, #8
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0f4:	f3ef 8305 	mrs	r3, IPSR
 800c0f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800c0fa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d170      	bne.n	800c1e2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c100:	f3ef 8310 	mrs	r3, PRIMASK
 800c104:	617b      	str	r3, [r7, #20]
  return(result);
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d105      	bne.n	800c118 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c10c:	f3ef 8311 	mrs	r3, BASEPRI
 800c110:	613b      	str	r3, [r7, #16]
  return(result);
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <osMessageQueueNew+0x3c>
 800c118:	4b34      	ldr	r3, [pc, #208]	; (800c1ec <osMessageQueueNew+0x108>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d060      	beq.n	800c1e2 <osMessageQueueNew+0xfe>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d05d      	beq.n	800c1e2 <osMessageQueueNew+0xfe>
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d05a      	beq.n	800c1e2 <osMessageQueueNew+0xfe>
    mem = -1;
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295
 800c130:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d029      	beq.n	800c18c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d012      	beq.n	800c166 <osMessageQueueNew+0x82>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	2b4f      	cmp	r3, #79	; 0x4f
 800c146:	d90e      	bls.n	800c166 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00a      	beq.n	800c166 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	695a      	ldr	r2, [r3, #20]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	fb01 f303 	mul.w	r3, r1, r3
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d302      	bcc.n	800c166 <osMessageQueueNew+0x82>
        mem = 1;
 800c160:	2301      	movs	r3, #1
 800c162:	623b      	str	r3, [r7, #32]
 800c164:	e014      	b.n	800c190 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d110      	bne.n	800c190 <osMessageQueueNew+0xac>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10c      	bne.n	800c190 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d108      	bne.n	800c190 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d104      	bne.n	800c190 <osMessageQueueNew+0xac>
          mem = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	623b      	str	r3, [r7, #32]
 800c18a:	e001      	b.n	800c190 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d10c      	bne.n	800c1b0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691a      	ldr	r2, [r3, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6899      	ldr	r1, [r3, #8]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 fa58 	bl	800c65c <xQueueGenericCreateStatic>
 800c1ac:	6278      	str	r0, [r7, #36]	; 0x24
 800c1ae:	e008      	b.n	800c1c2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d105      	bne.n	800c1c2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f000 fac1 	bl	800c742 <xQueueGenericCreate>
 800c1c0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00c      	beq.n	800c1e2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	61fb      	str	r3, [r7, #28]
 800c1d4:	e001      	b.n	800c1da <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800c1da:	69f9      	ldr	r1, [r7, #28]
 800c1dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1de:	f000 ff0b 	bl	800cff8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3728      	adds	r7, #40	; 0x28
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	200000fc 	.word	0x200000fc

0800c1f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08a      	sub	sp, #40	; 0x28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c204:	2300      	movs	r3, #0
 800c206:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c208:	f3ef 8305 	mrs	r3, IPSR
 800c20c:	61fb      	str	r3, [r7, #28]
  return(result);
 800c20e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10f      	bne.n	800c234 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c214:	f3ef 8310 	mrs	r3, PRIMASK
 800c218:	61bb      	str	r3, [r7, #24]
  return(result);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d105      	bne.n	800c22c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c220:	f3ef 8311 	mrs	r3, BASEPRI
 800c224:	617b      	str	r3, [r7, #20]
  return(result);
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d02c      	beq.n	800c286 <osMessageQueuePut+0x96>
 800c22c:	4b28      	ldr	r3, [pc, #160]	; (800c2d0 <osMessageQueuePut+0xe0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b02      	cmp	r3, #2
 800c232:	d128      	bne.n	800c286 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d005      	beq.n	800c246 <osMessageQueuePut+0x56>
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d002      	beq.n	800c246 <osMessageQueuePut+0x56>
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800c246:	f06f 0303 	mvn.w	r3, #3
 800c24a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c24c:	e039      	b.n	800c2c2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800c24e:	2300      	movs	r3, #0
 800c250:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c252:	f107 0210 	add.w	r2, r7, #16
 800c256:	2300      	movs	r3, #0
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	6a38      	ldr	r0, [r7, #32]
 800c25c:	f000 fbce 	bl	800c9fc <xQueueGenericSendFromISR>
 800c260:	4603      	mov	r3, r0
 800c262:	2b01      	cmp	r3, #1
 800c264:	d003      	beq.n	800c26e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800c266:	f06f 0302 	mvn.w	r3, #2
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c26c:	e029      	b.n	800c2c2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d026      	beq.n	800c2c2 <osMessageQueuePut+0xd2>
 800c274:	4b17      	ldr	r3, [pc, #92]	; (800c2d4 <osMessageQueuePut+0xe4>)
 800c276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c284:	e01d      	b.n	800c2c2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c286:	6a3b      	ldr	r3, [r7, #32]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <osMessageQueuePut+0xa2>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d103      	bne.n	800c29a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800c292:	f06f 0303 	mvn.w	r3, #3
 800c296:	627b      	str	r3, [r7, #36]	; 0x24
 800c298:	e014      	b.n	800c2c4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c29a:	2300      	movs	r3, #0
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	68b9      	ldr	r1, [r7, #8]
 800c2a0:	6a38      	ldr	r0, [r7, #32]
 800c2a2:	f000 fab1 	bl	800c808 <xQueueGenericSend>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d00b      	beq.n	800c2c4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800c2b2:	f06f 0301 	mvn.w	r3, #1
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c2b8:	e004      	b.n	800c2c4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800c2ba:	f06f 0302 	mvn.w	r3, #2
 800c2be:	627b      	str	r3, [r7, #36]	; 0x24
 800c2c0:	e000      	b.n	800c2c4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c2c2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3728      	adds	r7, #40	; 0x28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200000fc 	.word	0x200000fc
 800c2d4:	e000ed04 	.word	0xe000ed04

0800c2d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
 800c2e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2ee:	f3ef 8305 	mrs	r3, IPSR
 800c2f2:	61fb      	str	r3, [r7, #28]
  return(result);
 800c2f4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10f      	bne.n	800c31a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c2fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800c300:	69bb      	ldr	r3, [r7, #24]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d105      	bne.n	800c312 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c306:	f3ef 8311 	mrs	r3, BASEPRI
 800c30a:	617b      	str	r3, [r7, #20]
  return(result);
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d02c      	beq.n	800c36c <osMessageQueueGet+0x94>
 800c312:	4b28      	ldr	r3, [pc, #160]	; (800c3b4 <osMessageQueueGet+0xdc>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d128      	bne.n	800c36c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <osMessageQueueGet+0x54>
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d002      	beq.n	800c32c <osMessageQueueGet+0x54>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800c32c:	f06f 0303 	mvn.w	r3, #3
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c332:	e038      	b.n	800c3a6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800c334:	2300      	movs	r3, #0
 800c336:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c338:	f107 0310 	add.w	r3, r7, #16
 800c33c:	461a      	mov	r2, r3
 800c33e:	68b9      	ldr	r1, [r7, #8]
 800c340:	6a38      	ldr	r0, [r7, #32]
 800c342:	f000 fccb 	bl	800ccdc <xQueueReceiveFromISR>
 800c346:	4603      	mov	r3, r0
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d003      	beq.n	800c354 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800c34c:	f06f 0302 	mvn.w	r3, #2
 800c350:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c352:	e028      	b.n	800c3a6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d025      	beq.n	800c3a6 <osMessageQueueGet+0xce>
 800c35a:	4b17      	ldr	r3, [pc, #92]	; (800c3b8 <osMessageQueueGet+0xe0>)
 800c35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c36a:	e01c      	b.n	800c3a6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <osMessageQueueGet+0xa0>
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d103      	bne.n	800c380 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800c378:	f06f 0303 	mvn.w	r3, #3
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
 800c37e:	e013      	b.n	800c3a8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	68b9      	ldr	r1, [r7, #8]
 800c384:	6a38      	ldr	r0, [r7, #32]
 800c386:	f000 fbcd 	bl	800cb24 <xQueueReceive>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d00b      	beq.n	800c3a8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800c396:	f06f 0301 	mvn.w	r3, #1
 800c39a:	627b      	str	r3, [r7, #36]	; 0x24
 800c39c:	e004      	b.n	800c3a8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800c39e:	f06f 0302 	mvn.w	r3, #2
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3a4:	e000      	b.n	800c3a8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c3a6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3728      	adds	r7, #40	; 0x28
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200000fc 	.word	0x200000fc
 800c3b8:	e000ed04 	.word	0xe000ed04

0800c3bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	4a07      	ldr	r2, [pc, #28]	; (800c3e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c3cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	4a06      	ldr	r2, [pc, #24]	; (800c3ec <vApplicationGetIdleTaskMemory+0x30>)
 800c3d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2280      	movs	r2, #128	; 0x80
 800c3d8:	601a      	str	r2, [r3, #0]
}
 800c3da:	bf00      	nop
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	20000100 	.word	0x20000100
 800c3ec:	2000015c 	.word	0x2000015c

0800c3f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4a07      	ldr	r2, [pc, #28]	; (800c41c <vApplicationGetTimerTaskMemory+0x2c>)
 800c400:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	4a06      	ldr	r2, [pc, #24]	; (800c420 <vApplicationGetTimerTaskMemory+0x30>)
 800c406:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c40e:	601a      	str	r2, [r3, #0]
}
 800c410:	bf00      	nop
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	2000035c 	.word	0x2000035c
 800c420:	200003b8 	.word	0x200003b8

0800c424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f103 0208 	add.w	r2, r3, #8
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f04f 32ff 	mov.w	r2, #4294967295
 800c43c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f103 0208 	add.w	r2, r3, #8
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f103 0208 	add.w	r2, r3, #8
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c472:	bf00      	nop
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c47e:	b480      	push	{r7}
 800c480:	b085      	sub	sp, #20
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	683a      	ldr	r2, [r7, #0]
 800c4a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	601a      	str	r2, [r3, #0]
}
 800c4ba:	bf00      	nop
 800c4bc:	3714      	adds	r7, #20
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4c6:	b480      	push	{r7}
 800c4c8:	b085      	sub	sp, #20
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4dc:	d103      	bne.n	800c4e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	e00c      	b.n	800c500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	60fb      	str	r3, [r7, #12]
 800c4ec:	e002      	b.n	800c4f4 <vListInsert+0x2e>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d2f6      	bcs.n	800c4ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	683a      	ldr	r2, [r7, #0]
 800c50e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	601a      	str	r2, [r3, #0]
}
 800c52c:	bf00      	nop
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	6892      	ldr	r2, [r2, #8]
 800c54e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	6852      	ldr	r2, [r2, #4]
 800c558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d103      	bne.n	800c56c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	689a      	ldr	r2, [r3, #8]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	1e5a      	subs	r2, r3, #1
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d109      	bne.n	800c5b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	60bb      	str	r3, [r7, #8]
 800c5b2:	e7fe      	b.n	800c5b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800c5b4:	f002 f8d2 	bl	800e75c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c0:	68f9      	ldr	r1, [r7, #12]
 800c5c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c5c4:	fb01 f303 	mul.w	r3, r1, r3
 800c5c8:	441a      	add	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c5ea:	fb01 f303 	mul.w	r3, r1, r3
 800c5ee:	441a      	add	r2, r3
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	22ff      	movs	r2, #255	; 0xff
 800c5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	22ff      	movs	r2, #255	; 0xff
 800c600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d114      	bne.n	800c634 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01a      	beq.n	800c648 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3310      	adds	r3, #16
 800c616:	4618      	mov	r0, r3
 800c618:	f001 f99c 	bl	800d954 <xTaskRemoveFromEventList>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d012      	beq.n	800c648 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c622:	4b0d      	ldr	r3, [pc, #52]	; (800c658 <xQueueGenericReset+0xcc>)
 800c624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	e009      	b.n	800c648 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3310      	adds	r3, #16
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff fef3 	bl	800c424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3324      	adds	r3, #36	; 0x24
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff feee 	bl	800c424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c648:	f002 f8b6 	bl	800e7b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c64c:	2301      	movs	r3, #1
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	e000ed04 	.word	0xe000ed04

0800c65c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08e      	sub	sp, #56	; 0x38
 800c660:	af02      	add	r7, sp, #8
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d109      	bne.n	800c684 <xQueueGenericCreateStatic+0x28>
 800c670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	62bb      	str	r3, [r7, #40]	; 0x28
 800c682:	e7fe      	b.n	800c682 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d109      	bne.n	800c69e <xQueueGenericCreateStatic+0x42>
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	627b      	str	r3, [r7, #36]	; 0x24
 800c69c:	e7fe      	b.n	800c69c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <xQueueGenericCreateStatic+0x4e>
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <xQueueGenericCreateStatic+0x52>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e000      	b.n	800c6b0 <xQueueGenericCreateStatic+0x54>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d109      	bne.n	800c6c8 <xQueueGenericCreateStatic+0x6c>
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	623b      	str	r3, [r7, #32]
 800c6c6:	e7fe      	b.n	800c6c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d102      	bne.n	800c6d4 <xQueueGenericCreateStatic+0x78>
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <xQueueGenericCreateStatic+0x7c>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e000      	b.n	800c6da <xQueueGenericCreateStatic+0x7e>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d109      	bne.n	800c6f2 <xQueueGenericCreateStatic+0x96>
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	61fb      	str	r3, [r7, #28]
 800c6f0:	e7fe      	b.n	800c6f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6f2:	2350      	movs	r3, #80	; 0x50
 800c6f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2b50      	cmp	r3, #80	; 0x50
 800c6fa:	d009      	beq.n	800c710 <xQueueGenericCreateStatic+0xb4>
 800c6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c700:	f383 8811 	msr	BASEPRI, r3
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	e7fe      	b.n	800c70e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c710:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00d      	beq.n	800c738 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c724:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	4613      	mov	r3, r2
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 f844 	bl	800c7c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3730      	adds	r7, #48	; 0x30
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c742:	b580      	push	{r7, lr}
 800c744:	b08a      	sub	sp, #40	; 0x28
 800c746:	af02      	add	r7, sp, #8
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	4613      	mov	r3, r2
 800c74e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d109      	bne.n	800c76a <xQueueGenericCreate+0x28>
 800c756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	e7fe      	b.n	800c768 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d102      	bne.n	800c776 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c770:	2300      	movs	r3, #0
 800c772:	61fb      	str	r3, [r7, #28]
 800c774:	e004      	b.n	800c780 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	fb02 f303 	mul.w	r3, r2, r3
 800c77e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	3350      	adds	r3, #80	; 0x50
 800c784:	4618      	mov	r0, r3
 800c786:	f002 f903 	bl	800e990 <pvPortMalloc>
 800c78a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d011      	beq.n	800c7b6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	3350      	adds	r3, #80	; 0x50
 800c79a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7a4:	79fa      	ldrb	r2, [r7, #7]
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	68b9      	ldr	r1, [r7, #8]
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 f805 	bl	800c7c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7b6:	69bb      	ldr	r3, [r7, #24]
	}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3720      	adds	r7, #32
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d103      	bne.n	800c7dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	e002      	b.n	800c7e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	69b8      	ldr	r0, [r7, #24]
 800c7f2:	f7ff fecb 	bl	800c58c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	78fa      	ldrb	r2, [r7, #3]
 800c7fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c7fe:	bf00      	nop
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
	...

0800c808 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08e      	sub	sp, #56	; 0x38
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c816:	2300      	movs	r3, #0
 800c818:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c820:	2b00      	cmp	r3, #0
 800c822:	d109      	bne.n	800c838 <xQueueGenericSend+0x30>
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	62bb      	str	r3, [r7, #40]	; 0x28
 800c836:	e7fe      	b.n	800c836 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d103      	bne.n	800c846 <xQueueGenericSend+0x3e>
 800c83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <xQueueGenericSend+0x42>
 800c846:	2301      	movs	r3, #1
 800c848:	e000      	b.n	800c84c <xQueueGenericSend+0x44>
 800c84a:	2300      	movs	r3, #0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d109      	bne.n	800c864 <xQueueGenericSend+0x5c>
 800c850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
 800c862:	e7fe      	b.n	800c862 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	2b02      	cmp	r3, #2
 800c868:	d103      	bne.n	800c872 <xQueueGenericSend+0x6a>
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d101      	bne.n	800c876 <xQueueGenericSend+0x6e>
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <xQueueGenericSend+0x70>
 800c876:	2300      	movs	r3, #0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d109      	bne.n	800c890 <xQueueGenericSend+0x88>
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	623b      	str	r3, [r7, #32]
 800c88e:	e7fe      	b.n	800c88e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c890:	f001 fa16 	bl	800dcc0 <xTaskGetSchedulerState>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <xQueueGenericSend+0x98>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <xQueueGenericSend+0x9c>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e000      	b.n	800c8a6 <xQueueGenericSend+0x9e>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d109      	bne.n	800c8be <xQueueGenericSend+0xb6>
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	e7fe      	b.n	800c8bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8be:	f001 ff4d 	bl	800e75c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d302      	bcc.n	800c8d4 <xQueueGenericSend+0xcc>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d129      	bne.n	800c928 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8da:	f000 fa7c 	bl	800cdd6 <prvCopyDataToQueue>
 800c8de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d010      	beq.n	800c90a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	3324      	adds	r3, #36	; 0x24
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f001 f831 	bl	800d954 <xTaskRemoveFromEventList>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d013      	beq.n	800c920 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c8f8:	4b3f      	ldr	r3, [pc, #252]	; (800c9f8 <xQueueGenericSend+0x1f0>)
 800c8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	e00a      	b.n	800c920 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d007      	beq.n	800c920 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c910:	4b39      	ldr	r3, [pc, #228]	; (800c9f8 <xQueueGenericSend+0x1f0>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c920:	f001 ff4a 	bl	800e7b8 <vPortExitCritical>
				return pdPASS;
 800c924:	2301      	movs	r3, #1
 800c926:	e063      	b.n	800c9f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d103      	bne.n	800c936 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c92e:	f001 ff43 	bl	800e7b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c932:	2300      	movs	r3, #0
 800c934:	e05c      	b.n	800c9f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d106      	bne.n	800c94a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c93c:	f107 0314 	add.w	r3, r7, #20
 800c940:	4618      	mov	r0, r3
 800c942:	f001 f869 	bl	800da18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c946:	2301      	movs	r3, #1
 800c948:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c94a:	f001 ff35 	bl	800e7b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c94e:	f000 fde5 	bl	800d51c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c952:	f001 ff03 	bl	800e75c <vPortEnterCritical>
 800c956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c95c:	b25b      	sxtb	r3, r3
 800c95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c962:	d103      	bne.n	800c96c <xQueueGenericSend+0x164>
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c972:	b25b      	sxtb	r3, r3
 800c974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c978:	d103      	bne.n	800c982 <xQueueGenericSend+0x17a>
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c982:	f001 ff19 	bl	800e7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c986:	1d3a      	adds	r2, r7, #4
 800c988:	f107 0314 	add.w	r3, r7, #20
 800c98c:	4611      	mov	r1, r2
 800c98e:	4618      	mov	r0, r3
 800c990:	f001 f858 	bl	800da44 <xTaskCheckForTimeOut>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d124      	bne.n	800c9e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c99a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c99c:	f000 fb13 	bl	800cfc6 <prvIsQueueFull>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d018      	beq.n	800c9d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	3310      	adds	r3, #16
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 ff82 	bl	800d8b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9b6:	f000 fa9e 	bl	800cef6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c9ba:	f000 fdbd 	bl	800d538 <xTaskResumeAll>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f47f af7c 	bne.w	800c8be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c9c6:	4b0c      	ldr	r3, [pc, #48]	; (800c9f8 <xQueueGenericSend+0x1f0>)
 800c9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	e772      	b.n	800c8be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c9d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9da:	f000 fa8c 	bl	800cef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9de:	f000 fdab 	bl	800d538 <xTaskResumeAll>
 800c9e2:	e76c      	b.n	800c8be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c9e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9e6:	f000 fa86 	bl	800cef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9ea:	f000 fda5 	bl	800d538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c9ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3738      	adds	r7, #56	; 0x38
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	e000ed04 	.word	0xe000ed04

0800c9fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08e      	sub	sp, #56	; 0x38
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
 800ca08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <xQueueGenericSendFromISR+0x2c>
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
 800ca26:	e7fe      	b.n	800ca26 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d103      	bne.n	800ca36 <xQueueGenericSendFromISR+0x3a>
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <xQueueGenericSendFromISR+0x3e>
 800ca36:	2301      	movs	r3, #1
 800ca38:	e000      	b.n	800ca3c <xQueueGenericSendFromISR+0x40>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d109      	bne.n	800ca54 <xQueueGenericSendFromISR+0x58>
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	623b      	str	r3, [r7, #32]
 800ca52:	e7fe      	b.n	800ca52 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d103      	bne.n	800ca62 <xQueueGenericSendFromISR+0x66>
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d101      	bne.n	800ca66 <xQueueGenericSendFromISR+0x6a>
 800ca62:	2301      	movs	r3, #1
 800ca64:	e000      	b.n	800ca68 <xQueueGenericSendFromISR+0x6c>
 800ca66:	2300      	movs	r3, #0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d109      	bne.n	800ca80 <xQueueGenericSendFromISR+0x84>
 800ca6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	61fb      	str	r3, [r7, #28]
 800ca7e:	e7fe      	b.n	800ca7e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca80:	f001 ff48 	bl	800e914 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ca84:	f3ef 8211 	mrs	r2, BASEPRI
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	61ba      	str	r2, [r7, #24]
 800ca9a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d302      	bcc.n	800cab2 <xQueueGenericSendFromISR+0xb6>
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b02      	cmp	r3, #2
 800cab0:	d12c      	bne.n	800cb0c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cabc:	683a      	ldr	r2, [r7, #0]
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cac2:	f000 f988 	bl	800cdd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cac6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800caca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cace:	d112      	bne.n	800caf6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d016      	beq.n	800cb06 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cada:	3324      	adds	r3, #36	; 0x24
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 ff39 	bl	800d954 <xTaskRemoveFromEventList>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00e      	beq.n	800cb06 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00b      	beq.n	800cb06 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2201      	movs	r2, #1
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	e007      	b.n	800cb06 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800caf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cafa:	3301      	adds	r3, #1
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	b25a      	sxtb	r2, r3
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb06:	2301      	movs	r3, #1
 800cb08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800cb0a:	e001      	b.n	800cb10 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3738      	adds	r7, #56	; 0x38
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b08c      	sub	sp, #48	; 0x30
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb30:	2300      	movs	r3, #0
 800cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <xQueueReceive+0x2e>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	623b      	str	r3, [r7, #32]
 800cb50:	e7fe      	b.n	800cb50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d103      	bne.n	800cb60 <xQueueReceive+0x3c>
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <xQueueReceive+0x40>
 800cb60:	2301      	movs	r3, #1
 800cb62:	e000      	b.n	800cb66 <xQueueReceive+0x42>
 800cb64:	2300      	movs	r3, #0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d109      	bne.n	800cb7e <xQueueReceive+0x5a>
 800cb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	e7fe      	b.n	800cb7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb7e:	f001 f89f 	bl	800dcc0 <xTaskGetSchedulerState>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <xQueueReceive+0x6a>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d101      	bne.n	800cb92 <xQueueReceive+0x6e>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e000      	b.n	800cb94 <xQueueReceive+0x70>
 800cb92:	2300      	movs	r3, #0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d109      	bne.n	800cbac <xQueueReceive+0x88>
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	61bb      	str	r3, [r7, #24]
 800cbaa:	e7fe      	b.n	800cbaa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbac:	f001 fdd6 	bl	800e75c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01f      	beq.n	800cbfc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbbc:	68b9      	ldr	r1, [r7, #8]
 800cbbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbc0:	f000 f973 	bl	800ceaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	1e5a      	subs	r2, r3, #1
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00f      	beq.n	800cbf4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd6:	3310      	adds	r3, #16
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 febb 	bl	800d954 <xTaskRemoveFromEventList>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d007      	beq.n	800cbf4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbe4:	4b3c      	ldr	r3, [pc, #240]	; (800ccd8 <xQueueReceive+0x1b4>)
 800cbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbf4:	f001 fde0 	bl	800e7b8 <vPortExitCritical>
				return pdPASS;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e069      	b.n	800ccd0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d103      	bne.n	800cc0a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc02:	f001 fdd9 	bl	800e7b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc06:	2300      	movs	r3, #0
 800cc08:	e062      	b.n	800ccd0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d106      	bne.n	800cc1e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc10:	f107 0310 	add.w	r3, r7, #16
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 feff 	bl	800da18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc1e:	f001 fdcb 	bl	800e7b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc22:	f000 fc7b 	bl	800d51c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc26:	f001 fd99 	bl	800e75c <vPortEnterCritical>
 800cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc30:	b25b      	sxtb	r3, r3
 800cc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc36:	d103      	bne.n	800cc40 <xQueueReceive+0x11c>
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4c:	d103      	bne.n	800cc56 <xQueueReceive+0x132>
 800cc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc56:	f001 fdaf 	bl	800e7b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc5a:	1d3a      	adds	r2, r7, #4
 800cc5c:	f107 0310 	add.w	r3, r7, #16
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 feee 	bl	800da44 <xTaskCheckForTimeOut>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d123      	bne.n	800ccb6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc70:	f000 f993 	bl	800cf9a <prvIsQueueEmpty>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d017      	beq.n	800ccaa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7c:	3324      	adds	r3, #36	; 0x24
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	4611      	mov	r1, r2
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 fe18 	bl	800d8b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc8a:	f000 f934 	bl	800cef6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc8e:	f000 fc53 	bl	800d538 <xTaskResumeAll>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d189      	bne.n	800cbac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800cc98:	4b0f      	ldr	r3, [pc, #60]	; (800ccd8 <xQueueReceive+0x1b4>)
 800cc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	e780      	b.n	800cbac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ccaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccac:	f000 f923 	bl	800cef6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccb0:	f000 fc42 	bl	800d538 <xTaskResumeAll>
 800ccb4:	e77a      	b.n	800cbac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ccb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccb8:	f000 f91d 	bl	800cef6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccbc:	f000 fc3c 	bl	800d538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccc2:	f000 f96a 	bl	800cf9a <prvIsQueueEmpty>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f43f af6f 	beq.w	800cbac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ccce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3730      	adds	r7, #48	; 0x30
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	e000ed04 	.word	0xe000ed04

0800ccdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08e      	sub	sp, #56	; 0x38
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d109      	bne.n	800cd06 <xQueueReceiveFromISR+0x2a>
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	623b      	str	r3, [r7, #32]
 800cd04:	e7fe      	b.n	800cd04 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d103      	bne.n	800cd14 <xQueueReceiveFromISR+0x38>
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d101      	bne.n	800cd18 <xQueueReceiveFromISR+0x3c>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e000      	b.n	800cd1a <xQueueReceiveFromISR+0x3e>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d109      	bne.n	800cd32 <xQueueReceiveFromISR+0x56>
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	61fb      	str	r3, [r7, #28]
 800cd30:	e7fe      	b.n	800cd30 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd32:	f001 fdef 	bl	800e914 <vPortValidateInterruptPriority>
	__asm volatile
 800cd36:	f3ef 8211 	mrs	r2, BASEPRI
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	61ba      	str	r2, [r7, #24]
 800cd4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cd4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d02f      	beq.n	800cdbe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd68:	68b9      	ldr	r1, [r7, #8]
 800cd6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd6c:	f000 f89d 	bl	800ceaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	1e5a      	subs	r2, r3, #1
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cd78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd80:	d112      	bne.n	800cda8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d016      	beq.n	800cdb8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	3310      	adds	r3, #16
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f000 fde0 	bl	800d954 <xTaskRemoveFromEventList>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00e      	beq.n	800cdb8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00b      	beq.n	800cdb8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	e007      	b.n	800cdb8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdac:	3301      	adds	r3, #1
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	b25a      	sxtb	r2, r3
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	637b      	str	r3, [r7, #52]	; 0x34
 800cdbc:	e001      	b.n	800cdc2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3738      	adds	r7, #56	; 0x38
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b086      	sub	sp, #24
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10d      	bne.n	800ce10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d14d      	bne.n	800ce98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 ff7b 	bl	800dcfc <xTaskPriorityDisinherit>
 800ce06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	609a      	str	r2, [r3, #8]
 800ce0e:	e043      	b.n	800ce98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d119      	bne.n	800ce4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6858      	ldr	r0, [r3, #4]
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	461a      	mov	r2, r3
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	f002 fac7 	bl	800f3b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	685a      	ldr	r2, [r3, #4]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2e:	441a      	add	r2, r3
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d32b      	bcc.n	800ce98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	605a      	str	r2, [r3, #4]
 800ce48:	e026      	b.n	800ce98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68d8      	ldr	r0, [r3, #12]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce52:	461a      	mov	r2, r3
 800ce54:	68b9      	ldr	r1, [r7, #8]
 800ce56:	f002 faad 	bl	800f3b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	68da      	ldr	r2, [r3, #12]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce62:	425b      	negs	r3, r3
 800ce64:	441a      	add	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	68da      	ldr	r2, [r3, #12]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d207      	bcs.n	800ce86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689a      	ldr	r2, [r3, #8]
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7e:	425b      	negs	r3, r3
 800ce80:	441a      	add	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d105      	bne.n	800ce98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cea0:	697b      	ldr	r3, [r7, #20]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3718      	adds	r7, #24
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d018      	beq.n	800ceee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	68da      	ldr	r2, [r3, #12]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec4:	441a      	add	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	68da      	ldr	r2, [r3, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d303      	bcc.n	800cede <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68d9      	ldr	r1, [r3, #12]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee6:	461a      	mov	r2, r3
 800cee8:	6838      	ldr	r0, [r7, #0]
 800ceea:	f002 fa63 	bl	800f3b4 <memcpy>
	}
}
 800ceee:	bf00      	nop
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cefe:	f001 fc2d 	bl	800e75c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf0a:	e011      	b.n	800cf30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d012      	beq.n	800cf3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3324      	adds	r3, #36	; 0x24
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fd1b 	bl	800d954 <xTaskRemoveFromEventList>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cf24:	f000 fdee 	bl	800db04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cf30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	dce9      	bgt.n	800cf0c <prvUnlockQueue+0x16>
 800cf38:	e000      	b.n	800cf3c <prvUnlockQueue+0x46>
					break;
 800cf3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	22ff      	movs	r2, #255	; 0xff
 800cf40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cf44:	f001 fc38 	bl	800e7b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cf48:	f001 fc08 	bl	800e75c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf54:	e011      	b.n	800cf7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d012      	beq.n	800cf84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	3310      	adds	r3, #16
 800cf62:	4618      	mov	r0, r3
 800cf64:	f000 fcf6 	bl	800d954 <xTaskRemoveFromEventList>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cf6e:	f000 fdc9 	bl	800db04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cf72:	7bbb      	ldrb	r3, [r7, #14]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cf7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	dce9      	bgt.n	800cf56 <prvUnlockQueue+0x60>
 800cf82:	e000      	b.n	800cf86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cf84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	22ff      	movs	r2, #255	; 0xff
 800cf8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cf8e:	f001 fc13 	bl	800e7b8 <vPortExitCritical>
}
 800cf92:	bf00      	nop
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfa2:	f001 fbdb 	bl	800e75c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d102      	bne.n	800cfb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	60fb      	str	r3, [r7, #12]
 800cfb2:	e001      	b.n	800cfb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfb8:	f001 fbfe 	bl	800e7b8 <vPortExitCritical>

	return xReturn;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfce:	f001 fbc5 	bl	800e75c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d102      	bne.n	800cfe4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	e001      	b.n	800cfe8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cfe8:	f001 fbe6 	bl	800e7b8 <vPortExitCritical>

	return xReturn;
 800cfec:	68fb      	ldr	r3, [r7, #12]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d002:	2300      	movs	r3, #0
 800d004:	60fb      	str	r3, [r7, #12]
 800d006:	e014      	b.n	800d032 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d008:	4a0e      	ldr	r2, [pc, #56]	; (800d044 <vQueueAddToRegistry+0x4c>)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10b      	bne.n	800d02c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d014:	490b      	ldr	r1, [pc, #44]	; (800d044 <vQueueAddToRegistry+0x4c>)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d01e:	4a09      	ldr	r2, [pc, #36]	; (800d044 <vQueueAddToRegistry+0x4c>)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	00db      	lsls	r3, r3, #3
 800d024:	4413      	add	r3, r2
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d02a:	e005      	b.n	800d038 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b07      	cmp	r3, #7
 800d036:	d9e7      	bls.n	800d008 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d038:	bf00      	nop
 800d03a:	3714      	adds	r7, #20
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr
 800d044:	20004e14 	.word	0x20004e14

0800d048 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d058:	f001 fb80 	bl	800e75c <vPortEnterCritical>
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d062:	b25b      	sxtb	r3, r3
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d068:	d103      	bne.n	800d072 <vQueueWaitForMessageRestricted+0x2a>
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d078:	b25b      	sxtb	r3, r3
 800d07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07e:	d103      	bne.n	800d088 <vQueueWaitForMessageRestricted+0x40>
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d088:	f001 fb96 	bl	800e7b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d090:	2b00      	cmp	r3, #0
 800d092:	d106      	bne.n	800d0a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	3324      	adds	r3, #36	; 0x24
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 fc2f 	bl	800d900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d0a2:	6978      	ldr	r0, [r7, #20]
 800d0a4:	f7ff ff27 	bl	800cef6 <prvUnlockQueue>
	}
 800d0a8:	bf00      	nop
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08e      	sub	sp, #56	; 0x38
 800d0b4:	af04      	add	r7, sp, #16
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d109      	bne.n	800d0d8 <xTaskCreateStatic+0x28>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	623b      	str	r3, [r7, #32]
 800d0d6:	e7fe      	b.n	800d0d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <xTaskCreateStatic+0x42>
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	61fb      	str	r3, [r7, #28]
 800d0f0:	e7fe      	b.n	800d0f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d0f2:	235c      	movs	r3, #92	; 0x5c
 800d0f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0fa:	d009      	beq.n	800d110 <xTaskCreateStatic+0x60>
 800d0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	61bb      	str	r3, [r7, #24]
 800d10e:	e7fe      	b.n	800d10e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d110:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d114:	2b00      	cmp	r3, #0
 800d116:	d01e      	beq.n	800d156 <xTaskCreateStatic+0xa6>
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d01b      	beq.n	800d156 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d120:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d126:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	2202      	movs	r2, #2
 800d12c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d130:	2300      	movs	r3, #0
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	9302      	str	r3, [sp, #8]
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	68b9      	ldr	r1, [r7, #8]
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f000 f850 	bl	800d1ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d14e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d150:	f000 f8dc 	bl	800d30c <prvAddNewTaskToReadyList>
 800d154:	e001      	b.n	800d15a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d15a:	697b      	ldr	r3, [r7, #20]
	}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3728      	adds	r7, #40	; 0x28
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08c      	sub	sp, #48	; 0x30
 800d168:	af04      	add	r7, sp, #16
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	603b      	str	r3, [r7, #0]
 800d170:	4613      	mov	r3, r2
 800d172:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d174:	88fb      	ldrh	r3, [r7, #6]
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4618      	mov	r0, r3
 800d17a:	f001 fc09 	bl	800e990 <pvPortMalloc>
 800d17e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00e      	beq.n	800d1a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d186:	205c      	movs	r0, #92	; 0x5c
 800d188:	f001 fc02 	bl	800e990 <pvPortMalloc>
 800d18c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d003      	beq.n	800d19c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	631a      	str	r2, [r3, #48]	; 0x30
 800d19a:	e005      	b.n	800d1a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d19c:	6978      	ldr	r0, [r7, #20]
 800d19e:	f001 fcb9 	bl	800eb14 <vPortFree>
 800d1a2:	e001      	b.n	800d1a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d017      	beq.n	800d1de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1b6:	88fa      	ldrh	r2, [r7, #6]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	9303      	str	r3, [sp, #12]
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	9302      	str	r3, [sp, #8]
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	68b9      	ldr	r1, [r7, #8]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f000 f80e 	bl	800d1ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1d2:	69f8      	ldr	r0, [r7, #28]
 800d1d4:	f000 f89a 	bl	800d30c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	61bb      	str	r3, [r7, #24]
 800d1dc:	e002      	b.n	800d1e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1de:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1e4:	69bb      	ldr	r3, [r7, #24]
	}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b088      	sub	sp, #32
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	461a      	mov	r2, r3
 800d206:	21a5      	movs	r1, #165	; 0xa5
 800d208:	f002 f8df 	bl	800f3ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d216:	3b01      	subs	r3, #1
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	f023 0307 	bic.w	r3, r3, #7
 800d224:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	f003 0307 	and.w	r3, r3, #7
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d009      	beq.n	800d244 <prvInitialiseNewTask+0x56>
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	617b      	str	r3, [r7, #20]
 800d242:	e7fe      	b.n	800d242 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d01f      	beq.n	800d28a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d24a:	2300      	movs	r3, #0
 800d24c:	61fb      	str	r3, [r7, #28]
 800d24e:	e012      	b.n	800d276 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	4413      	add	r3, r2
 800d256:	7819      	ldrb	r1, [r3, #0]
 800d258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	4413      	add	r3, r2
 800d25e:	3334      	adds	r3, #52	; 0x34
 800d260:	460a      	mov	r2, r1
 800d262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	4413      	add	r3, r2
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d006      	beq.n	800d27e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	3301      	adds	r3, #1
 800d274:	61fb      	str	r3, [r7, #28]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	2b0f      	cmp	r3, #15
 800d27a:	d9e9      	bls.n	800d250 <prvInitialiseNewTask+0x62>
 800d27c:	e000      	b.n	800d280 <prvInitialiseNewTask+0x92>
			{
				break;
 800d27e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d288:	e003      	b.n	800d292 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d294:	2b37      	cmp	r3, #55	; 0x37
 800d296:	d901      	bls.n	800d29c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d298:	2337      	movs	r3, #55	; 0x37
 800d29a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff f8d6 	bl	800c464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ba:	3318      	adds	r3, #24
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff f8d1 	bl	800c464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2da:	2200      	movs	r2, #0
 800d2dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	68f9      	ldr	r1, [r7, #12]
 800d2ea:	69b8      	ldr	r0, [r7, #24]
 800d2ec:	f001 f90c 	bl	800e508 <pxPortInitialiseStack>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d002      	beq.n	800d302 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d302:	bf00      	nop
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d314:	f001 fa22 	bl	800e75c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d318:	4b2d      	ldr	r3, [pc, #180]	; (800d3d0 <prvAddNewTaskToReadyList+0xc4>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3301      	adds	r3, #1
 800d31e:	4a2c      	ldr	r2, [pc, #176]	; (800d3d0 <prvAddNewTaskToReadyList+0xc4>)
 800d320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d322:	4b2c      	ldr	r3, [pc, #176]	; (800d3d4 <prvAddNewTaskToReadyList+0xc8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d109      	bne.n	800d33e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d32a:	4a2a      	ldr	r2, [pc, #168]	; (800d3d4 <prvAddNewTaskToReadyList+0xc8>)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d330:	4b27      	ldr	r3, [pc, #156]	; (800d3d0 <prvAddNewTaskToReadyList+0xc4>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d110      	bne.n	800d35a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d338:	f000 fc08 	bl	800db4c <prvInitialiseTaskLists>
 800d33c:	e00d      	b.n	800d35a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d33e:	4b26      	ldr	r3, [pc, #152]	; (800d3d8 <prvAddNewTaskToReadyList+0xcc>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d109      	bne.n	800d35a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d346:	4b23      	ldr	r3, [pc, #140]	; (800d3d4 <prvAddNewTaskToReadyList+0xc8>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	429a      	cmp	r2, r3
 800d352:	d802      	bhi.n	800d35a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d354:	4a1f      	ldr	r2, [pc, #124]	; (800d3d4 <prvAddNewTaskToReadyList+0xc8>)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d35a:	4b20      	ldr	r3, [pc, #128]	; (800d3dc <prvAddNewTaskToReadyList+0xd0>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	3301      	adds	r3, #1
 800d360:	4a1e      	ldr	r2, [pc, #120]	; (800d3dc <prvAddNewTaskToReadyList+0xd0>)
 800d362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d364:	4b1d      	ldr	r3, [pc, #116]	; (800d3dc <prvAddNewTaskToReadyList+0xd0>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d370:	4b1b      	ldr	r3, [pc, #108]	; (800d3e0 <prvAddNewTaskToReadyList+0xd4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d903      	bls.n	800d380 <prvAddNewTaskToReadyList+0x74>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	4a18      	ldr	r2, [pc, #96]	; (800d3e0 <prvAddNewTaskToReadyList+0xd4>)
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4a15      	ldr	r2, [pc, #84]	; (800d3e4 <prvAddNewTaskToReadyList+0xd8>)
 800d38e:	441a      	add	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3304      	adds	r3, #4
 800d394:	4619      	mov	r1, r3
 800d396:	4610      	mov	r0, r2
 800d398:	f7ff f871 	bl	800c47e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d39c:	f001 fa0c 	bl	800e7b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d3a0:	4b0d      	ldr	r3, [pc, #52]	; (800d3d8 <prvAddNewTaskToReadyList+0xcc>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00e      	beq.n	800d3c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3a8:	4b0a      	ldr	r3, [pc, #40]	; (800d3d4 <prvAddNewTaskToReadyList+0xc8>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d207      	bcs.n	800d3c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <prvAddNewTaskToReadyList+0xdc>)
 800d3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	20000c8c 	.word	0x20000c8c
 800d3d4:	200007b8 	.word	0x200007b8
 800d3d8:	20000c98 	.word	0x20000c98
 800d3dc:	20000ca8 	.word	0x20000ca8
 800d3e0:	20000c94 	.word	0x20000c94
 800d3e4:	200007bc 	.word	0x200007bc
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d016      	beq.n	800d42c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3fe:	4b13      	ldr	r3, [pc, #76]	; (800d44c <vTaskDelay+0x60>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d009      	beq.n	800d41a <vTaskDelay+0x2e>
 800d406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	60bb      	str	r3, [r7, #8]
 800d418:	e7fe      	b.n	800d418 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d41a:	f000 f87f 	bl	800d51c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d41e:	2100      	movs	r1, #0
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 fcd7 	bl	800ddd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d426:	f000 f887 	bl	800d538 <xTaskResumeAll>
 800d42a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d107      	bne.n	800d442 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d432:	4b07      	ldr	r3, [pc, #28]	; (800d450 <vTaskDelay+0x64>)
 800d434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d442:	bf00      	nop
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20000cb4 	.word	0x20000cb4
 800d450:	e000ed04 	.word	0xe000ed04

0800d454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08a      	sub	sp, #40	; 0x28
 800d458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d462:	463a      	mov	r2, r7
 800d464:	1d39      	adds	r1, r7, #4
 800d466:	f107 0308 	add.w	r3, r7, #8
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe ffa6 	bl	800c3bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	9202      	str	r2, [sp, #8]
 800d478:	9301      	str	r3, [sp, #4]
 800d47a:	2300      	movs	r3, #0
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	2300      	movs	r3, #0
 800d480:	460a      	mov	r2, r1
 800d482:	4920      	ldr	r1, [pc, #128]	; (800d504 <vTaskStartScheduler+0xb0>)
 800d484:	4820      	ldr	r0, [pc, #128]	; (800d508 <vTaskStartScheduler+0xb4>)
 800d486:	f7ff fe13 	bl	800d0b0 <xTaskCreateStatic>
 800d48a:	4602      	mov	r2, r0
 800d48c:	4b1f      	ldr	r3, [pc, #124]	; (800d50c <vTaskStartScheduler+0xb8>)
 800d48e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d490:	4b1e      	ldr	r3, [pc, #120]	; (800d50c <vTaskStartScheduler+0xb8>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d498:	2301      	movs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	e001      	b.n	800d4a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d102      	bne.n	800d4ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4a8:	f000 fce8 	bl	800de7c <xTimerCreateTimerTask>
 800d4ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d115      	bne.n	800d4e0 <vTaskStartScheduler+0x8c>
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4c6:	4b12      	ldr	r3, [pc, #72]	; (800d510 <vTaskStartScheduler+0xbc>)
 800d4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4ce:	4b11      	ldr	r3, [pc, #68]	; (800d514 <vTaskStartScheduler+0xc0>)
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4d4:	4b10      	ldr	r3, [pc, #64]	; (800d518 <vTaskStartScheduler+0xc4>)
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d4da:	f001 f8a1 	bl	800e620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d4de:	e00d      	b.n	800d4fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e6:	d109      	bne.n	800d4fc <vTaskStartScheduler+0xa8>
 800d4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	60fb      	str	r3, [r7, #12]
 800d4fa:	e7fe      	b.n	800d4fa <vTaskStartScheduler+0xa6>
}
 800d4fc:	bf00      	nop
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	0800f58c 	.word	0x0800f58c
 800d508:	0800db1d 	.word	0x0800db1d
 800d50c:	20000cb0 	.word	0x20000cb0
 800d510:	20000cac 	.word	0x20000cac
 800d514:	20000c98 	.word	0x20000c98
 800d518:	20000c90 	.word	0x20000c90

0800d51c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d520:	4b04      	ldr	r3, [pc, #16]	; (800d534 <vTaskSuspendAll+0x18>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3301      	adds	r3, #1
 800d526:	4a03      	ldr	r2, [pc, #12]	; (800d534 <vTaskSuspendAll+0x18>)
 800d528:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d52a:	bf00      	nop
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	20000cb4 	.word	0x20000cb4

0800d538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d542:	2300      	movs	r3, #0
 800d544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d546:	4b41      	ldr	r3, [pc, #260]	; (800d64c <xTaskResumeAll+0x114>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d109      	bne.n	800d562 <xTaskResumeAll+0x2a>
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	603b      	str	r3, [r7, #0]
 800d560:	e7fe      	b.n	800d560 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d562:	f001 f8fb 	bl	800e75c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d566:	4b39      	ldr	r3, [pc, #228]	; (800d64c <xTaskResumeAll+0x114>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3b01      	subs	r3, #1
 800d56c:	4a37      	ldr	r2, [pc, #220]	; (800d64c <xTaskResumeAll+0x114>)
 800d56e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d570:	4b36      	ldr	r3, [pc, #216]	; (800d64c <xTaskResumeAll+0x114>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d162      	bne.n	800d63e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d578:	4b35      	ldr	r3, [pc, #212]	; (800d650 <xTaskResumeAll+0x118>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d05e      	beq.n	800d63e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d580:	e02f      	b.n	800d5e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d582:	4b34      	ldr	r3, [pc, #208]	; (800d654 <xTaskResumeAll+0x11c>)
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	3318      	adds	r3, #24
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fe ffd2 	bl	800c538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3304      	adds	r3, #4
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe ffcd 	bl	800c538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a2:	4b2d      	ldr	r3, [pc, #180]	; (800d658 <xTaskResumeAll+0x120>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d903      	bls.n	800d5b2 <xTaskResumeAll+0x7a>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ae:	4a2a      	ldr	r2, [pc, #168]	; (800d658 <xTaskResumeAll+0x120>)
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	4a27      	ldr	r2, [pc, #156]	; (800d65c <xTaskResumeAll+0x124>)
 800d5c0:	441a      	add	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	f7fe ff58 	bl	800c47e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d2:	4b23      	ldr	r3, [pc, #140]	; (800d660 <xTaskResumeAll+0x128>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d302      	bcc.n	800d5e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d5dc:	4b21      	ldr	r3, [pc, #132]	; (800d664 <xTaskResumeAll+0x12c>)
 800d5de:	2201      	movs	r2, #1
 800d5e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5e2:	4b1c      	ldr	r3, [pc, #112]	; (800d654 <xTaskResumeAll+0x11c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1cb      	bne.n	800d582 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d5f0:	f000 fb46 	bl	800dc80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d5f4:	4b1c      	ldr	r3, [pc, #112]	; (800d668 <xTaskResumeAll+0x130>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d010      	beq.n	800d622 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d600:	f000 f846 	bl	800d690 <xTaskIncrementTick>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d60a:	4b16      	ldr	r3, [pc, #88]	; (800d664 <xTaskResumeAll+0x12c>)
 800d60c:	2201      	movs	r2, #1
 800d60e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3b01      	subs	r3, #1
 800d614:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1f1      	bne.n	800d600 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d61c:	4b12      	ldr	r3, [pc, #72]	; (800d668 <xTaskResumeAll+0x130>)
 800d61e:	2200      	movs	r2, #0
 800d620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d622:	4b10      	ldr	r3, [pc, #64]	; (800d664 <xTaskResumeAll+0x12c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d009      	beq.n	800d63e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d62a:	2301      	movs	r3, #1
 800d62c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d62e:	4b0f      	ldr	r3, [pc, #60]	; (800d66c <xTaskResumeAll+0x134>)
 800d630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d63e:	f001 f8bb 	bl	800e7b8 <vPortExitCritical>

	return xAlreadyYielded;
 800d642:	68bb      	ldr	r3, [r7, #8]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20000cb4 	.word	0x20000cb4
 800d650:	20000c8c 	.word	0x20000c8c
 800d654:	20000c4c 	.word	0x20000c4c
 800d658:	20000c94 	.word	0x20000c94
 800d65c:	200007bc 	.word	0x200007bc
 800d660:	200007b8 	.word	0x200007b8
 800d664:	20000ca0 	.word	0x20000ca0
 800d668:	20000c9c 	.word	0x20000c9c
 800d66c:	e000ed04 	.word	0xe000ed04

0800d670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <xTaskGetTickCount+0x1c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d67c:	687b      	ldr	r3, [r7, #4]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	20000c90 	.word	0x20000c90

0800d690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d696:	2300      	movs	r3, #0
 800d698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d69a:	4b4e      	ldr	r3, [pc, #312]	; (800d7d4 <xTaskIncrementTick+0x144>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f040 8088 	bne.w	800d7b4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d6a4:	4b4c      	ldr	r3, [pc, #304]	; (800d7d8 <xTaskIncrementTick+0x148>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d6ac:	4a4a      	ldr	r2, [pc, #296]	; (800d7d8 <xTaskIncrementTick+0x148>)
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d11f      	bne.n	800d6f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d6b8:	4b48      	ldr	r3, [pc, #288]	; (800d7dc <xTaskIncrementTick+0x14c>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d009      	beq.n	800d6d6 <xTaskIncrementTick+0x46>
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	e7fe      	b.n	800d6d4 <xTaskIncrementTick+0x44>
 800d6d6:	4b41      	ldr	r3, [pc, #260]	; (800d7dc <xTaskIncrementTick+0x14c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	4b40      	ldr	r3, [pc, #256]	; (800d7e0 <xTaskIncrementTick+0x150>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a3e      	ldr	r2, [pc, #248]	; (800d7dc <xTaskIncrementTick+0x14c>)
 800d6e2:	6013      	str	r3, [r2, #0]
 800d6e4:	4a3e      	ldr	r2, [pc, #248]	; (800d7e0 <xTaskIncrementTick+0x150>)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	4b3e      	ldr	r3, [pc, #248]	; (800d7e4 <xTaskIncrementTick+0x154>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	4a3c      	ldr	r2, [pc, #240]	; (800d7e4 <xTaskIncrementTick+0x154>)
 800d6f2:	6013      	str	r3, [r2, #0]
 800d6f4:	f000 fac4 	bl	800dc80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6f8:	4b3b      	ldr	r3, [pc, #236]	; (800d7e8 <xTaskIncrementTick+0x158>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d349      	bcc.n	800d796 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d702:	4b36      	ldr	r3, [pc, #216]	; (800d7dc <xTaskIncrementTick+0x14c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d104      	bne.n	800d716 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d70c:	4b36      	ldr	r3, [pc, #216]	; (800d7e8 <xTaskIncrementTick+0x158>)
 800d70e:	f04f 32ff 	mov.w	r2, #4294967295
 800d712:	601a      	str	r2, [r3, #0]
					break;
 800d714:	e03f      	b.n	800d796 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d716:	4b31      	ldr	r3, [pc, #196]	; (800d7dc <xTaskIncrementTick+0x14c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d203      	bcs.n	800d736 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d72e:	4a2e      	ldr	r2, [pc, #184]	; (800d7e8 <xTaskIncrementTick+0x158>)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d734:	e02f      	b.n	800d796 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	3304      	adds	r3, #4
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fefc 	bl	800c538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d744:	2b00      	cmp	r3, #0
 800d746:	d004      	beq.n	800d752 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3318      	adds	r3, #24
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fef3 	bl	800c538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d756:	4b25      	ldr	r3, [pc, #148]	; (800d7ec <xTaskIncrementTick+0x15c>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d903      	bls.n	800d766 <xTaskIncrementTick+0xd6>
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d762:	4a22      	ldr	r2, [pc, #136]	; (800d7ec <xTaskIncrementTick+0x15c>)
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d76a:	4613      	mov	r3, r2
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4413      	add	r3, r2
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4a1f      	ldr	r2, [pc, #124]	; (800d7f0 <xTaskIncrementTick+0x160>)
 800d774:	441a      	add	r2, r3
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	3304      	adds	r3, #4
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7fe fe7e 	bl	800c47e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d786:	4b1b      	ldr	r3, [pc, #108]	; (800d7f4 <xTaskIncrementTick+0x164>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d3b8      	bcc.n	800d702 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d790:	2301      	movs	r3, #1
 800d792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d794:	e7b5      	b.n	800d702 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d796:	4b17      	ldr	r3, [pc, #92]	; (800d7f4 <xTaskIncrementTick+0x164>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79c:	4914      	ldr	r1, [pc, #80]	; (800d7f0 <xTaskIncrementTick+0x160>)
 800d79e:	4613      	mov	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	440b      	add	r3, r1
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d907      	bls.n	800d7be <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	617b      	str	r3, [r7, #20]
 800d7b2:	e004      	b.n	800d7be <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d7b4:	4b10      	ldr	r3, [pc, #64]	; (800d7f8 <xTaskIncrementTick+0x168>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	4a0f      	ldr	r2, [pc, #60]	; (800d7f8 <xTaskIncrementTick+0x168>)
 800d7bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d7be:	4b0f      	ldr	r3, [pc, #60]	; (800d7fc <xTaskIncrementTick+0x16c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d001      	beq.n	800d7ca <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d7ca:	697b      	ldr	r3, [r7, #20]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20000cb4 	.word	0x20000cb4
 800d7d8:	20000c90 	.word	0x20000c90
 800d7dc:	20000c44 	.word	0x20000c44
 800d7e0:	20000c48 	.word	0x20000c48
 800d7e4:	20000ca4 	.word	0x20000ca4
 800d7e8:	20000cac 	.word	0x20000cac
 800d7ec:	20000c94 	.word	0x20000c94
 800d7f0:	200007bc 	.word	0x200007bc
 800d7f4:	200007b8 	.word	0x200007b8
 800d7f8:	20000c9c 	.word	0x20000c9c
 800d7fc:	20000ca0 	.word	0x20000ca0

0800d800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d806:	4b27      	ldr	r3, [pc, #156]	; (800d8a4 <vTaskSwitchContext+0xa4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d80e:	4b26      	ldr	r3, [pc, #152]	; (800d8a8 <vTaskSwitchContext+0xa8>)
 800d810:	2201      	movs	r2, #1
 800d812:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d814:	e040      	b.n	800d898 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d816:	4b24      	ldr	r3, [pc, #144]	; (800d8a8 <vTaskSwitchContext+0xa8>)
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d81c:	4b23      	ldr	r3, [pc, #140]	; (800d8ac <vTaskSwitchContext+0xac>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	60fb      	str	r3, [r7, #12]
 800d822:	e00f      	b.n	800d844 <vTaskSwitchContext+0x44>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d109      	bne.n	800d83e <vTaskSwitchContext+0x3e>
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	607b      	str	r3, [r7, #4]
 800d83c:	e7fe      	b.n	800d83c <vTaskSwitchContext+0x3c>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3b01      	subs	r3, #1
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	491a      	ldr	r1, [pc, #104]	; (800d8b0 <vTaskSwitchContext+0xb0>)
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	4613      	mov	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	440b      	add	r3, r1
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0e5      	beq.n	800d824 <vTaskSwitchContext+0x24>
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	4613      	mov	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4413      	add	r3, r2
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4a13      	ldr	r2, [pc, #76]	; (800d8b0 <vTaskSwitchContext+0xb0>)
 800d864:	4413      	add	r3, r2
 800d866:	60bb      	str	r3, [r7, #8]
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	685a      	ldr	r2, [r3, #4]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	605a      	str	r2, [r3, #4]
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	3308      	adds	r3, #8
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d104      	bne.n	800d888 <vTaskSwitchContext+0x88>
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	605a      	str	r2, [r3, #4]
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	4a09      	ldr	r2, [pc, #36]	; (800d8b4 <vTaskSwitchContext+0xb4>)
 800d890:	6013      	str	r3, [r2, #0]
 800d892:	4a06      	ldr	r2, [pc, #24]	; (800d8ac <vTaskSwitchContext+0xac>)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6013      	str	r3, [r2, #0]
}
 800d898:	bf00      	nop
 800d89a:	3714      	adds	r7, #20
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	20000cb4 	.word	0x20000cb4
 800d8a8:	20000ca0 	.word	0x20000ca0
 800d8ac:	20000c94 	.word	0x20000c94
 800d8b0:	200007bc 	.word	0x200007bc
 800d8b4:	200007b8 	.word	0x200007b8

0800d8b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d109      	bne.n	800d8dc <vTaskPlaceOnEventList+0x24>
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	e7fe      	b.n	800d8da <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8dc:	4b07      	ldr	r3, [pc, #28]	; (800d8fc <vTaskPlaceOnEventList+0x44>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3318      	adds	r3, #24
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f7fe fdee 	bl	800c4c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8ea:	2101      	movs	r1, #1
 800d8ec:	6838      	ldr	r0, [r7, #0]
 800d8ee:	f000 fa71 	bl	800ddd4 <prvAddCurrentTaskToDelayedList>
}
 800d8f2:	bf00      	nop
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	200007b8 	.word	0x200007b8

0800d900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d109      	bne.n	800d926 <vTaskPlaceOnEventListRestricted+0x26>
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	617b      	str	r3, [r7, #20]
 800d924:	e7fe      	b.n	800d924 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d926:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <vTaskPlaceOnEventListRestricted+0x50>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	3318      	adds	r3, #24
 800d92c:	4619      	mov	r1, r3
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7fe fda5 	bl	800c47e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d93a:	f04f 33ff 	mov.w	r3, #4294967295
 800d93e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	68b8      	ldr	r0, [r7, #8]
 800d944:	f000 fa46 	bl	800ddd4 <prvAddCurrentTaskToDelayedList>
	}
 800d948:	bf00      	nop
 800d94a:	3718      	adds	r7, #24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	200007b8 	.word	0x200007b8

0800d954 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d109      	bne.n	800d97e <xTaskRemoveFromEventList+0x2a>
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	e7fe      	b.n	800d97c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	3318      	adds	r3, #24
 800d982:	4618      	mov	r0, r3
 800d984:	f7fe fdd8 	bl	800c538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d988:	4b1d      	ldr	r3, [pc, #116]	; (800da00 <xTaskRemoveFromEventList+0xac>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d11d      	bne.n	800d9cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	3304      	adds	r3, #4
 800d994:	4618      	mov	r0, r3
 800d996:	f7fe fdcf 	bl	800c538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99e:	4b19      	ldr	r3, [pc, #100]	; (800da04 <xTaskRemoveFromEventList+0xb0>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d903      	bls.n	800d9ae <xTaskRemoveFromEventList+0x5a>
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9aa:	4a16      	ldr	r2, [pc, #88]	; (800da04 <xTaskRemoveFromEventList+0xb0>)
 800d9ac:	6013      	str	r3, [r2, #0]
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	4413      	add	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4a13      	ldr	r2, [pc, #76]	; (800da08 <xTaskRemoveFromEventList+0xb4>)
 800d9bc:	441a      	add	r2, r3
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7fe fd5a 	bl	800c47e <vListInsertEnd>
 800d9ca:	e005      	b.n	800d9d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	3318      	adds	r3, #24
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	480e      	ldr	r0, [pc, #56]	; (800da0c <xTaskRemoveFromEventList+0xb8>)
 800d9d4:	f7fe fd53 	bl	800c47e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <xTaskRemoveFromEventList+0xbc>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d905      	bls.n	800d9f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9ea:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <xTaskRemoveFromEventList+0xc0>)
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	e001      	b.n	800d9f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d9f6:	697b      	ldr	r3, [r7, #20]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	20000cb4 	.word	0x20000cb4
 800da04:	20000c94 	.word	0x20000c94
 800da08:	200007bc 	.word	0x200007bc
 800da0c:	20000c4c 	.word	0x20000c4c
 800da10:	200007b8 	.word	0x200007b8
 800da14:	20000ca0 	.word	0x20000ca0

0800da18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da20:	4b06      	ldr	r3, [pc, #24]	; (800da3c <vTaskInternalSetTimeOutState+0x24>)
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da28:	4b05      	ldr	r3, [pc, #20]	; (800da40 <vTaskInternalSetTimeOutState+0x28>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	605a      	str	r2, [r3, #4]
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	20000ca4 	.word	0x20000ca4
 800da40:	20000c90 	.word	0x20000c90

0800da44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <xTaskCheckForTimeOut+0x24>
 800da54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	613b      	str	r3, [r7, #16]
 800da66:	e7fe      	b.n	800da66 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <xTaskCheckForTimeOut+0x3e>
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	e7fe      	b.n	800da80 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800da82:	f000 fe6b 	bl	800e75c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da86:	4b1d      	ldr	r3, [pc, #116]	; (800dafc <xTaskCheckForTimeOut+0xb8>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9e:	d102      	bne.n	800daa6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800daa0:	2300      	movs	r3, #0
 800daa2:	61fb      	str	r3, [r7, #28]
 800daa4:	e023      	b.n	800daee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	4b15      	ldr	r3, [pc, #84]	; (800db00 <xTaskCheckForTimeOut+0xbc>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d007      	beq.n	800dac2 <xTaskCheckForTimeOut+0x7e>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d302      	bcc.n	800dac2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dabc:	2301      	movs	r3, #1
 800dabe:	61fb      	str	r3, [r7, #28]
 800dac0:	e015      	b.n	800daee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d20b      	bcs.n	800dae4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	1ad2      	subs	r2, r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff ff9d 	bl	800da18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dade:	2300      	movs	r3, #0
 800dae0:	61fb      	str	r3, [r7, #28]
 800dae2:	e004      	b.n	800daee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800daea:	2301      	movs	r3, #1
 800daec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800daee:	f000 fe63 	bl	800e7b8 <vPortExitCritical>

	return xReturn;
 800daf2:	69fb      	ldr	r3, [r7, #28]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3720      	adds	r7, #32
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	20000c90 	.word	0x20000c90
 800db00:	20000ca4 	.word	0x20000ca4

0800db04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db04:	b480      	push	{r7}
 800db06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800db08:	4b03      	ldr	r3, [pc, #12]	; (800db18 <vTaskMissedYield+0x14>)
 800db0a:	2201      	movs	r2, #1
 800db0c:	601a      	str	r2, [r3, #0]
}
 800db0e:	bf00      	nop
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	20000ca0 	.word	0x20000ca0

0800db1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800db24:	f000 f852 	bl	800dbcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db28:	4b06      	ldr	r3, [pc, #24]	; (800db44 <prvIdleTask+0x28>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d9f9      	bls.n	800db24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800db30:	4b05      	ldr	r3, [pc, #20]	; (800db48 <prvIdleTask+0x2c>)
 800db32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800db40:	e7f0      	b.n	800db24 <prvIdleTask+0x8>
 800db42:	bf00      	nop
 800db44:	200007bc 	.word	0x200007bc
 800db48:	e000ed04 	.word	0xe000ed04

0800db4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db52:	2300      	movs	r3, #0
 800db54:	607b      	str	r3, [r7, #4]
 800db56:	e00c      	b.n	800db72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	4613      	mov	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4a12      	ldr	r2, [pc, #72]	; (800dbac <prvInitialiseTaskLists+0x60>)
 800db64:	4413      	add	r3, r2
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fc5c 	bl	800c424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	3301      	adds	r3, #1
 800db70:	607b      	str	r3, [r7, #4]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b37      	cmp	r3, #55	; 0x37
 800db76:	d9ef      	bls.n	800db58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db78:	480d      	ldr	r0, [pc, #52]	; (800dbb0 <prvInitialiseTaskLists+0x64>)
 800db7a:	f7fe fc53 	bl	800c424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db7e:	480d      	ldr	r0, [pc, #52]	; (800dbb4 <prvInitialiseTaskLists+0x68>)
 800db80:	f7fe fc50 	bl	800c424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db84:	480c      	ldr	r0, [pc, #48]	; (800dbb8 <prvInitialiseTaskLists+0x6c>)
 800db86:	f7fe fc4d 	bl	800c424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db8a:	480c      	ldr	r0, [pc, #48]	; (800dbbc <prvInitialiseTaskLists+0x70>)
 800db8c:	f7fe fc4a 	bl	800c424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db90:	480b      	ldr	r0, [pc, #44]	; (800dbc0 <prvInitialiseTaskLists+0x74>)
 800db92:	f7fe fc47 	bl	800c424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db96:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <prvInitialiseTaskLists+0x78>)
 800db98:	4a05      	ldr	r2, [pc, #20]	; (800dbb0 <prvInitialiseTaskLists+0x64>)
 800db9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db9c:	4b0a      	ldr	r3, [pc, #40]	; (800dbc8 <prvInitialiseTaskLists+0x7c>)
 800db9e:	4a05      	ldr	r2, [pc, #20]	; (800dbb4 <prvInitialiseTaskLists+0x68>)
 800dba0:	601a      	str	r2, [r3, #0]
}
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	200007bc 	.word	0x200007bc
 800dbb0:	20000c1c 	.word	0x20000c1c
 800dbb4:	20000c30 	.word	0x20000c30
 800dbb8:	20000c4c 	.word	0x20000c4c
 800dbbc:	20000c60 	.word	0x20000c60
 800dbc0:	20000c78 	.word	0x20000c78
 800dbc4:	20000c44 	.word	0x20000c44
 800dbc8:	20000c48 	.word	0x20000c48

0800dbcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbd2:	e019      	b.n	800dc08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dbd4:	f000 fdc2 	bl	800e75c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd8:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <prvCheckTasksWaitingTermination+0x4c>)
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe fca7 	bl	800c538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbea:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <prvCheckTasksWaitingTermination+0x50>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	4a0a      	ldr	r2, [pc, #40]	; (800dc1c <prvCheckTasksWaitingTermination+0x50>)
 800dbf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	; (800dc20 <prvCheckTasksWaitingTermination+0x54>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	4a09      	ldr	r2, [pc, #36]	; (800dc20 <prvCheckTasksWaitingTermination+0x54>)
 800dbfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dbfe:	f000 fddb 	bl	800e7b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f80e 	bl	800dc24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <prvCheckTasksWaitingTermination+0x54>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1e1      	bne.n	800dbd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	20000c60 	.word	0x20000c60
 800dc1c:	20000c8c 	.word	0x20000c8c
 800dc20:	20000c74 	.word	0x20000c74

0800dc24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d108      	bne.n	800dc48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 ff6a 	bl	800eb14 <vPortFree>
				vPortFree( pxTCB );
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 ff67 	bl	800eb14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc46:	e017      	b.n	800dc78 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d103      	bne.n	800dc5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 ff5e 	bl	800eb14 <vPortFree>
	}
 800dc58:	e00e      	b.n	800dc78 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d009      	beq.n	800dc78 <prvDeleteTCB+0x54>
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	60fb      	str	r3, [r7, #12]
 800dc76:	e7fe      	b.n	800dc76 <prvDeleteTCB+0x52>
	}
 800dc78:	bf00      	nop
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc86:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <prvResetNextTaskUnblockTime+0x38>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d104      	bne.n	800dc9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc90:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <prvResetNextTaskUnblockTime+0x3c>)
 800dc92:	f04f 32ff 	mov.w	r2, #4294967295
 800dc96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc98:	e008      	b.n	800dcac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc9a:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <prvResetNextTaskUnblockTime+0x38>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68db      	ldr	r3, [r3, #12]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	4a04      	ldr	r2, [pc, #16]	; (800dcbc <prvResetNextTaskUnblockTime+0x3c>)
 800dcaa:	6013      	str	r3, [r2, #0]
}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	20000c44 	.word	0x20000c44
 800dcbc:	20000cac 	.word	0x20000cac

0800dcc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dcc6:	4b0b      	ldr	r3, [pc, #44]	; (800dcf4 <xTaskGetSchedulerState+0x34>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d102      	bne.n	800dcd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	e008      	b.n	800dce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcd4:	4b08      	ldr	r3, [pc, #32]	; (800dcf8 <xTaskGetSchedulerState+0x38>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d102      	bne.n	800dce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dcdc:	2302      	movs	r3, #2
 800dcde:	607b      	str	r3, [r7, #4]
 800dce0:	e001      	b.n	800dce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dce2:	2300      	movs	r3, #0
 800dce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dce6:	687b      	ldr	r3, [r7, #4]
	}
 800dce8:	4618      	mov	r0, r3
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	20000c98 	.word	0x20000c98
 800dcf8:	20000cb4 	.word	0x20000cb4

0800dcfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d054      	beq.n	800ddbc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dd12:	4b2d      	ldr	r3, [pc, #180]	; (800ddc8 <xTaskPriorityDisinherit+0xcc>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	693a      	ldr	r2, [r7, #16]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d009      	beq.n	800dd30 <xTaskPriorityDisinherit+0x34>
 800dd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	f3bf 8f6f 	isb	sy
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	e7fe      	b.n	800dd2e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d109      	bne.n	800dd4c <xTaskPriorityDisinherit+0x50>
 800dd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	60bb      	str	r3, [r7, #8]
 800dd4a:	e7fe      	b.n	800dd4a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd50:	1e5a      	subs	r2, r3, #1
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d02c      	beq.n	800ddbc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d128      	bne.n	800ddbc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe fbe2 	bl	800c538 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8c:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <xTaskPriorityDisinherit+0xd0>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d903      	bls.n	800dd9c <xTaskPriorityDisinherit+0xa0>
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd98:	4a0c      	ldr	r2, [pc, #48]	; (800ddcc <xTaskPriorityDisinherit+0xd0>)
 800dd9a:	6013      	str	r3, [r2, #0]
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda0:	4613      	mov	r3, r2
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4a09      	ldr	r2, [pc, #36]	; (800ddd0 <xTaskPriorityDisinherit+0xd4>)
 800ddaa:	441a      	add	r2, r3
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f7fe fb63 	bl	800c47e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddbc:	697b      	ldr	r3, [r7, #20]
	}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3718      	adds	r7, #24
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	200007b8 	.word	0x200007b8
 800ddcc:	20000c94 	.word	0x20000c94
 800ddd0:	200007bc 	.word	0x200007bc

0800ddd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddde:	4b21      	ldr	r3, [pc, #132]	; (800de64 <prvAddCurrentTaskToDelayedList+0x90>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dde4:	4b20      	ldr	r3, [pc, #128]	; (800de68 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fba4 	bl	800c538 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf6:	d10a      	bne.n	800de0e <prvAddCurrentTaskToDelayedList+0x3a>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d007      	beq.n	800de0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddfe:	4b1a      	ldr	r3, [pc, #104]	; (800de68 <prvAddCurrentTaskToDelayedList+0x94>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3304      	adds	r3, #4
 800de04:	4619      	mov	r1, r3
 800de06:	4819      	ldr	r0, [pc, #100]	; (800de6c <prvAddCurrentTaskToDelayedList+0x98>)
 800de08:	f7fe fb39 	bl	800c47e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de0c:	e026      	b.n	800de5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4413      	add	r3, r2
 800de14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de16:	4b14      	ldr	r3, [pc, #80]	; (800de68 <prvAddCurrentTaskToDelayedList+0x94>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	429a      	cmp	r2, r3
 800de24:	d209      	bcs.n	800de3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de26:	4b12      	ldr	r3, [pc, #72]	; (800de70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	4b0f      	ldr	r3, [pc, #60]	; (800de68 <prvAddCurrentTaskToDelayedList+0x94>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3304      	adds	r3, #4
 800de30:	4619      	mov	r1, r3
 800de32:	4610      	mov	r0, r2
 800de34:	f7fe fb47 	bl	800c4c6 <vListInsert>
}
 800de38:	e010      	b.n	800de5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de3a:	4b0e      	ldr	r3, [pc, #56]	; (800de74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de3c:	681a      	ldr	r2, [r3, #0]
 800de3e:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <prvAddCurrentTaskToDelayedList+0x94>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	3304      	adds	r3, #4
 800de44:	4619      	mov	r1, r3
 800de46:	4610      	mov	r0, r2
 800de48:	f7fe fb3d 	bl	800c4c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	429a      	cmp	r2, r3
 800de54:	d202      	bcs.n	800de5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de56:	4a08      	ldr	r2, [pc, #32]	; (800de78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	6013      	str	r3, [r2, #0]
}
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	20000c90 	.word	0x20000c90
 800de68:	200007b8 	.word	0x200007b8
 800de6c:	20000c78 	.word	0x20000c78
 800de70:	20000c48 	.word	0x20000c48
 800de74:	20000c44 	.word	0x20000c44
 800de78:	20000cac 	.word	0x20000cac

0800de7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	; 0x28
 800de80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de82:	2300      	movs	r3, #0
 800de84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de86:	f000 faff 	bl	800e488 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de8a:	4b1c      	ldr	r3, [pc, #112]	; (800defc <xTimerCreateTimerTask+0x80>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d021      	beq.n	800ded6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de92:	2300      	movs	r3, #0
 800de94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de96:	2300      	movs	r3, #0
 800de98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de9a:	1d3a      	adds	r2, r7, #4
 800de9c:	f107 0108 	add.w	r1, r7, #8
 800dea0:	f107 030c 	add.w	r3, r7, #12
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fe faa3 	bl	800c3f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800deaa:	6879      	ldr	r1, [r7, #4]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	9202      	str	r2, [sp, #8]
 800deb2:	9301      	str	r3, [sp, #4]
 800deb4:	2302      	movs	r3, #2
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	2300      	movs	r3, #0
 800deba:	460a      	mov	r2, r1
 800debc:	4910      	ldr	r1, [pc, #64]	; (800df00 <xTimerCreateTimerTask+0x84>)
 800debe:	4811      	ldr	r0, [pc, #68]	; (800df04 <xTimerCreateTimerTask+0x88>)
 800dec0:	f7ff f8f6 	bl	800d0b0 <xTaskCreateStatic>
 800dec4:	4602      	mov	r2, r0
 800dec6:	4b10      	ldr	r3, [pc, #64]	; (800df08 <xTimerCreateTimerTask+0x8c>)
 800dec8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800deca:	4b0f      	ldr	r3, [pc, #60]	; (800df08 <xTimerCreateTimerTask+0x8c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ded2:	2301      	movs	r3, #1
 800ded4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d109      	bne.n	800def0 <xTimerCreateTimerTask+0x74>
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	613b      	str	r3, [r7, #16]
 800deee:	e7fe      	b.n	800deee <xTimerCreateTimerTask+0x72>
	return xReturn;
 800def0:	697b      	ldr	r3, [r7, #20]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20000ce8 	.word	0x20000ce8
 800df00:	0800f594 	.word	0x0800f594
 800df04:	0800e03d 	.word	0x0800e03d
 800df08:	20000cec 	.word	0x20000cec

0800df0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08a      	sub	sp, #40	; 0x28
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d109      	bne.n	800df38 <xTimerGenericCommand+0x2c>
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	623b      	str	r3, [r7, #32]
 800df36:	e7fe      	b.n	800df36 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df38:	4b19      	ldr	r3, [pc, #100]	; (800dfa0 <xTimerGenericCommand+0x94>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d02a      	beq.n	800df96 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2b05      	cmp	r3, #5
 800df50:	dc18      	bgt.n	800df84 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df52:	f7ff feb5 	bl	800dcc0 <xTaskGetSchedulerState>
 800df56:	4603      	mov	r3, r0
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d109      	bne.n	800df70 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df5c:	4b10      	ldr	r3, [pc, #64]	; (800dfa0 <xTimerGenericCommand+0x94>)
 800df5e:	6818      	ldr	r0, [r3, #0]
 800df60:	f107 0110 	add.w	r1, r7, #16
 800df64:	2300      	movs	r3, #0
 800df66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df68:	f7fe fc4e 	bl	800c808 <xQueueGenericSend>
 800df6c:	6278      	str	r0, [r7, #36]	; 0x24
 800df6e:	e012      	b.n	800df96 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df70:	4b0b      	ldr	r3, [pc, #44]	; (800dfa0 <xTimerGenericCommand+0x94>)
 800df72:	6818      	ldr	r0, [r3, #0]
 800df74:	f107 0110 	add.w	r1, r7, #16
 800df78:	2300      	movs	r3, #0
 800df7a:	2200      	movs	r2, #0
 800df7c:	f7fe fc44 	bl	800c808 <xQueueGenericSend>
 800df80:	6278      	str	r0, [r7, #36]	; 0x24
 800df82:	e008      	b.n	800df96 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df84:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <xTimerGenericCommand+0x94>)
 800df86:	6818      	ldr	r0, [r3, #0]
 800df88:	f107 0110 	add.w	r1, r7, #16
 800df8c:	2300      	movs	r3, #0
 800df8e:	683a      	ldr	r2, [r7, #0]
 800df90:	f7fe fd34 	bl	800c9fc <xQueueGenericSendFromISR>
 800df94:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3728      	adds	r7, #40	; 0x28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20000ce8 	.word	0x20000ce8

0800dfa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b088      	sub	sp, #32
 800dfa8:	af02      	add	r7, sp, #8
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfae:	4b22      	ldr	r3, [pc, #136]	; (800e038 <prvProcessExpiredTimer+0x94>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	68db      	ldr	r3, [r3, #12]
 800dfb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe fabb 	bl	800c538 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfc8:	f003 0304 	and.w	r3, r3, #4
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d021      	beq.n	800e014 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	699a      	ldr	r2, [r3, #24]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	18d1      	adds	r1, r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	6978      	ldr	r0, [r7, #20]
 800dfde:	f000 f8d1 	bl	800e184 <prvInsertTimerInActiveList>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d01e      	beq.n	800e026 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfe8:	2300      	movs	r3, #0
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	2300      	movs	r3, #0
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	2100      	movs	r1, #0
 800dff2:	6978      	ldr	r0, [r7, #20]
 800dff4:	f7ff ff8a 	bl	800df0c <xTimerGenericCommand>
 800dff8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d112      	bne.n	800e026 <prvProcessExpiredTimer+0x82>
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	60fb      	str	r3, [r7, #12]
 800e012:	e7fe      	b.n	800e012 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e01a:	f023 0301 	bic.w	r3, r3, #1
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	6978      	ldr	r0, [r7, #20]
 800e02c:	4798      	blx	r3
}
 800e02e:	bf00      	nop
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	20000ce0 	.word	0x20000ce0

0800e03c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e044:	f107 0308 	add.w	r3, r7, #8
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 f857 	bl	800e0fc <prvGetNextExpireTime>
 800e04e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	4619      	mov	r1, r3
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f000 f803 	bl	800e060 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e05a:	f000 f8d5 	bl	800e208 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e05e:	e7f1      	b.n	800e044 <prvTimerTask+0x8>

0800e060 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e06a:	f7ff fa57 	bl	800d51c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e06e:	f107 0308 	add.w	r3, r7, #8
 800e072:	4618      	mov	r0, r3
 800e074:	f000 f866 	bl	800e144 <prvSampleTimeNow>
 800e078:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d130      	bne.n	800e0e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d10a      	bne.n	800e09c <prvProcessTimerOrBlockTask+0x3c>
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d806      	bhi.n	800e09c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e08e:	f7ff fa53 	bl	800d538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e092:	68f9      	ldr	r1, [r7, #12]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff ff85 	bl	800dfa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e09a:	e024      	b.n	800e0e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d008      	beq.n	800e0b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e0a2:	4b13      	ldr	r3, [pc, #76]	; (800e0f0 <prvProcessTimerOrBlockTask+0x90>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d101      	bne.n	800e0b0 <prvProcessTimerOrBlockTask+0x50>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e000      	b.n	800e0b2 <prvProcessTimerOrBlockTask+0x52>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0b4:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <prvProcessTimerOrBlockTask+0x94>)
 800e0b6:	6818      	ldr	r0, [r3, #0]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f7fe ffc1 	bl	800d048 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0c6:	f7ff fa37 	bl	800d538 <xTaskResumeAll>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10a      	bne.n	800e0e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0d0:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <prvProcessTimerOrBlockTask+0x98>)
 800e0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d6:	601a      	str	r2, [r3, #0]
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	f3bf 8f6f 	isb	sy
}
 800e0e0:	e001      	b.n	800e0e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0e2:	f7ff fa29 	bl	800d538 <xTaskResumeAll>
}
 800e0e6:	bf00      	nop
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	20000ce4 	.word	0x20000ce4
 800e0f4:	20000ce8 	.word	0x20000ce8
 800e0f8:	e000ed04 	.word	0xe000ed04

0800e0fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e104:	4b0e      	ldr	r3, [pc, #56]	; (800e140 <prvGetNextExpireTime+0x44>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <prvGetNextExpireTime+0x16>
 800e10e:	2201      	movs	r2, #1
 800e110:	e000      	b.n	800e114 <prvGetNextExpireTime+0x18>
 800e112:	2200      	movs	r2, #0
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d105      	bne.n	800e12c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <prvGetNextExpireTime+0x44>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	60fb      	str	r3, [r7, #12]
 800e12a:	e001      	b.n	800e130 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e12c:	2300      	movs	r3, #0
 800e12e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e130:	68fb      	ldr	r3, [r7, #12]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3714      	adds	r7, #20
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	20000ce0 	.word	0x20000ce0

0800e144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e14c:	f7ff fa90 	bl	800d670 <xTaskGetTickCount>
 800e150:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e152:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <prvSampleTimeNow+0x3c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d205      	bcs.n	800e168 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e15c:	f000 f930 	bl	800e3c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	e002      	b.n	800e16e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e16e:	4a04      	ldr	r2, [pc, #16]	; (800e180 <prvSampleTimeNow+0x3c>)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e174:	68fb      	ldr	r3, [r7, #12]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	20000cf0 	.word	0x20000cf0

0800e184 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e192:	2300      	movs	r3, #0
 800e194:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	68ba      	ldr	r2, [r7, #8]
 800e19a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d812      	bhi.n	800e1d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	1ad2      	subs	r2, r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	699b      	ldr	r3, [r3, #24]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d302      	bcc.n	800e1be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	e01b      	b.n	800e1f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1be:	4b10      	ldr	r3, [pc, #64]	; (800e200 <prvInsertTimerInActiveList+0x7c>)
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	f7fe f97c 	bl	800c4c6 <vListInsert>
 800e1ce:	e012      	b.n	800e1f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d206      	bcs.n	800e1e6 <prvInsertTimerInActiveList+0x62>
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d302      	bcc.n	800e1e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	617b      	str	r3, [r7, #20]
 800e1e4:	e007      	b.n	800e1f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1e6:	4b07      	ldr	r3, [pc, #28]	; (800e204 <prvInsertTimerInActiveList+0x80>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f7fe f968 	bl	800c4c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1f6:	697b      	ldr	r3, [r7, #20]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3718      	adds	r7, #24
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	20000ce4 	.word	0x20000ce4
 800e204:	20000ce0 	.word	0x20000ce0

0800e208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08e      	sub	sp, #56	; 0x38
 800e20c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e20e:	e0c6      	b.n	800e39e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	da17      	bge.n	800e246 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e216:	1d3b      	adds	r3, r7, #4
 800e218:	3304      	adds	r3, #4
 800e21a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d109      	bne.n	800e236 <prvProcessReceivedCommands+0x2e>
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	61fb      	str	r3, [r7, #28]
 800e234:	e7fe      	b.n	800e234 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e23c:	6850      	ldr	r0, [r2, #4]
 800e23e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e240:	6892      	ldr	r2, [r2, #8]
 800e242:	4611      	mov	r1, r2
 800e244:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f2c0 80a7 	blt.w	800e39c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d004      	beq.n	800e264 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	3304      	adds	r3, #4
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe f96a 	bl	800c538 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e264:	463b      	mov	r3, r7
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff ff6c 	bl	800e144 <prvSampleTimeNow>
 800e26c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b09      	cmp	r3, #9
 800e272:	f200 8094 	bhi.w	800e39e <prvProcessReceivedCommands+0x196>
 800e276:	a201      	add	r2, pc, #4	; (adr r2, 800e27c <prvProcessReceivedCommands+0x74>)
 800e278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27c:	0800e2a5 	.word	0x0800e2a5
 800e280:	0800e2a5 	.word	0x0800e2a5
 800e284:	0800e2a5 	.word	0x0800e2a5
 800e288:	0800e317 	.word	0x0800e317
 800e28c:	0800e32b 	.word	0x0800e32b
 800e290:	0800e373 	.word	0x0800e373
 800e294:	0800e2a5 	.word	0x0800e2a5
 800e298:	0800e2a5 	.word	0x0800e2a5
 800e29c:	0800e317 	.word	0x0800e317
 800e2a0:	0800e32b 	.word	0x0800e32b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2aa:	f043 0301 	orr.w	r3, r3, #1
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	18d1      	adds	r1, r2, r3
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2c4:	f7ff ff5e 	bl	800e184 <prvInsertTimerInActiveList>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d067      	beq.n	800e39e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	6a1b      	ldr	r3, [r3, #32]
 800e2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d05c      	beq.n	800e39e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e8:	699b      	ldr	r3, [r3, #24]
 800e2ea:	441a      	add	r2, r3
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f6:	f7ff fe09 	bl	800df0c <xTimerGenericCommand>
 800e2fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d14d      	bne.n	800e39e <prvProcessReceivedCommands+0x196>
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	61bb      	str	r3, [r7, #24]
 800e314:	e7fe      	b.n	800e314 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e31c:	f023 0301 	bic.w	r3, r3, #1
 800e320:	b2da      	uxtb	r2, r3
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e328:	e039      	b.n	800e39e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e330:	f043 0301 	orr.w	r3, r3, #1
 800e334:	b2da      	uxtb	r2, r3
 800e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d109      	bne.n	800e35e <prvProcessReceivedCommands+0x156>
 800e34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	617b      	str	r3, [r7, #20]
 800e35c:	e7fe      	b.n	800e35c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	699a      	ldr	r2, [r3, #24]
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	18d1      	adds	r1, r2, r3
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e36c:	f7ff ff0a 	bl	800e184 <prvInsertTimerInActiveList>
					break;
 800e370:	e015      	b.n	800e39e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e378:	f003 0302 	and.w	r3, r3, #2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d103      	bne.n	800e388 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e382:	f000 fbc7 	bl	800eb14 <vPortFree>
 800e386:	e00a      	b.n	800e39e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e38e:	f023 0301 	bic.w	r3, r3, #1
 800e392:	b2da      	uxtb	r2, r3
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e39a:	e000      	b.n	800e39e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e39c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e39e:	4b07      	ldr	r3, [pc, #28]	; (800e3bc <prvProcessReceivedCommands+0x1b4>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	1d39      	adds	r1, r7, #4
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fe fbbc 	bl	800cb24 <xQueueReceive>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f47f af2e 	bne.w	800e210 <prvProcessReceivedCommands+0x8>
	}
}
 800e3b4:	bf00      	nop
 800e3b6:	3730      	adds	r7, #48	; 0x30
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20000ce8 	.word	0x20000ce8

0800e3c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3c6:	e047      	b.n	800e458 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3c8:	4b2d      	ldr	r3, [pc, #180]	; (800e480 <prvSwitchTimerLists+0xc0>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d2:	4b2b      	ldr	r3, [pc, #172]	; (800e480 <prvSwitchTimerLists+0xc0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fe f8a9 	bl	800c538 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6a1b      	ldr	r3, [r3, #32]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3f4:	f003 0304 	and.w	r3, r3, #4
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02d      	beq.n	800e458 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	4413      	add	r3, r2
 800e404:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d90e      	bls.n	800e42c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e41a:	4b19      	ldr	r3, [pc, #100]	; (800e480 <prvSwitchTimerLists+0xc0>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3304      	adds	r3, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fe f84e 	bl	800c4c6 <vListInsert>
 800e42a:	e015      	b.n	800e458 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e42c:	2300      	movs	r3, #0
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	2300      	movs	r3, #0
 800e432:	693a      	ldr	r2, [r7, #16]
 800e434:	2100      	movs	r1, #0
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7ff fd68 	bl	800df0c <xTimerGenericCommand>
 800e43c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d109      	bne.n	800e458 <prvSwitchTimerLists+0x98>
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	603b      	str	r3, [r7, #0]
 800e456:	e7fe      	b.n	800e456 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e458:	4b09      	ldr	r3, [pc, #36]	; (800e480 <prvSwitchTimerLists+0xc0>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1b2      	bne.n	800e3c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e462:	4b07      	ldr	r3, [pc, #28]	; (800e480 <prvSwitchTimerLists+0xc0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <prvSwitchTimerLists+0xc4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a04      	ldr	r2, [pc, #16]	; (800e480 <prvSwitchTimerLists+0xc0>)
 800e46e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e470:	4a04      	ldr	r2, [pc, #16]	; (800e484 <prvSwitchTimerLists+0xc4>)
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	6013      	str	r3, [r2, #0]
}
 800e476:	bf00      	nop
 800e478:	3718      	adds	r7, #24
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	20000ce0 	.word	0x20000ce0
 800e484:	20000ce4 	.word	0x20000ce4

0800e488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e48e:	f000 f965 	bl	800e75c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e492:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <prvCheckForValidListAndQueue+0x60>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d120      	bne.n	800e4dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e49a:	4814      	ldr	r0, [pc, #80]	; (800e4ec <prvCheckForValidListAndQueue+0x64>)
 800e49c:	f7fd ffc2 	bl	800c424 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4a0:	4813      	ldr	r0, [pc, #76]	; (800e4f0 <prvCheckForValidListAndQueue+0x68>)
 800e4a2:	f7fd ffbf 	bl	800c424 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4a6:	4b13      	ldr	r3, [pc, #76]	; (800e4f4 <prvCheckForValidListAndQueue+0x6c>)
 800e4a8:	4a10      	ldr	r2, [pc, #64]	; (800e4ec <prvCheckForValidListAndQueue+0x64>)
 800e4aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4ac:	4b12      	ldr	r3, [pc, #72]	; (800e4f8 <prvCheckForValidListAndQueue+0x70>)
 800e4ae:	4a10      	ldr	r2, [pc, #64]	; (800e4f0 <prvCheckForValidListAndQueue+0x68>)
 800e4b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	4b11      	ldr	r3, [pc, #68]	; (800e4fc <prvCheckForValidListAndQueue+0x74>)
 800e4b8:	4a11      	ldr	r2, [pc, #68]	; (800e500 <prvCheckForValidListAndQueue+0x78>)
 800e4ba:	2110      	movs	r1, #16
 800e4bc:	200a      	movs	r0, #10
 800e4be:	f7fe f8cd 	bl	800c65c <xQueueGenericCreateStatic>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	4b08      	ldr	r3, [pc, #32]	; (800e4e8 <prvCheckForValidListAndQueue+0x60>)
 800e4c6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4c8:	4b07      	ldr	r3, [pc, #28]	; (800e4e8 <prvCheckForValidListAndQueue+0x60>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d005      	beq.n	800e4dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4d0:	4b05      	ldr	r3, [pc, #20]	; (800e4e8 <prvCheckForValidListAndQueue+0x60>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	490b      	ldr	r1, [pc, #44]	; (800e504 <prvCheckForValidListAndQueue+0x7c>)
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fe fd8e 	bl	800cff8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4dc:	f000 f96c 	bl	800e7b8 <vPortExitCritical>
}
 800e4e0:	bf00      	nop
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20000ce8 	.word	0x20000ce8
 800e4ec:	20000cb8 	.word	0x20000cb8
 800e4f0:	20000ccc 	.word	0x20000ccc
 800e4f4:	20000ce0 	.word	0x20000ce0
 800e4f8:	20000ce4 	.word	0x20000ce4
 800e4fc:	20000d94 	.word	0x20000d94
 800e500:	20000cf4 	.word	0x20000cf4
 800e504:	0800f59c 	.word	0x0800f59c

0800e508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	3b04      	subs	r3, #4
 800e518:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3b04      	subs	r3, #4
 800e526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f023 0201 	bic.w	r2, r3, #1
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	3b04      	subs	r3, #4
 800e536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e538:	4a0c      	ldr	r2, [pc, #48]	; (800e56c <pxPortInitialiseStack+0x64>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3b14      	subs	r3, #20
 800e542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3b04      	subs	r3, #4
 800e54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f06f 0202 	mvn.w	r2, #2
 800e556:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3b20      	subs	r3, #32
 800e55c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e55e:	68fb      	ldr	r3, [r7, #12]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	0800e571 	.word	0x0800e571

0800e570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e57a:	4b11      	ldr	r3, [pc, #68]	; (800e5c0 <prvTaskExitError+0x50>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e582:	d009      	beq.n	800e598 <prvTaskExitError+0x28>
 800e584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	60fb      	str	r3, [r7, #12]
 800e596:	e7fe      	b.n	800e596 <prvTaskExitError+0x26>
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5aa:	bf00      	nop
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d0fc      	beq.n	800e5ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	2000002c 	.word	0x2000002c
	...

0800e5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <pxCurrentTCBConst2>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	6808      	ldr	r0, [r1, #0]
 800e5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5da:	f380 8809 	msr	PSP, r0
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8811 	msr	BASEPRI, r0
 800e5ea:	4770      	bx	lr
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst2>:
 800e5f0:	200007b8 	.word	0x200007b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5f8:	4808      	ldr	r0, [pc, #32]	; (800e61c <prvPortStartFirstTask+0x24>)
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f380 8808 	msr	MSP, r0
 800e602:	f04f 0000 	mov.w	r0, #0
 800e606:	f380 8814 	msr	CONTROL, r0
 800e60a:	b662      	cpsie	i
 800e60c:	b661      	cpsie	f
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	df00      	svc	0
 800e618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e61a:	bf00      	nop
 800e61c:	e000ed08 	.word	0xe000ed08

0800e620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e626:	4b44      	ldr	r3, [pc, #272]	; (800e738 <xPortStartScheduler+0x118>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a44      	ldr	r2, [pc, #272]	; (800e73c <xPortStartScheduler+0x11c>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d109      	bne.n	800e644 <xPortStartScheduler+0x24>
 800e630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	613b      	str	r3, [r7, #16]
 800e642:	e7fe      	b.n	800e642 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e644:	4b3c      	ldr	r3, [pc, #240]	; (800e738 <xPortStartScheduler+0x118>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a3d      	ldr	r2, [pc, #244]	; (800e740 <xPortStartScheduler+0x120>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d109      	bne.n	800e662 <xPortStartScheduler+0x42>
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	60fb      	str	r3, [r7, #12]
 800e660:	e7fe      	b.n	800e660 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e662:	4b38      	ldr	r3, [pc, #224]	; (800e744 <xPortStartScheduler+0x124>)
 800e664:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	22ff      	movs	r2, #255	; 0xff
 800e672:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e67c:	78fb      	ldrb	r3, [r7, #3]
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e684:	b2da      	uxtb	r2, r3
 800e686:	4b30      	ldr	r3, [pc, #192]	; (800e748 <xPortStartScheduler+0x128>)
 800e688:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e68a:	4b30      	ldr	r3, [pc, #192]	; (800e74c <xPortStartScheduler+0x12c>)
 800e68c:	2207      	movs	r2, #7
 800e68e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e690:	e009      	b.n	800e6a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e692:	4b2e      	ldr	r3, [pc, #184]	; (800e74c <xPortStartScheduler+0x12c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3b01      	subs	r3, #1
 800e698:	4a2c      	ldr	r2, [pc, #176]	; (800e74c <xPortStartScheduler+0x12c>)
 800e69a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e69c:	78fb      	ldrb	r3, [r7, #3]
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	005b      	lsls	r3, r3, #1
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6a6:	78fb      	ldrb	r3, [r7, #3]
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ae:	2b80      	cmp	r3, #128	; 0x80
 800e6b0:	d0ef      	beq.n	800e692 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6b2:	4b26      	ldr	r3, [pc, #152]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f1c3 0307 	rsb	r3, r3, #7
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d009      	beq.n	800e6d2 <xPortStartScheduler+0xb2>
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60bb      	str	r3, [r7, #8]
 800e6d0:	e7fe      	b.n	800e6d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6d2:	4b1e      	ldr	r3, [pc, #120]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	021b      	lsls	r3, r3, #8
 800e6d8:	4a1c      	ldr	r2, [pc, #112]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6dc:	4b1b      	ldr	r3, [pc, #108]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6e4:	4a19      	ldr	r2, [pc, #100]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6f0:	4b17      	ldr	r3, [pc, #92]	; (800e750 <xPortStartScheduler+0x130>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a16      	ldr	r2, [pc, #88]	; (800e750 <xPortStartScheduler+0x130>)
 800e6f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6fc:	4b14      	ldr	r3, [pc, #80]	; (800e750 <xPortStartScheduler+0x130>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a13      	ldr	r2, [pc, #76]	; (800e750 <xPortStartScheduler+0x130>)
 800e702:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e706:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e708:	f000 f8d6 	bl	800e8b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e70c:	4b11      	ldr	r3, [pc, #68]	; (800e754 <xPortStartScheduler+0x134>)
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e712:	f000 f8f5 	bl	800e900 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <xPortStartScheduler+0x138>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a0f      	ldr	r2, [pc, #60]	; (800e758 <xPortStartScheduler+0x138>)
 800e71c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e720:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e722:	f7ff ff69 	bl	800e5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e726:	f7ff f86b 	bl	800d800 <vTaskSwitchContext>
	prvTaskExitError();
 800e72a:	f7ff ff21 	bl	800e570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e72e:	2300      	movs	r3, #0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed00 	.word	0xe000ed00
 800e73c:	410fc271 	.word	0x410fc271
 800e740:	410fc270 	.word	0x410fc270
 800e744:	e000e400 	.word	0xe000e400
 800e748:	20000de4 	.word	0x20000de4
 800e74c:	20000de8 	.word	0x20000de8
 800e750:	e000ed20 	.word	0xe000ed20
 800e754:	2000002c 	.word	0x2000002c
 800e758:	e000ef34 	.word	0xe000ef34

0800e75c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e774:	4b0e      	ldr	r3, [pc, #56]	; (800e7b0 <vPortEnterCritical+0x54>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3301      	adds	r3, #1
 800e77a:	4a0d      	ldr	r2, [pc, #52]	; (800e7b0 <vPortEnterCritical+0x54>)
 800e77c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e77e:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <vPortEnterCritical+0x54>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d10e      	bne.n	800e7a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e786:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <vPortEnterCritical+0x58>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d009      	beq.n	800e7a4 <vPortEnterCritical+0x48>
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	603b      	str	r3, [r7, #0]
 800e7a2:	e7fe      	b.n	800e7a2 <vPortEnterCritical+0x46>
	}
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	2000002c 	.word	0x2000002c
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7be:	4b11      	ldr	r3, [pc, #68]	; (800e804 <vPortExitCritical+0x4c>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d109      	bne.n	800e7da <vPortExitCritical+0x22>
 800e7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ca:	f383 8811 	msr	BASEPRI, r3
 800e7ce:	f3bf 8f6f 	isb	sy
 800e7d2:	f3bf 8f4f 	dsb	sy
 800e7d6:	607b      	str	r3, [r7, #4]
 800e7d8:	e7fe      	b.n	800e7d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <vPortExitCritical+0x4c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	4a08      	ldr	r2, [pc, #32]	; (800e804 <vPortExitCritical+0x4c>)
 800e7e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7e4:	4b07      	ldr	r3, [pc, #28]	; (800e804 <vPortExitCritical+0x4c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d104      	bne.n	800e7f6 <vPortExitCritical+0x3e>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7f6:	bf00      	nop
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	2000002c 	.word	0x2000002c
	...

0800e810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e810:	f3ef 8009 	mrs	r0, PSP
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	4b15      	ldr	r3, [pc, #84]	; (800e870 <pxCurrentTCBConst>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	f01e 0f10 	tst.w	lr, #16
 800e820:	bf08      	it	eq
 800e822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	6010      	str	r0, [r2, #0]
 800e82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e834:	f380 8811 	msr	BASEPRI, r0
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f7fe ffde 	bl	800d800 <vTaskSwitchContext>
 800e844:	f04f 0000 	mov.w	r0, #0
 800e848:	f380 8811 	msr	BASEPRI, r0
 800e84c:	bc09      	pop	{r0, r3}
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	6808      	ldr	r0, [r1, #0]
 800e852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e856:	f01e 0f10 	tst.w	lr, #16
 800e85a:	bf08      	it	eq
 800e85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e860:	f380 8809 	msr	PSP, r0
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	f3af 8000 	nop.w

0800e870 <pxCurrentTCBConst>:
 800e870:	200007b8 	.word	0x200007b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop

0800e878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e890:	f7fe fefe 	bl	800d690 <xTaskIncrementTick>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e89a:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <SysTick_Handler+0x3c>)
 800e89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	e000ed04 	.word	0xe000ed04

0800e8b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8bc:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <vPortSetupTimerInterrupt+0x34>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8c2:	4b0b      	ldr	r3, [pc, #44]	; (800e8f0 <vPortSetupTimerInterrupt+0x38>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8c8:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <vPortSetupTimerInterrupt+0x3c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a0a      	ldr	r2, [pc, #40]	; (800e8f8 <vPortSetupTimerInterrupt+0x40>)
 800e8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d2:	099b      	lsrs	r3, r3, #6
 800e8d4:	4a09      	ldr	r2, [pc, #36]	; (800e8fc <vPortSetupTimerInterrupt+0x44>)
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8da:	4b04      	ldr	r3, [pc, #16]	; (800e8ec <vPortSetupTimerInterrupt+0x34>)
 800e8dc:	2207      	movs	r2, #7
 800e8de:	601a      	str	r2, [r3, #0]
}
 800e8e0:	bf00      	nop
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	e000e010 	.word	0xe000e010
 800e8f0:	e000e018 	.word	0xe000e018
 800e8f4:	20000000 	.word	0x20000000
 800e8f8:	10624dd3 	.word	0x10624dd3
 800e8fc:	e000e014 	.word	0xe000e014

0800e900 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e900:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e910 <vPortEnableVFP+0x10>
 800e904:	6801      	ldr	r1, [r0, #0]
 800e906:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e90a:	6001      	str	r1, [r0, #0]
 800e90c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e90e:	bf00      	nop
 800e910:	e000ed88 	.word	0xe000ed88

0800e914 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e91a:	f3ef 8305 	mrs	r3, IPSR
 800e91e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2b0f      	cmp	r3, #15
 800e924:	d913      	bls.n	800e94e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e926:	4a16      	ldr	r2, [pc, #88]	; (800e980 <vPortValidateInterruptPriority+0x6c>)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	4413      	add	r3, r2
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e930:	4b14      	ldr	r3, [pc, #80]	; (800e984 <vPortValidateInterruptPriority+0x70>)
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	7afa      	ldrb	r2, [r7, #11]
 800e936:	429a      	cmp	r2, r3
 800e938:	d209      	bcs.n	800e94e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	607b      	str	r3, [r7, #4]
 800e94c:	e7fe      	b.n	800e94c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e94e:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <vPortValidateInterruptPriority+0x74>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e956:	4b0d      	ldr	r3, [pc, #52]	; (800e98c <vPortValidateInterruptPriority+0x78>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d909      	bls.n	800e972 <vPortValidateInterruptPriority+0x5e>
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	603b      	str	r3, [r7, #0]
 800e970:	e7fe      	b.n	800e970 <vPortValidateInterruptPriority+0x5c>
	}
 800e972:	bf00      	nop
 800e974:	3714      	adds	r7, #20
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	e000e3f0 	.word	0xe000e3f0
 800e984:	20000de4 	.word	0x20000de4
 800e988:	e000ed0c 	.word	0xe000ed0c
 800e98c:	20000de8 	.word	0x20000de8

0800e990 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b08a      	sub	sp, #40	; 0x28
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e998:	2300      	movs	r3, #0
 800e99a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e99c:	f7fe fdbe 	bl	800d51c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9a0:	4b57      	ldr	r3, [pc, #348]	; (800eb00 <pvPortMalloc+0x170>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d101      	bne.n	800e9ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9a8:	f000 f90c 	bl	800ebc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9ac:	4b55      	ldr	r3, [pc, #340]	; (800eb04 <pvPortMalloc+0x174>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f040 808c 	bne.w	800ead2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d01c      	beq.n	800e9fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f003 0307 	and.w	r3, r3, #7
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d013      	beq.n	800e9fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f023 0307 	bic.w	r3, r3, #7
 800e9d8:	3308      	adds	r3, #8
 800e9da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f003 0307 	and.w	r3, r3, #7
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d009      	beq.n	800e9fa <pvPortMalloc+0x6a>
 800e9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	617b      	str	r3, [r7, #20]
 800e9f8:	e7fe      	b.n	800e9f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d068      	beq.n	800ead2 <pvPortMalloc+0x142>
 800ea00:	4b41      	ldr	r3, [pc, #260]	; (800eb08 <pvPortMalloc+0x178>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d863      	bhi.n	800ead2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea0a:	4b40      	ldr	r3, [pc, #256]	; (800eb0c <pvPortMalloc+0x17c>)
 800ea0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea0e:	4b3f      	ldr	r3, [pc, #252]	; (800eb0c <pvPortMalloc+0x17c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea14:	e004      	b.n	800ea20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ea16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d903      	bls.n	800ea32 <pvPortMalloc+0xa2>
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1f1      	bne.n	800ea16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea32:	4b33      	ldr	r3, [pc, #204]	; (800eb00 <pvPortMalloc+0x170>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d04a      	beq.n	800ead2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2208      	movs	r2, #8
 800ea42:	4413      	add	r3, r2
 800ea44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	685a      	ldr	r2, [r3, #4]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	1ad2      	subs	r2, r2, r3
 800ea56:	2308      	movs	r3, #8
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d91e      	bls.n	800ea9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	4413      	add	r3, r2
 800ea64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	f003 0307 	and.w	r3, r3, #7
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d009      	beq.n	800ea84 <pvPortMalloc+0xf4>
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	613b      	str	r3, [r7, #16]
 800ea82:	e7fe      	b.n	800ea82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	1ad2      	subs	r2, r2, r3
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea96:	69b8      	ldr	r0, [r7, #24]
 800ea98:	f000 f8f6 	bl	800ec88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea9c:	4b1a      	ldr	r3, [pc, #104]	; (800eb08 <pvPortMalloc+0x178>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	4a18      	ldr	r2, [pc, #96]	; (800eb08 <pvPortMalloc+0x178>)
 800eaa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eaaa:	4b17      	ldr	r3, [pc, #92]	; (800eb08 <pvPortMalloc+0x178>)
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	4b18      	ldr	r3, [pc, #96]	; (800eb10 <pvPortMalloc+0x180>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d203      	bcs.n	800eabe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eab6:	4b14      	ldr	r3, [pc, #80]	; (800eb08 <pvPortMalloc+0x178>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a15      	ldr	r2, [pc, #84]	; (800eb10 <pvPortMalloc+0x180>)
 800eabc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac0:	685a      	ldr	r2, [r3, #4]
 800eac2:	4b10      	ldr	r3, [pc, #64]	; (800eb04 <pvPortMalloc+0x174>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	431a      	orrs	r2, r3
 800eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ead2:	f7fe fd31 	bl	800d538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	f003 0307 	and.w	r3, r3, #7
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d009      	beq.n	800eaf4 <pvPortMalloc+0x164>
 800eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e7fe      	b.n	800eaf2 <pvPortMalloc+0x162>
	return pvReturn;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3728      	adds	r7, #40	; 0x28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	200049f4 	.word	0x200049f4
 800eb04:	20004a00 	.word	0x20004a00
 800eb08:	200049f8 	.word	0x200049f8
 800eb0c:	200049ec 	.word	0x200049ec
 800eb10:	200049fc 	.word	0x200049fc

0800eb14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d046      	beq.n	800ebb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb26:	2308      	movs	r3, #8
 800eb28:	425b      	negs	r3, r3
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	4b20      	ldr	r3, [pc, #128]	; (800ebbc <vPortFree+0xa8>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4013      	ands	r3, r2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d109      	bne.n	800eb56 <vPortFree+0x42>
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	e7fe      	b.n	800eb54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d009      	beq.n	800eb72 <vPortFree+0x5e>
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	60bb      	str	r3, [r7, #8]
 800eb70:	e7fe      	b.n	800eb70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	685a      	ldr	r2, [r3, #4]
 800eb76:	4b11      	ldr	r3, [pc, #68]	; (800ebbc <vPortFree+0xa8>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d019      	beq.n	800ebb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d115      	bne.n	800ebb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	685a      	ldr	r2, [r3, #4]
 800eb8c:	4b0b      	ldr	r3, [pc, #44]	; (800ebbc <vPortFree+0xa8>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	43db      	mvns	r3, r3
 800eb92:	401a      	ands	r2, r3
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb98:	f7fe fcc0 	bl	800d51c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	685a      	ldr	r2, [r3, #4]
 800eba0:	4b07      	ldr	r3, [pc, #28]	; (800ebc0 <vPortFree+0xac>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4413      	add	r3, r2
 800eba6:	4a06      	ldr	r2, [pc, #24]	; (800ebc0 <vPortFree+0xac>)
 800eba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebaa:	6938      	ldr	r0, [r7, #16]
 800ebac:	f000 f86c 	bl	800ec88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ebb0:	f7fe fcc2 	bl	800d538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebb4:	bf00      	nop
 800ebb6:	3718      	adds	r7, #24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20004a00 	.word	0x20004a00
 800ebc0:	200049f8 	.word	0x200049f8

0800ebc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ebce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ebd0:	4b27      	ldr	r3, [pc, #156]	; (800ec70 <prvHeapInit+0xac>)
 800ebd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f003 0307 	and.w	r3, r3, #7
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00c      	beq.n	800ebf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3307      	adds	r3, #7
 800ebe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f023 0307 	bic.w	r3, r3, #7
 800ebea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	4a1f      	ldr	r2, [pc, #124]	; (800ec70 <prvHeapInit+0xac>)
 800ebf4:	4413      	add	r3, r2
 800ebf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebfc:	4a1d      	ldr	r2, [pc, #116]	; (800ec74 <prvHeapInit+0xb0>)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec02:	4b1c      	ldr	r3, [pc, #112]	; (800ec74 <prvHeapInit+0xb0>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec10:	2208      	movs	r2, #8
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	1a9b      	subs	r3, r3, r2
 800ec16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f023 0307 	bic.w	r3, r3, #7
 800ec1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	4a15      	ldr	r2, [pc, #84]	; (800ec78 <prvHeapInit+0xb4>)
 800ec24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec26:	4b14      	ldr	r3, [pc, #80]	; (800ec78 <prvHeapInit+0xb4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec2e:	4b12      	ldr	r3, [pc, #72]	; (800ec78 <prvHeapInit+0xb4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2200      	movs	r2, #0
 800ec34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	1ad2      	subs	r2, r2, r3
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec44:	4b0c      	ldr	r3, [pc, #48]	; (800ec78 <prvHeapInit+0xb4>)
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	4a0a      	ldr	r2, [pc, #40]	; (800ec7c <prvHeapInit+0xb8>)
 800ec52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4a09      	ldr	r2, [pc, #36]	; (800ec80 <prvHeapInit+0xbc>)
 800ec5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec5c:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <prvHeapInit+0xc0>)
 800ec5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec62:	601a      	str	r2, [r3, #0]
}
 800ec64:	bf00      	nop
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	20000dec 	.word	0x20000dec
 800ec74:	200049ec 	.word	0x200049ec
 800ec78:	200049f4 	.word	0x200049f4
 800ec7c:	200049fc 	.word	0x200049fc
 800ec80:	200049f8 	.word	0x200049f8
 800ec84:	20004a00 	.word	0x20004a00

0800ec88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec90:	4b28      	ldr	r3, [pc, #160]	; (800ed34 <prvInsertBlockIntoFreeList+0xac>)
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	e002      	b.n	800ec9c <prvInsertBlockIntoFreeList+0x14>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d8f7      	bhi.n	800ec96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d108      	bne.n	800ecca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	685a      	ldr	r2, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	441a      	add	r2, r3
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	68ba      	ldr	r2, [r7, #8]
 800ecd4:	441a      	add	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d118      	bne.n	800ed10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	4b15      	ldr	r3, [pc, #84]	; (800ed38 <prvInsertBlockIntoFreeList+0xb0>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d00d      	beq.n	800ed06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	441a      	add	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	e008      	b.n	800ed18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed06:	4b0c      	ldr	r3, [pc, #48]	; (800ed38 <prvInsertBlockIntoFreeList+0xb0>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	601a      	str	r2, [r3, #0]
 800ed0e:	e003      	b.n	800ed18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d002      	beq.n	800ed26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed26:	bf00      	nop
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	200049ec 	.word	0x200049ec
 800ed38:	200049f4 	.word	0x200049f4

0800ed3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed40:	2201      	movs	r2, #1
 800ed42:	490e      	ldr	r1, [pc, #56]	; (800ed7c <MX_USB_HOST_Init+0x40>)
 800ed44:	480e      	ldr	r0, [pc, #56]	; (800ed80 <MX_USB_HOST_Init+0x44>)
 800ed46:	f7fb fafd 	bl	800a344 <USBH_Init>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed50:	f7f2 f9a4 	bl	800109c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ed54:	490b      	ldr	r1, [pc, #44]	; (800ed84 <MX_USB_HOST_Init+0x48>)
 800ed56:	480a      	ldr	r0, [pc, #40]	; (800ed80 <MX_USB_HOST_Init+0x44>)
 800ed58:	f7fb fba4 	bl	800a4a4 <USBH_RegisterClass>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ed62:	f7f2 f99b 	bl	800109c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ed66:	4806      	ldr	r0, [pc, #24]	; (800ed80 <MX_USB_HOST_Init+0x44>)
 800ed68:	f7fb fc28 	bl	800a5bc <USBH_Start>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ed72:	f7f2 f993 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ed76:	bf00      	nop
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	0800ed89 	.word	0x0800ed89
 800ed80:	20004e54 	.word	0x20004e54
 800ed84:	2000000c 	.word	0x2000000c

0800ed88 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	460b      	mov	r3, r1
 800ed92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ed94:	78fb      	ldrb	r3, [r7, #3]
 800ed96:	3b01      	subs	r3, #1
 800ed98:	2b04      	cmp	r3, #4
 800ed9a:	d819      	bhi.n	800edd0 <USBH_UserProcess+0x48>
 800ed9c:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <USBH_UserProcess+0x1c>)
 800ed9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800edd1 	.word	0x0800edd1
 800eda8:	0800edc1 	.word	0x0800edc1
 800edac:	0800edd1 	.word	0x0800edd1
 800edb0:	0800edc9 	.word	0x0800edc9
 800edb4:	0800edb9 	.word	0x0800edb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800edb8:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <USBH_UserProcess+0x58>)
 800edba:	2203      	movs	r2, #3
 800edbc:	701a      	strb	r2, [r3, #0]
  break;
 800edbe:	e008      	b.n	800edd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800edc0:	4b07      	ldr	r3, [pc, #28]	; (800ede0 <USBH_UserProcess+0x58>)
 800edc2:	2202      	movs	r2, #2
 800edc4:	701a      	strb	r2, [r3, #0]
  break;
 800edc6:	e004      	b.n	800edd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800edc8:	4b05      	ldr	r3, [pc, #20]	; (800ede0 <USBH_UserProcess+0x58>)
 800edca:	2201      	movs	r2, #1
 800edcc:	701a      	strb	r2, [r3, #0]
  break;
 800edce:	e000      	b.n	800edd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800edd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800edd2:	bf00      	nop
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20004a04 	.word	0x20004a04

0800ede4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08a      	sub	sp, #40	; 0x28
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edec:	f107 0314 	add.w	r3, r7, #20
 800edf0:	2200      	movs	r2, #0
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	605a      	str	r2, [r3, #4]
 800edf6:	609a      	str	r2, [r3, #8]
 800edf8:	60da      	str	r2, [r3, #12]
 800edfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee04:	d147      	bne.n	800ee96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee06:	2300      	movs	r3, #0
 800ee08:	613b      	str	r3, [r7, #16]
 800ee0a:	4b25      	ldr	r3, [pc, #148]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee0e:	4a24      	ldr	r2, [pc, #144]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee10:	f043 0301 	orr.w	r3, r3, #1
 800ee14:	6313      	str	r3, [r2, #48]	; 0x30
 800ee16:	4b22      	ldr	r3, [pc, #136]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1a:	f003 0301 	and.w	r3, r3, #1
 800ee1e:	613b      	str	r3, [r7, #16]
 800ee20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800ee22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ee30:	f107 0314 	add.w	r3, r7, #20
 800ee34:	4619      	mov	r1, r3
 800ee36:	481b      	ldr	r0, [pc, #108]	; (800eea4 <HAL_HCD_MspInit+0xc0>)
 800ee38:	f7f3 fe4e 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ee3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ee40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee42:	2302      	movs	r3, #2
 800ee44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee4a:	2303      	movs	r3, #3
 800ee4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee4e:	230a      	movs	r3, #10
 800ee50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee52:	f107 0314 	add.w	r3, r7, #20
 800ee56:	4619      	mov	r1, r3
 800ee58:	4812      	ldr	r0, [pc, #72]	; (800eea4 <HAL_HCD_MspInit+0xc0>)
 800ee5a:	f7f3 fe3d 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee5e:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee62:	4a0f      	ldr	r2, [pc, #60]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee68:	6353      	str	r3, [r2, #52]	; 0x34
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	4b0c      	ldr	r3, [pc, #48]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee72:	4a0b      	ldr	r2, [pc, #44]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee78:	6453      	str	r3, [r2, #68]	; 0x44
 800ee7a:	4b09      	ldr	r3, [pc, #36]	; (800eea0 <HAL_HCD_MspInit+0xbc>)
 800ee7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ee86:	2200      	movs	r2, #0
 800ee88:	2100      	movs	r1, #0
 800ee8a:	2043      	movs	r0, #67	; 0x43
 800ee8c:	f7f3 fadc 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee90:	2043      	movs	r0, #67	; 0x43
 800ee92:	f7f3 faf5 	bl	8002480 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee96:	bf00      	nop
 800ee98:	3728      	adds	r7, #40	; 0x28
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	40023800 	.word	0x40023800
 800eea4:	40020000 	.word	0x40020000

0800eea8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fc f82d 	bl	800af16 <USBH_LL_IncTimer>
}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fc f871 	bl	800afba <USBH_LL_Connect>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fc f886 	bl	800b000 <USBH_LL_Disconnect>
}
 800eef4:	bf00      	nop
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70fb      	strb	r3, [r7, #3]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fc f8bd 	bl	800b092 <USBH_LL_NotifyURBChange>
#endif
}
 800ef18:	bf00      	nop
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fc f81b 	bl	800af6a <USBH_LL_PortEnabled>
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fc f827 	bl	800af9e <USBH_LL_PortDisabled>
}
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d12a      	bne.n	800efc0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ef6a:	4a18      	ldr	r2, [pc, #96]	; (800efcc <USBH_LL_Init+0x74>)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a15      	ldr	r2, [pc, #84]	; (800efcc <USBH_LL_Init+0x74>)
 800ef76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef7a:	4b14      	ldr	r3, [pc, #80]	; (800efcc <USBH_LL_Init+0x74>)
 800ef7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800ef82:	4b12      	ldr	r3, [pc, #72]	; (800efcc <USBH_LL_Init+0x74>)
 800ef84:	220c      	movs	r2, #12
 800ef86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ef88:	4b10      	ldr	r3, [pc, #64]	; (800efcc <USBH_LL_Init+0x74>)
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef8e:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <USBH_LL_Init+0x74>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ef94:	4b0d      	ldr	r3, [pc, #52]	; (800efcc <USBH_LL_Init+0x74>)
 800ef96:	2202      	movs	r2, #2
 800ef98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef9a:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <USBH_LL_Init+0x74>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800efa0:	480a      	ldr	r0, [pc, #40]	; (800efcc <USBH_LL_Init+0x74>)
 800efa2:	f7f3 ff5f 	bl	8002e64 <HAL_HCD_Init>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800efac:	f7f2 f876 	bl	800109c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800efb0:	4806      	ldr	r0, [pc, #24]	; (800efcc <USBH_LL_Init+0x74>)
 800efb2:	f7f4 fb63 	bl	800367c <HAL_HCD_GetCurrentFrame>
 800efb6:	4603      	mov	r3, r0
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7fb ff9c 	bl	800aef8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	20005238 	.word	0x20005238

0800efd0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f4 fad0 	bl	800358c <HAL_HCD_Start>
 800efec:	4603      	mov	r3, r0
 800efee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 f95c 	bl	800f2b0 <USBH_Get_USB_Status>
 800eff8:	4603      	mov	r3, r0
 800effa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800effc:	7bbb      	ldrb	r3, [r7, #14]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b084      	sub	sp, #16
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f4 fad8 	bl	80035d2 <HAL_HCD_Stop>
 800f022:	4603      	mov	r3, r0
 800f024:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f026:	7bfb      	ldrb	r3, [r7, #15]
 800f028:	4618      	mov	r0, r3
 800f02a:	f000 f941 	bl	800f2b0 <USBH_Get_USB_Status>
 800f02e:	4603      	mov	r3, r0
 800f030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f032:	7bbb      	ldrb	r3, [r7, #14]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f044:	2301      	movs	r3, #1
 800f046:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f04e:	4618      	mov	r0, r3
 800f050:	f7f4 fb22 	bl	8003698 <HAL_HCD_GetCurrentSpeed>
 800f054:	4603      	mov	r3, r0
 800f056:	2b01      	cmp	r3, #1
 800f058:	d007      	beq.n	800f06a <USBH_LL_GetSpeed+0x2e>
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d302      	bcc.n	800f064 <USBH_LL_GetSpeed+0x28>
 800f05e:	2b02      	cmp	r3, #2
 800f060:	d006      	beq.n	800f070 <USBH_LL_GetSpeed+0x34>
 800f062:	e008      	b.n	800f076 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f064:	2300      	movs	r3, #0
 800f066:	73fb      	strb	r3, [r7, #15]
    break;
 800f068:	e008      	b.n	800f07c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f06a:	2301      	movs	r3, #1
 800f06c:	73fb      	strb	r3, [r7, #15]
    break;
 800f06e:	e005      	b.n	800f07c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f070:	2302      	movs	r3, #2
 800f072:	73fb      	strb	r3, [r7, #15]
    break;
 800f074:	e002      	b.n	800f07c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800f076:	2301      	movs	r3, #1
 800f078:	73fb      	strb	r3, [r7, #15]
    break;
 800f07a:	bf00      	nop
  }
  return  speed;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b084      	sub	sp, #16
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f08e:	2300      	movs	r3, #0
 800f090:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f092:	2300      	movs	r3, #0
 800f094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7f4 fab5 	bl	800360c <HAL_HCD_ResetPort>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f901 	bl	800f2b0 <USBH_Get_USB_Status>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0ce:	78fa      	ldrb	r2, [r7, #3]
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7f4 fabd 	bl	8003652 <HAL_HCD_HC_GetXferCount>
 800f0d8:	4603      	mov	r3, r0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f0e2:	b590      	push	{r4, r7, lr}
 800f0e4:	b089      	sub	sp, #36	; 0x24
 800f0e6:	af04      	add	r7, sp, #16
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	4608      	mov	r0, r1
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	70fb      	strb	r3, [r7, #3]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70bb      	strb	r3, [r7, #2]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f100:	2300      	movs	r3, #0
 800f102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f10a:	787c      	ldrb	r4, [r7, #1]
 800f10c:	78ba      	ldrb	r2, [r7, #2]
 800f10e:	78f9      	ldrb	r1, [r7, #3]
 800f110:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f112:	9302      	str	r3, [sp, #8]
 800f114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f118:	9301      	str	r3, [sp, #4]
 800f11a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	4623      	mov	r3, r4
 800f122:	f7f3 ff01 	bl	8002f28 <HAL_HCD_HC_Init>
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 f8bf 	bl	800f2b0 <USBH_Get_USB_Status>
 800f132:	4603      	mov	r3, r0
 800f134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f136:	7bbb      	ldrb	r3, [r7, #14]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3714      	adds	r7, #20
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd90      	pop	{r4, r7, pc}

0800f140 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f150:	2300      	movs	r3, #0
 800f152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f15a:	78fa      	ldrb	r2, [r7, #3]
 800f15c:	4611      	mov	r1, r2
 800f15e:	4618      	mov	r0, r3
 800f160:	f7f3 ff7a 	bl	8003058 <HAL_HCD_HC_Halt>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f000 f8a0 	bl	800f2b0 <USBH_Get_USB_Status>
 800f170:	4603      	mov	r3, r0
 800f172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f174:	7bbb      	ldrb	r3, [r7, #14]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}

0800f17e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f17e:	b590      	push	{r4, r7, lr}
 800f180:	b089      	sub	sp, #36	; 0x24
 800f182:	af04      	add	r7, sp, #16
 800f184:	6078      	str	r0, [r7, #4]
 800f186:	4608      	mov	r0, r1
 800f188:	4611      	mov	r1, r2
 800f18a:	461a      	mov	r2, r3
 800f18c:	4603      	mov	r3, r0
 800f18e:	70fb      	strb	r3, [r7, #3]
 800f190:	460b      	mov	r3, r1
 800f192:	70bb      	strb	r3, [r7, #2]
 800f194:	4613      	mov	r3, r2
 800f196:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f19c:	2300      	movs	r3, #0
 800f19e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f1a6:	787c      	ldrb	r4, [r7, #1]
 800f1a8:	78ba      	ldrb	r2, [r7, #2]
 800f1aa:	78f9      	ldrb	r1, [r7, #3]
 800f1ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f1b0:	9303      	str	r3, [sp, #12]
 800f1b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1b4:	9302      	str	r3, [sp, #8]
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b8:	9301      	str	r3, [sp, #4]
 800f1ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	4623      	mov	r3, r4
 800f1c2:	f7f3 ff6d 	bl	80030a0 <HAL_HCD_HC_SubmitRequest>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f1ca:	7bfb      	ldrb	r3, [r7, #15]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 f86f 	bl	800f2b0 <USBH_Get_USB_Status>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3714      	adds	r7, #20
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd90      	pop	{r4, r7, pc}

0800f1e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1f2:	78fa      	ldrb	r2, [r7, #3]
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7f4 fa16 	bl	8003628 <HAL_HCD_HC_GetURBState>
 800f1fc:	4603      	mov	r3, r0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d103      	bne.n	800f224 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 f872 	bl	800f308 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f224:	20c8      	movs	r0, #200	; 0xc8
 800f226:	f7f2 fdc3 	bl	8001db0 <HAL_Delay>
  return USBH_OK;
 800f22a:	2300      	movs	r3, #0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	460b      	mov	r3, r1
 800f23e:	70fb      	strb	r3, [r7, #3]
 800f240:	4613      	mov	r3, r2
 800f242:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f24a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f24c:	78fa      	ldrb	r2, [r7, #3]
 800f24e:	68f9      	ldr	r1, [r7, #12]
 800f250:	4613      	mov	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	00db      	lsls	r3, r3, #3
 800f258:	440b      	add	r3, r1
 800f25a:	333b      	adds	r3, #59	; 0x3b
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00a      	beq.n	800f278 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f262:	78fa      	ldrb	r2, [r7, #3]
 800f264:	68f9      	ldr	r1, [r7, #12]
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	440b      	add	r3, r1
 800f270:	3350      	adds	r3, #80	; 0x50
 800f272:	78ba      	ldrb	r2, [r7, #2]
 800f274:	701a      	strb	r2, [r3, #0]
 800f276:	e009      	b.n	800f28c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f278:	78fa      	ldrb	r2, [r7, #3]
 800f27a:	68f9      	ldr	r1, [r7, #12]
 800f27c:	4613      	mov	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	440b      	add	r3, r1
 800f286:	3351      	adds	r3, #81	; 0x51
 800f288:	78ba      	ldrb	r2, [r7, #2]
 800f28a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7f2 fd84 	bl	8001db0 <HAL_Delay>
}
 800f2a8:	bf00      	nop
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2be:	79fb      	ldrb	r3, [r7, #7]
 800f2c0:	2b03      	cmp	r3, #3
 800f2c2:	d817      	bhi.n	800f2f4 <USBH_Get_USB_Status+0x44>
 800f2c4:	a201      	add	r2, pc, #4	; (adr r2, 800f2cc <USBH_Get_USB_Status+0x1c>)
 800f2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ca:	bf00      	nop
 800f2cc:	0800f2dd 	.word	0x0800f2dd
 800f2d0:	0800f2e3 	.word	0x0800f2e3
 800f2d4:	0800f2e9 	.word	0x0800f2e9
 800f2d8:	0800f2ef 	.word	0x0800f2ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e0:	e00b      	b.n	800f2fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f2e2:	2302      	movs	r3, #2
 800f2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e6:	e008      	b.n	800f2fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ec:	e005      	b.n	800f2fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f2ee:	2302      	movs	r3, #2
 800f2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2f2:	e002      	b.n	800f2fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2f8:	bf00      	nop
  }
  return usb_status;
 800f2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f312:	79fb      	ldrb	r3, [r7, #7]
 800f314:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f316:	79fb      	ldrb	r3, [r7, #7]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d102      	bne.n	800f322 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f31c:	2301      	movs	r3, #1
 800f31e:	73fb      	strb	r3, [r7, #15]
 800f320:	e001      	b.n	800f326 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f322:	2300      	movs	r3, #0
 800f324:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800f326:	7bfb      	ldrb	r3, [r7, #15]
 800f328:	461a      	mov	r2, r3
 800f32a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f32e:	4803      	ldr	r0, [pc, #12]	; (800f33c <MX_DriverVbusFS+0x34>)
 800f330:	f7f3 fd64 	bl	8002dfc <HAL_GPIO_WritePin>
}
 800f334:	bf00      	nop
 800f336:	3710      	adds	r7, #16
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	40021800 	.word	0x40021800

0800f340 <__errno>:
 800f340:	4b01      	ldr	r3, [pc, #4]	; (800f348 <__errno+0x8>)
 800f342:	6818      	ldr	r0, [r3, #0]
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	20000030 	.word	0x20000030

0800f34c <__libc_init_array>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	4e0d      	ldr	r6, [pc, #52]	; (800f384 <__libc_init_array+0x38>)
 800f350:	4c0d      	ldr	r4, [pc, #52]	; (800f388 <__libc_init_array+0x3c>)
 800f352:	1ba4      	subs	r4, r4, r6
 800f354:	10a4      	asrs	r4, r4, #2
 800f356:	2500      	movs	r5, #0
 800f358:	42a5      	cmp	r5, r4
 800f35a:	d109      	bne.n	800f370 <__libc_init_array+0x24>
 800f35c:	4e0b      	ldr	r6, [pc, #44]	; (800f38c <__libc_init_array+0x40>)
 800f35e:	4c0c      	ldr	r4, [pc, #48]	; (800f390 <__libc_init_array+0x44>)
 800f360:	f000 f8f6 	bl	800f550 <_init>
 800f364:	1ba4      	subs	r4, r4, r6
 800f366:	10a4      	asrs	r4, r4, #2
 800f368:	2500      	movs	r5, #0
 800f36a:	42a5      	cmp	r5, r4
 800f36c:	d105      	bne.n	800f37a <__libc_init_array+0x2e>
 800f36e:	bd70      	pop	{r4, r5, r6, pc}
 800f370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f374:	4798      	blx	r3
 800f376:	3501      	adds	r5, #1
 800f378:	e7ee      	b.n	800f358 <__libc_init_array+0xc>
 800f37a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f37e:	4798      	blx	r3
 800f380:	3501      	adds	r5, #1
 800f382:	e7f2      	b.n	800f36a <__libc_init_array+0x1e>
 800f384:	0800f60c 	.word	0x0800f60c
 800f388:	0800f60c 	.word	0x0800f60c
 800f38c:	0800f60c 	.word	0x0800f60c
 800f390:	0800f610 	.word	0x0800f610

0800f394 <malloc>:
 800f394:	4b02      	ldr	r3, [pc, #8]	; (800f3a0 <malloc+0xc>)
 800f396:	4601      	mov	r1, r0
 800f398:	6818      	ldr	r0, [r3, #0]
 800f39a:	f000 b86d 	b.w	800f478 <_malloc_r>
 800f39e:	bf00      	nop
 800f3a0:	20000030 	.word	0x20000030

0800f3a4 <free>:
 800f3a4:	4b02      	ldr	r3, [pc, #8]	; (800f3b0 <free+0xc>)
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f000 b817 	b.w	800f3dc <_free_r>
 800f3ae:	bf00      	nop
 800f3b0:	20000030 	.word	0x20000030

0800f3b4 <memcpy>:
 800f3b4:	b510      	push	{r4, lr}
 800f3b6:	1e43      	subs	r3, r0, #1
 800f3b8:	440a      	add	r2, r1
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	d100      	bne.n	800f3c0 <memcpy+0xc>
 800f3be:	bd10      	pop	{r4, pc}
 800f3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3c8:	e7f7      	b.n	800f3ba <memcpy+0x6>

0800f3ca <memset>:
 800f3ca:	4402      	add	r2, r0
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d100      	bne.n	800f3d4 <memset+0xa>
 800f3d2:	4770      	bx	lr
 800f3d4:	f803 1b01 	strb.w	r1, [r3], #1
 800f3d8:	e7f9      	b.n	800f3ce <memset+0x4>
	...

0800f3dc <_free_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	4605      	mov	r5, r0
 800f3e0:	2900      	cmp	r1, #0
 800f3e2:	d045      	beq.n	800f470 <_free_r+0x94>
 800f3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3e8:	1f0c      	subs	r4, r1, #4
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	bfb8      	it	lt
 800f3ee:	18e4      	addlt	r4, r4, r3
 800f3f0:	f000 f8ac 	bl	800f54c <__malloc_lock>
 800f3f4:	4a1f      	ldr	r2, [pc, #124]	; (800f474 <_free_r+0x98>)
 800f3f6:	6813      	ldr	r3, [r2, #0]
 800f3f8:	4610      	mov	r0, r2
 800f3fa:	b933      	cbnz	r3, 800f40a <_free_r+0x2e>
 800f3fc:	6063      	str	r3, [r4, #4]
 800f3fe:	6014      	str	r4, [r2, #0]
 800f400:	4628      	mov	r0, r5
 800f402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f406:	f000 b8a2 	b.w	800f54e <__malloc_unlock>
 800f40a:	42a3      	cmp	r3, r4
 800f40c:	d90c      	bls.n	800f428 <_free_r+0x4c>
 800f40e:	6821      	ldr	r1, [r4, #0]
 800f410:	1862      	adds	r2, r4, r1
 800f412:	4293      	cmp	r3, r2
 800f414:	bf04      	itt	eq
 800f416:	681a      	ldreq	r2, [r3, #0]
 800f418:	685b      	ldreq	r3, [r3, #4]
 800f41a:	6063      	str	r3, [r4, #4]
 800f41c:	bf04      	itt	eq
 800f41e:	1852      	addeq	r2, r2, r1
 800f420:	6022      	streq	r2, [r4, #0]
 800f422:	6004      	str	r4, [r0, #0]
 800f424:	e7ec      	b.n	800f400 <_free_r+0x24>
 800f426:	4613      	mov	r3, r2
 800f428:	685a      	ldr	r2, [r3, #4]
 800f42a:	b10a      	cbz	r2, 800f430 <_free_r+0x54>
 800f42c:	42a2      	cmp	r2, r4
 800f42e:	d9fa      	bls.n	800f426 <_free_r+0x4a>
 800f430:	6819      	ldr	r1, [r3, #0]
 800f432:	1858      	adds	r0, r3, r1
 800f434:	42a0      	cmp	r0, r4
 800f436:	d10b      	bne.n	800f450 <_free_r+0x74>
 800f438:	6820      	ldr	r0, [r4, #0]
 800f43a:	4401      	add	r1, r0
 800f43c:	1858      	adds	r0, r3, r1
 800f43e:	4282      	cmp	r2, r0
 800f440:	6019      	str	r1, [r3, #0]
 800f442:	d1dd      	bne.n	800f400 <_free_r+0x24>
 800f444:	6810      	ldr	r0, [r2, #0]
 800f446:	6852      	ldr	r2, [r2, #4]
 800f448:	605a      	str	r2, [r3, #4]
 800f44a:	4401      	add	r1, r0
 800f44c:	6019      	str	r1, [r3, #0]
 800f44e:	e7d7      	b.n	800f400 <_free_r+0x24>
 800f450:	d902      	bls.n	800f458 <_free_r+0x7c>
 800f452:	230c      	movs	r3, #12
 800f454:	602b      	str	r3, [r5, #0]
 800f456:	e7d3      	b.n	800f400 <_free_r+0x24>
 800f458:	6820      	ldr	r0, [r4, #0]
 800f45a:	1821      	adds	r1, r4, r0
 800f45c:	428a      	cmp	r2, r1
 800f45e:	bf04      	itt	eq
 800f460:	6811      	ldreq	r1, [r2, #0]
 800f462:	6852      	ldreq	r2, [r2, #4]
 800f464:	6062      	str	r2, [r4, #4]
 800f466:	bf04      	itt	eq
 800f468:	1809      	addeq	r1, r1, r0
 800f46a:	6021      	streq	r1, [r4, #0]
 800f46c:	605c      	str	r4, [r3, #4]
 800f46e:	e7c7      	b.n	800f400 <_free_r+0x24>
 800f470:	bd38      	pop	{r3, r4, r5, pc}
 800f472:	bf00      	nop
 800f474:	20004a08 	.word	0x20004a08

0800f478 <_malloc_r>:
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	1ccd      	adds	r5, r1, #3
 800f47c:	f025 0503 	bic.w	r5, r5, #3
 800f480:	3508      	adds	r5, #8
 800f482:	2d0c      	cmp	r5, #12
 800f484:	bf38      	it	cc
 800f486:	250c      	movcc	r5, #12
 800f488:	2d00      	cmp	r5, #0
 800f48a:	4606      	mov	r6, r0
 800f48c:	db01      	blt.n	800f492 <_malloc_r+0x1a>
 800f48e:	42a9      	cmp	r1, r5
 800f490:	d903      	bls.n	800f49a <_malloc_r+0x22>
 800f492:	230c      	movs	r3, #12
 800f494:	6033      	str	r3, [r6, #0]
 800f496:	2000      	movs	r0, #0
 800f498:	bd70      	pop	{r4, r5, r6, pc}
 800f49a:	f000 f857 	bl	800f54c <__malloc_lock>
 800f49e:	4a21      	ldr	r2, [pc, #132]	; (800f524 <_malloc_r+0xac>)
 800f4a0:	6814      	ldr	r4, [r2, #0]
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	b991      	cbnz	r1, 800f4cc <_malloc_r+0x54>
 800f4a6:	4c20      	ldr	r4, [pc, #128]	; (800f528 <_malloc_r+0xb0>)
 800f4a8:	6823      	ldr	r3, [r4, #0]
 800f4aa:	b91b      	cbnz	r3, 800f4b4 <_malloc_r+0x3c>
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f000 f83d 	bl	800f52c <_sbrk_r>
 800f4b2:	6020      	str	r0, [r4, #0]
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f000 f838 	bl	800f52c <_sbrk_r>
 800f4bc:	1c43      	adds	r3, r0, #1
 800f4be:	d124      	bne.n	800f50a <_malloc_r+0x92>
 800f4c0:	230c      	movs	r3, #12
 800f4c2:	6033      	str	r3, [r6, #0]
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f000 f842 	bl	800f54e <__malloc_unlock>
 800f4ca:	e7e4      	b.n	800f496 <_malloc_r+0x1e>
 800f4cc:	680b      	ldr	r3, [r1, #0]
 800f4ce:	1b5b      	subs	r3, r3, r5
 800f4d0:	d418      	bmi.n	800f504 <_malloc_r+0x8c>
 800f4d2:	2b0b      	cmp	r3, #11
 800f4d4:	d90f      	bls.n	800f4f6 <_malloc_r+0x7e>
 800f4d6:	600b      	str	r3, [r1, #0]
 800f4d8:	50cd      	str	r5, [r1, r3]
 800f4da:	18cc      	adds	r4, r1, r3
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f000 f836 	bl	800f54e <__malloc_unlock>
 800f4e2:	f104 000b 	add.w	r0, r4, #11
 800f4e6:	1d23      	adds	r3, r4, #4
 800f4e8:	f020 0007 	bic.w	r0, r0, #7
 800f4ec:	1ac3      	subs	r3, r0, r3
 800f4ee:	d0d3      	beq.n	800f498 <_malloc_r+0x20>
 800f4f0:	425a      	negs	r2, r3
 800f4f2:	50e2      	str	r2, [r4, r3]
 800f4f4:	e7d0      	b.n	800f498 <_malloc_r+0x20>
 800f4f6:	428c      	cmp	r4, r1
 800f4f8:	684b      	ldr	r3, [r1, #4]
 800f4fa:	bf16      	itet	ne
 800f4fc:	6063      	strne	r3, [r4, #4]
 800f4fe:	6013      	streq	r3, [r2, #0]
 800f500:	460c      	movne	r4, r1
 800f502:	e7eb      	b.n	800f4dc <_malloc_r+0x64>
 800f504:	460c      	mov	r4, r1
 800f506:	6849      	ldr	r1, [r1, #4]
 800f508:	e7cc      	b.n	800f4a4 <_malloc_r+0x2c>
 800f50a:	1cc4      	adds	r4, r0, #3
 800f50c:	f024 0403 	bic.w	r4, r4, #3
 800f510:	42a0      	cmp	r0, r4
 800f512:	d005      	beq.n	800f520 <_malloc_r+0xa8>
 800f514:	1a21      	subs	r1, r4, r0
 800f516:	4630      	mov	r0, r6
 800f518:	f000 f808 	bl	800f52c <_sbrk_r>
 800f51c:	3001      	adds	r0, #1
 800f51e:	d0cf      	beq.n	800f4c0 <_malloc_r+0x48>
 800f520:	6025      	str	r5, [r4, #0]
 800f522:	e7db      	b.n	800f4dc <_malloc_r+0x64>
 800f524:	20004a08 	.word	0x20004a08
 800f528:	20004a0c 	.word	0x20004a0c

0800f52c <_sbrk_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4c06      	ldr	r4, [pc, #24]	; (800f548 <_sbrk_r+0x1c>)
 800f530:	2300      	movs	r3, #0
 800f532:	4605      	mov	r5, r0
 800f534:	4608      	mov	r0, r1
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	f7f2 fb82 	bl	8001c40 <_sbrk>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_sbrk_r+0x1a>
 800f540:	6823      	ldr	r3, [r4, #0]
 800f542:	b103      	cbz	r3, 800f546 <_sbrk_r+0x1a>
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	200054fc 	.word	0x200054fc

0800f54c <__malloc_lock>:
 800f54c:	4770      	bx	lr

0800f54e <__malloc_unlock>:
 800f54e:	4770      	bx	lr

0800f550 <_init>:
 800f550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f552:	bf00      	nop
 800f554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f556:	bc08      	pop	{r3}
 800f558:	469e      	mov	lr, r3
 800f55a:	4770      	bx	lr

0800f55c <_fini>:
 800f55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55e:	bf00      	nop
 800f560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f562:	bc08      	pop	{r3}
 800f564:	469e      	mov	lr, r3
 800f566:	4770      	bx	lr
