
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001213c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08012320  08012320  00022320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801256c  0801256c  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  0801256c  0801256c  0002256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012574  08012574  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012574  08012574  00022574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801257c  0801257c  0002257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08012584  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c50  20000098  0801261c  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ce8  0801261c  00035ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004504b  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000079ec  00000000  00000000  00075113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c50  00000000  00000000  0007cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002968  00000000  00000000  0007f750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef41  00000000  00000000  000820b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003436b  00000000  00000000  00090ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109d39  00000000  00000000  000c5364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cf09d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000da0c  00000000  00000000  001cf0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012304 	.word	0x08012304

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	08012304 	.word	0x08012304

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f010 f803 	bl	8010f10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4904      	ldr	r1, [pc, #16]	; (8000f24 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8000f16:	f001 f8bc 	bl	8002092 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8000f1a:	4603      	mov	r3, r0
					__idx, __base); }
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08012320 	.word	0x08012320
 8000f28:	080122d5 	.word	0x080122d5

08000f2c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f001 f901 	bl	800213c <_ZNSaI10CoordinateED1Ev>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f8e4 	bl	800211c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implC1Ev>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZNSt6vectorI10CoordinateSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffeb 	bl	8000f44 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EEC1Ev>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN PFP */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]


	if(Rx_Data[0] == '-' && Rx_Data[1] == '2')
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2d      	cmp	r3, #45	; 0x2d
 8000f86:	d13b      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x88>
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	2b32      	cmp	r3, #50	; 0x32
 8000f8e:	d137      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x88>
	{
		uint8_t byteArray1[4] = {  Rx_Data[2], Rx_Data[3], Rx_Data[4],  Rx_Data[5] };
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000fa2:	791b      	ldrb	r3, [r3, #4]
 8000fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		std::string s(reinterpret_cast<char*>(byteArray1), 4);
 8000fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00f ff58 	bl	8010e6a <_ZNSaIcEC1Ev>
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000fc2:	f107 000c 	add.w	r0, r7, #12
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	f00f ffc8 	bl	8010f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8000fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00f ff4b 	bl	8010e6c <_ZNSaIcED1Ev>
		int pixleMsgSize = std::stoi(s, nullptr, 0);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff8a 	bl	8000ef8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8000fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
		HAL_UART_Receive_IT(&huart6, Rx_Data, pixleMsgSize);
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	490b      	ldr	r1, [pc, #44]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 8000ff0:	f008 f801 	bl	8008ff6 <HAL_UART_Receive_IT>
		std::string s(reinterpret_cast<char*>(byteArray1), 4);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00f ff83 	bl	8010f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		HAL_UART_Receive_IT(&huart6, Rx_Data, pixleMsgSize);
 8000ffe:	e008      	b.n	8001012 <HAL_UART_RxCpltCallback+0x9a>
	}
	else
	{
		sendLocationReady = true;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_UART_RxCpltCallback+0xac>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
 8001006:	2206      	movs	r2, #6
 8001008:	4904      	ldr	r1, [pc, #16]	; (800101c <HAL_UART_RxCpltCallback+0xa4>)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_UART_RxCpltCallback+0xa8>)
 800100c:	f007 fff3 	bl	8008ff6 <HAL_UART_Receive_IT>
//	}

	//HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // red LED

}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000444 	.word	0x20000444
 8001020:	2000035c 	.word	0x2000035c
 8001024:	20000c14 	.word	0x20000c14

08001028 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Calculates the BoundaryBox around the person based off the pixels read it
struct BoundaryBox getSinglePersonLocation( std::vector<struct Coordinate>& whitePixels)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	struct BoundaryBox personBoundaryBox;

    float widthAverage, widthStd = 0;
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
    float heightAverage, heightStd = 0;
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	64bb      	str	r3, [r7, #72]	; 0x48
    int length = whitePixels.size();
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f001 f8a1 	bl	8002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8001044:	4603      	mov	r3, r0
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c

    int widthSum = 0, heightSum = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
 800104c:	2300      	movs	r3, #0
 800104e:	643b      	str	r3, [r7, #64]	; 0x40

	for(struct Coordinate pixel : whitePixels)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
 8001054:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001056:	f001 f8a6 	bl	80021a6 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 800105a:	4603      	mov	r3, r0
 800105c:	623b      	str	r3, [r7, #32]
 800105e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001060:	f001 f8b1 	bl	80021c6 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 8001064:	4603      	mov	r3, r0
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	f107 021c 	add.w	r2, r7, #28
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f001 f8b8 	bl	80021e8 <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d019      	beq.n	80010b2 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x8a>
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f8d9 	bl	800223a <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>
 8001088:	4602      	mov	r2, r0
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001092:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		widthSum += pixel.width;
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800109a:	4413      	add	r3, r2
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
		heightSum += pixel.height;
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010a2:	4413      	add	r3, r2
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
	for(struct Coordinate pixel : whitePixels)
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f8b4 	bl	8002218 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>
 80010b0:	e7da      	b.n	8001068 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x40>
	}

    widthAverage = widthSum / length;
 80010b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    heightAverage = heightSum / length;
 80010c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	for(struct Coordinate pixel : whitePixels)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010e0:	f001 f861 	bl	80021a6 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 80010e4:	4603      	mov	r3, r0
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010ea:	f001 f86c 	bl	80021c6 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	f107 020c 	add.w	r2, r7, #12
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f873 	bl	80021e8 <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d045      	beq.n	8001194 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x16c>
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4618      	mov	r0, r3
 800110e:	f001 f894 	bl	800223a <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>
 8001112:	4602      	mov	r2, r0
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111c:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		widthStd += (pixel.width - widthAverage) * (pixel.width - widthAverage);
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800112e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800113c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001140:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		heightStd += (pixel.height - heightAverage) * (pixel.height - heightAverage);
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001170:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001174:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001184:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	for(struct Coordinate pixel : whitePixels)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f843 	bl	8002218 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>
 8001192:	e7ae      	b.n	80010f2 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0xca>
	}

    widthStd = widthStd * (1 / length - 1);
 8001194:	2201      	movs	r2, #1
 8001196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001198:	fb92 f3f3 	sdiv	r3, r2, r3
 800119c:	3b01      	subs	r3, #1
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ae:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    heightStd = heightStd * (1 / length - 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ba:	3b01      	subs	r3, #1
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    widthStd = pow(widthStd, 0.5);
 80011d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80011d2:	f7ff f989 	bl	80004e8 <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8001290 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x268>
 80011de:	ec43 2b10 	vmov	d0, r2, r3
 80011e2:	f00f fecf 	bl	8010f84 <pow>
 80011e6:	ec53 2b10 	vmov	r2, r3, d0
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcab 	bl	8000b48 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    heightStd = pow(heightStd, 0.5);
 80011f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011f8:	f7ff f976 	bl	80004e8 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001290 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x268>
 8001204:	ec43 2b10 	vmov	d0, r2, r3
 8001208:	f00f febc 	bl	8010f84 <pow>
 800120c:	ec53 2b10 	vmov	r2, r3, d0
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fc98 	bl	8000b48 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48

    personBoundaryBox.widthIndex = widthAverage;
 800121c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001224:	ee17 2a90 	vmov	r2, s15
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
    personBoundaryBox.heightIndex = heightAverage;
 800122c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 2a90 	vmov	r2, s15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	605a      	str	r2, [r3, #4]
    personBoundaryBox.width = widthStd * 1.5;
 800123c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800123e:	f7ff f953 	bl	80004e8 <__aeabi_f2d>
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x270>)
 8001248:	f7ff f9a6 	bl	8000598 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc50 	bl	8000af8 <__aeabi_d2iz>
 8001258:	4602      	mov	r2, r0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	609a      	str	r2, [r3, #8]
    personBoundaryBox.height = heightStd * 1.5;
 800125e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001260:	f7ff f942 	bl	80004e8 <__aeabi_f2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE+0x270>)
 800126a:	f7ff f995 	bl	8000598 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc3f 	bl	8000af8 <__aeabi_d2iz>
 800127a:	4602      	mov	r2, r0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60da      	str	r2, [r3, #12]

    return personBoundaryBox;
 8001280:	bf00      	nop
}
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	3750      	adds	r7, #80	; 0x50
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	00000000 	.word	0x00000000
 8001294:	3fe00000 	.word	0x3fe00000
 8001298:	3ff80000 	.word	0x3ff80000

0800129c <_Z12sendLocation11BoundaryBox>:

// Gets the current location and sends it to the light board over UDP if it is different from the last location
struct BoundaryBox sendLocation(struct BoundaryBox previousLocation)
{
 800129c:	b084      	sub	sp, #16
 800129e:	b580      	push	{r7, lr}
 80012a0:	b088      	sub	sp, #32
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80012aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = recievedCoordinates.size();
 80012ae:	4826      	ldr	r0, [pc, #152]	; (8001348 <_Z12sendLocation11BoundaryBox+0xac>)
 80012b0:	f000 ff69 	bl	8002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 80012b4:	4603      	mov	r3, r0
 80012b6:	61fb      	str	r3, [r7, #28]
	BoundaryBox currentLocation = getSinglePersonLocation(recievedCoordinates);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4923      	ldr	r1, [pc, #140]	; (8001348 <_Z12sendLocation11BoundaryBox+0xac>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff feb3 	bl	8001028 <_Z23getSinglePersonLocationRSt6vectorI10CoordinateSaIS0_EE>

	int upperLeftHeight = previousLocation.heightIndex - (previousLocation.height / 2);
 80012c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c6:	0fd9      	lsrs	r1, r3, #31
 80012c8:	440b      	add	r3, r1
 80012ca:	105b      	asrs	r3, r3, #1
 80012cc:	425b      	negs	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
	int uperLeftWidth = previousLocation.widthIndex - (previousLocation.width / 2);
 80012d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d6:	0fd9      	lsrs	r1, r3, #31
 80012d8:	440b      	add	r3, r1
 80012da:	105b      	asrs	r3, r3, #1
 80012dc:	425b      	negs	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

	int lowerRightHeight = previousLocation.heightIndex + (previousLocation.height / 2);
 80012e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e6:	0fd9      	lsrs	r1, r3, #31
 80012e8:	440b      	add	r3, r1
 80012ea:	105b      	asrs	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
	int lowerRightWidth = previousLocation.widthIndex + (previousLocation.width / 2);
 80012f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	0fd9      	lsrs	r1, r3, #31
 80012f6:	440b      	add	r3, r1
 80012f8:	105b      	asrs	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]


	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	dd0e      	ble.n	8001326 <_Z12sendLocation11BoundaryBox+0x8a>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	429a      	cmp	r2, r3
 8001310:	da09      	bge.n	8001326 <_Z12sendLocation11BoundaryBox+0x8a>
	   currentLocation.widthIndex < lowerRightWidth && currentLocation.widthIndex > uperLeftWidth))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	dd04      	ble.n	8001326 <_Z12sendLocation11BoundaryBox+0x8a>
	   currentLocation.widthIndex < lowerRightWidth && currentLocation.widthIndex > uperLeftWidth))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
	if(!(currentLocation.heightIndex < lowerRightHeight && currentLocation.height > upperLeftHeight &&
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	429a      	cmp	r2, r3
 8001324:	db07      	blt.n	8001336 <_Z12sendLocation11BoundaryBox+0x9a>
	{
		// This is when we create new UDP light packets
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001326:	2201      	movs	r2, #1
 8001328:	2120      	movs	r1, #32
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <_Z12sendLocation11BoundaryBox+0xb0>)
 800132c:	f003 fb4a 	bl	80049c4 <HAL_GPIO_WritePin>
		osDelay(100);
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f00c fbe3 	bl	800dafc <osDelay>
	}

	return currentLocation;
 8001336:	bf00      	nop
}
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001342:	b004      	add	sp, #16
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000c18 	.word	0x20000c18
 800134c:	40020800 	.word	0x40020800

08001350 <_Z22SetRecievedCoordinatesv>:


void SetRecievedCoordinates()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i <= sizeof Rx_Data; i+=2)
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
	{
		if ( Rx_Data[i] == 0 &&  Rx_Data[i+1] == 0)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <_Z22SetRecievedCoordinatesv+0x4c>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <_Z22SetRecievedCoordinatesv+0x20>
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <_Z22SetRecievedCoordinatesv+0x4c>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d011      	beq.n	8001394 <_Z22SetRecievedCoordinatesv+0x44>
		{
			break;
		}
		struct Coordinate temp;
		temp.height = Rx_Data[i];
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <_Z22SetRecievedCoordinatesv+0x4c>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	60bb      	str	r3, [r7, #8]
		temp.width = Rx_Data[i+1];
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3301      	adds	r3, #1
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <_Z22SetRecievedCoordinatesv+0x4c>)
 800137e:	5cd3      	ldrb	r3, [r2, r3]
 8001380:	607b      	str	r3, [r7, #4]
		recievedCoordinates.push_back(temp);
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <_Z22SetRecievedCoordinatesv+0x50>)
 8001388:	f000 ff63 	bl	8002252 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_>
	for(uint8_t i = 0; i <= sizeof Rx_Data; i+=2)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3302      	adds	r3, #2
 8001390:	73fb      	strb	r3, [r7, #15]
	}
 8001392:	e7e2      	b.n	800135a <_Z22SetRecievedCoordinatesv+0xa>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000444 	.word	0x20000444
 80013a0:	20000c18 	.word	0x20000c18

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f002 faa0 	bl	80038ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f83a 	bl	8001424 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f000 fb60 	bl	8001a74 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80013b4:	f000 f8e4 	bl	8001580 <_ZL12MX_ADC1_Initv>
  MX_DAC_Init();
 80013b8:	f000 f93e 	bl	8001638 <_ZL11MX_DAC_Initv>
  MX_DFSDM1_Init();
 80013bc:	f000 f970 	bl	80016a0 <_ZL14MX_DFSDM1_Initv>
  MX_DFSDM2_Init();
 80013c0:	f000 f9aa 	bl	8001718 <_ZL14MX_DFSDM2_Initv>
  MX_FMPI2C1_Init();
 80013c4:	f000 fa1c 	bl	8001800 <_ZL15MX_FMPI2C1_Initv>
  MX_FSMC_Init();
 80013c8:	f000 fcfc 	bl	8001dc4 <_ZL12MX_FSMC_Initv>
  MX_I2S2_Init();
 80013cc:	f000 fa58 	bl	8001880 <_ZL12MX_I2S2_Initv>
  MX_QUADSPI_Init();
 80013d0:	f000 fa8a 	bl	80018e8 <_ZL15MX_QUADSPI_Initv>
  MX_SDIO_SD_Init();
 80013d4:	f000 fab8 	bl	8001948 <_ZL15MX_SDIO_SD_Initv>
  MX_UART10_Init();
 80013d8:	f000 faf0 	bl	80019bc <_ZL14MX_UART10_Initv>
  MX_USART6_UART_Init();
 80013dc:	f000 fb1c 	bl	8001a18 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013e0:	f00c fa7c 	bl	800d8dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(DefaultThread, NULL, &blink01_attributes);
 80013e4:	4a09      	ldr	r2, [pc, #36]	; (800140c <main+0x68>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <main+0x6c>)
 80013ea:	f00c fae1 	bl	800d9b0 <osThreadNew>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <main+0x70>)
 80013f2:	6013      	str	r3, [r2, #0]

  /* creation of mainThread */
  mainThreadHandle = osThreadNew(MainThread, NULL, &mainThread_attributes);
 80013f4:	4a08      	ldr	r2, [pc, #32]	; (8001418 <main+0x74>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <main+0x78>)
 80013fa:	f00c fad9 	bl	800d9b0 <osThreadNew>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <main+0x7c>)
 8001402:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001404:	f00c fa9e 	bl	800d944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001408:	e7fe      	b.n	8001408 <main+0x64>
 800140a:	bf00      	nop
 800140c:	08012380 	.word	0x08012380
 8001410:	08001f3d 	.word	0x08001f3d
 8001414:	2000043c 	.word	0x2000043c
 8001418:	080123a4 	.word	0x080123a4
 800141c:	08001fcd 	.word	0x08001fcd
 8001420:	20000440 	.word	0x20000440

08001424 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0aa      	sub	sp, #168	; 0xa8
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800142e:	2234      	movs	r2, #52	; 0x34
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f010 fdc4 	bl	8011fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2258      	movs	r2, #88	; 0x58
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f010 fdb5 	bl	8011fc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <_Z18SystemClock_Configv+0x154>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a46      	ldr	r2, [pc, #280]	; (8001578 <_Z18SystemClock_Configv+0x154>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <_Z18SystemClock_Configv+0x154>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <_Z18SystemClock_Configv+0x158>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a40      	ldr	r2, [pc, #256]	; (800157c <_Z18SystemClock_Configv+0x158>)
 800147c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <_Z18SystemClock_Configv+0x158>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800148e:	2303      	movs	r3, #3
 8001490:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001492:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001496:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149e:	2310      	movs	r3, #16
 80014a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80014b2:	230f      	movs	r3, #15
 80014b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80014b8:	2390      	movs	r3, #144	; 0x90
 80014ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80014c4:	2305      	movs	r3, #5
 80014c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 fb13 	bl	8007b00 <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80014ea:	f000 fd91 	bl	8002010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014f2:	2300      	movs	r3, #0
 80014f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001502:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fd07 	bl	8006f1c <HAL_RCC_ClockConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800151e:	f000 fd77 	bl	8002010 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8001522:	f240 1371 	movw	r3, #369	; 0x171
 8001526:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001528:	2332      	movs	r3, #50	; 0x32
 800152a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 800152c:	230c      	movs	r3, #12
 800152e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001534:	2302      	movs	r3, #2
 8001536:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8001540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8001546:	2300      	movs	r3, #0
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fee2 	bl	8007320 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_Z18SystemClock_Configv+0x14c>
  {
    Error_Handler();
 800156c:	f000 fd50 	bl	8002010 <Error_Handler>
  }
}
 8001570:	bf00      	nop
 8001572:	37a8      	adds	r7, #168	; 0xa8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000

08001580 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 8001594:	4a26      	ldr	r2, [pc, #152]	; (8001630 <_ZL12MX_ADC1_Initv+0xb0>)
 8001596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <_ZL12MX_ADC1_Initv+0xb4>)
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015da:	2201      	movs	r2, #1
 80015dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015de:	4813      	ldr	r0, [pc, #76]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 80015e0:	f002 f9ea 	bl	80039b8 <HAL_ADC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80015f4:	f000 fd0c 	bl	8002010 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f8:	230a      	movs	r3, #10
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <_ZL12MX_ADC1_Initv+0xac>)
 800160a:	f002 fa19 	bl	8003a40 <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800161e:	f000 fcf7 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000b4 	.word	0x200000b4
 8001630:	40012000 	.word	0x40012000
 8001634:	0f000001 	.word	0x0f000001

08001638 <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <_ZL11MX_DAC_Initv+0x60>)
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_ZL11MX_DAC_Initv+0x64>)
 800164a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800164c:	4812      	ldr	r0, [pc, #72]	; (8001698 <_ZL11MX_DAC_Initv+0x60>)
 800164e:	f002 fd07 	bl	8004060 <HAL_DAC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8001662:	f000 fcd5 	bl	8002010 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <_ZL11MX_DAC_Initv+0x60>)
 8001676:	f002 fd69 	bl	800414c <HAL_DAC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 800168a:	f000 fcc1 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */
//
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000fc 	.word	0x200000fc
 800169c:	40007400 	.word	0x40007400

080016a0 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <_ZL14MX_DFSDM1_Initv+0x74>)
 80016a8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016d0:	2202      	movs	r2, #2
 80016d2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <_ZL14MX_DFSDM1_Initv+0x70>)
 80016f4:	f002 fd82 	bl	80041fc <HAL_DFSDM_ChannelInit>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <_ZL14MX_DFSDM1_Initv+0x6c>
  {
    Error_Handler();
 8001708:	f000 fc82 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000110 	.word	0x20000110
 8001714:	40016020 	.word	0x40016020

08001718 <_ZL14MX_DFSDM2_Initv>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800171e:	4a35      	ldr	r2, [pc, #212]	; (80017f4 <_ZL14MX_DFSDM2_Initv+0xdc>)
 8001720:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001724:	2201      	movs	r2, #1
 8001726:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001730:	2202      	movs	r2, #2
 8001732:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001748:	2202      	movs	r2, #2
 800174a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001752:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800175a:	2201      	movs	r2, #1
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800176a:	4821      	ldr	r0, [pc, #132]	; (80017f0 <_ZL14MX_DFSDM2_Initv+0xd8>)
 800176c:	f002 fd46 	bl	80041fc <HAL_DFSDM_ChannelInit>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL14MX_DFSDM2_Initv+0x6c>
  {
    Error_Handler();
 8001780:	f000 fc46 	bl	8002010 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <_ZL14MX_DFSDM2_Initv+0xe4>)
 8001788:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 800178c:	2201      	movs	r2, #1
 800178e:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 8001798:	2202      	movs	r2, #2
 800179a:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <_ZL14MX_DFSDM2_Initv+0xe0>)
 80017d4:	f002 fd12 	bl	80041fc <HAL_DFSDM_ChannelInit>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <_ZL14MX_DFSDM2_Initv+0xd4>
  {
    Error_Handler();
 80017e8:	f000 fc12 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000148 	.word	0x20000148
 80017f4:	40016420 	.word	0x40016420
 80017f8:	20000180 	.word	0x20000180
 80017fc:	400164e0 	.word	0x400164e0

08001800 <_ZL15MX_FMPI2C1_Initv>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <_ZL15MX_FMPI2C1_Initv+0x78>)
 8001808:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <_ZL15MX_FMPI2C1_Initv+0x7c>)
 800180e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001818:	2201      	movs	r2, #1
 800181a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 800183c:	f002 fe54 	bl	80044e8 <HAL_FMPI2C_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <_ZL15MX_FMPI2C1_Initv+0x54>
  {
    Error_Handler();
 8001850:	f000 fbde 	bl	8002010 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <_ZL15MX_FMPI2C1_Initv+0x74>)
 8001858:	f002 fed5 	bl	8004606 <HAL_FMPI2CEx_ConfigAnalogFilter>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf14      	ite	ne
 8001862:	2301      	movne	r3, #1
 8001864:	2300      	moveq	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <_ZL15MX_FMPI2C1_Initv+0x70>
  {
    Error_Handler();
 800186c:	f000 fbd0 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200001b8 	.word	0x200001b8
 8001878:	40006000 	.word	0x40006000
 800187c:	00303d5b 	.word	0x00303d5b

08001880 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <_ZL12MX_I2S2_Initv+0x64>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 80018a8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80018ac:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 80018bc:	2201      	movs	r2, #1
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <_ZL12MX_I2S2_Initv+0x60>)
 80018c2:	f004 fda7 	bl	8006414 <HAL_I2S_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZL12MX_I2S2_Initv+0x5a>
  {
    Error_Handler();
 80018d6:	f000 fb9b 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000204 	.word	0x20000204
 80018e4:	40003800 	.word	0x40003800

080018e8 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <_ZL15MX_QUADSPI_Initv+0x5c>)
 80018f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001906:	2201      	movs	r2, #1
 8001908:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <_ZL15MX_QUADSPI_Initv+0x58>)
 8001924:	f005 fa38 	bl	8006d98 <HAL_QSPI_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8001938:	f000 fb6a 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000024c 	.word	0x2000024c
 8001944:	a0001000 	.word	0xa0001000

08001948 <_ZL15MX_SDIO_SD_Initv>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <_ZL15MX_SDIO_SD_Initv+0x70>)
 8001950:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001978:	f006 fb04 	bl	8007f84 <HAL_SD_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <_ZL15MX_SDIO_SD_Initv+0x48>
  {
    Error_Handler();
 800198c:	f000 fb40 	bl	8002010 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <_ZL15MX_SDIO_SD_Initv+0x6c>)
 8001996:	f006 fd29 	bl	80083ec <HAL_SD_ConfigWideBusOperation>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL15MX_SDIO_SD_Initv+0x66>
  {
    Error_Handler();
 80019aa:	f000 fb31 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000298 	.word	0x20000298
 80019b8:	40012c00 	.word	0x40012c00

080019bc <_ZL14MX_UART10_Initv>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_ZL14MX_UART10_Initv+0x58>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <_ZL14MX_UART10_Initv+0x54>)
 80019f4:	f007 fab2 	bl	8008f5c <HAL_UART_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf14      	ite	ne
 80019fe:	2301      	movne	r3, #1
 8001a00:	2300      	moveq	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <_ZL14MX_UART10_Initv+0x50>
  {
    Error_Handler();
 8001a08:	f000 fb02 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000031c 	.word	0x2000031c
 8001a14:	40011c00 	.word	0x40011c00

08001a18 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001a50:	f007 fa84 	bl	8008f5c <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001a64:	f000 fad4 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000035c 	.word	0x2000035c
 8001a70:	40011400 	.word	0x40011400

08001a74 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	; 0x38
 8001a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
 8001a8e:	4bb0      	ldr	r3, [pc, #704]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4aaf      	ldr	r2, [pc, #700]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a94:	f043 0310 	orr.w	r3, r3, #16
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4bad      	ldr	r3, [pc, #692]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	623b      	str	r3, [r7, #32]
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	4ba9      	ldr	r3, [pc, #676]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4aa8      	ldr	r2, [pc, #672]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4ba6      	ldr	r3, [pc, #664]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	4ba2      	ldr	r3, [pc, #648]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4aa1      	ldr	r2, [pc, #644]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001acc:	f043 0320 	orr.w	r3, r3, #32
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b9f      	ldr	r3, [pc, #636]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	4b9b      	ldr	r3, [pc, #620]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a9a      	ldr	r2, [pc, #616]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b94      	ldr	r3, [pc, #592]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a93      	ldr	r2, [pc, #588]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b91      	ldr	r3, [pc, #580]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a8c      	ldr	r2, [pc, #560]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b8a      	ldr	r3, [pc, #552]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a85      	ldr	r2, [pc, #532]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b83      	ldr	r3, [pc, #524]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a7e      	ldr	r2, [pc, #504]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2138      	movs	r1, #56	; 0x38
 8001b6e:	4879      	ldr	r0, [pc, #484]	; (8001d54 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001b70:	f002 ff28 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2120      	movs	r1, #32
 8001b78:	4877      	ldr	r0, [pc, #476]	; (8001d58 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001b7a:	f002 ff23 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b84:	4875      	ldr	r0, [pc, #468]	; (8001d5c <_ZL12MX_GPIO_Initv+0x2e8>)
 8001b86:	f002 ff1d 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001b90:	4873      	ldr	r0, [pc, #460]	; (8001d60 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001b92:	f002 ff17 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001b96:	2338      	movs	r3, #56	; 0x38
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	4619      	mov	r1, r3
 8001bac:	4869      	ldr	r0, [pc, #420]	; (8001d54 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001bae:	f002 fd75 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001bb2:	2340      	movs	r3, #64	; 0x40
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4861      	ldr	r0, [pc, #388]	; (8001d54 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001bce:	f002 fd65 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	485d      	ldr	r0, [pc, #372]	; (8001d64 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001bf0:	f002 fd54 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4854      	ldr	r0, [pc, #336]	; (8001d58 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001c08:	f002 fd48 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c10:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4853      	ldr	r0, [pc, #332]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2f8>)
 8001c20:	f002 fd3c 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001c24:	2320      	movs	r3, #32
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4847      	ldr	r0, [pc, #284]	; (8001d58 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001c3c:	f002 fd2e 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c40:	2301      	movs	r3, #1
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c50:	2302      	movs	r3, #2
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4840      	ldr	r0, [pc, #256]	; (8001d5c <_ZL12MX_GPIO_Initv+0x2e8>)
 8001c5c:	f002 fd1e 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	483b      	ldr	r0, [pc, #236]	; (8001d64 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001c76:	f002 fd11 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c80:	2312      	movs	r3, #18
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	4831      	ldr	r0, [pc, #196]	; (8001d5c <_ZL12MX_GPIO_Initv+0x2e8>)
 8001c98:	f002 fd00 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4828      	ldr	r0, [pc, #160]	; (8001d5c <_ZL12MX_GPIO_Initv+0x2e8>)
 8001cba:	f002 fcef 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001cbe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4821      	ldr	r0, [pc, #132]	; (8001d5c <_ZL12MX_GPIO_Initv+0x2e8>)
 8001cd8:	f002 fce0 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001cdc:	f248 0380 	movw	r3, #32896	; 0x8080
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001cf2:	f002 fcd3 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8001cf6:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001d10:	f002 fcc4 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8001d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d26:	2301      	movs	r3, #1
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <_ZL12MX_GPIO_Initv+0x2f8>)
 8001d32:	f002 fcb3 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001d36:	2330      	movs	r3, #48	; 0x30
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d46:	2306      	movs	r3, #6
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4e:	e00f      	b.n	8001d70 <_ZL12MX_GPIO_Initv+0x2fc>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021400 	.word	0x40021400
 8001d68:	10110000 	.word	0x10110000
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	4619      	mov	r1, r3
 8001d72:	4812      	ldr	r0, [pc, #72]	; (8001dbc <_ZL12MX_GPIO_Initv+0x348>)
 8001d74:	f002 fc92 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001d78:	2340      	movs	r3, #64	; 0x40
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_ZL12MX_GPIO_Initv+0x34c>)
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <_ZL12MX_GPIO_Initv+0x348>)
 8001d8c:	f002 fc86 	bl	800469c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001da2:	2302      	movs	r3, #2
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <_ZL12MX_GPIO_Initv+0x348>)
 8001dae:	f002 fc75 	bl	800469c <HAL_GPIO_Init>

}
 8001db2:	bf00      	nop
 8001db4:	3738      	adds	r7, #56	; 0x38
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	10110000 	.word	0x10110000

08001dc4 <_ZL12MX_FSMC_Initv>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001ddc:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001dde:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001de2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001de4:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001de6:	4a53      	ldr	r2, [pc, #332]	; (8001f34 <_ZL12MX_FSMC_Initv+0x170>)
 8001de8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001df0:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001dfe:	2210      	movs	r2, #16
 8001e00:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e02:	4b4b      	ldr	r3, [pc, #300]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e08:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001e20:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e32:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001e38:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e44:	230f      	movs	r3, #15
 8001e46:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e48:	230f      	movs	r3, #15
 8001e4a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e4c:	23ff      	movs	r3, #255	; 0xff
 8001e4e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e50:	230f      	movs	r3, #15
 8001e52:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e54:	2310      	movs	r3, #16
 8001e56:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e58:	2311      	movs	r3, #17
 8001e5a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4832      	ldr	r0, [pc, #200]	; (8001f30 <_ZL12MX_FSMC_Initv+0x16c>)
 8001e68:	f006 fdf6 	bl	8008a58 <HAL_SRAM_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_ZL12MX_FSMC_Initv+0xbc>
  {
    Error_Handler( );
 8001e7c:	f000 f8c8 	bl	8002010 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001e82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e86:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001e8a:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <_ZL12MX_FSMC_Initv+0x170>)
 8001e8c:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001e90:	2204      	movs	r2, #4
 8001e92:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001eea:	230f      	movs	r3, #15
 8001eec:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001eee:	230f      	movs	r3, #15
 8001ef0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001ef2:	23ff      	movs	r3, #255	; 0xff
 8001ef4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001ef6:	230f      	movs	r3, #15
 8001ef8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001efa:	2310      	movs	r3, #16
 8001efc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001efe:	2311      	movs	r3, #17
 8001f00:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <_ZL12MX_FSMC_Initv+0x174>)
 8001f0e:	f006 fda3 	bl	8008a58 <HAL_SRAM_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <_ZL12MX_FSMC_Initv+0x162>
  {
    Error_Handler( );
 8001f22:	f000 f875 	bl	8002010 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000039c 	.word	0x2000039c
 8001f34:	a0000104 	.word	0xa0000104
 8001f38:	200003ec 	.word	0x200003ec

08001f3c <_Z13DefaultThreadPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultThread */
void DefaultThread(void *argument)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b08d      	sub	sp, #52	; 0x34
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	6178      	str	r0, [r7, #20]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001f44:	f00e fc7a 	bl	801083c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  BoundaryBox previousLocation = BoundaryBox();	 // get a default boundary box to start
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
  previousLocation.width = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  previousLocation.widthIndex = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  previousLocation.height = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  previousLocation.heightIndex = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  HAL_UART_Receive_IT(&huart6, Rx_Data, 6);
 8001f66:	2206      	movs	r2, #6
 8001f68:	4913      	ldr	r1, [pc, #76]	; (8001fb8 <_Z13DefaultThreadPv+0x7c>)
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <_Z13DefaultThreadPv+0x80>)
 8001f6c:	f007 f843 	bl	8008ff6 <HAL_UART_Receive_IT>
  for(;;)
  {
	if (sendLocationReady)
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <_Z13DefaultThreadPv+0x84>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d016      	beq.n	8001fa6 <_Z13DefaultThreadPv+0x6a>
	{
		SetRecievedCoordinates();
 8001f78:	f7ff f9ea 	bl	8001350 <_Z22SetRecievedCoordinatesv>
		previousLocation = sendLocation(previousLocation);
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f88:	f7ff f988 	bl	800129c <_Z12sendLocation11BoundaryBox>
 8001f8c:	f107 0418 	add.w	r4, r7, #24
 8001f90:	463b      	mov	r3, r7
 8001f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		recievedCoordinates.clear();
 8001f98:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <_Z13DefaultThreadPv+0x88>)
 8001f9a:	f000 f980 	bl	800229e <_ZNSt6vectorI10CoordinateSaIS0_EE5clearEv>
		sendLocationReady = false;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_Z13DefaultThreadPv+0x84>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e004      	b.n	8001fb0 <_Z13DefaultThreadPv+0x74>
	}
	else
	{
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <_Z13DefaultThreadPv+0x8c>)
 8001fac:	f002 fd0a 	bl	80049c4 <HAL_GPIO_WritePin>
	}
	osDelay(10);
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	f00b fda3 	bl	800dafc <osDelay>
	if (sendLocationReady)
 8001fb6:	e7db      	b.n	8001f70 <_Z13DefaultThreadPv+0x34>
 8001fb8:	20000444 	.word	0x20000444
 8001fbc:	2000035c 	.word	0x2000035c
 8001fc0:	20000c14 	.word	0x20000c14
 8001fc4:	20000c18 	.word	0x20000c18
 8001fc8:	40020800 	.word	0x40020800

08001fcc <_Z10MainThreadPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainThread */
void MainThread(void *argument)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
//		}
//		else
//		{
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);// Red LED
//		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // Red LED
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <_Z10MainThreadPv+0x1c>)
 8001fd8:	f002 fd0d 	bl	80049f6 <HAL_GPIO_TogglePin>
		osDelay(500);
 8001fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fe0:	f00b fd8c 	bl	800dafc <osDelay>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // Red LED
 8001fe4:	e7f6      	b.n	8001fd4 <_Z10MainThreadPv+0x8>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a04      	ldr	r2, [pc, #16]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ffe:	f001 fc97 	bl	8003930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40001000 	.word	0x40001000

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	f00f ff69 	bl	8011efc <__errno>
 800202a:	4603      	mov	r3, r0
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f00f ff63 	bl	8011efc <__errno>
 8002036:	4603      	mov	r3, r0
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	f00f ff55 	bl	8011efc <__errno>
 8002052:	4603      	mov	r3, r0
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8002064:	f00f ff4a 	bl	8011efc <__errno>
 8002068:	4602      	mov	r2, r0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002084:	2300      	movs	r3, #0
	  }
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002092:	b590      	push	{r4, r7, lr}
 8002094:	b08b      	sub	sp, #44	; 0x2c
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ffba 	bl	800201e <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 80020aa:	f107 0118 	add.w	r1, r7, #24
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d102      	bne.n	80020c6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 80020c0:	68b8      	ldr	r0, [r7, #8]
 80020c2:	f00e feda 	bl	8010e7a <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 80020c6:	f00f ff19 	bl	8011efc <__errno>
 80020ca:	4603      	mov	r3, r0
 80020cc:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 80020ce:	2b22      	cmp	r3, #34	; 0x22
 80020d0:	d006      	beq.n	80020e0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 80020d2:	4621      	mov	r1, r4
 80020d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020d6:	f7ff ffd0 	bl	800207a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 80020e4:	2300      	movs	r3, #0
      else if (errno == ERANGE
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 80020ea:	68b8      	ldr	r0, [r7, #8]
 80020ec:	f00e fecb 	bl	8010e86 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	623b      	str	r3, [r7, #32]

      if (__idx)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	601a      	str	r2, [r3, #0]

      return __ret;
 8002106:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff9a 	bl	8002046 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002112:	4623      	mov	r3, r4
    }
 8002114:	4618      	mov	r0, r3
 8002116:	372c      	adds	r7, #44	; 0x2c
 8002118:	46bd      	mov	sp, r7
 800211a:	bd90      	pop	{r4, r7, pc}

0800211c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8c8 	bl	80022ba <_ZNSaI10CoordinateEC1Ev>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f8d0 	bl	80022d2 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZNSaI10CoordinateED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8d8 	bl	80022fa <_ZN9__gnu_cxx13new_allocatorI10CoordinateED1Ev>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800216c:	461a      	mov	r2, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8ce 	bl	8002310 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fed8 	bl	8000f2c <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE12_Vector_implD1Ev>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	10db      	asrs	r3, r3, #3
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f8bd 	bl	8002336 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1d1a      	adds	r2, r3, #4
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f8ac 	bl	8002336 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN9__gnu_cxxneIP10CoordinateSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8af 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f000 f8aa 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002202:	4603      	mov	r3, r0
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	429c      	cmp	r4, r3
 8002208:	bf14      	ite	ne
 800220a:	2301      	movne	r3, #1
 800220c:	2300      	moveq	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f103 0208 	add.w	r2, r3, #8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	601a      	str	r2, [r3, #0]
	return *this;
 800222c:	687b      	ldr	r3, [r7, #4]
      }
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	d00d      	beq.n	8002284 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f000 f87b 	bl	800236c <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f103 0208 	add.w	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002282:	e008      	b.n	8002296 <_ZNSt6vectorI10CoordinateSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff9e 	bl	80021c6 <_ZNSt6vectorI10CoordinateSaIS0_EE3endEv>
 800228a:	4603      	mov	r3, r0
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f895 	bl	80023c0 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZNSt6vectorI10CoordinateSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f943 	bl	8002538 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_>
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZNSaI10CoordinateEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f959 	bl	800257a <_ZN9__gnu_cxx13new_allocatorI10CoordinateEC1Ev>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
	{ }
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_ZN9__gnu_cxx13new_allocatorI10CoordinateED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
	if (__p)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f931 	bl	8002590 <_ZNSt16allocator_traitsISaI10CoordinateEE10deallocateERS1_PS0_j>
      }
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_ZN9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f918 	bl	80025ae <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f91d 	bl	80025c4 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f805 	bl	80023a8 <_ZNSt6vectorI10CoordinateSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800239e:	4603      	mov	r3, r0
      }
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZNSt6vectorI10CoordinateSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80023b0:	2301      	movs	r3, #1
      }
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80023cc:	4a59      	ldr	r2, [pc, #356]	; (8002534 <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f910 	bl	80025f6 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc>
 80023d6:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff fede 	bl	80021a6 <_ZNSt6vectorI10CoordinateSaIS0_EE5beginEv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	f107 0214 	add.w	r2, r7, #20
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f943 	bl	8002684 <_ZN9__gnu_cxxmiIP10CoordinateSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80023fe:	4603      	mov	r3, r0
 8002400:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f951 	bl	80026ae <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj>
 800240c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002412:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	18d5      	adds	r5, r2, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8c6 	bl	80025ae <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	4629      	mov	r1, r5
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff ff9f 	bl	800236c <_ZNSt16allocator_traitsISaI10CoordinateEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002432:	f7ff ffae 	bl	8002392 <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d027      	beq.n	800248c <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff88 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002446:	4603      	mov	r3, r0
 8002448:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f956 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002452:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4621      	mov	r1, r4
 8002458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245a:	f000 f93c 	bl	80026d6 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800245e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	3308      	adds	r3, #8
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff73 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002470:	4603      	mov	r3, r0
 8002472:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f941 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800247c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800247e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	4620      	mov	r0, r4
 8002484:	f000 f927 	bl	80026d6 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002488:	62f8      	str	r0, [r7, #44]	; 0x2c
 800248a:	e026      	b.n	80024da <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff60 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002496:	4603      	mov	r3, r0
 8002498:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f92e 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80024a2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4621      	mov	r1, r4
 80024a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024aa:	f000 f933 	bl	8002714 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 80024ae:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	3308      	adds	r3, #8
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff4b 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 80024c0:	4603      	mov	r3, r0
 80024c2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f919 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80024cc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80024ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 f91e 	bl	8002714 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 80024d8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80024da:	f7ff ff5a 	bl	8002392 <_ZNSt6vectorI10CoordinateSaIS0_EE15_S_use_relocateEv>
 80024de:	4603      	mov	r3, r0
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <_ZNSt6vectorI10CoordinateSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f906 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	6a39      	ldr	r1, [r7, #32]
 80024f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024fa:	f000 f924 	bl	8002746 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80024fe:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800250a:	461a      	mov	r2, r3
 800250c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250e:	f7ff feff 	bl	8002310 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	441a      	add	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]
    }
 800252a:	bf00      	nop
 800252c:	3730      	adds	r7, #48	; 0x30
 800252e:	46bd      	mov	sp, r7
 8002530:	bdb0      	pop	{r4, r5, r7, pc}
 8002532:	bf00      	nop
 8002534:	0801233c 	.word	0x0801233c

08002538 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	10db      	asrs	r3, r3, #3
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <_ZNSt6vectorI10CoordinateSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f8cf 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002560:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002562:	461a      	mov	r2, r3
 8002564:	4621      	mov	r1, r4
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f000 f8ed 	bl	8002746 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}

0800257a <_ZN9__gnu_cxx13new_allocatorI10CoordinateEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_ZNSt16allocator_traitsISaI10CoordinateEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f8de 	bl	8002762 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE10deallocateEPS1_j>
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ffec 	bl	80025ae <_ZSt7forwardIRK10CoordinateEOT_RNSt16remove_referenceIS3_E4typeE>
 80025d6:	4604      	mov	r4, r0
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4619      	mov	r1, r3
 80025dc:	2008      	movs	r0, #8
 80025de:	f7fe fc7f 	bl	8000ee0 <_ZnwjPv>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4622      	mov	r2, r4
 80025e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}

080025f6 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80025f6:	b590      	push	{r4, r7, lr}
 80025f8:	b087      	sub	sp, #28
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f8ba 	bl	800277c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 8002608:	4604      	mov	r4, r0
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff fdbb 	bl	8002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8002610:	4603      	mov	r3, r0
 8002612:	1ae2      	subs	r2, r4, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	bf34      	ite	cc
 800261a:	2301      	movcc	r3, #1
 800261c:	2300      	movcs	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f00e fc2b 	bl	8010e80 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fdab 	bl	8002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8002630:	4604      	mov	r4, r0
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff fda7 	bl	8002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 8002638:	4603      	mov	r3, r0
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	f107 0208 	add.w	r2, r7, #8
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8a9 	bl	800279e <_ZSt3maxIjERKT_S2_S2_>
 800264c:	4603      	mov	r3, r0
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4423      	add	r3, r4
 8002652:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fd96 	bl	8002186 <_ZNKSt6vectorI10CoordinateSaIS0_EE4sizeEv>
 800265a:	4602      	mov	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4293      	cmp	r3, r2
 8002660:	d306      	bcc.n	8002670 <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f88a 	bl	800277c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4293      	cmp	r3, r2
 800266e:	d904      	bls.n	800267a <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f883 	bl	800277c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>
 8002676:	4603      	mov	r3, r0
 8002678:	e000      	b.n	800267c <_ZNKSt6vectorI10CoordinateSaIS0_EE12_M_check_lenEjPKc+0x86>
 800267a:	697b      	ldr	r3, [r7, #20]
      }
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}

08002684 <_ZN9__gnu_cxxmiIP10CoordinateSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fe61 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 8002694:	4603      	mov	r3, r0
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	6838      	ldr	r0, [r7, #0]
 800269a:	f7ff fe5c 	bl	8002356 <_ZNK9__gnu_cxx17__normal_iteratorIP10CoordinateSt6vectorIS1_SaIS1_EEE4baseEv>
 800269e:	4603      	mov	r3, r0
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1ae3      	subs	r3, r4, r3
 80026a4:	10db      	asrs	r3, r3, #3
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d006      	beq.n	80026cc <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj+0x1e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f87f 	bl	80027c6 <_ZNSt16allocator_traitsISaI10CoordinateEE8allocateERS1_j>
 80026c8:	4603      	mov	r3, r0
 80026ca:	e000      	b.n	80026ce <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE11_M_allocateEj+0x20>
 80026cc:	2300      	movs	r3, #0
      }
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80026d6:	b590      	push	{r4, r7, lr}
 80026d8:	b089      	sub	sp, #36	; 0x24
 80026da:	af02      	add	r7, sp, #8
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80026e4:	f88d 4000 	strb.w	r4, [sp]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f878 	bl	80027e4 <_ZNSt6vectorI10CoordinateSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80026f4:	4603      	mov	r3, r0
      }
 80026f6:	4618      	mov	r0, r3
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}

080026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_ZSt34__uninitialized_move_if_noexcept_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f870 	bl	8002808 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>
 8002728:	4604      	mov	r4, r0
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f000 f86c 	bl	8002808 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>
 8002730:	4601      	mov	r1, r0
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4620      	mov	r0, r4
 8002738:	f000 f875 	bl	8002826 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CoordinateES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800273c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}

08002746 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f877 	bl	8002848 <_ZSt8_DestroyIP10CoordinateEvT_S2_>
    }
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800276e:	68b8      	ldr	r0, [r7, #8]
 8002770:	f00e fb68 	bl	8010e44 <_ZdlPv>
      }
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_ZNKSt6vectorI10CoordinateSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f885 	bl	8002896 <_ZNKSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 800278c:	4603      	mov	r3, r0
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f867 	bl	8002862 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_max_sizeERKS1_>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d201      	bcs.n	80027b8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	e000      	b.n	80027ba <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80027b8:	687b      	ldr	r3, [r7, #4]
    }
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_ZNSt16allocator_traitsISaI10CoordinateEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80027d0:	2200      	movs	r2, #0
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f869 	bl	80028ac <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_ZNSt6vectorI10CoordinateSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f875 	bl	80028e8 <_ZSt12__relocate_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>
 80027fe:	4603      	mov	r3, r0
      }
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZSt32__make_move_if_noexcept_iteratorI10CoordinateSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f883 	bl	8002922 <_ZNSt13move_iteratorIP10CoordinateEC1ES1_>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CoordinateES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f881 	bl	8002940 <_ZSt18uninitialized_copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>
 800283e:	4603      	mov	r3, r0
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_ZSt8_DestroyIP10CoordinateEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002852:	6839      	ldr	r1, [r7, #0]
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f885 	bl	8002964 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CoordinateEEvT_S4_>
    }
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <_ZNSt6vectorI10CoordinateSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800286a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800286e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f882 	bl	800297a <_ZNSt16allocator_traitsISaI10CoordinateEE8max_sizeERKS1_>
 8002876:	4603      	mov	r3, r0
 8002878:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800287a:	f107 0208 	add.w	r2, r7, #8
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f884 	bl	8002992 <_ZSt3minIjERKT_S2_S2_>
 800288a:	4603      	mov	r3, r0
 800288c:	681b      	ldr	r3, [r3, #0]
      }
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <_ZNKSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f87e 	bl	80029ba <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>
 80028be:	4602      	mov	r2, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	bf8c      	ite	hi
 80028c6:	2301      	movhi	r3, #1
 80028c8:	2300      	movls	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <_ZN9__gnu_cxx13new_allocatorI10CoordinateE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80028d0:	f00e facd 	bl	8010e6e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4618      	mov	r0, r3
 80028da:	f00e fab5 	bl	8010e48 <_Znwj>
 80028de:	4603      	mov	r3, r0
      }
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZSt12__relocate_aIP10CoordinateS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f86b 	bl	80029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 80028fc:	4604      	mov	r4, r0
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	f000 f867 	bl	80029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002904:	4605      	mov	r5, r0
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f863 	bl	80029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 800290c:	4602      	mov	r2, r0
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	4629      	mov	r1, r5
 8002912:	4620      	mov	r0, r4
 8002914:	f000 f868 	bl	80029e8 <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8002918:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bdb0      	pop	{r4, r5, r7, pc}

08002922 <_ZNSt13move_iteratorIP10CoordinateEC1ES1_>:
      move_iterator(iterator_type __i)
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_ZSt18uninitialized_copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f865 	bl	8002a24 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10CoordinateES4_EET0_T_S7_S6_>
 800295a:	4603      	mov	r3, r0
    }
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CoordinateEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZNSt16allocator_traitsISaI10CoordinateEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f819 	bl	80029ba <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>
 8002988:	4603      	mov	r3, r0
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d201      	bcs.n	80029ac <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	e000      	b.n	80029ae <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80029ac:	687b      	ldr	r3, [r7, #4]
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_ZNK9__gnu_cxx13new_allocatorI10CoordinateE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80029c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	10db      	asrs	r3, r3, #3
 80029fe:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	dd06      	ble.n	8002a14 <_ZSt14__relocate_a_1I10CoordinateS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68f9      	ldr	r1, [r7, #12]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f00f fabc 	bl	8011f8c <memmove>
      return __result + __count;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
    }
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP10CoordinateES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f805 	bl	8002a44 <_ZSt4copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZSt4copyISt13move_iteratorIP10CoordinateES2_ET0_T_S5_S4_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f80f 	bl	8002a74 <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002a56:	4604      	mov	r4, r0
 8002a58:	68b8      	ldr	r0, [r7, #8]
 8002a5a:	f000 f80b 	bl	8002a74 <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4619      	mov	r1, r3
 8002a64:	4620      	mov	r0, r4
 8002a66:	f000 f816 	bl	8002a96 <_ZSt14__copy_move_a2ILb1EP10CoordinateS1_ET1_T0_S3_S2_>
 8002a6a:	4603      	mov	r3, r0
    }
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}

08002a74 <_ZSt12__miter_baseIP10CoordinateEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f82c 	bl	8002adc <_ZNKSt13move_iteratorIP10CoordinateE4baseEv>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f834 	bl	8002af4 <_ZSt12__miter_baseIP10CoordinateET_S2_>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZSt14__copy_move_a2ILb1EP10CoordinateS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002a96:	b5b0      	push	{r4, r5, r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff ff95 	bl	80029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7ff ff91 	bl	80029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002ab0:	4605      	mov	r5, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff8c 	bl	80029d2 <_ZSt12__niter_baseIP10CoordinateET_S2_>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	4629      	mov	r1, r5
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f000 f822 	bl	8002b0a <_ZSt13__copy_move_aILb1EP10CoordinateS1_ET1_T0_S3_S2_>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f82e 	bl	8002b2e <_ZSt12__niter_wrapIP10CoordinateET_RKS2_S2_>
 8002ad2:	4603      	mov	r3, r0
    }
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bdb0      	pop	{r4, r5, r7, pc}

08002adc <_ZNKSt13move_iteratorIP10CoordinateE4baseEv>:
      base() const
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_ZSt12__miter_baseIP10CoordinateET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_ZSt13__copy_move_aILb1EP10CoordinateS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f811 	bl	8002b46 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_>
 8002b24:	4603      	mov	r3, r0
    }
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <_ZSt12__niter_wrapIP10CoordinateET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	10db      	asrs	r3, r3, #3
 8002b5a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI10CoordinateEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	461a      	mov	r2, r3
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f00f fa0e 	bl	8011f8c <memmove>
	  return __result + _Num;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
	}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_Z41__static_initialization_and_destruction_0ii>:
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d107      	bne.n	8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d102      	bne.n	8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<struct Coordinate> recievedCoordinates;
 8002b9a:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b9c:	f7fe f9df 	bl	8000f5e <_ZNSt6vectorI10CoordinateSaIS0_EEC1Ev>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002bb2:	f000 f807 	bl	8002bc4 <_ZNSt6vectorI10CoordinateSaIS0_EED1Ev>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000c18 	.word	0x20000c18

08002bc4 <_ZNSt6vectorI10CoordinateSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681c      	ldr	r4, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fd91 	bl	80026fe <_ZNSt12_Vector_baseI10CoordinateSaIS0_EE19_M_get_Tp_allocatorEv>
 8002bdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002bde:	461a      	mov	r2, r3
 8002be0:	4629      	mov	r1, r5
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff fdaf 	bl	8002746 <_ZSt8_DestroyIP10CoordinateS0_EvT_S2_RSaIT0_E>
      }
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fab2 	bl	8002154 <_ZNSt12_Vector_baseI10CoordinateSaIS0_EED1Ev>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}

08002bfa <_GLOBAL__sub_I_hadc1>:
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff ffbc 	bl	8002b80 <_Z41__static_initialization_and_destruction_0ii>
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_GLOBAL__sub_D_hadc1>:
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff ffb4 	bl	8002b80 <_Z41__static_initialization_and_destruction_0ii>
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_ADC_MspInit+0xe4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d15b      	bne.n	8002d46 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a28      	ldr	r2, [pc, #160]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_ADC_MspInit+0xe8>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8002cfe:	2311      	movs	r3, #17
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4811      	ldr	r0, [pc, #68]	; (8002d58 <HAL_ADC_MspInit+0xec>)
 8002d12:	f001 fcc3 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8002d16:	2326      	movs	r3, #38	; 0x26
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 031c 	add.w	r3, r7, #28
 8002d26:	4619      	mov	r1, r3
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <HAL_ADC_MspInit+0xf0>)
 8002d2a:	f001 fcb7 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d32:	2303      	movs	r3, #3
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4807      	ldr	r0, [pc, #28]	; (8002d60 <HAL_ADC_MspInit+0xf4>)
 8002d42:	f001 fcab 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3730      	adds	r7, #48	; 0x30
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40012000 	.word	0x40012000
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020400 	.word	0x40020400

08002d64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_DAC_MspInit+0x8c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d12f      	bne.n	8002de6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <HAL_DAC_MspInit+0x90>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_DAC_MspInit+0x90>)
 8002d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_DAC_MspInit+0x90>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_DAC_MspInit+0x90>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_DAC_MspInit+0x90>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_DAC_MspInit+0x90>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4809      	ldr	r0, [pc, #36]	; (8002df8 <HAL_DAC_MspInit+0x94>)
 8002dd2:	f001 fc63 	bl	800469c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2036      	movs	r0, #54	; 0x36
 8002ddc:	f001 f916 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002de0:	2036      	movs	r0, #54	; 0x36
 8002de2:	f001 f92f 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3728      	adds	r7, #40	; 0x28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40007400 	.word	0x40007400
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020000 	.word	0x40020000

08002dfc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00e      	beq.n	8002e3c <HAL_DFSDM_ChannelMspInit+0x40>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a76      	ldr	r2, [pc, #472]	; (8002ffc <HAL_DFSDM_ChannelMspInit+0x200>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d009      	beq.n	8002e3c <HAL_DFSDM_ChannelMspInit+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a74      	ldr	r2, [pc, #464]	; (8003000 <HAL_DFSDM_ChannelMspInit+0x204>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_DFSDM_ChannelMspInit+0x40>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a73      	ldr	r2, [pc, #460]	; (8003004 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d154      	bne.n	8002ee6 <HAL_DFSDM_ChannelMspInit+0xea>
 8002e3c:	4b72      	ldr	r3, [pc, #456]	; (8003008 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d150      	bne.n	8002ee6 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	4a6f      	ldr	r2, [pc, #444]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	6453      	str	r3, [r2, #68]	; 0x44
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	4b69      	ldr	r3, [pc, #420]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a68      	ldr	r2, [pc, #416]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	4b62      	ldr	r3, [pc, #392]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4a61      	ldr	r2, [pc, #388]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e86:	f043 0308 	orr.w	r3, r3, #8
 8002e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002eaa:	2306      	movs	r3, #6
 8002eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4856      	ldr	r0, [pc, #344]	; (8003010 <HAL_DFSDM_ChannelMspInit+0x214>)
 8002eb6:	f001 fbf1 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	484f      	ldr	r0, [pc, #316]	; (8003014 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002ed6:	f001 fbe1 	bl	800469c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002eda:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a49      	ldr	r2, [pc, #292]	; (8003008 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002ee2:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8002ee4:	e084      	b.n	8002ff0 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d07f      	beq.n	8002ff0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <HAL_DFSDM_ChannelMspInit+0x200>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d07a      	beq.n	8002ff0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a40      	ldr	r2, [pc, #256]	; (8003000 <HAL_DFSDM_ChannelMspInit+0x204>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d075      	beq.n	8002ff0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3e      	ldr	r2, [pc, #248]	; (8003004 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d070      	beq.n	8002ff0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002f0e:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d16c      	bne.n	8002ff0 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	4a3b      	ldr	r2, [pc, #236]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f24:	6453      	str	r3, [r2, #68]	; 0x44
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a2d      	ldr	r2, [pc, #180]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a26      	ldr	r2, [pc, #152]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_DFSDM_ChannelMspInit+0x210>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8002f96:	2307      	movs	r3, #7
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	481b      	ldr	r0, [pc, #108]	; (8003010 <HAL_DFSDM_ChannelMspInit+0x214>)
 8002fa2:	f001 fb7b 	bl	800469c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4814      	ldr	r0, [pc, #80]	; (8003014 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002fc2:	f001 fb6b 	bl	800469c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8002fd6:	2306      	movs	r3, #6
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480e      	ldr	r0, [pc, #56]	; (800301c <HAL_DFSDM_ChannelMspInit+0x220>)
 8002fe2:	f001 fb5b 	bl	800469c <HAL_GPIO_Init>
  DFSDM2_Init++;
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	3738      	adds	r7, #56	; 0x38
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40016000 	.word	0x40016000
 8002ffc:	40016020 	.word	0x40016020
 8003000:	40016040 	.word	0x40016040
 8003004:	40016060 	.word	0x40016060
 8003008:	20000c24 	.word	0x20000c24
 800300c:	40023800 	.word	0x40023800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020c00 	.word	0x40020c00
 8003018:	20000c28 	.word	0x20000c28
 800301c:	40020400 	.word	0x40020400

08003020 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_FMPI2C_MspInit+0x84>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d12b      	bne.n	800309a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_FMPI2C_MspInit+0x88>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_FMPI2C_MspInit+0x88>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_FMPI2C_MspInit+0x88>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003062:	2312      	movs	r3, #18
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800306e:	2304      	movs	r3, #4
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	480c      	ldr	r0, [pc, #48]	; (80030ac <HAL_FMPI2C_MspInit+0x8c>)
 800307a:	f001 fb0f 	bl	800469c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_FMPI2C_MspInit+0x88>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <HAL_FMPI2C_MspInit+0x88>)
 8003088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_FMPI2C_MspInit+0x88>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	; 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40006000 	.word	0x40006000
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40020800 	.word	0x40020800

080030b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a4f      	ldr	r2, [pc, #316]	; (800320c <HAL_I2S_MspInit+0x15c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f040 8097 	bne.w	8003202 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_I2S_MspInit+0x160>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_I2S_MspInit+0x160>)
 80030de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e2:	6413      	str	r3, [r2, #64]	; 0x40
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_I2S_MspInit+0x160>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_I2S_MspInit+0x160>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	4a45      	ldr	r2, [pc, #276]	; (8003210 <HAL_I2S_MspInit+0x160>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_I2S_MspInit+0x160>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_I2S_MspInit+0x160>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <HAL_I2S_MspInit+0x160>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6313      	str	r3, [r2, #48]	; 0x30
 800311c:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <HAL_I2S_MspInit+0x160>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	4b38      	ldr	r3, [pc, #224]	; (8003210 <HAL_I2S_MspInit+0x160>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	4a37      	ldr	r2, [pc, #220]	; (8003210 <HAL_I2S_MspInit+0x160>)
 8003132:	f043 0308 	orr.w	r3, r3, #8
 8003136:	6313      	str	r3, [r2, #48]	; 0x30
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_I2S_MspInit+0x160>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	4b31      	ldr	r3, [pc, #196]	; (8003210 <HAL_I2S_MspInit+0x160>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a30      	ldr	r2, [pc, #192]	; (8003210 <HAL_I2S_MspInit+0x160>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_I2S_MspInit+0x160>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8003160:	2304      	movs	r3, #4
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8003170:	2306      	movs	r3, #6
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	4619      	mov	r1, r3
 800317a:	4826      	ldr	r0, [pc, #152]	; (8003214 <HAL_I2S_MspInit+0x164>)
 800317c:	f001 fa8e 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8003180:	2308      	movs	r3, #8
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003190:	2305      	movs	r3, #5
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8003194:	f107 031c 	add.w	r3, r7, #28
 8003198:	4619      	mov	r1, r3
 800319a:	481e      	ldr	r0, [pc, #120]	; (8003214 <HAL_I2S_MspInit+0x164>)
 800319c:	f001 fa7e 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80031a0:	2308      	movs	r3, #8
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031b0:	2305      	movs	r3, #5
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	4619      	mov	r1, r3
 80031ba:	4817      	ldr	r0, [pc, #92]	; (8003218 <HAL_I2S_MspInit+0x168>)
 80031bc:	f001 fa6e 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80031c0:	2308      	movs	r3, #8
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031d0:	2305      	movs	r3, #5
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80031d4:	f107 031c 	add.w	r3, r7, #28
 80031d8:	4619      	mov	r1, r3
 80031da:	4810      	ldr	r0, [pc, #64]	; (800321c <HAL_I2S_MspInit+0x16c>)
 80031dc:	f001 fa5e 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80031e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031f2:	2305      	movs	r3, #5
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	4808      	ldr	r0, [pc, #32]	; (8003220 <HAL_I2S_MspInit+0x170>)
 80031fe:	f001 fa4d 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003202:	bf00      	nop
 8003204:	3730      	adds	r7, #48	; 0x30
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40003800 	.word	0x40003800
 8003210:	40023800 	.word	0x40023800
 8003214:	40020800 	.word	0x40020800
 8003218:	40020000 	.word	0x40020000
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40020400 	.word	0x40020400

08003224 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a56      	ldr	r2, [pc, #344]	; (800339c <HAL_QSPI_MspInit+0x178>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f040 80a6 	bne.w	8003394 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	4a53      	ldr	r2, [pc, #332]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	6393      	str	r3, [r2, #56]	; 0x38
 8003258:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	6313      	str	r3, [r2, #48]	; 0x30
 8003274:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 800328a:	f043 0320 	orr.w	r3, r3, #32
 800328e:	6313      	str	r3, [r2, #48]	; 0x30
 8003290:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	4a3e      	ldr	r2, [pc, #248]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	6313      	str	r3, [r2, #48]	; 0x30
 80032ac:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032c2:	f043 0308 	orr.w	r3, r3, #8
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	4a30      	ldr	r2, [pc, #192]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e2:	6313      	str	r3, [r2, #48]	; 0x30
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_QSPI_MspInit+0x17c>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80032f0:	2304      	movs	r3, #4
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003300:	2309      	movs	r3, #9
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8003304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	4826      	ldr	r0, [pc, #152]	; (80033a4 <HAL_QSPI_MspInit+0x180>)
 800330c:	f001 f9c6 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8003310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003322:	230a      	movs	r3, #10
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	4619      	mov	r1, r3
 800332c:	481e      	ldr	r0, [pc, #120]	; (80033a8 <HAL_QSPI_MspInit+0x184>)
 800332e:	f001 f9b5 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8003332:	2304      	movs	r3, #4
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333e:	2303      	movs	r3, #3
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003342:	2309      	movs	r3, #9
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8003346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334a:	4619      	mov	r1, r3
 800334c:	4817      	ldr	r0, [pc, #92]	; (80033ac <HAL_QSPI_MspInit+0x188>)
 800334e:	f001 f9a5 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8003352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003360:	2303      	movs	r3, #3
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003364:	2309      	movs	r3, #9
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	4810      	ldr	r0, [pc, #64]	; (80033b0 <HAL_QSPI_MspInit+0x18c>)
 8003370:	f001 f994 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8003374:	2340      	movs	r3, #64	; 0x40
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003384:	230a      	movs	r3, #10
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8003388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338c:	4619      	mov	r1, r3
 800338e:	4809      	ldr	r0, [pc, #36]	; (80033b4 <HAL_QSPI_MspInit+0x190>)
 8003390:	f001 f984 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003394:	bf00      	nop
 8003396:	3738      	adds	r7, #56	; 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	a0001000 	.word	0xa0001000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40021400 	.word	0x40021400
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020c00 	.word	0x40020c00
 80033b4:	40021800 	.word	0x40021800

080033b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_SD_MspInit+0xc0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d14a      	bne.n	8003470 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_SD_MspInit+0xc4>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_SD_MspInit+0xc4>)
 80033e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_SD_MspInit+0xc4>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_SD_MspInit+0xc4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_SD_MspInit+0xc4>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_SD_MspInit+0xc4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_SD_MspInit+0xc4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_SD_MspInit+0xc4>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_SD_MspInit+0xc4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800342e:	2340      	movs	r3, #64	; 0x40
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800343e:	230c      	movs	r3, #12
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	480d      	ldr	r0, [pc, #52]	; (8003480 <HAL_SD_MspInit+0xc8>)
 800344a:	f001 f927 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 800344e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003452:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003460:	230c      	movs	r3, #12
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	4806      	ldr	r0, [pc, #24]	; (8003484 <HAL_SD_MspInit+0xcc>)
 800346c:	f001 f916 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	3728      	adds	r7, #40	; 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40023800 	.word	0x40023800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020800 	.word	0x40020800

08003488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_UART_MspInit+0xfc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d12d      	bne.n	8003506 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_UART_MspInit+0x100>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a35      	ldr	r2, [pc, #212]	; (8003588 <HAL_UART_MspInit+0x100>)
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b33      	ldr	r3, [pc, #204]	; (8003588 <HAL_UART_MspInit+0x100>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_UART_MspInit+0x100>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a2e      	ldr	r2, [pc, #184]	; (8003588 <HAL_UART_MspInit+0x100>)
 80034d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_UART_MspInit+0x100>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80034e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80034f4:	230b      	movs	r3, #11
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f8:	f107 031c 	add.w	r3, r7, #28
 80034fc:	4619      	mov	r1, r3
 80034fe:	4823      	ldr	r0, [pc, #140]	; (800358c <HAL_UART_MspInit+0x104>)
 8003500:	f001 f8cc 	bl	800469c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003504:	e039      	b.n	800357a <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	; (8003590 <HAL_UART_MspInit+0x108>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d134      	bne.n	800357a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_UART_MspInit+0x100>)
 800351a:	f043 0320 	orr.w	r3, r3, #32
 800351e:	6453      	str	r3, [r2, #68]	; 0x44
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_UART_MspInit+0x100>)
 8003536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_UART_MspInit+0x100>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8003548:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800354c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003556:	2303      	movs	r3, #3
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800355a:	2308      	movs	r3, #8
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800355e:	f107 031c 	add.w	r3, r7, #28
 8003562:	4619      	mov	r1, r3
 8003564:	4809      	ldr	r0, [pc, #36]	; (800358c <HAL_UART_MspInit+0x104>)
 8003566:	f001 f899 	bl	800469c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	2047      	movs	r0, #71	; 0x47
 8003570:	f000 fd4c 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003574:	2047      	movs	r0, #71	; 0x47
 8003576:	f000 fd65 	bl	8004044 <HAL_NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3730      	adds	r7, #48	; 0x30
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40011c00 	.word	0x40011c00
 8003588:	40023800 	.word	0x40023800
 800358c:	40021800 	.word	0x40021800
 8003590:	40011400 	.word	0x40011400

08003594 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80035a8:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_FSMC_MspInit+0xc8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d151      	bne.n	8003654 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_FSMC_MspInit+0xc8>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4b29      	ldr	r3, [pc, #164]	; (8003660 <HAL_FSMC_MspInit+0xcc>)
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_FSMC_MspInit+0xcc>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6393      	str	r3, [r2, #56]	; 0x38
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <HAL_FSMC_MspInit+0xcc>)
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 80035d2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80035d6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80035e4:	230c      	movs	r3, #12
 80035e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	481d      	ldr	r0, [pc, #116]	; (8003664 <HAL_FSMC_MspInit+0xd0>)
 80035ee:	f001 f855 	bl	800469c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80035f2:	f240 433f 	movw	r3, #1087	; 0x43f
 80035f6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003600:	2303      	movs	r3, #3
 8003602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003604:	230c      	movs	r3, #12
 8003606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4816      	ldr	r0, [pc, #88]	; (8003668 <HAL_FSMC_MspInit+0xd4>)
 800360e:	f001 f845 	bl	800469c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8003612:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003616:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003624:	230c      	movs	r3, #12
 8003626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	4619      	mov	r1, r3
 800362c:	480f      	ldr	r0, [pc, #60]	; (800366c <HAL_FSMC_MspInit+0xd8>)
 800362e:	f001 f835 	bl	800469c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8003632:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8003636:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003640:	2303      	movs	r3, #3
 8003642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003644:	230c      	movs	r3, #12
 8003646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003648:	1d3b      	adds	r3, r7, #4
 800364a:	4619      	mov	r1, r3
 800364c:	4808      	ldr	r0, [pc, #32]	; (8003670 <HAL_FSMC_MspInit+0xdc>)
 800364e:	f001 f825 	bl	800469c <HAL_GPIO_Init>
 8003652:	e000      	b.n	8003656 <HAL_FSMC_MspInit+0xc2>
    return;
 8003654:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000c2c 	.word	0x20000c2c
 8003660:	40023800 	.word	0x40023800
 8003664:	40021400 	.word	0x40021400
 8003668:	40021800 	.word	0x40021800
 800366c:	40021000 	.word	0x40021000
 8003670:	40020c00 	.word	0x40020c00

08003674 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800367c:	f7ff ff8a 	bl	8003594 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003698:	2200      	movs	r2, #0
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	2036      	movs	r0, #54	; 0x36
 800369e:	f000 fcb5 	bl	800400c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036a2:	2036      	movs	r0, #54	; 0x36
 80036a4:	f000 fcce 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <HAL_InitTick+0xa0>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_InitTick+0xa0>)
 80036b2:	f043 0310 	orr.w	r3, r3, #16
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_InitTick+0xa0>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036c4:	f107 0210 	add.w	r2, r7, #16
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 fdf4 	bl	80072bc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036d4:	f003 fdca 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 80036d8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_InitTick+0xa4>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	0c9b      	lsrs	r3, r3, #18
 80036e4:	3b01      	subs	r3, #1
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036e8:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_InitTick+0xa8>)
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_InitTick+0xac>)
 80036ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_InitTick+0xa8>)
 80036f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036f6:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <HAL_InitTick+0xa8>)
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_InitTick+0xa8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_InitTick+0xa8>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003708:	4809      	ldr	r0, [pc, #36]	; (8003730 <HAL_InitTick+0xa8>)
 800370a:	f005 f9e9 	bl	8008ae0 <HAL_TIM_Base_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003714:	4806      	ldr	r0, [pc, #24]	; (8003730 <HAL_InitTick+0xa8>)
 8003716:	f005 fa18 	bl	8008b4a <HAL_TIM_Base_Start_IT>
 800371a:	4603      	mov	r3, r0
 800371c:	e000      	b.n	8003720 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
}
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	; 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	431bde83 	.word	0x431bde83
 8003730:	20005588 	.word	0x20005588
 8003734:	40001000 	.word	0x40001000

08003738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800374a:	e7fe      	b.n	800374a <HardFault_Handler+0x4>

0800374c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003750:	e7fe      	b.n	8003750 <MemManage_Handler+0x4>

08003752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003756:	e7fe      	b.n	8003756 <BusFault_Handler+0x4>

08003758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800375c:	e7fe      	b.n	800375c <UsageFault_Handler+0x4>

0800375e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <TIM6_DAC_IRQHandler+0x20>)
 8003772:	791b      	ldrb	r3, [r3, #4]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800377a:	4804      	ldr	r0, [pc, #16]	; (800378c <TIM6_DAC_IRQHandler+0x20>)
 800377c:	f000 fc92 	bl	80040a4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003780:	4803      	ldr	r0, [pc, #12]	; (8003790 <TIM6_DAC_IRQHandler+0x24>)
 8003782:	f005 fa06 	bl	8008b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200000fc 	.word	0x200000fc
 8003790:	20005588 	.word	0x20005588

08003794 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <OTG_FS_IRQHandler+0x10>)
 800379a:	f001 fbd7 	bl	8004f4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20005a14 	.word	0x20005a14

080037a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <USART6_IRQHandler+0x10>)
 80037ae:	f005 fc77 	bl	80090a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2000035c 	.word	0x2000035c

080037bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
	return 1;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <_kill>:

int _kill(int pid, int sig)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037d6:	f00e fb91 	bl	8011efc <__errno>
 80037da:	4603      	mov	r3, r0
 80037dc:	2216      	movs	r2, #22
 80037de:	601a      	str	r2, [r3, #0]
	return -1;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_exit>:

void _exit (int status)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ffe7 	bl	80037cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80037fe:	e7fe      	b.n	80037fe <_exit+0x12>

08003800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <_sbrk+0x5c>)
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <_sbrk+0x60>)
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <_sbrk+0x64>)
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <_sbrk+0x68>)
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <_sbrk+0x64>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003830:	f00e fb64 	bl	8011efc <__errno>
 8003834:	4603      	mov	r3, r0
 8003836:	220c      	movs	r2, #12
 8003838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	e009      	b.n	8003854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <_sbrk+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <_sbrk+0x64>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_sbrk+0x64>)
 8003850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20050000 	.word	0x20050000
 8003860:	00000400 	.word	0x00000400
 8003864:	20000c30 	.word	0x20000c30
 8003868:	20005ce8 	.word	0x20005ce8

0800386c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <SystemInit+0x28>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <SystemInit+0x28>)
 8003878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800387c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <SystemInit+0x28>)
 8003882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003886:	609a      	str	r2, [r3, #8]
#endif
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800389c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800389e:	e003      	b.n	80038a8 <LoopCopyDataInit>

080038a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038a6:	3104      	adds	r1, #4

080038a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038b0:	d3f6      	bcc.n	80038a0 <CopyDataInit>
  ldr  r2, =_sbss
 80038b2:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038b4:	e002      	b.n	80038bc <LoopFillZerobss>

080038b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80038b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038b8:	f842 3b04 	str.w	r3, [r2], #4

080038bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038c0:	d3f9      	bcc.n	80038b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038c2:	f7ff ffd3 	bl	800386c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c6:	f00e fb1f 	bl	8011f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038ca:	f7fd fd6b 	bl	80013a4 <main>
  bx  lr    
 80038ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80038d0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80038d4:	08012584 	.word	0x08012584
  ldr  r0, =_sdata
 80038d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038dc:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80038e0:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80038e4:	20005ce8 	.word	0x20005ce8

080038e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC_IRQHandler>
	...

080038ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_Init+0x40>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0d      	ldr	r2, [pc, #52]	; (800392c <HAL_Init+0x40>)
 80038f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_Init+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_Init+0x40>)
 8003902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a07      	ldr	r2, [pc, #28]	; (800392c <HAL_Init+0x40>)
 800390e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003914:	2003      	movs	r0, #3
 8003916:	f000 fb6e 	bl	8003ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800391a:	2000      	movs	r0, #0
 800391c:	f7ff feb4 	bl	8003688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003920:	f7ff f97c 	bl	8002c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00

08003930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_IncTick+0x20>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_IncTick+0x24>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4413      	add	r3, r2
 8003940:	4a04      	ldr	r2, [pc, #16]	; (8003954 <HAL_IncTick+0x24>)
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000008 	.word	0x20000008
 8003954:	200055c8 	.word	0x200055c8

08003958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return uwTick;
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_GetTick+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	200055c8 	.word	0x200055c8

08003970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7ff ffee 	bl	8003958 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d005      	beq.n	8003996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_Delay+0x44>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003996:	bf00      	nop
 8003998:	f7ff ffde 	bl	8003958 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d8f7      	bhi.n	8003998 <HAL_Delay+0x28>
  {
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000008 	.word	0x20000008

080039b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e033      	b.n	8003a36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff f948 	bl	8002c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039fe:	f023 0302 	bic.w	r3, r3, #2
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f94a 	bl	8003ca4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f023 0303 	bic.w	r3, r3, #3
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
 8003a26:	e001      	b.n	8003a2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e113      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x244>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d925      	bls.n	8003ab8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68d9      	ldr	r1, [r3, #12]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b1e      	subs	r3, #30
 8003a82:	2207      	movs	r2, #7
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	400a      	ands	r2, r1
 8003a90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68d9      	ldr	r1, [r3, #12]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4403      	add	r3, r0
 8003aaa:	3b1e      	subs	r3, #30
 8003aac:	409a      	lsls	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	e022      	b.n	8003afe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6919      	ldr	r1, [r3, #16]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	2207      	movs	r2, #7
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	400a      	ands	r2, r1
 8003ada:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6919      	ldr	r1, [r3, #16]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4618      	mov	r0, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4403      	add	r3, r0
 8003af4:	409a      	lsls	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d824      	bhi.n	8003b50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	3b05      	subs	r3, #5
 8003b18:	221f      	movs	r2, #31
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	400a      	ands	r2, r1
 8003b26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	3b05      	subs	r3, #5
 8003b42:	fa00 f203 	lsl.w	r2, r0, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4e:	e04c      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d824      	bhi.n	8003ba2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	3b23      	subs	r3, #35	; 0x23
 8003b6a:	221f      	movs	r2, #31
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43da      	mvns	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	400a      	ands	r2, r1
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	3b23      	subs	r3, #35	; 0x23
 8003b94:	fa00 f203 	lsl.w	r2, r0, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba0:	e023      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3b41      	subs	r3, #65	; 0x41
 8003bb4:	221f      	movs	r2, #31
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b41      	subs	r3, #65	; 0x41
 8003bde:	fa00 f203 	lsl.w	r2, r0, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_ADC_ConfigChannel+0x250>)
 8003bec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <HAL_ADC_ConfigChannel+0x254>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10f      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x1d8>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b12      	cmp	r3, #18
 8003bfe:	d10b      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_ADC_ConfigChannel+0x254>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d12b      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x23a>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <HAL_ADC_ConfigChannel+0x258>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x1f4>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b11      	cmp	r3, #17
 8003c32:	d122      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a11      	ldr	r2, [pc, #68]	; (8003c98 <HAL_ADC_ConfigChannel+0x258>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d111      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_ADC_ConfigChannel+0x25c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a11      	ldr	r2, [pc, #68]	; (8003ca0 <HAL_ADC_ConfigChannel+0x260>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	0c9a      	lsrs	r2, r3, #18
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c6c:	e002      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f9      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40012300 	.word	0x40012300
 8003c94:	40012000 	.word	0x40012000
 8003c98:	10000012 	.word	0x10000012
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	431bde83 	.word	0x431bde83

08003ca4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cac:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <ADC_Init+0x1f0>)
 8003cae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <ADC_Init+0x1f4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d022      	beq.n	8003d82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6899      	ldr	r1, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	e00f      	b.n	8003da2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003da0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0202 	bic.w	r2, r2, #2
 8003db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6899      	ldr	r1, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7e1b      	ldrb	r3, [r3, #24]
 8003dbc:	005a      	lsls	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003dee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	035a      	lsls	r2, r3, #13
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	e007      	b.n	8003e18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	051a      	lsls	r2, r3, #20
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e5a:	025a      	lsls	r2, r3, #9
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	029a      	lsls	r2, r3, #10
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40012300 	.word	0x40012300
 8003e98:	0f000001 	.word	0x0f000001

08003e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	60d3      	str	r3, [r2, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <__NVIC_GetPriorityGrouping+0x18>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	f003 0307 	and.w	r3, r3, #7
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	db0b      	blt.n	8003f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	f003 021f 	and.w	r2, r3, #31
 8003f18:	4907      	ldr	r1, [pc, #28]	; (8003f38 <__NVIC_EnableIRQ+0x38>)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2001      	movs	r0, #1
 8003f22:	fa00 f202 	lsl.w	r2, r0, r2
 8003f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000e100 	.word	0xe000e100

08003f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	6039      	str	r1, [r7, #0]
 8003f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db0a      	blt.n	8003f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	490c      	ldr	r1, [pc, #48]	; (8003f88 <__NVIC_SetPriority+0x4c>)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	0112      	lsls	r2, r2, #4
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f64:	e00a      	b.n	8003f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4908      	ldr	r1, [pc, #32]	; (8003f8c <__NVIC_SetPriority+0x50>)
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	3b04      	subs	r3, #4
 8003f74:	0112      	lsls	r2, r2, #4
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	440b      	add	r3, r1
 8003f7a:	761a      	strb	r2, [r3, #24]
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000e100 	.word	0xe000e100
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f1c3 0307 	rsb	r3, r3, #7
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	bf28      	it	cs
 8003fae:	2304      	movcs	r3, #4
 8003fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d902      	bls.n	8003fc0 <NVIC_EncodePriority+0x30>
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3b03      	subs	r3, #3
 8003fbe:	e000      	b.n	8003fc2 <NVIC_EncodePriority+0x32>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	43d9      	mvns	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe8:	4313      	orrs	r3, r2
         );
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ff4c 	bl	8003e9c <__NVIC_SetPriorityGrouping>
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800401e:	f7ff ff61 	bl	8003ee4 <__NVIC_GetPriorityGrouping>
 8004022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f7ff ffb1 	bl	8003f90 <NVIC_EncodePriority>
 800402e:	4602      	mov	r2, r0
 8004030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff80 	bl	8003f3c <__NVIC_SetPriority>
}
 800403c:	bf00      	nop
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff54 	bl	8003f00 <__NVIC_EnableIRQ>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e014      	b.n	800409c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	791b      	ldrb	r3, [r3, #4]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fe6e 	bl	8002d64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ba:	d118      	bne.n	80040ee <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2204      	movs	r2, #4
 80040c0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f043 0201 	orr.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f825 	bl	8004138 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fc:	d118      	bne.n	8004130 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2204      	movs	r2, #4
 8004102:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f043 0202 	orr.w	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004118:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004128:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f85b 	bl	80041e6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	2300      	movs	r3, #0
 800415e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	795b      	ldrb	r3, [r3, #5]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_DAC_ConfigChannel+0x20>
 8004168:	2302      	movs	r3, #2
 800416a:	e036      	b.n	80041da <HAL_DAC_ConfigChannel+0x8e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2202      	movs	r2, #2
 8004176:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004180:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4013      	ands	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	22c0      	movs	r2, #192	; 0xc0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	400a      	ands	r2, r1
 80041ca:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0cf      	b.n	80043ae <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a69      	ldr	r2, [pc, #420]	; (80043b8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_DFSDM_ChannelInit+0x3a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a67      	ldr	r2, [pc, #412]	; (80043bc <HAL_DFSDM_ChannelInit+0x1c0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_DFSDM_ChannelInit+0x3a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a66      	ldr	r2, [pc, #408]	; (80043c0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_DFSDM_ChannelInit+0x3a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a64      	ldr	r2, [pc, #400]	; (80043c4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d106      	bne.n	8004244 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004236:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8004238:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800423a:	4b64      	ldr	r3, [pc, #400]	; (80043cc <HAL_DFSDM_ChannelInit+0x1d0>)
 800423c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800423e:	4b5e      	ldr	r3, [pc, #376]	; (80043b8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e005      	b.n	8004250 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004244:	4b62      	ldr	r3, [pc, #392]	; (80043d0 <HAL_DFSDM_ChannelInit+0x1d4>)
 8004246:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004248:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <HAL_DFSDM_ChannelInit+0x1d8>)
 800424a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 800424c:	4b62      	ldr	r3, [pc, #392]	; (80043d8 <HAL_DFSDM_ChannelInit+0x1dc>)
 800424e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f8c1 	bl	80043dc <DFSDM_GetChannelFromInstance>
 800425a:	4603      	mov	r3, r0
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0a0      	b.n	80043ae <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fe fdc5 	bl	8002dfc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d125      	bne.n	80042d0 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	791b      	ldrb	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d108      	bne.n	80042c4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	431a      	orrs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80042de:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80042ee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80042f4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 020f 	bic.w	r2, r2, #15
 800430c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004334:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 0207 	and.w	r2, r2, #7
 8004360:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800438c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 f81e 	bl	80043dc <DFSDM_GetChannelFromInstance>
 80043a0:	4603      	mov	r3, r0
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40016000 	.word	0x40016000
 80043bc:	40016020 	.word	0x40016020
 80043c0:	40016040 	.word	0x40016040
 80043c4:	40016060 	.word	0x40016060
 80043c8:	20000c34 	.word	0x20000c34
 80043cc:	20000c38 	.word	0x20000c38
 80043d0:	20000c48 	.word	0x20000c48
 80043d4:	20000c4c 	.word	0x20000c4c
 80043d8:	40016400 	.word	0x40016400

080043dc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a24      	ldr	r2, [pc, #144]	; (8004478 <DFSDM_GetChannelFromInstance+0x9c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <DFSDM_GetChannelFromInstance+0x18>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a23      	ldr	r2, [pc, #140]	; (800447c <DFSDM_GetChannelFromInstance+0xa0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d102      	bne.n	80043fa <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e037      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a20      	ldr	r2, [pc, #128]	; (8004480 <DFSDM_GetChannelFromInstance+0xa4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <DFSDM_GetChannelFromInstance+0x2e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <DFSDM_GetChannelFromInstance+0xa8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d102      	bne.n	8004410 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800440a:	2301      	movs	r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e02c      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <DFSDM_GetChannelFromInstance+0xac>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <DFSDM_GetChannelFromInstance+0x44>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <DFSDM_GetChannelFromInstance+0xb0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d102      	bne.n	8004426 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8004420:	2302      	movs	r3, #2
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e021      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <DFSDM_GetChannelFromInstance+0xb4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <DFSDM_GetChannelFromInstance+0x5a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <DFSDM_GetChannelFromInstance+0xb8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d102      	bne.n	800443c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004436:	2303      	movs	r3, #3
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e016      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <DFSDM_GetChannelFromInstance+0xbc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d102      	bne.n	800444a <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004444:	2304      	movs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e00f      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <DFSDM_GetChannelFromInstance+0xc0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d102      	bne.n	8004458 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8004452:	2305      	movs	r3, #5
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e008      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <DFSDM_GetChannelFromInstance+0xc4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d102      	bne.n	8004466 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004460:	2306      	movs	r3, #6
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e001      	b.n	800446a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8004466:	2307      	movs	r3, #7
 8004468:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40016000 	.word	0x40016000
 800447c:	40016400 	.word	0x40016400
 8004480:	40016020 	.word	0x40016020
 8004484:	40016420 	.word	0x40016420
 8004488:	40016040 	.word	0x40016040
 800448c:	40016440 	.word	0x40016440
 8004490:	40016060 	.word	0x40016060
 8004494:	40016460 	.word	0x40016460
 8004498:	40016480 	.word	0x40016480
 800449c:	400164a0 	.word	0x400164a0
 80044a0:	400164c0 	.word	0x400164c0

080044a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e00c      	b.n	80044dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2205      	movs	r2, #5
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e081      	b.n	80045fe <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fe fd86 	bl	8003020 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004538:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004548:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	e006      	b.n	8004570 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800456e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d104      	bne.n	8004582 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004594:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a4:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69d9      	ldr	r1, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	d138      	bne.n	800468e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004626:	2302      	movs	r3, #2
 8004628:	e032      	b.n	8004690 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	; 0x24
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004658:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e000      	b.n	8004690 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	e165      	b.n	8004984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046b8:	2201      	movs	r2, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	f040 8154 	bne.w	800497e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d00b      	beq.n	80046f6 <HAL_GPIO_Init+0x5a>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d007      	beq.n	80046f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ea:	2b11      	cmp	r3, #17
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b12      	cmp	r3, #18
 80046f4:	d130      	bne.n	8004758 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	2203      	movs	r2, #3
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800472c:	2201      	movs	r2, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 0201 	and.w	r2, r3, #1
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0xfc>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b12      	cmp	r3, #18
 8004796:	d123      	bne.n	80047e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	08da      	lsrs	r2, r3, #3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3208      	adds	r2, #8
 80047a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	220f      	movs	r2, #15
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	08da      	lsrs	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3208      	adds	r2, #8
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	2203      	movs	r2, #3
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0203 	and.w	r2, r3, #3
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80ae 	beq.w	800497e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	4b5d      	ldr	r3, [pc, #372]	; (800499c <HAL_GPIO_Init+0x300>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	4a5c      	ldr	r2, [pc, #368]	; (800499c <HAL_GPIO_Init+0x300>)
 800482c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004830:	6453      	str	r3, [r2, #68]	; 0x44
 8004832:	4b5a      	ldr	r3, [pc, #360]	; (800499c <HAL_GPIO_Init+0x300>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800483e:	4a58      	ldr	r2, [pc, #352]	; (80049a0 <HAL_GPIO_Init+0x304>)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	220f      	movs	r2, #15
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4f      	ldr	r2, [pc, #316]	; (80049a4 <HAL_GPIO_Init+0x308>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d025      	beq.n	80048b6 <HAL_GPIO_Init+0x21a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4e      	ldr	r2, [pc, #312]	; (80049a8 <HAL_GPIO_Init+0x30c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <HAL_GPIO_Init+0x216>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <HAL_GPIO_Init+0x310>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d019      	beq.n	80048ae <HAL_GPIO_Init+0x212>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4c      	ldr	r2, [pc, #304]	; (80049b0 <HAL_GPIO_Init+0x314>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_GPIO_Init+0x20e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4b      	ldr	r2, [pc, #300]	; (80049b4 <HAL_GPIO_Init+0x318>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00d      	beq.n	80048a6 <HAL_GPIO_Init+0x20a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4a      	ldr	r2, [pc, #296]	; (80049b8 <HAL_GPIO_Init+0x31c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <HAL_GPIO_Init+0x206>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a49      	ldr	r2, [pc, #292]	; (80049bc <HAL_GPIO_Init+0x320>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_GPIO_Init+0x202>
 800489a:	2306      	movs	r3, #6
 800489c:	e00c      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 800489e:	2307      	movs	r3, #7
 80048a0:	e00a      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 80048a2:	2305      	movs	r3, #5
 80048a4:	e008      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 80048a6:	2304      	movs	r3, #4
 80048a8:	e006      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 80048aa:	2303      	movs	r3, #3
 80048ac:	e004      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e002      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_GPIO_Init+0x21c>
 80048b6:	2300      	movs	r3, #0
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f002 0203 	and.w	r2, r2, #3
 80048be:	0092      	lsls	r2, r2, #2
 80048c0:	4093      	lsls	r3, r2
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c8:	4935      	ldr	r1, [pc, #212]	; (80049a0 <HAL_GPIO_Init+0x304>)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	089b      	lsrs	r3, r3, #2
 80048ce:	3302      	adds	r3, #2
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048d6:	4b3a      	ldr	r3, [pc, #232]	; (80049c0 <HAL_GPIO_Init+0x324>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048fa:	4a31      	ldr	r2, [pc, #196]	; (80049c0 <HAL_GPIO_Init+0x324>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004900:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_GPIO_Init+0x324>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004924:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <HAL_GPIO_Init+0x324>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <HAL_GPIO_Init+0x324>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_GPIO_Init+0x324>)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <HAL_GPIO_Init+0x324>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004978:	4a11      	ldr	r2, [pc, #68]	; (80049c0 <HAL_GPIO_Init+0x324>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	f67f ae96 	bls.w	80046b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40020400 	.word	0x40020400
 80049ac:	40020800 	.word	0x40020800
 80049b0:	40020c00 	.word	0x40020c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40021400 	.word	0x40021400
 80049bc:	40021800 	.word	0x40021800
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d4:	787b      	ldrb	r3, [r7, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049e0:	e003      	b.n	80049ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	401a      	ands	r2, r3
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d104      	bne.n	8004a1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a10:	887b      	ldrh	r3, [r7, #2]
 8004a12:	041a      	lsls	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a18:	e002      	b.n	8004a20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	619a      	str	r2, [r3, #24]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2e:	b08f      	sub	sp, #60	; 0x3c
 8004a30:	af0a      	add	r7, sp, #40	; 0x28
 8004a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e054      	b.n	8004ae8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f00b ff43 	bl	80108e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2203      	movs	r2, #3
 8004a62:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f005 ff03 	bl	800a888 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	687e      	ldr	r6, [r7, #4]
 8004a8a:	466d      	mov	r5, sp
 8004a8c:	f106 0410 	add.w	r4, r6, #16
 8004a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004aa0:	1d33      	adds	r3, r6, #4
 8004aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f005 fe7d 	bl	800a7a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f005 fefa 	bl	800a8aa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	687e      	ldr	r6, [r7, #4]
 8004abe:	466d      	mov	r5, sp
 8004ac0:	f106 0410 	add.w	r4, r6, #16
 8004ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ad4:	1d33      	adds	r3, r6, #4
 8004ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f006 f80d 	bl	800aaf8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004af0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b089      	sub	sp, #36	; 0x24
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	70fb      	strb	r3, [r7, #3]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70bb      	strb	r3, [r7, #2]
 8004b06:	4613      	mov	r3, r2
 8004b08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_HCD_HC_Init+0x28>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e07f      	b.n	8004c18 <HAL_HCD_HC_Init+0x128>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	333d      	adds	r3, #61	; 0x3d
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	3338      	adds	r3, #56	; 0x38
 8004b44:	787a      	ldrb	r2, [r7, #1]
 8004b46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	440b      	add	r3, r1
 8004b56:	3340      	adds	r3, #64	; 0x40
 8004b58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	3339      	adds	r3, #57	; 0x39
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	440b      	add	r3, r1
 8004b7e:	333f      	adds	r3, #63	; 0x3f
 8004b80:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004b84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	78bb      	ldrb	r3, [r7, #2]
 8004b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8e:	b2d8      	uxtb	r0, r3
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	333a      	adds	r3, #58	; 0x3a
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da0a      	bge.n	8004bc0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	440b      	add	r3, r1
 8004bb8:	333b      	adds	r3, #59	; 0x3b
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e009      	b.n	8004bd4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	440b      	add	r3, r1
 8004bce:	333b      	adds	r3, #59	; 0x3b
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	333c      	adds	r3, #60	; 0x3c
 8004be4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004be8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	787c      	ldrb	r4, [r7, #1]
 8004bf0:	78ba      	ldrb	r2, [r7, #2]
 8004bf2:	78f9      	ldrb	r1, [r7, #3]
 8004bf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bf6:	9302      	str	r3, [sp, #8]
 8004bf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	4623      	mov	r3, r4
 8004c06:	f006 f8f3 	bl	800adf0 <USB_HC_Init>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd90      	pop	{r4, r7, pc}

08004c20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_HCD_HC_Halt+0x1e>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e00f      	b.n	8004c5e <HAL_HCD_HC_Halt+0x3e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f006 fb2d 	bl	800b2ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70bb      	strb	r3, [r7, #2]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	440b      	add	r3, r1
 8004c90:	333b      	adds	r3, #59	; 0x3b
 8004c92:	78ba      	ldrb	r2, [r7, #2]
 8004c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	333f      	adds	r3, #63	; 0x3f
 8004ca6:	787a      	ldrb	r2, [r7, #1]
 8004ca8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004caa:	7c3b      	ldrb	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d114      	bne.n	8004cda <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3342      	adds	r3, #66	; 0x42
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	333d      	adds	r3, #61	; 0x3d
 8004cd4:	7f3a      	ldrb	r2, [r7, #28]
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e009      	b.n	8004cee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3342      	adds	r3, #66	; 0x42
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004cee:	787b      	ldrb	r3, [r7, #1]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	f200 80d6 	bhi.w	8004ea2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_HCD_HC_SubmitRequest+0x94>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004e8d 	.word	0x08004e8d
 8004d04:	08004d79 	.word	0x08004d79
 8004d08:	08004e03 	.word	0x08004e03
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d0c:	7c3b      	ldrb	r3, [r7, #16]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	f040 80c9 	bne.w	8004ea6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004d14:	78bb      	ldrb	r3, [r7, #2]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 80c5 	bne.w	8004ea6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004d1c:	8b3b      	ldrh	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	3351      	adds	r3, #81	; 0x51
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	3351      	adds	r3, #81	; 0x51
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	440b      	add	r3, r1
 8004d5a:	3342      	adds	r3, #66	; 0x42
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d60:	e0a1      	b.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	440b      	add	r3, r1
 8004d70:	3342      	adds	r3, #66	; 0x42
 8004d72:	2202      	movs	r2, #2
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	e096      	b.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004d78:	78bb      	ldrb	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d120      	bne.n	8004dc0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3351      	adds	r3, #81	; 0x51
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	440b      	add	r3, r1
 8004da2:	3342      	adds	r3, #66	; 0x42
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004da8:	e07e      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	440b      	add	r3, r1
 8004db8:	3342      	adds	r3, #66	; 0x42
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e073      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	3350      	adds	r3, #80	; 0x50
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	440b      	add	r3, r1
 8004de4:	3342      	adds	r3, #66	; 0x42
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
      break;
 8004dea:	e05d      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	3342      	adds	r3, #66	; 0x42
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	701a      	strb	r2, [r3, #0]
      break;
 8004e00:	e052      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e02:	78bb      	ldrb	r3, [r7, #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d120      	bne.n	8004e4a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	440b      	add	r3, r1
 8004e16:	3351      	adds	r3, #81	; 0x51
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	440b      	add	r3, r1
 8004e2c:	3342      	adds	r3, #66	; 0x42
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e32:	e039      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	440b      	add	r3, r1
 8004e42:	3342      	adds	r3, #66	; 0x42
 8004e44:	2202      	movs	r2, #2
 8004e46:	701a      	strb	r2, [r3, #0]
      break;
 8004e48:	e02e      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	440b      	add	r3, r1
 8004e58:	3350      	adds	r3, #80	; 0x50
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e60:	78fa      	ldrb	r2, [r7, #3]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3342      	adds	r3, #66	; 0x42
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
      break;
 8004e74:	e018      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	440b      	add	r3, r1
 8004e84:	3342      	adds	r3, #66	; 0x42
 8004e86:	2202      	movs	r2, #2
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e00d      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	440b      	add	r3, r1
 8004e9a:	3342      	adds	r3, #66	; 0x42
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004ea6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3344      	adds	r3, #68	; 0x44
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	8b39      	ldrh	r1, [r7, #24]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4403      	add	r3, r0
 8004ecc:	3348      	adds	r3, #72	; 0x48
 8004ece:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	335c      	adds	r3, #92	; 0x5c
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	334c      	adds	r3, #76	; 0x4c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	440b      	add	r3, r1
 8004f06:	3339      	adds	r3, #57	; 0x39
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	440b      	add	r3, r1
 8004f1a:	335d      	adds	r3, #93	; 0x5d
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	3338      	adds	r3, #56	; 0x38
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	18d1      	adds	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f006 f862 	bl	800b004 <USB_HC_StartXfer>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f005 fd85 	bl	800aa72 <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	f040 80ef 	bne.w	800514e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f005 fd69 	bl	800aa4c <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80e5 	beq.w	800514c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 fd60 	bl	800aa4c <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f96:	d104      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f005 fd50 	bl	800aa4c <USB_ReadInterrupts>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb6:	d104      	bne.n	8004fc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f005 fd40 	bl	800aa4c <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd6:	d104      	bne.n	8004fe2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fe0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f005 fd30 	bl	800aa4c <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f005 fd22 	bl	800aa4c <USB_ReadInterrupts>
 8005008:	4603      	mov	r3, r0
 800500a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005012:	d115      	bne.n	8005040 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800501c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f00b fcd6 	bl	80109e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	4618      	mov	r0, r3
 800503c:	f005 fe12 	bl	800ac64 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f005 fd01 	bl	800aa4c <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005054:	d102      	bne.n	800505c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 f968 	bl	800632c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f005 fcf3 	bl	800aa4c <USB_ReadInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d106      	bne.n	800507e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f00b fc99 	bl	80109a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2208      	movs	r2, #8
 800507c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f005 fce2 	bl	800aa4c <USB_ReadInterrupts>
 8005088:	4603      	mov	r3, r0
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005092:	d138      	bne.n	8005106 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f006 f8f7 	bl	800b28c <USB_HC_ReadInterrupt>
 800509e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e025      	b.n	80050f2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d018      	beq.n	80050ec <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d0:	d106      	bne.n	80050e0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8cf 	bl	800527c <HCD_HC_IN_IRQHandler>
 80050de:	e005      	b.n	80050ec <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fcfd 	bl	8005ae6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3301      	adds	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3d4      	bcc.n	80050a6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 fc9e 	bl	800aa4c <USB_ReadInterrupts>
 8005110:	4603      	mov	r3, r0
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d101      	bne.n	800511e <HAL_HCD_IRQHandler+0x1d2>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_HCD_IRQHandler+0x1d4>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d014      	beq.n	800514e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0210 	bic.w	r2, r2, #16
 8005132:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 f84b 	bl	80061d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0210 	orr.w	r2, r2, #16
 8005148:	619a      	str	r2, [r3, #24]
 800514a:	e000      	b.n	800514e <HAL_HCD_IRQHandler+0x202>
      return;
 800514c:	bf00      	nop
    }
  }
}
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_HCD_Start+0x16>
 8005166:	2302      	movs	r3, #2
 8005168:	e013      	b.n	8005192 <HAL_HCD_Start+0x3e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f005 fb75 	bl	800a866 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2101      	movs	r1, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f005 fdd2 	bl	800ad2c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_HCD_Stop+0x16>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e00d      	b.n	80051cc <HAL_HCD_Stop+0x32>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f006 f9b1 	bl	800b524 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f005 fd79 	bl	800acd8 <USB_ResetPort>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	440b      	add	r3, r1
 800520a:	335c      	adds	r3, #92	; 0x5c
 800520c:	781b      	ldrb	r3, [r3, #0]
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	334c      	adds	r3, #76	; 0x4c
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f005 fdbb 	bl	800adcc <USB_GetCurrentFrame>
 8005256:	4603      	mov	r3, r0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f005 fd96 	bl	800ad9e <USB_GetHostSpeed>
 8005272:	4603      	mov	r3, r0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d119      	bne.n	80052e0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b8:	461a      	mov	r2, r3
 80052ba:	2304      	movs	r3, #4
 80052bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d8:	f043 0302 	orr.w	r3, r3, #2
 80052dc:	60d3      	str	r3, [r2, #12]
 80052de:	e0ce      	b.n	800547e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f6:	d12c      	bne.n	8005352 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	461a      	mov	r2, r3
 8005306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800530a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	335d      	adds	r3, #93	; 0x5d
 800531c:	2207      	movs	r2, #7
 800531e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	440a      	add	r2, r1
 8005336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533a:	f043 0302 	orr.w	r3, r3, #2
 800533e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	4611      	mov	r1, r2
 800534a:	4618      	mov	r0, r3
 800534c:	f005 ffaf 	bl	800b2ae <USB_HC_Halt>
 8005350:	e095      	b.n	800547e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d109      	bne.n	800537c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005374:	461a      	mov	r2, r3
 8005376:	2320      	movs	r3, #32
 8005378:	6093      	str	r3, [r2, #8]
 800537a:	e080      	b.n	800547e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b08      	cmp	r3, #8
 8005390:	d134      	bne.n	80053fc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	335d      	adds	r3, #93	; 0x5d
 80053c2:	2205      	movs	r2, #5
 80053c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	461a      	mov	r2, r3
 80053d4:	2310      	movs	r3, #16
 80053d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	461a      	mov	r2, r3
 80053e6:	2308      	movs	r3, #8
 80053e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f005 ff5a 	bl	800b2ae <USB_HC_Halt>
 80053fa:	e040      	b.n	800547e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005412:	d134      	bne.n	800547e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	440a      	add	r2, r1
 800542a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542e:	f043 0302 	orr.w	r3, r3, #2
 8005432:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f005 ff35 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	461a      	mov	r2, r3
 8005452:	2310      	movs	r3, #16
 8005454:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	440b      	add	r3, r1
 8005464:	335d      	adds	r3, #93	; 0x5d
 8005466:	2208      	movs	r2, #8
 8005468:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	461a      	mov	r2, r3
 8005478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800547c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005494:	d122      	bne.n	80054dc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f005 fef4 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	461a      	mov	r2, r3
 80054d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80054da:	e300      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	f040 80fd 	bne.w	80056ee <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01b      	beq.n	8005534 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3348      	adds	r3, #72	; 0x48
 800550c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	0159      	lsls	r1, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	440b      	add	r3, r1
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005520:	1ad1      	subs	r1, r2, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4403      	add	r3, r0
 8005530:	334c      	adds	r3, #76	; 0x4c
 8005532:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	335d      	adds	r3, #93	; 0x5d
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	440b      	add	r3, r1
 8005556:	3358      	adds	r3, #88	; 0x58
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	461a      	mov	r2, r3
 800556a:	2301      	movs	r3, #1
 800556c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	333f      	adds	r3, #63	; 0x3f
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	440b      	add	r3, r1
 8005592:	333f      	adds	r3, #63	; 0x3f
 8005594:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005596:	2b02      	cmp	r3, #2
 8005598:	d121      	bne.n	80055de <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b4:	f043 0302 	orr.w	r3, r3, #2
 80055b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f005 fe72 	bl	800b2ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	461a      	mov	r2, r3
 80055d8:	2310      	movs	r3, #16
 80055da:	6093      	str	r3, [r2, #8]
 80055dc:	e070      	b.n	80056c0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	333f      	adds	r3, #63	; 0x3f
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d12a      	bne.n	800564a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	440a      	add	r2, r1
 800560a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800560e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005612:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	335c      	adds	r3, #92	; 0x5c
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	b2d8      	uxtb	r0, r3
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	335c      	adds	r3, #92	; 0x5c
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	4601      	mov	r1, r0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f00b f9da 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005648:	e03a      	b.n	80056c0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	333f      	adds	r3, #63	; 0x3f
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d12f      	bne.n	80056c0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	440b      	add	r3, r1
 800566e:	335c      	adds	r3, #92	; 0x5c
 8005670:	2201      	movs	r2, #1
 8005672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	440b      	add	r3, r1
 8005682:	3350      	adds	r3, #80	; 0x50
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f083 0301 	eor.w	r3, r3, #1
 800568a:	b2d8      	uxtb	r0, r3
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	440b      	add	r3, r1
 800569a:	3350      	adds	r3, #80	; 0x50
 800569c:	4602      	mov	r2, r0
 800569e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	b2d8      	uxtb	r0, r3
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	440b      	add	r3, r1
 80056b2:	335c      	adds	r3, #92	; 0x5c
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	4601      	mov	r1, r0
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f00b f99e 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	3350      	adds	r3, #80	; 0x50
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2d8      	uxtb	r0, r3
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	3350      	adds	r3, #80	; 0x50
 80056e8:	4602      	mov	r2, r0
 80056ea:	701a      	strb	r2, [r3, #0]
}
 80056ec:	e1f7      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b02      	cmp	r3, #2
 8005702:	f040 811a 	bne.w	800593a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	440a      	add	r2, r1
 800571c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005720:	f023 0302 	bic.w	r3, r3, #2
 8005724:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	440b      	add	r3, r1
 8005734:	335d      	adds	r3, #93	; 0x5d
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10a      	bne.n	8005752 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	335c      	adds	r3, #92	; 0x5c
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e0d9      	b.n	8005906 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	440b      	add	r3, r1
 8005760:	335d      	adds	r3, #93	; 0x5d
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b05      	cmp	r3, #5
 8005766:	d10a      	bne.n	800577e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	335c      	adds	r3, #92	; 0x5c
 8005778:	2205      	movs	r2, #5
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e0c3      	b.n	8005906 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	440b      	add	r3, r1
 800578c:	335d      	adds	r3, #93	; 0x5d
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b06      	cmp	r3, #6
 8005792:	d00a      	beq.n	80057aa <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	335d      	adds	r3, #93	; 0x5d
 80057a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d156      	bne.n	8005858 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	440b      	add	r3, r1
 80057b8:	3358      	adds	r3, #88	; 0x58
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1c59      	adds	r1, r3, #1
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4403      	add	r3, r0
 80057cc:	3358      	adds	r3, #88	; 0x58
 80057ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3358      	adds	r3, #88	; 0x58
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d914      	bls.n	8005810 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	440b      	add	r3, r1
 80057f4:	3358      	adds	r3, #88	; 0x58
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	335c      	adds	r3, #92	; 0x5c
 800580a:	2204      	movs	r2, #4
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	e009      	b.n	8005824 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	335c      	adds	r3, #92	; 0x5c
 8005820:	2202      	movs	r2, #2
 8005822:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800583a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005842:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e056      	b.n	8005906 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	335d      	adds	r3, #93	; 0x5d
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b03      	cmp	r3, #3
 800586c:	d123      	bne.n	80058b6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	440b      	add	r3, r1
 800587c:	335c      	adds	r3, #92	; 0x5c
 800587e:	2202      	movs	r2, #2
 8005880:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005898:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	461a      	mov	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e027      	b.n	8005906 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	335d      	adds	r3, #93	; 0x5d
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b07      	cmp	r3, #7
 80058ca:	d11c      	bne.n	8005906 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	440b      	add	r3, r1
 80058da:	3358      	adds	r3, #88	; 0x58
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4403      	add	r3, r0
 80058ee:	3358      	adds	r3, #88	; 0x58
 80058f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	335c      	adds	r3, #92	; 0x5c
 8005902:	2204      	movs	r2, #4
 8005904:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	461a      	mov	r2, r3
 8005914:	2302      	movs	r3, #2
 8005916:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	b2d8      	uxtb	r0, r3
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	440b      	add	r3, r1
 800592a:	335c      	adds	r3, #92	; 0x5c
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	4601      	mov	r1, r0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00b f862 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005938:	e0d1      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594c:	2b80      	cmp	r3, #128	; 0x80
 800594e:	d13e      	bne.n	80059ce <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	440a      	add	r2, r1
 8005966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596a:	f043 0302 	orr.w	r3, r3, #2
 800596e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	440b      	add	r3, r1
 800597e:	3358      	adds	r3, #88	; 0x58
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4403      	add	r3, r0
 8005992:	3358      	adds	r3, #88	; 0x58
 8005994:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	440b      	add	r3, r1
 80059a4:	335d      	adds	r3, #93	; 0x5d
 80059a6:	2206      	movs	r2, #6
 80059a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f005 fc7a 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	461a      	mov	r2, r3
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	6093      	str	r3, [r2, #8]
}
 80059cc:	e087      	b.n	8005ade <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d17c      	bne.n	8005ade <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	440b      	add	r3, r1
 80059f2:	333f      	adds	r3, #63	; 0x3f
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d122      	bne.n	8005a40 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	440b      	add	r3, r1
 8005a08:	3358      	adds	r3, #88	; 0x58
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f005 fc38 	bl	800b2ae <USB_HC_Halt>
 8005a3e:	e045      	b.n	8005acc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	333f      	adds	r3, #63	; 0x3f
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	333f      	adds	r3, #63	; 0x3f
 8005a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d12f      	bne.n	8005acc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	3358      	adds	r3, #88	; 0x58
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d121      	bne.n	8005acc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	440b      	add	r3, r1
 8005a96:	335d      	adds	r3, #93	; 0x5d
 8005a98:	2203      	movs	r2, #3
 8005a9a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab6:	f043 0302 	orr.w	r3, r3, #2
 8005aba:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f005 fbf1 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2310      	movs	r3, #16
 8005adc:	6093      	str	r3, [r2, #8]
}
 8005ade:	bf00      	nop
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b086      	sub	sp, #24
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d119      	bne.n	8005b4a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	461a      	mov	r2, r3
 8005b24:	2304      	movs	r3, #4
 8005b26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b48:	e33e      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d141      	bne.n	8005be4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2320      	movs	r3, #32
 8005b70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	440b      	add	r3, r1
 8005b80:	333d      	adds	r3, #61	; 0x3d
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	f040 831f 	bne.w	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	333d      	adds	r3, #61	; 0x3d
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	440b      	add	r3, r1
 8005bac:	335c      	adds	r3, #92	; 0x5c
 8005bae:	2202      	movs	r2, #2
 8005bb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f005 fb66 	bl	800b2ae <USB_HC_Halt>
}
 8005be2:	e2f1      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d13f      	bne.n	8005c7a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	440b      	add	r3, r1
 8005c08:	335d      	adds	r3, #93	; 0x5d
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	440b      	add	r3, r1
 8005c1c:	333d      	adds	r3, #61	; 0x3d
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	440b      	add	r3, r1
 8005c30:	3358      	adds	r3, #88	; 0x58
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f005 fb24 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	461a      	mov	r2, r3
 8005c74:	2340      	movs	r3, #64	; 0x40
 8005c76:	6093      	str	r3, [r2, #8]
}
 8005c78:	e2a6      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c90:	d122      	bne.n	8005cd8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f005 faf6 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cd4:	6093      	str	r3, [r2, #8]
}
 8005cd6:	e277      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d135      	bne.n	8005d5a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3358      	adds	r3, #88	; 0x58
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1c:	f043 0302 	orr.w	r3, r3, #2
 8005d20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f005 fabe 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2301      	movs	r3, #1
 8005d42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	440b      	add	r3, r1
 8005d52:	335d      	adds	r3, #93	; 0x5d
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
}
 8005d58:	e236      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d12b      	bne.n	8005dc8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2308      	movs	r3, #8
 8005d80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9c:	f043 0302 	orr.w	r3, r3, #2
 8005da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f005 fa7e 	bl	800b2ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	335d      	adds	r3, #93	; 0x5d
 8005dc2:	2205      	movs	r2, #5
 8005dc4:	701a      	strb	r2, [r3, #0]
}
 8005dc6:	e1ff      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d155      	bne.n	8005e8a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	3358      	adds	r3, #88	; 0x58
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	440b      	add	r3, r1
 8005e00:	335d      	adds	r3, #93	; 0x5d
 8005e02:	2203      	movs	r2, #3
 8005e04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	333d      	adds	r3, #61	; 0x3d
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d114      	bne.n	8005e46 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	440b      	add	r3, r1
 8005e2a:	333c      	adds	r3, #60	; 0x3c
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	440b      	add	r3, r1
 8005e40:	333d      	adds	r3, #61	; 0x3d
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e60:	f043 0302 	orr.w	r3, r3, #2
 8005e64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f005 fa1c 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	461a      	mov	r2, r3
 8005e84:	2310      	movs	r3, #16
 8005e86:	6093      	str	r3, [r2, #8]
}
 8005e88:	e19e      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9c:	2b80      	cmp	r3, #128	; 0x80
 8005e9e:	d12b      	bne.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eba:	f043 0302 	orr.w	r3, r3, #2
 8005ebe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f005 f9ef 	bl	800b2ae <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	335d      	adds	r3, #93	; 0x5d
 8005ee0:	2206      	movs	r2, #6
 8005ee2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	6093      	str	r3, [r2, #8]
}
 8005ef6:	e167      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0e:	d135      	bne.n	8005f7c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f2a:	f043 0302 	orr.w	r3, r3, #2
 8005f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f005 f9b7 	bl	800b2ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2310      	movs	r3, #16
 8005f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	440b      	add	r3, r1
 8005f74:	335d      	adds	r3, #93	; 0x5d
 8005f76:	2208      	movs	r2, #8
 8005f78:	701a      	strb	r2, [r3, #0]
}
 8005f7a:	e125      	b.n	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	f040 811a 	bne.w	80061c8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fae:	f023 0302 	bic.w	r3, r3, #2
 8005fb2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	440b      	add	r3, r1
 8005fc2:	335d      	adds	r3, #93	; 0x5d
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d137      	bne.n	800603a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	440b      	add	r3, r1
 8005fd8:	335c      	adds	r3, #92	; 0x5c
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	440b      	add	r3, r1
 8005fec:	333f      	adds	r3, #63	; 0x3f
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d00b      	beq.n	800600c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	440b      	add	r3, r1
 8006002:	333f      	adds	r3, #63	; 0x3f
 8006004:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006006:	2b03      	cmp	r3, #3
 8006008:	f040 80c5 	bne.w	8006196 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	3351      	adds	r3, #81	; 0x51
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f083 0301 	eor.w	r3, r3, #1
 8006022:	b2d8      	uxtb	r0, r3
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	3351      	adds	r3, #81	; 0x51
 8006034:	4602      	mov	r2, r0
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	e0ad      	b.n	8006196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	440b      	add	r3, r1
 8006048:	335d      	adds	r3, #93	; 0x5d
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d10a      	bne.n	8006066 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	440b      	add	r3, r1
 800605e:	335c      	adds	r3, #92	; 0x5c
 8006060:	2202      	movs	r2, #2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e097      	b.n	8006196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	440b      	add	r3, r1
 8006074:	335d      	adds	r3, #93	; 0x5d
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d10a      	bne.n	8006092 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	440b      	add	r3, r1
 800608a:	335c      	adds	r3, #92	; 0x5c
 800608c:	2202      	movs	r2, #2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e081      	b.n	8006196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	440b      	add	r3, r1
 80060a0:	335d      	adds	r3, #93	; 0x5d
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d10a      	bne.n	80060be <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	335c      	adds	r3, #92	; 0x5c
 80060b8:	2205      	movs	r2, #5
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e06b      	b.n	8006196 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	440b      	add	r3, r1
 80060cc:	335d      	adds	r3, #93	; 0x5d
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d00a      	beq.n	80060ea <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	440b      	add	r3, r1
 80060e2:	335d      	adds	r3, #93	; 0x5d
 80060e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060e6:	2b08      	cmp	r3, #8
 80060e8:	d155      	bne.n	8006196 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	440b      	add	r3, r1
 80060f8:	3358      	adds	r3, #88	; 0x58
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	1c59      	adds	r1, r3, #1
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	4403      	add	r3, r0
 800610c:	3358      	adds	r3, #88	; 0x58
 800610e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	440b      	add	r3, r1
 800611e:	3358      	adds	r3, #88	; 0x58
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d914      	bls.n	8006150 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	440b      	add	r3, r1
 8006134:	3358      	adds	r3, #88	; 0x58
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	440b      	add	r3, r1
 8006148:	335c      	adds	r3, #92	; 0x5c
 800614a:	2204      	movs	r2, #4
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e009      	b.n	8006164 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	440b      	add	r3, r1
 800615e:	335c      	adds	r3, #92	; 0x5c
 8006160:	2202      	movs	r2, #2
 8006162:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800617a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006182:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	461a      	mov	r2, r3
 80061a4:	2302      	movs	r3, #2
 80061a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	b2d8      	uxtb	r0, r3
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	440b      	add	r3, r1
 80061ba:	335c      	adds	r3, #92	; 0x5c
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	4601      	mov	r1, r0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f00a fc1a 	bl	80109fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80061c8:	bf00      	nop
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	0c5b      	lsrs	r3, r3, #17
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	091b      	lsrs	r3, r3, #4
 8006200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006204:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d004      	beq.n	8006216 <HCD_RXQLVL_IRQHandler+0x46>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b05      	cmp	r3, #5
 8006210:	f000 8082 	beq.w	8006318 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006214:	e083      	b.n	800631e <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d07f      	beq.n	800631c <HCD_RXQLVL_IRQHandler+0x14c>
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	3344      	adds	r3, #68	; 0x44
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d074      	beq.n	800631c <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	440b      	add	r3, r1
 8006244:	3344      	adds	r3, #68	; 0x44
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	b292      	uxth	r2, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f004 fbd4 	bl	800a9fa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	440b      	add	r3, r1
 8006260:	3344      	adds	r3, #68	; 0x44
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	18d1      	adds	r1, r2, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4403      	add	r3, r0
 8006276:	3344      	adds	r3, #68	; 0x44
 8006278:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	440b      	add	r3, r1
 8006288:	334c      	adds	r3, #76	; 0x4c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	18d1      	adds	r1, r2, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4403      	add	r3, r0
 800629e:	334c      	adds	r3, #76	; 0x4c
 80062a0:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HCD_RXQLVL_IRQHandler+0x158>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d031      	beq.n	800631c <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	461a      	mov	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	440b      	add	r3, r1
 80062f8:	3350      	adds	r3, #80	; 0x50
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f083 0301 	eor.w	r3, r3, #1
 8006300:	b2d8      	uxtb	r0, r3
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	440b      	add	r3, r1
 8006310:	3350      	adds	r3, #80	; 0x50
 8006312:	4602      	mov	r2, r0
 8006314:	701a      	strb	r2, [r3, #0]
      break;
 8006316:	e001      	b.n	800631c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006318:	bf00      	nop
 800631a:	e000      	b.n	800631e <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 800631c:	bf00      	nop
  }
}
 800631e:	bf00      	nop
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	1ff80000 	.word	0x1ff80000

0800632c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006358:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b02      	cmp	r3, #2
 8006362:	d10b      	bne.n	800637c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d102      	bne.n	8006374 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f00a fb28 	bl	80109c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b08      	cmp	r3, #8
 8006384:	d132      	bne.n	80063ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f043 0308 	orr.w	r3, r3, #8
 800638c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b04      	cmp	r3, #4
 8006396:	d126      	bne.n	80063e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d113      	bne.n	80063c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80063a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063aa:	d106      	bne.n	80063ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2102      	movs	r1, #2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f004 fc56 	bl	800ac64 <USB_InitFSLSPClkSel>
 80063b8:	e011      	b.n	80063de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f004 fc4f 	bl	800ac64 <USB_InitFSLSPClkSel>
 80063c6:	e00a      	b.n	80063de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d106      	bne.n	80063de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d6:	461a      	mov	r2, r3
 80063d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80063dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f00a fb1e 	bl	8010a20 <HAL_HCD_PortEnabled_Callback>
 80063e4:	e002      	b.n	80063ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f00a fb28 	bl	8010a3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d103      	bne.n	80063fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f043 0320 	orr.w	r3, r3, #32
 80063fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006404:	461a      	mov	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6013      	str	r3, [r2, #0]
}
 800640a:	bf00      	nop
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e154      	b.n	80066d0 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a98      	ldr	r2, [pc, #608]	; (80066a0 <HAL_I2S_Init+0x28c>)
 800643e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc fe35 	bl	80030b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800645c:	f023 030f 	bic.w	r3, r3, #15
 8006460:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2202      	movs	r2, #2
 8006468:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d06f      	beq.n	8006552 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800647a:	2310      	movs	r3, #16
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e001      	b.n	8006484 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006480:	2320      	movs	r3, #32
 8006482:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b20      	cmp	r3, #32
 800648a:	d802      	bhi.n	8006492 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a83      	ldr	r2, [pc, #524]	; (80066a4 <HAL_I2S_Init+0x290>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_I2S_Init+0x92>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a81      	ldr	r2, [pc, #516]	; (80066a8 <HAL_I2S_Init+0x294>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d104      	bne.n	80064b0 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f001 f9c6 	bl	8007838 <HAL_RCCEx_GetPeriphCLKFreq>
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	e003      	b.n	80064b8 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80064b0:	2002      	movs	r0, #2
 80064b2:	f001 f9c1 	bl	8007838 <HAL_RCCEx_GetPeriphCLKFreq>
 80064b6:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c0:	d125      	bne.n	800650e <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	461a      	mov	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e6:	3305      	adds	r3, #5
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e01f      	b.n	800652c <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	3305      	adds	r3, #5
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e00e      	b.n	800652c <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	fbb2 f2f3 	udiv	r2, r2, r3
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	3305      	adds	r3, #5
 800652a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	4a5f      	ldr	r2, [pc, #380]	; (80066ac <HAL_I2S_Init+0x298>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	08db      	lsrs	r3, r3, #3
 8006536:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	e003      	b.n	800655a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006552:	2302      	movs	r3, #2
 8006554:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d902      	bls.n	8006566 <HAL_I2S_Init+0x152>
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2bff      	cmp	r3, #255	; 0xff
 8006564:	d907      	bls.n	8006576 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	f043 0210 	orr.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e0ac      	b.n	80066d0 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	ea42 0103 	orr.w	r1, r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	430a      	orrs	r2, r1
 8006588:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006594:	f023 030f 	bic.w	r3, r3, #15
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6851      	ldr	r1, [r2, #4]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6892      	ldr	r2, [r2, #8]
 80065a0:	4311      	orrs	r1, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68d2      	ldr	r2, [r2, #12]
 80065a6:	4311      	orrs	r1, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6992      	ldr	r2, [r2, #24]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b8:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b30      	cmp	r3, #48	; 0x30
 80065c0:	d003      	beq.n	80065ca <HAL_I2S_Init+0x1b6>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2bb0      	cmp	r3, #176	; 0xb0
 80065c8:	d107      	bne.n	80065da <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065d8:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d16e      	bne.n	80066c0 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <HAL_I2S_Init+0x29c>)
 80065e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a2d      	ldr	r2, [pc, #180]	; (80066a4 <HAL_I2S_Init+0x290>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <HAL_I2S_Init+0x1e2>
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <HAL_I2S_Init+0x2a0>)
 80065f4:	e001      	b.n	80065fa <HAL_I2S_Init+0x1e6>
 80065f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	4928      	ldr	r1, [pc, #160]	; (80066a4 <HAL_I2S_Init+0x290>)
 8006602:	428a      	cmp	r2, r1
 8006604:	d101      	bne.n	800660a <HAL_I2S_Init+0x1f6>
 8006606:	4a2b      	ldr	r2, [pc, #172]	; (80066b4 <HAL_I2S_Init+0x2a0>)
 8006608:	e001      	b.n	800660e <HAL_I2S_Init+0x1fa>
 800660a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800660e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006612:	f023 030f 	bic.w	r3, r3, #15
 8006616:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <HAL_I2S_Init+0x290>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_I2S_Init+0x212>
 8006622:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <HAL_I2S_Init+0x2a0>)
 8006624:	e001      	b.n	800662a <HAL_I2S_Init+0x216>
 8006626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662a:	2202      	movs	r2, #2
 800662c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <HAL_I2S_Init+0x290>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <HAL_I2S_Init+0x228>
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <HAL_I2S_Init+0x2a0>)
 800663a:	e001      	b.n	8006640 <HAL_I2S_Init+0x22c>
 800663c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d003      	beq.n	8006656 <HAL_I2S_Init+0x242>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	e001      	b.n	8006662 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800665e:	2300      	movs	r3, #0
 8006660:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	b299      	uxth	r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006678:	4303      	orrs	r3, r0
 800667a:	b29b      	uxth	r3, r3
 800667c:	430b      	orrs	r3, r1
 800667e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	897b      	ldrh	r3, [r7, #10]
 8006686:	4313      	orrs	r3, r2
 8006688:	b29b      	uxth	r3, r3
 800668a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800668e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a03      	ldr	r2, [pc, #12]	; (80066a4 <HAL_I2S_Init+0x290>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10e      	bne.n	80066b8 <HAL_I2S_Init+0x2a4>
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <HAL_I2S_Init+0x2a0>)
 800669c:	e00e      	b.n	80066bc <HAL_I2S_Init+0x2a8>
 800669e:	bf00      	nop
 80066a0:	080067cf 	.word	0x080067cf
 80066a4:	40003800 	.word	0x40003800
 80066a8:	40003c00 	.word	0x40003c00
 80066ac:	cccccccd 	.word	0xcccccccd
 80066b0:	080068e5 	.word	0x080068e5
 80066b4:	40003400 	.word	0x40003400
 80066b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066bc:	897a      	ldrh	r2, [r7, #10]
 80066be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10e      	bne.n	8006768 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006758:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff ffb8 	bl	80066d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	b292      	uxth	r2, r2
 8006784:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10e      	bne.n	80067c6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067b6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff ff93 	bl	80066ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d13a      	bne.n	8006860 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d109      	bne.n	8006808 <I2S_IRQHandler+0x3a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d102      	bne.n	8006808 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff ffb4 	bl	8006770 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d126      	bne.n	8006860 <I2S_IRQHandler+0x92>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b20      	cmp	r3, #32
 800681e:	d11f      	bne.n	8006860 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800682e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006830:	2300      	movs	r3, #0
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	f043 0202 	orr.w	r2, r3, #2
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff ff50 	bl	8006700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b03      	cmp	r3, #3
 800686a:	d136      	bne.n	80068da <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d109      	bne.n	800688a <I2S_IRQHandler+0xbc>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006880:	2b80      	cmp	r3, #128	; 0x80
 8006882:	d102      	bne.n	800688a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff45 	bl	8006714 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d122      	bne.n	80068da <I2S_IRQHandler+0x10c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d11b      	bne.n	80068da <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068b0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	f043 0204 	orr.w	r2, r3, #4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ff13 	bl	8006700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068da:	bf00      	nop
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4aa2      	ldr	r2, [pc, #648]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80068fe:	4ba2      	ldr	r3, [pc, #648]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006900:	e001      	b.n	8006906 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a9b      	ldr	r2, [pc, #620]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d101      	bne.n	8006920 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800691c:	4b9a      	ldr	r3, [pc, #616]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800691e:	e001      	b.n	8006924 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006930:	d004      	beq.n	800693c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 8099 	bne.w	8006a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b02      	cmp	r3, #2
 8006944:	d107      	bne.n	8006956 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f925 	bl	8006ba0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9c8 	bl	8006d00 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d13a      	bne.n	80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d035      	beq.n	80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7e      	ldr	r2, [pc, #504]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d101      	bne.n	8006992 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800698e:	4b7e      	ldr	r3, [pc, #504]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006990:	e001      	b.n	8006996 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4979      	ldr	r1, [pc, #484]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800699e:	428b      	cmp	r3, r1
 80069a0:	d101      	bne.n	80069a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80069a2:	4b79      	ldr	r3, [pc, #484]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069a4:	e001      	b.n	80069aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80069a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	f043 0202 	orr.w	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fe88 	bl	8006700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	f040 80be 	bne.w	8006b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80b8 	beq.w	8006b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a59      	ldr	r2, [pc, #356]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006a22:	4b59      	ldr	r3, [pc, #356]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a24:	e001      	b.n	8006a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4954      	ldr	r1, [pc, #336]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a32:	428b      	cmp	r3, r1
 8006a34:	d101      	bne.n	8006a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006a36:	4b54      	ldr	r3, [pc, #336]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a38:	e001      	b.n	8006a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a44:	2300      	movs	r3, #0
 8006a46:	60bb      	str	r3, [r7, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f043 0204 	orr.w	r2, r3, #4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fe4a 	bl	8006700 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a6c:	e084      	b.n	8006b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d107      	bne.n	8006a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f8be 	bl	8006c04 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f8fd 	bl	8006c9c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d12f      	bne.n	8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02a      	beq.n	8006b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ac4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2e      	ldr	r2, [pc, #184]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006ad0:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ad2:	e001      	b.n	8006ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4929      	ldr	r1, [pc, #164]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006ae4:	4b28      	ldr	r3, [pc, #160]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ae6:	e001      	b.n	8006aec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006af0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f043 0202 	orr.w	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff fdfa 	bl	8006700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d131      	bne.n	8006b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d02c      	beq.n	8006b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d101      	bne.n	8006b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006b2a:	4b17      	ldr	r3, [pc, #92]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b2c:	e001      	b.n	8006b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4912      	ldr	r1, [pc, #72]	; (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b3a:	428b      	cmp	r3, r1
 8006b3c:	d101      	bne.n	8006b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006b3e:	4b12      	ldr	r3, [pc, #72]	; (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b40:	e001      	b.n	8006b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b5a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b68:	f043 0204 	orr.w	r2, r3, #4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fdc5 	bl	8006700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b76:	e000      	b.n	8006b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b78:	bf00      	nop
}
 8006b7a:	bf00      	nop
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40003800 	.word	0x40003800
 8006b88:	40003400 	.word	0x40003400

08006b8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	1c99      	adds	r1, r3, #2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6251      	str	r1, [r2, #36]	; 0x24
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d113      	bne.n	8006bfa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ffc9 	bl	8006b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	1c99      	adds	r1, r3, #2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6251      	str	r1, [r2, #36]	; 0x24
 8006c16:	8819      	ldrh	r1, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <I2SEx_TxISR_I2SExt+0x90>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <I2SEx_TxISR_I2SExt+0x22>
 8006c22:	4b1d      	ldr	r3, [pc, #116]	; (8006c98 <I2SEx_TxISR_I2SExt+0x94>)
 8006c24:	e001      	b.n	8006c2a <I2SEx_TxISR_I2SExt+0x26>
 8006c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c2a:	460a      	mov	r2, r1
 8006c2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	3b01      	subs	r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d121      	bne.n	8006c8a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <I2SEx_TxISR_I2SExt+0x90>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <I2SEx_TxISR_I2SExt+0x50>
 8006c50:	4b11      	ldr	r3, [pc, #68]	; (8006c98 <I2SEx_TxISR_I2SExt+0x94>)
 8006c52:	e001      	b.n	8006c58 <I2SEx_TxISR_I2SExt+0x54>
 8006c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	490d      	ldr	r1, [pc, #52]	; (8006c94 <I2SEx_TxISR_I2SExt+0x90>)
 8006c60:	428b      	cmp	r3, r1
 8006c62:	d101      	bne.n	8006c68 <I2SEx_TxISR_I2SExt+0x64>
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <I2SEx_TxISR_I2SExt+0x94>)
 8006c66:	e001      	b.n	8006c6c <I2SEx_TxISR_I2SExt+0x68>
 8006c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff81 	bl	8006b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40003800 	.word	0x40003800
 8006c98:	40003400 	.word	0x40003400

08006c9c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68d8      	ldr	r0, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	1c99      	adds	r1, r3, #2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cb4:	b282      	uxth	r2, r0
 8006cb6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d113      	bne.n	8006cf8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cde:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff ff4a 	bl	8006b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <I2SEx_RxISR_I2SExt+0x90>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <I2SEx_RxISR_I2SExt+0x16>
 8006d12:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <I2SEx_RxISR_I2SExt+0x94>)
 8006d14:	e001      	b.n	8006d1a <I2SEx_RxISR_I2SExt+0x1a>
 8006d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d1a:	68d8      	ldr	r0, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	1c99      	adds	r1, r3, #2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006d26:	b282      	uxth	r2, r0
 8006d28:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d121      	bne.n	8006d86 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <I2SEx_RxISR_I2SExt+0x90>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d101      	bne.n	8006d50 <I2SEx_RxISR_I2SExt+0x50>
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <I2SEx_RxISR_I2SExt+0x94>)
 8006d4e:	e001      	b.n	8006d54 <I2SEx_RxISR_I2SExt+0x54>
 8006d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	490d      	ldr	r1, [pc, #52]	; (8006d90 <I2SEx_RxISR_I2SExt+0x90>)
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	d101      	bne.n	8006d64 <I2SEx_RxISR_I2SExt+0x64>
 8006d60:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <I2SEx_RxISR_I2SExt+0x94>)
 8006d62:	e001      	b.n	8006d68 <I2SEx_RxISR_I2SExt+0x68>
 8006d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d6c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ff03 	bl	8006b8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40003800 	.word	0x40003800
 8006d94:	40003400 	.word	0x40003400

08006d98 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006da0:	f7fc fdda 	bl	8003958 <HAL_GetTick>
 8006da4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e069      	b.n	8006e84 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fc fa2d 	bl	8003224 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006dca:	f241 3188 	movw	r1, #5000	; 0x1388
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f85e 	bl	8006e90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	021a      	lsls	r2, r3, #8
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2120      	movs	r1, #32
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f856 	bl	8006eac <QSPI_WaitFlagStateUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d137      	bne.n	8006e7a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6852      	ldr	r2, [r2, #4]
 8006e1c:	0611      	lsls	r1, r2, #24
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68d2      	ldr	r2, [r2, #12]
 8006e22:	4311      	orrs	r1, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	69d2      	ldr	r2, [r2, #28]
 8006e28:	4311      	orrs	r1, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6a12      	ldr	r2, [r2, #32]
 8006e2e:	4311      	orrs	r1, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <HAL_QSPI_Init+0xf4>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6912      	ldr	r2, [r2, #16]
 8006e46:	0411      	lsls	r1, r2, #16
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6952      	ldr	r2, [r2, #20]
 8006e4c:	4311      	orrs	r1, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6992      	ldr	r2, [r2, #24]
 8006e52:	4311      	orrs	r1, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6812      	ldr	r2, [r2, #0]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e82:	7afb      	ldrb	r3, [r7, #11]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	ffe0f8fe 	.word	0xffe0f8fe

08006e90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ebc:	e01a      	b.n	8006ef4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d016      	beq.n	8006ef4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec6:	f7fc fd47 	bl	8003958 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	f043 0201 	orr.w	r2, r3, #1
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e00e      	b.n	8006f12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bf14      	ite	ne
 8006f02:	2301      	movne	r3, #1
 8006f04:	2300      	moveq	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d1d6      	bne.n	8006ebe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0cc      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f30:	4b68      	ldr	r3, [pc, #416]	; (80070d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d90c      	bls.n	8006f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	4b65      	ldr	r3, [pc, #404]	; (80070d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b63      	ldr	r3, [pc, #396]	; (80070d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d001      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0b8      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d020      	beq.n	8006fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f70:	4b59      	ldr	r3, [pc, #356]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	4a58      	ldr	r2, [pc, #352]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f88:	4b53      	ldr	r3, [pc, #332]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4a52      	ldr	r2, [pc, #328]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f94:	4b50      	ldr	r3, [pc, #320]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	494d      	ldr	r1, [pc, #308]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d044      	beq.n	800703c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d107      	bne.n	8006fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fba:	4b47      	ldr	r3, [pc, #284]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d119      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e07f      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d003      	beq.n	8006fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d107      	bne.n	8006fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fda:	4b3f      	ldr	r3, [pc, #252]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e06f      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fea:	4b3b      	ldr	r3, [pc, #236]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e067      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ffa:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 0203 	bic.w	r2, r3, #3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4934      	ldr	r1, [pc, #208]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	4313      	orrs	r3, r2
 800700a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800700c:	f7fc fca4 	bl	8003958 <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007012:	e00a      	b.n	800702a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007014:	f7fc fca0 	bl	8003958 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e04f      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702a:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 020c 	and.w	r2, r3, #12
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	429a      	cmp	r2, r3
 800703a:	d1eb      	bne.n	8007014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800703c:	4b25      	ldr	r3, [pc, #148]	; (80070d4 <HAL_RCC_ClockConfig+0x1b8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d20c      	bcs.n	8007064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704a:	4b22      	ldr	r3, [pc, #136]	; (80070d4 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007052:	4b20      	ldr	r3, [pc, #128]	; (80070d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	d001      	beq.n	8007064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e032      	b.n	80070ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007070:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4916      	ldr	r1, [pc, #88]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	4313      	orrs	r3, r2
 8007080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800708e:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	490e      	ldr	r1, [pc, #56]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070a2:	f000 f821 	bl	80070e8 <HAL_RCC_GetSysClockFreq>
 80070a6:	4602      	mov	r2, r0
 80070a8:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	091b      	lsrs	r3, r3, #4
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	490a      	ldr	r1, [pc, #40]	; (80070dc <HAL_RCC_ClockConfig+0x1c0>)
 80070b4:	5ccb      	ldrb	r3, [r1, r3]
 80070b6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ba:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <HAL_RCC_ClockConfig+0x1c4>)
 80070bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070be:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_ClockConfig+0x1c8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fc fae0 	bl	8003688 <HAL_InitTick>

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40023c00 	.word	0x40023c00
 80070d8:	40023800 	.word	0x40023800
 80070dc:	080123c8 	.word	0x080123c8
 80070e0:	20000000 	.word	0x20000000
 80070e4:	20000004 	.word	0x20000004

080070e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e8:	b5b0      	push	{r4, r5, r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070ee:	2100      	movs	r1, #0
 80070f0:	6079      	str	r1, [r7, #4]
 80070f2:	2100      	movs	r1, #0
 80070f4:	60f9      	str	r1, [r7, #12]
 80070f6:	2100      	movs	r1, #0
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80070fa:	2100      	movs	r1, #0
 80070fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070fe:	4952      	ldr	r1, [pc, #328]	; (8007248 <HAL_RCC_GetSysClockFreq+0x160>)
 8007100:	6889      	ldr	r1, [r1, #8]
 8007102:	f001 010c 	and.w	r1, r1, #12
 8007106:	2908      	cmp	r1, #8
 8007108:	d00d      	beq.n	8007126 <HAL_RCC_GetSysClockFreq+0x3e>
 800710a:	2908      	cmp	r1, #8
 800710c:	f200 8094 	bhi.w	8007238 <HAL_RCC_GetSysClockFreq+0x150>
 8007110:	2900      	cmp	r1, #0
 8007112:	d002      	beq.n	800711a <HAL_RCC_GetSysClockFreq+0x32>
 8007114:	2904      	cmp	r1, #4
 8007116:	d003      	beq.n	8007120 <HAL_RCC_GetSysClockFreq+0x38>
 8007118:	e08e      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800711a:	4b4c      	ldr	r3, [pc, #304]	; (800724c <HAL_RCC_GetSysClockFreq+0x164>)
 800711c:	60bb      	str	r3, [r7, #8]
       break;
 800711e:	e08e      	b.n	800723e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007120:	4b4b      	ldr	r3, [pc, #300]	; (8007250 <HAL_RCC_GetSysClockFreq+0x168>)
 8007122:	60bb      	str	r3, [r7, #8]
      break;
 8007124:	e08b      	b.n	800723e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007126:	4948      	ldr	r1, [pc, #288]	; (8007248 <HAL_RCC_GetSysClockFreq+0x160>)
 8007128:	6849      	ldr	r1, [r1, #4]
 800712a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800712e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007130:	4945      	ldr	r1, [pc, #276]	; (8007248 <HAL_RCC_GetSysClockFreq+0x160>)
 8007132:	6849      	ldr	r1, [r1, #4]
 8007134:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007138:	2900      	cmp	r1, #0
 800713a:	d024      	beq.n	8007186 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800713c:	4942      	ldr	r1, [pc, #264]	; (8007248 <HAL_RCC_GetSysClockFreq+0x160>)
 800713e:	6849      	ldr	r1, [r1, #4]
 8007140:	0989      	lsrs	r1, r1, #6
 8007142:	4608      	mov	r0, r1
 8007144:	f04f 0100 	mov.w	r1, #0
 8007148:	f240 14ff 	movw	r4, #511	; 0x1ff
 800714c:	f04f 0500 	mov.w	r5, #0
 8007150:	ea00 0204 	and.w	r2, r0, r4
 8007154:	ea01 0305 	and.w	r3, r1, r5
 8007158:	493d      	ldr	r1, [pc, #244]	; (8007250 <HAL_RCC_GetSysClockFreq+0x168>)
 800715a:	fb01 f003 	mul.w	r0, r1, r3
 800715e:	2100      	movs	r1, #0
 8007160:	fb01 f102 	mul.w	r1, r1, r2
 8007164:	1844      	adds	r4, r0, r1
 8007166:	493a      	ldr	r1, [pc, #232]	; (8007250 <HAL_RCC_GetSysClockFreq+0x168>)
 8007168:	fba2 0101 	umull	r0, r1, r2, r1
 800716c:	1863      	adds	r3, r4, r1
 800716e:	4619      	mov	r1, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	461a      	mov	r2, r3
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	f7f9 fd36 	bl	8000be8 <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4613      	mov	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e04a      	b.n	800721c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007186:	4b30      	ldr	r3, [pc, #192]	; (8007248 <HAL_RCC_GetSysClockFreq+0x160>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	099b      	lsrs	r3, r3, #6
 800718c:	461a      	mov	r2, r3
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	ea02 0400 	and.w	r4, r2, r0
 800719e:	ea03 0501 	and.w	r5, r3, r1
 80071a2:	4620      	mov	r0, r4
 80071a4:	4629      	mov	r1, r5
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	014b      	lsls	r3, r1, #5
 80071b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071b4:	0142      	lsls	r2, r0, #5
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	1b00      	subs	r0, r0, r4
 80071bc:	eb61 0105 	sbc.w	r1, r1, r5
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	018b      	lsls	r3, r1, #6
 80071ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071ce:	0182      	lsls	r2, r0, #6
 80071d0:	1a12      	subs	r2, r2, r0
 80071d2:	eb63 0301 	sbc.w	r3, r3, r1
 80071d6:	f04f 0000 	mov.w	r0, #0
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	00d9      	lsls	r1, r3, #3
 80071e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071e4:	00d0      	lsls	r0, r2, #3
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	1912      	adds	r2, r2, r4
 80071ec:	eb45 0303 	adc.w	r3, r5, r3
 80071f0:	f04f 0000 	mov.w	r0, #0
 80071f4:	f04f 0100 	mov.w	r1, #0
 80071f8:	0299      	lsls	r1, r3, #10
 80071fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071fe:	0290      	lsls	r0, r2, #10
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4610      	mov	r0, r2
 8007206:	4619      	mov	r1, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	461a      	mov	r2, r3
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f7f9 fcea 	bl	8000be8 <__aeabi_uldivmod>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4613      	mov	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <HAL_RCC_GetSysClockFreq+0x160>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	3301      	adds	r3, #1
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	60bb      	str	r3, [r7, #8]
      break;
 8007236:	e002      	b.n	800723e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <HAL_RCC_GetSysClockFreq+0x164>)
 800723a:	60bb      	str	r3, [r7, #8]
      break;
 800723c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800723e:	68bb      	ldr	r3, [r7, #8]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bdb0      	pop	{r4, r5, r7, pc}
 8007248:	40023800 	.word	0x40023800
 800724c:	00f42400 	.word	0x00f42400
 8007250:	017d7840 	.word	0x017d7840

08007254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <HAL_RCC_GetHCLKFreq+0x14>)
 800725a:	681b      	ldr	r3, [r3, #0]
}
 800725c:	4618      	mov	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000000 	.word	0x20000000

0800726c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007270:	f7ff fff0 	bl	8007254 <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	0a9b      	lsrs	r3, r3, #10
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4903      	ldr	r1, [pc, #12]	; (8007290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40023800 	.word	0x40023800
 8007290:	080123d8 	.word	0x080123d8

08007294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007298:	f7ff ffdc 	bl	8007254 <HAL_RCC_GetHCLKFreq>
 800729c:	4602      	mov	r2, r0
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	0b5b      	lsrs	r3, r3, #13
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	4903      	ldr	r1, [pc, #12]	; (80072b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072aa:	5ccb      	ldrb	r3, [r1, r3]
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40023800 	.word	0x40023800
 80072b8:	080123d8 	.word	0x080123d8

080072bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	220f      	movs	r2, #15
 80072ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_RCC_GetClockConfig+0x5c>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0203 	and.w	r2, r3, #3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <HAL_RCC_GetClockConfig+0x5c>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_RCC_GetClockConfig+0x5c>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <HAL_RCC_GetClockConfig+0x5c>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	08db      	lsrs	r3, r3, #3
 80072f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <HAL_RCC_GetClockConfig+0x60>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 020f 	and.w	r2, r3, #15
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	601a      	str	r2, [r3, #0]
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	40023c00 	.word	0x40023c00

08007320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d010      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007344:	4b7a      	ldr	r3, [pc, #488]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	4977      	ldr	r1, [pc, #476]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007362:	2301      	movs	r3, #1
 8007364:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d010      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007372:	4b6f      	ldr	r3, [pc, #444]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007378:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	496b      	ldr	r1, [pc, #428]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007390:	2301      	movs	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d022      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80073a0:	4b63      	ldr	r3, [pc, #396]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ae:	4960      	ldr	r1, [pc, #384]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80073be:	2301      	movs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ca:	d10c      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80073cc:	4b58      	ldr	r3, [pc, #352]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	3b01      	subs	r3, #1
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	4954      	ldr	r1, [pc, #336]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d022      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80073f2:	4b4f      	ldr	r3, [pc, #316]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80073f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007400:	494b      	ldr	r1, [pc, #300]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007410:	2301      	movs	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800741c:	d10c      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800741e:	4b44      	ldr	r3, [pc, #272]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007424:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	3b01      	subs	r3, #1
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	493f      	ldr	r1, [pc, #252]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 808a 	beq.w	800755a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	4b39      	ldr	r3, [pc, #228]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	4a38      	ldr	r2, [pc, #224]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007454:	6413      	str	r3, [r2, #64]	; 0x40
 8007456:	4b36      	ldr	r3, [pc, #216]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007462:	4b34      	ldr	r3, [pc, #208]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a33      	ldr	r2, [pc, #204]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800746e:	f7fc fa73 	bl	8003958 <HAL_GetTick>
 8007472:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007474:	e008      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007476:	f7fc fa6f 	bl	8003958 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e1d1      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007488:	4b2a      	ldr	r3, [pc, #168]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007494:	4b26      	ldr	r3, [pc, #152]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02f      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d028      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074b2:	4b1f      	ldr	r3, [pc, #124]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ba:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074bc:	4b1e      	ldr	r3, [pc, #120]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074c2:	4b1d      	ldr	r3, [pc, #116]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074ce:	4b18      	ldr	r3, [pc, #96]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d114      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074da:	f7fc fa3d 	bl	8003958 <HAL_GetTick>
 80074de:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e0:	e00a      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e2:	f7fc fa39 	bl	8003958 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e199      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f8:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0ee      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007510:	d114      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007526:	4902      	ldr	r1, [pc, #8]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007528:	4313      	orrs	r3, r2
 800752a:	608b      	str	r3, [r1, #8]
 800752c:	e00c      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800752e:	bf00      	nop
 8007530:	40023800 	.word	0x40023800
 8007534:	40007000 	.word	0x40007000
 8007538:	42470e40 	.word	0x42470e40
 800753c:	4b89      	ldr	r3, [pc, #548]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4a88      	ldr	r2, [pc, #544]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007542:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007546:	6093      	str	r3, [r2, #8]
 8007548:	4b86      	ldr	r3, [pc, #536]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800754a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007554:	4983      	ldr	r1, [pc, #524]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007556:	4313      	orrs	r3, r2
 8007558:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800756c:	4b7e      	ldr	r3, [pc, #504]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800756e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800757c:	4b79      	ldr	r3, [pc, #484]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800757e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	4976      	ldr	r1, [pc, #472]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d011      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800759e:	4b71      	ldr	r3, [pc, #452]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	496d      	ldr	r1, [pc, #436]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075bc:	d101      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80075be:	2301      	movs	r3, #1
 80075c0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80075ce:	4b65      	ldr	r3, [pc, #404]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	4961      	ldr	r1, [pc, #388]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d004      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b80      	cmp	r3, #128	; 0x80
 80075f0:	f040 80c6 	bne.w	8007780 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075f4:	4b5d      	ldr	r3, [pc, #372]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075fa:	f7fc f9ad 	bl	8003958 <HAL_GetTick>
 80075fe:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007600:	e008      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007602:	f7fc f9a9 	bl	8003958 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d901      	bls.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e10b      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007614:	4b53      	ldr	r3, [pc, #332]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f0      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007620:	4a53      	ldr	r2, [pc, #332]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007626:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d023      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d019      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007664:	d00e      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800766e:	2b00      	cmp	r3, #0
 8007670:	d019      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d115      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007682:	d110      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	019b      	lsls	r3, r3, #6
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	061b      	lsls	r3, r3, #24
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	071b      	lsls	r3, r3, #28
 800769e:	4931      	ldr	r1, [pc, #196]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d026      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d122      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076ce:	4b25      	ldr	r3, [pc, #148]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d4:	0e1b      	lsrs	r3, r3, #24
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	019b      	lsls	r3, r3, #6
 80076e6:	431a      	orrs	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	061b      	lsls	r3, r3, #24
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	071b      	lsls	r3, r3, #28
 80076f4:	491b      	ldr	r1, [pc, #108]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80076fc:	4b19      	ldr	r3, [pc, #100]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80076fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007702:	f023 021f 	bic.w	r2, r3, #31
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	3b01      	subs	r3, #1
 800770c:	4915      	ldr	r1, [pc, #84]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	019b      	lsls	r3, r3, #6
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	061b      	lsls	r3, r3, #24
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	071b      	lsls	r3, r3, #28
 800773a:	490a      	ldr	r1, [pc, #40]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007742:	4b0a      	ldr	r3, [pc, #40]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007744:	2201      	movs	r2, #1
 8007746:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007748:	f7fc f906 	bl	8003958 <HAL_GetTick>
 800774c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800774e:	e011      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007750:	f7fc f902 	bl	8003958 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d90a      	bls.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e064      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007762:	bf00      	nop
 8007764:	40023800 	.word	0x40023800
 8007768:	424711e0 	.word	0x424711e0
 800776c:	42470068 	.word	0x42470068
 8007770:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007774:	4b2f      	ldr	r3, [pc, #188]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0e7      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800778c:	4b29      	ldr	r3, [pc, #164]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800778e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	4926      	ldr	r1, [pc, #152]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800779c:	4313      	orrs	r3, r2
 800779e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80077b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077b4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	491d      	ldr	r1, [pc, #116]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80077d0:	4b18      	ldr	r3, [pc, #96]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80077d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	4915      	ldr	r1, [pc, #84]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80077f2:	4b10      	ldr	r3, [pc, #64]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80077f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	490c      	ldr	r1, [pc, #48]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007814:	4b07      	ldr	r3, [pc, #28]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800781a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	4904      	ldr	r1, [pc, #16]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007824:	4313      	orrs	r3, r2
 8007826:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40023800 	.word	0x40023800

08007838 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d004      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b02      	cmp	r3, #2
 800785a:	f000 80a1 	beq.w	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800785e:	e13f      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007860:	4ba3      	ldr	r3, [pc, #652]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007866:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007872:	f000 8084 	beq.w	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800787c:	f200 808c 	bhi.w	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007886:	d04f      	beq.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800788e:	f200 8083 	bhi.w	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d006      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800789e:	d17b      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80078a0:	4b94      	ldr	r3, [pc, #592]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078a2:	617b      	str	r3, [r7, #20]
          break;
 80078a4:	e07b      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80078a6:	4b92      	ldr	r3, [pc, #584]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078b4:	d109      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078b6:	4b8e      	ldr	r3, [pc, #568]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c0:	4a8c      	ldr	r2, [pc, #560]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c6:	613b      	str	r3, [r7, #16]
 80078c8:	e019      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80078ca:	4b89      	ldr	r3, [pc, #548]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d6:	d109      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078d8:	4b85      	ldr	r3, [pc, #532]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078e2:	4a85      	ldr	r2, [pc, #532]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	e008      	b.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80078ec:	4b80      	ldr	r3, [pc, #512]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80078ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f6:	4a81      	ldr	r2, [pc, #516]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80078fe:	4b7c      	ldr	r3, [pc, #496]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007904:	099b      	lsrs	r3, r3, #6
 8007906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007912:	4b77      	ldr	r3, [pc, #476]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007918:	0f1b      	lsrs	r3, r3, #28
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	617b      	str	r3, [r7, #20]
          break;
 8007926:	e03a      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007928:	4b71      	ldr	r3, [pc, #452]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007934:	d108      	bne.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007936:	4b6e      	ldr	r3, [pc, #440]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800793e:	4a6e      	ldr	r2, [pc, #440]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007940:	fbb2 f3f3 	udiv	r3, r2, r3
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	e007      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007948:	4b69      	ldr	r3, [pc, #420]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007950:	4a6a      	ldr	r2, [pc, #424]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007952:	fbb2 f3f3 	udiv	r3, r2, r3
 8007956:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007958:	4b65      	ldr	r3, [pc, #404]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	099b      	lsrs	r3, r3, #6
 800795e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	fb02 f303 	mul.w	r3, r2, r3
 8007968:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800796a:	4b61      	ldr	r3, [pc, #388]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	0f1b      	lsrs	r3, r3, #28
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	fbb2 f3f3 	udiv	r3, r2, r3
 800797a:	617b      	str	r3, [r7, #20]
          break;
 800797c:	e00f      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800797e:	4b5c      	ldr	r3, [pc, #368]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800798a:	d102      	bne.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800798c:	4b5a      	ldr	r3, [pc, #360]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800798e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007990:	e005      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8007992:	4b5a      	ldr	r3, [pc, #360]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007994:	617b      	str	r3, [r7, #20]
          break;
 8007996:	e002      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
          break;
 800799c:	bf00      	nop
        }
      }
      break;
 800799e:	e09f      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80079a0:	4b53      	ldr	r3, [pc, #332]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80079b2:	f000 8084 	beq.w	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80079bc:	f200 808c 	bhi.w	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c6:	d04f      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ce:	f200 8083 	bhi.w	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d006      	beq.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079de:	d17b      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80079e0:	4b44      	ldr	r3, [pc, #272]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80079e2:	617b      	str	r3, [r7, #20]
          break;
 80079e4:	e07b      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80079e6:	4b42      	ldr	r3, [pc, #264]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079f4:	d109      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80079f6:	4b3e      	ldr	r3, [pc, #248]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80079f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a00:	4a3c      	ldr	r2, [pc, #240]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	e019      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a0a:	4b39      	ldr	r3, [pc, #228]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a16:	d109      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a18:	4b35      	ldr	r3, [pc, #212]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a22:	4a35      	ldr	r2, [pc, #212]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	e008      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a2c:	4b30      	ldr	r3, [pc, #192]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a36:	4a31      	ldr	r2, [pc, #196]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007a3e:	4b2c      	ldr	r3, [pc, #176]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a44:	099b      	lsrs	r3, r3, #6
 8007a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	fb02 f303 	mul.w	r3, r2, r3
 8007a50:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007a52:	4b27      	ldr	r3, [pc, #156]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a58:	0f1b      	lsrs	r3, r3, #28
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	617b      	str	r3, [r7, #20]
          break;
 8007a66:	e03a      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a68:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a74:	d108      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a76:	4b1e      	ldr	r3, [pc, #120]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a7e:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	e007      	b.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a88:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a90:	4a1a      	ldr	r2, [pc, #104]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007a98:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	fb02 f303 	mul.w	r3, r2, r3
 8007aa8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007aaa:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	0f1b      	lsrs	r3, r3, #28
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aba:	617b      	str	r3, [r7, #20]
          break;
 8007abc:	e00f      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aca:	d102      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ace:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007ad0:	e005      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ad4:	617b      	str	r3, [r7, #20]
          break;
 8007ad6:	e002      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
          break;
 8007adc:	bf00      	nop
        }
      }
      break;
 8007ade:	bf00      	nop
    }
  }
  return frequency;
 8007ae0:	697b      	ldr	r3, [r7, #20]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40023800 	.word	0x40023800
 8007af4:	00bb8000 	.word	0x00bb8000
 8007af8:	017d7840 	.word	0x017d7840
 8007afc:	00f42400 	.word	0x00f42400

08007b00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d075      	beq.n	8007c04 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b18:	4ba2      	ldr	r3, [pc, #648]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 030c 	and.w	r3, r3, #12
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d00c      	beq.n	8007b3e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b24:	4b9f      	ldr	r3, [pc, #636]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d112      	bne.n	8007b56 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b30:	4b9c      	ldr	r3, [pc, #624]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b3c:	d10b      	bne.n	8007b56 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b3e:	4b99      	ldr	r3, [pc, #612]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d05b      	beq.n	8007c02 <HAL_RCC_OscConfig+0x102>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d157      	bne.n	8007c02 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e20b      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5e:	d106      	bne.n	8007b6e <HAL_RCC_OscConfig+0x6e>
 8007b60:	4b90      	ldr	r3, [pc, #576]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a8f      	ldr	r2, [pc, #572]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	e01d      	b.n	8007baa <HAL_RCC_OscConfig+0xaa>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b76:	d10c      	bne.n	8007b92 <HAL_RCC_OscConfig+0x92>
 8007b78:	4b8a      	ldr	r3, [pc, #552]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a89      	ldr	r2, [pc, #548]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	4b87      	ldr	r3, [pc, #540]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a86      	ldr	r2, [pc, #536]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e00b      	b.n	8007baa <HAL_RCC_OscConfig+0xaa>
 8007b92:	4b84      	ldr	r3, [pc, #528]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a83      	ldr	r2, [pc, #524]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	4b81      	ldr	r3, [pc, #516]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a80      	ldr	r2, [pc, #512]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d013      	beq.n	8007bda <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb2:	f7fb fed1 	bl	8003958 <HAL_GetTick>
 8007bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bba:	f7fb fecd 	bl	8003958 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b64      	cmp	r3, #100	; 0x64
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e1d0      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bcc:	4b75      	ldr	r3, [pc, #468]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0f0      	beq.n	8007bba <HAL_RCC_OscConfig+0xba>
 8007bd8:	e014      	b.n	8007c04 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bda:	f7fb febd 	bl	8003958 <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007be0:	e008      	b.n	8007bf4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007be2:	f7fb feb9 	bl	8003958 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b64      	cmp	r3, #100	; 0x64
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e1bc      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bf4:	4b6b      	ldr	r3, [pc, #428]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f0      	bne.n	8007be2 <HAL_RCC_OscConfig+0xe2>
 8007c00:	e000      	b.n	8007c04 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d063      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c10:	4b64      	ldr	r3, [pc, #400]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 030c 	and.w	r3, r3, #12
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c1c:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d11c      	bne.n	8007c62 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c28:	4b5e      	ldr	r3, [pc, #376]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d116      	bne.n	8007c62 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c34:	4b5b      	ldr	r3, [pc, #364]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <HAL_RCC_OscConfig+0x14c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d001      	beq.n	8007c4c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e190      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c4c:	4b55      	ldr	r3, [pc, #340]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	4952      	ldr	r1, [pc, #328]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c60:	e03a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d020      	beq.n	8007cac <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c6a:	4b4f      	ldr	r3, [pc, #316]	; (8007da8 <HAL_RCC_OscConfig+0x2a8>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fb fe72 	bl	8003958 <HAL_GetTick>
 8007c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c78:	f7fb fe6e 	bl	8003958 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e171      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c8a:	4b46      	ldr	r3, [pc, #280]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c96:	4b43      	ldr	r3, [pc, #268]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	493f      	ldr	r1, [pc, #252]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	600b      	str	r3, [r1, #0]
 8007caa:	e015      	b.n	8007cd8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cac:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <HAL_RCC_OscConfig+0x2a8>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb2:	f7fb fe51 	bl	8003958 <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cba:	f7fb fe4d 	bl	8003958 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e150      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ccc:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f0      	bne.n	8007cba <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d030      	beq.n	8007d46 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d016      	beq.n	8007d1a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cec:	4b2f      	ldr	r3, [pc, #188]	; (8007dac <HAL_RCC_OscConfig+0x2ac>)
 8007cee:	2201      	movs	r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf2:	f7fb fe31 	bl	8003958 <HAL_GetTick>
 8007cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cf8:	e008      	b.n	8007d0c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cfa:	f7fb fe2d 	bl	8003958 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e130      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d0c:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0f0      	beq.n	8007cfa <HAL_RCC_OscConfig+0x1fa>
 8007d18:	e015      	b.n	8007d46 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <HAL_RCC_OscConfig+0x2ac>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d20:	f7fb fe1a 	bl	8003958 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d28:	f7fb fe16 	bl	8003958 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e119      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d3a:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 809f 	beq.w	8007e92 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d54:	2300      	movs	r3, #0
 8007d56:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d58:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10f      	bne.n	8007d84 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d72:	6413      	str	r3, [r2, #64]	; 0x40
 8007d74:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <HAL_RCC_OscConfig+0x2a4>)
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007d80:	2301      	movs	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <HAL_RCC_OscConfig+0x2b0>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d120      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <HAL_RCC_OscConfig+0x2b0>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <HAL_RCC_OscConfig+0x2b0>)
 8007d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d9c:	f7fb fddc 	bl	8003958 <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da2:	e010      	b.n	8007dc6 <HAL_RCC_OscConfig+0x2c6>
 8007da4:	40023800 	.word	0x40023800
 8007da8:	42470000 	.word	0x42470000
 8007dac:	42470e80 	.word	0x42470e80
 8007db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007db4:	f7fb fdd0 	bl	8003958 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e0d3      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc6:	4b6c      	ldr	r3, [pc, #432]	; (8007f78 <HAL_RCC_OscConfig+0x478>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0f0      	beq.n	8007db4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCC_OscConfig+0x2e8>
 8007dda:	4b68      	ldr	r3, [pc, #416]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	4a67      	ldr	r2, [pc, #412]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	6713      	str	r3, [r2, #112]	; 0x70
 8007de6:	e01c      	b.n	8007e22 <HAL_RCC_OscConfig+0x322>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d10c      	bne.n	8007e0a <HAL_RCC_OscConfig+0x30a>
 8007df0:	4b62      	ldr	r3, [pc, #392]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	4a61      	ldr	r2, [pc, #388]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007df6:	f043 0304 	orr.w	r3, r3, #4
 8007dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007dfc:	4b5f      	ldr	r3, [pc, #380]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	4a5e      	ldr	r2, [pc, #376]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6713      	str	r3, [r2, #112]	; 0x70
 8007e08:	e00b      	b.n	8007e22 <HAL_RCC_OscConfig+0x322>
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0e:	4a5b      	ldr	r2, [pc, #364]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	6713      	str	r3, [r2, #112]	; 0x70
 8007e16:	4b59      	ldr	r3, [pc, #356]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	4a58      	ldr	r2, [pc, #352]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e1c:	f023 0304 	bic.w	r3, r3, #4
 8007e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d015      	beq.n	8007e56 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2a:	f7fb fd95 	bl	8003958 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e30:	e00a      	b.n	8007e48 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e32:	f7fb fd91 	bl	8003958 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e092      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e48:	4b4c      	ldr	r3, [pc, #304]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0ee      	beq.n	8007e32 <HAL_RCC_OscConfig+0x332>
 8007e54:	e014      	b.n	8007e80 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e56:	f7fb fd7f 	bl	8003958 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e5e:	f7fb fd7b 	bl	8003958 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e07c      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e74:	4b41      	ldr	r3, [pc, #260]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ee      	bne.n	8007e5e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d105      	bne.n	8007e92 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e86:	4b3d      	ldr	r3, [pc, #244]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	4a3c      	ldr	r2, [pc, #240]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d068      	beq.n	8007f6c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e9a:	4b38      	ldr	r3, [pc, #224]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 030c 	and.w	r3, r3, #12
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d060      	beq.n	8007f68 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d145      	bne.n	8007f3a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eae:	4b34      	ldr	r3, [pc, #208]	; (8007f80 <HAL_RCC_OscConfig+0x480>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb4:	f7fb fd50 	bl	8003958 <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ebc:	f7fb fd4c 	bl	8003958 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e04f      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ece:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f0      	bne.n	8007ebc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69da      	ldr	r2, [r3, #28]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	019b      	lsls	r3, r3, #6
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	085b      	lsrs	r3, r3, #1
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	061b      	lsls	r3, r3, #24
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	071b      	lsls	r3, r3, #28
 8007f06:	491d      	ldr	r1, [pc, #116]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <HAL_RCC_OscConfig+0x480>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f12:	f7fb fd21 	bl	8003958 <HAL_GetTick>
 8007f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f1a:	f7fb fd1d 	bl	8003958 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e020      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f2c:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0f0      	beq.n	8007f1a <HAL_RCC_OscConfig+0x41a>
 8007f38:	e018      	b.n	8007f6c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f3a:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <HAL_RCC_OscConfig+0x480>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f40:	f7fb fd0a 	bl	8003958 <HAL_GetTick>
 8007f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f46:	e008      	b.n	8007f5a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f48:	f7fb fd06 	bl	8003958 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e009      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <HAL_RCC_OscConfig+0x47c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f0      	bne.n	8007f48 <HAL_RCC_OscConfig+0x448>
 8007f66:	e001      	b.n	8007f6c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40007000 	.word	0x40007000
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	42470060 	.word	0x42470060

08007f84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e022      	b.n	8007fdc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fb fa05 	bl	80033b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f814 	bl	8007fe4 <HAL_SD_InitCard>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e00a      	b.n	8007fdc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fe4:	b5b0      	push	{r4, r5, r7, lr}
 8007fe6:	b08e      	sub	sp, #56	; 0x38
 8007fe8:	af04      	add	r7, sp, #16
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008000:	2376      	movs	r3, #118	; 0x76
 8008002:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681d      	ldr	r5, [r3, #0]
 8008008:	466c      	mov	r4, sp
 800800a:	f107 0314 	add.w	r3, r7, #20
 800800e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008016:	f107 0308 	add.w	r3, r7, #8
 800801a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800801c:	4628      	mov	r0, r5
 800801e:	f001 ff39 	bl	8009e94 <SDIO_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e031      	b.n	8008098 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008034:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <HAL_SD_InitCard+0xbc>)
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f001 ff60 	bl	8009f04 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008044:	4b16      	ldr	r3, [pc, #88]	; (80080a0 <HAL_SD_InitCard+0xbc>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fb16 	bl	800867c <SD_PowerON>
 8008050:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e013      	b.n	8008098 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa37 	bl	80084e4 <SD_InitCard>
 8008076:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e000      	b.n	8008098 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3728      	adds	r7, #40	; 0x28
 800809c:	46bd      	mov	sp, r7
 800809e:	bdb0      	pop	{r4, r5, r7, pc}
 80080a0:	422580a0 	.word	0x422580a0

080080a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b2:	0f9b      	lsrs	r3, r3, #30
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080be:	0e9b      	lsrs	r3, r3, #26
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d0:	0e1b      	lsrs	r3, r3, #24
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e2:	0c1b      	lsrs	r3, r3, #16
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008104:	0d1b      	lsrs	r3, r3, #20
 8008106:	b29a      	uxth	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	b2da      	uxtb	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008122:	0bdb      	lsrs	r3, r3, #15
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008134:	0b9b      	lsrs	r3, r3, #14
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	b2da      	uxtb	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008146:	0b5b      	lsrs	r3, r3, #13
 8008148:	b2db      	uxtb	r3, r3
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008158:	0b1b      	lsrs	r3, r3, #12
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	b2da      	uxtb	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2200      	movs	r2, #0
 800816a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008170:	2b00      	cmp	r3, #0
 8008172:	d163      	bne.n	800823c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008178:	009a      	lsls	r2, r3, #2
 800817a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800817e:	4013      	ands	r3, r2
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008184:	0f92      	lsrs	r2, r2, #30
 8008186:	431a      	orrs	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008190:	0edb      	lsrs	r3, r3, #27
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	b2da      	uxtb	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b4:	0d5b      	lsrs	r3, r3, #21
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081c6:	0c9b      	lsrs	r3, r3, #18
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d8:	0bdb      	lsrs	r3, r3, #15
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	7e1b      	ldrb	r3, [r3, #24]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	3302      	adds	r3, #2
 80081fc:	2201      	movs	r2, #1
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008206:	fb02 f203 	mul.w	r2, r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	7a1b      	ldrb	r3, [r3, #8]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	2201      	movs	r2, #1
 800821a:	409a      	lsls	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008228:	0a52      	lsrs	r2, r2, #9
 800822a:	fb02 f203 	mul.w	r2, r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008238:	661a      	str	r2, [r3, #96]	; 0x60
 800823a:	e031      	b.n	80082a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008240:	2b01      	cmp	r3, #1
 8008242:	d11d      	bne.n	8008280 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	431a      	orrs	r2, r3
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	3301      	adds	r3, #1
 8008260:	029a      	lsls	r2, r3, #10
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008274:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	661a      	str	r2, [r3, #96]	; 0x60
 800827e:	e00f      	b.n	80082a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a58      	ldr	r2, [pc, #352]	; (80083e8 <HAL_SD_GetCardCSD+0x344>)
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e09d      	b.n	80083dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a4:	0b9b      	lsrs	r3, r3, #14
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b6:	09db      	lsrs	r3, r3, #7
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d8:	0fdb      	lsrs	r3, r3, #31
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	0f5b      	lsrs	r3, r3, #29
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f6:	0e9b      	lsrs	r3, r3, #26
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008308:	0d9b      	lsrs	r3, r3, #22
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f003 030f 	and.w	r3, r3, #15
 8008310:	b2da      	uxtb	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831a:	0d5b      	lsrs	r3, r3, #21
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	b2da      	uxtb	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834a:	0bdb      	lsrs	r3, r3, #15
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	0b9b      	lsrs	r3, r3, #14
 8008360:	b2db      	uxtb	r3, r3
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	b2da      	uxtb	r2, r3
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008372:	0b5b      	lsrs	r3, r3, #13
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	b2da      	uxtb	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	0b1b      	lsrs	r3, r3, #12
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839a:	0a9b      	lsrs	r3, r3, #10
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ae:	0a1b      	lsrs	r3, r3, #8
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	085b      	lsrs	r3, r3, #1
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	004005ff 	.word	0x004005ff

080083ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80083ec:	b5b0      	push	{r4, r5, r7, lr}
 80083ee:	b08e      	sub	sp, #56	; 0x38
 80083f0:	af04      	add	r7, sp, #16
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2203      	movs	r2, #3
 80083fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008402:	2b03      	cmp	r3, #3
 8008404:	d02e      	beq.n	8008464 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840c:	d106      	bne.n	800841c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	639a      	str	r2, [r3, #56]	; 0x38
 800841a:	e029      	b.n	8008470 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008422:	d10a      	bne.n	800843a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f9b7 	bl	8008798 <SD_WideBus_Enable>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38
 8008438:	e01a      	b.n	8008470 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f9f4 	bl	800882e <SD_WideBus_Disable>
 8008446:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	639a      	str	r2, [r3, #56]	; 0x38
 8008454:	e00c      	b.n	8008470 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
 8008462:	e005      	b.n	8008470 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a18      	ldr	r2, [pc, #96]	; (80084e0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e024      	b.n	80084d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681d      	ldr	r5, [r3, #0]
 80084b2:	466c      	mov	r4, sp
 80084b4:	f107 0318 	add.w	r3, r7, #24
 80084b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084c6:	4628      	mov	r0, r5
 80084c8:	f001 fce4 	bl	8009e94 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3728      	adds	r7, #40	; 0x28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}
 80084de:	bf00      	nop
 80084e0:	004005ff 	.word	0x004005ff

080084e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084e4:	b5b0      	push	{r4, r5, r7, lr}
 80084e6:	b094      	sub	sp, #80	; 0x50
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084ec:	2301      	movs	r3, #1
 80084ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 fd14 	bl	8009f22 <SDIO_GetPowerState>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d102      	bne.n	8008506 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008500:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008504:	e0b6      	b.n	8008674 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850a:	2b03      	cmp	r3, #3
 800850c:	d02f      	beq.n	800856e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fe93 	bl	800a23e <SDMMC_CmdSendCID>
 8008518:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800851a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <SD_InitCard+0x40>
    {
      return errorstate;
 8008520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008522:	e0a7      	b.n	8008674 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fd3e 	bl	8009fac <SDIO_GetResponse>
 8008530:	4602      	mov	r2, r0
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2104      	movs	r1, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f001 fd35 	bl	8009fac <SDIO_GetResponse>
 8008542:	4602      	mov	r2, r0
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2108      	movs	r1, #8
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fd2c 	bl	8009fac <SDIO_GetResponse>
 8008554:	4602      	mov	r2, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	210c      	movs	r1, #12
 8008560:	4618      	mov	r0, r3
 8008562:	f001 fd23 	bl	8009fac <SDIO_GetResponse>
 8008566:	4602      	mov	r2, r0
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008572:	2b03      	cmp	r3, #3
 8008574:	d00d      	beq.n	8008592 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f107 020e 	add.w	r2, r7, #14
 800857e:	4611      	mov	r1, r2
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fe99 	bl	800a2b8 <SDMMC_CmdSetRelAdd>
 8008586:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <SD_InitCard+0xae>
    {
      return errorstate;
 800858e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008590:	e070      	b.n	8008674 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	2b03      	cmp	r3, #3
 8008598:	d036      	beq.n	8008608 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800859a:	89fb      	ldrh	r3, [r7, #14]
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085aa:	041b      	lsls	r3, r3, #16
 80085ac:	4619      	mov	r1, r3
 80085ae:	4610      	mov	r0, r2
 80085b0:	f001 fe63 	bl	800a27a <SDMMC_CmdSendCSD>
 80085b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80085bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085be:	e059      	b.n	8008674 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 fcf0 	bl	8009fac <SDIO_GetResponse>
 80085cc:	4602      	mov	r2, r0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2104      	movs	r1, #4
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 fce7 	bl	8009fac <SDIO_GetResponse>
 80085de:	4602      	mov	r2, r0
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2108      	movs	r1, #8
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fcde 	bl	8009fac <SDIO_GetResponse>
 80085f0:	4602      	mov	r2, r0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	210c      	movs	r1, #12
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fcd5 	bl	8009fac <SDIO_GetResponse>
 8008602:	4602      	mov	r2, r0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2104      	movs	r1, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fccc 	bl	8009fac <SDIO_GetResponse>
 8008614:	4603      	mov	r3, r0
 8008616:	0d1a      	lsrs	r2, r3, #20
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800861c:	f107 0310 	add.w	r3, r7, #16
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff fd3e 	bl	80080a4 <HAL_SD_GetCardCSD>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800862e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008632:	e01f      	b.n	8008674 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6819      	ldr	r1, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863c:	041b      	lsls	r3, r3, #16
 800863e:	461a      	mov	r2, r3
 8008640:	f04f 0300 	mov.w	r3, #0
 8008644:	4608      	mov	r0, r1
 8008646:	f001 fd12 	bl	800a06e <SDMMC_CmdSelDesel>
 800864a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800864c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <SD_InitCard+0x172>
  {
    return errorstate;
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	e00e      	b.n	8008674 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681d      	ldr	r5, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	466c      	mov	r4, sp
 800865e:	f103 0210 	add.w	r2, r3, #16
 8008662:	ca07      	ldmia	r2, {r0, r1, r2}
 8008664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008668:	3304      	adds	r3, #4
 800866a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800866c:	4628      	mov	r0, r5
 800866e:	f001 fc11 	bl	8009e94 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3740      	adds	r7, #64	; 0x40
 8008678:	46bd      	mov	sp, r7
 800867a:	bdb0      	pop	{r4, r5, r7, pc}

0800867c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	2300      	movs	r3, #0
 800868e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fd0d 	bl	800a0b4 <SDMMC_CmdGoIdleState>
 800869a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	e072      	b.n	800878c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 fd20 	bl	800a0f0 <SDMMC_CmdOperCond>
 80086b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00d      	beq.n	80086d4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 fcf6 	bl	800a0b4 <SDMMC_CmdGoIdleState>
 80086c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <SD_PowerON+0x5e>
    {
      return errorstate;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	e05b      	b.n	800878c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d137      	bne.n	8008752 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fd20 	bl	800a12e <SDMMC_CmdAppCommand>
 80086ee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02d      	beq.n	8008752 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086fa:	e047      	b.n	800878c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f001 fd13 	bl	800a12e <SDMMC_CmdAppCommand>
 8008708:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <SD_PowerON+0x98>
    {
      return errorstate;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	e03b      	b.n	800878c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	491e      	ldr	r1, [pc, #120]	; (8008794 <SD_PowerON+0x118>)
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fd29 	bl	800a172 <SDMMC_CmdAppOperCommand>
 8008720:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800872c:	e02e      	b.n	800878c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2100      	movs	r1, #0
 8008734:	4618      	mov	r0, r3
 8008736:	f001 fc39 	bl	8009fac <SDIO_GetResponse>
 800873a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	0fdb      	lsrs	r3, r3, #31
 8008740:	2b01      	cmp	r3, #1
 8008742:	d101      	bne.n	8008748 <SD_PowerON+0xcc>
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <SD_PowerON+0xce>
 8008748:	2300      	movs	r3, #0
 800874a:	613b      	str	r3, [r7, #16]

    count++;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	3301      	adds	r3, #1
 8008750:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008758:	4293      	cmp	r3, r2
 800875a:	d802      	bhi.n	8008762 <SD_PowerON+0xe6>
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0cc      	beq.n	80086fc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008768:	4293      	cmp	r3, r2
 800876a:	d902      	bls.n	8008772 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800876c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008770:	e00c      	b.n	800878c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	645a      	str	r2, [r3, #68]	; 0x44
 8008782:	e002      	b.n	800878a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	c1100000 	.word	0xc1100000

08008798 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	2300      	movs	r3, #0
 80087a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2100      	movs	r1, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 fbfc 	bl	8009fac <SDIO_GetResponse>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087be:	d102      	bne.n	80087c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c4:	e02f      	b.n	8008826 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087c6:	f107 030c 	add.w	r3, r7, #12
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f879 	bl	80088c4 <SD_FindSCR>
 80087d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	e023      	b.n	8008826 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01c      	beq.n	8008822 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f0:	041b      	lsls	r3, r3, #16
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f001 fc9a 	bl	800a12e <SDMMC_CmdAppCommand>
 80087fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	e00f      	b.n	8008826 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2102      	movs	r1, #2
 800880c:	4618      	mov	r0, r3
 800880e:	f001 fcd3 	bl	800a1b8 <SDMMC_CmdBusWidth>
 8008812:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	e003      	b.n	8008826 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800881e:	2300      	movs	r3, #0
 8008820:	e001      	b.n	8008826 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008822:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	2300      	movs	r3, #0
 800883c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2100      	movs	r1, #0
 8008844:	4618      	mov	r0, r3
 8008846:	f001 fbb1 	bl	8009fac <SDIO_GetResponse>
 800884a:	4603      	mov	r3, r0
 800884c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008854:	d102      	bne.n	800885c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800885a:	e02f      	b.n	80088bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800885c:	f107 030c 	add.w	r3, r7, #12
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f82e 	bl	80088c4 <SD_FindSCR>
 8008868:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	e023      	b.n	80088bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01c      	beq.n	80088b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	4619      	mov	r1, r3
 800888a:	4610      	mov	r0, r2
 800888c:	f001 fc4f 	bl	800a12e <SDMMC_CmdAppCommand>
 8008890:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	e00f      	b.n	80088bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 fc88 	bl	800a1b8 <SDMMC_CmdBusWidth>
 80088a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	e003      	b.n	80088bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e001      	b.n	80088bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b08f      	sub	sp, #60	; 0x3c
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ce:	f7fb f843 	bl	8003958 <HAL_GetTick>
 80088d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80088d8:	2300      	movs	r3, #0
 80088da:	60bb      	str	r3, [r7, #8]
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2108      	movs	r1, #8
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 fb9d 	bl	800a02a <SDMMC_CmdBlockLength>
 80088f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	e0a9      	b.n	8008a50 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f001 fc10 	bl	800a12e <SDMMC_CmdAppCommand>
 800890e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008918:	e09a      	b.n	8008a50 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008920:	2308      	movs	r3, #8
 8008922:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008924:	2330      	movs	r3, #48	; 0x30
 8008926:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008928:	2302      	movs	r3, #2
 800892a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800892c:	2300      	movs	r3, #0
 800892e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008930:	2301      	movs	r3, #1
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f107 0210 	add.w	r2, r7, #16
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fb47 	bl	8009fd2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f001 fc57 	bl	800a1fc <SDMMC_CmdSendSCR>
 800894e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	2b00      	cmp	r3, #0
 8008954:	d022      	beq.n	800899c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	e07a      	b.n	8008a50 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6819      	ldr	r1, [r3, #0]
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f107 0208 	add.w	r2, r7, #8
 8008974:	18d4      	adds	r4, r2, r3
 8008976:	4608      	mov	r0, r1
 8008978:	f001 fab7 	bl	8009eea <SDIO_ReadFIFO>
 800897c:	4603      	mov	r3, r0
 800897e:	6023      	str	r3, [r4, #0]
      index++;
 8008980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008982:	3301      	adds	r3, #1
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008986:	f7fa ffe7 	bl	8003958 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d102      	bne.n	800899c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800899a:	e059      	b.n	8008a50 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a2:	f240 432a 	movw	r3, #1066	; 0x42a
 80089a6:	4013      	ands	r3, r2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0d6      	beq.n	800895a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	f003 0308 	and.w	r3, r3, #8
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2208      	movs	r2, #8
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089c2:	2308      	movs	r3, #8
 80089c4:	e044      	b.n	8008a50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2202      	movs	r2, #2
 80089da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089dc:	2302      	movs	r3, #2
 80089de:	e037      	b.n	8008a50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2220      	movs	r2, #32
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80089f6:	2320      	movs	r3, #32
 80089f8:	e02a      	b.n	8008a50 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	061a      	lsls	r2, r3, #24
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	0a1b      	lsrs	r3, r3, #8
 8008a16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	0e1b      	lsrs	r3, r3, #24
 8008a20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	601a      	str	r2, [r3, #0]
    scr++;
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	3304      	adds	r3, #4
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	061a      	lsls	r2, r3, #24
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	0a1b      	lsrs	r3, r3, #8
 8008a3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	0e1b      	lsrs	r3, r3, #24
 8008a48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	373c      	adds	r7, #60	; 0x3c
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd90      	pop	{r4, r7, pc}

08008a58 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e034      	b.n	8008ad8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7fa fdf6 	bl	8003674 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f001 f8fa 	bl	8009c8c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	f001 f962 	bl	8009d6c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6858      	ldr	r0, [r3, #4]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	f001 f9ad 	bl	8009e14 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	6892      	ldr	r2, [r2, #8]
 8008ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	6892      	ldr	r2, [r2, #8]
 8008ace:	f041 0101 	orr.w	r1, r1, #1
 8008ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e01d      	b.n	8008b2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f815 	bl	8008b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f000 f968 	bl	8008df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68da      	ldr	r2, [r3, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0201 	orr.w	r2, r2, #1
 8008b60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	d007      	beq.n	8008b84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d122      	bne.n	8008bee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d11b      	bne.n	8008bee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f06f 0202 	mvn.w	r2, #2
 8008bbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8ee 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008bda:	e005      	b.n	8008be8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f8e0 	bl	8008da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8f1 	bl	8008dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d122      	bne.n	8008c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d11b      	bne.n	8008c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f06f 0204 	mvn.w	r2, #4
 8008c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d003      	beq.n	8008c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f8c4 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008c2e:	e005      	b.n	8008c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f8b6 	bl	8008da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f8c7 	bl	8008dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d122      	bne.n	8008c96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d11b      	bne.n	8008c96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f06f 0208 	mvn.w	r2, #8
 8008c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f89a 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008c82:	e005      	b.n	8008c90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f88c 	bl	8008da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f89d 	bl	8008dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f003 0310 	and.w	r3, r3, #16
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d122      	bne.n	8008cea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d11b      	bne.n	8008cea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f06f 0210 	mvn.w	r2, #16
 8008cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2208      	movs	r2, #8
 8008cc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f870 	bl	8008db6 <HAL_TIM_IC_CaptureCallback>
 8008cd6:	e005      	b.n	8008ce4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f862 	bl	8008da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f873 	bl	8008dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d10e      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d107      	bne.n	8008d16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0201 	mvn.w	r2, #1
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7f9 f96b 	bl	8001fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d20:	2b80      	cmp	r3, #128	; 0x80
 8008d22:	d10e      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2e:	2b80      	cmp	r3, #128	; 0x80
 8008d30:	d107      	bne.n	8008d42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f903 	bl	8008f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4c:	2b40      	cmp	r3, #64	; 0x40
 8008d4e:	d10e      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5a:	2b40      	cmp	r3, #64	; 0x40
 8008d5c:	d107      	bne.n	8008d6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f838 	bl	8008dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d10e      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	d107      	bne.n	8008d9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f06f 0220 	mvn.w	r2, #32
 8008d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f8cd 	bl	8008f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
	...

08008df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a40      	ldr	r2, [pc, #256]	; (8008f08 <TIM_Base_SetConfig+0x114>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e12:	d00f      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a3d      	ldr	r2, [pc, #244]	; (8008f0c <TIM_Base_SetConfig+0x118>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00b      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a3c      	ldr	r2, [pc, #240]	; (8008f10 <TIM_Base_SetConfig+0x11c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d007      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <TIM_Base_SetConfig+0x120>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_Base_SetConfig+0x40>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a3a      	ldr	r2, [pc, #232]	; (8008f18 <TIM_Base_SetConfig+0x124>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d108      	bne.n	8008e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a2f      	ldr	r2, [pc, #188]	; (8008f08 <TIM_Base_SetConfig+0x114>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d02b      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e54:	d027      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a2c      	ldr	r2, [pc, #176]	; (8008f0c <TIM_Base_SetConfig+0x118>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d023      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a2b      	ldr	r2, [pc, #172]	; (8008f10 <TIM_Base_SetConfig+0x11c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01f      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a2a      	ldr	r2, [pc, #168]	; (8008f14 <TIM_Base_SetConfig+0x120>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01b      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a29      	ldr	r2, [pc, #164]	; (8008f18 <TIM_Base_SetConfig+0x124>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d017      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a28      	ldr	r2, [pc, #160]	; (8008f1c <TIM_Base_SetConfig+0x128>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d013      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a27      	ldr	r2, [pc, #156]	; (8008f20 <TIM_Base_SetConfig+0x12c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00f      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a26      	ldr	r2, [pc, #152]	; (8008f24 <TIM_Base_SetConfig+0x130>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00b      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a25      	ldr	r2, [pc, #148]	; (8008f28 <TIM_Base_SetConfig+0x134>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d007      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a24      	ldr	r2, [pc, #144]	; (8008f2c <TIM_Base_SetConfig+0x138>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d003      	beq.n	8008ea6 <TIM_Base_SetConfig+0xb2>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a23      	ldr	r2, [pc, #140]	; (8008f30 <TIM_Base_SetConfig+0x13c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d108      	bne.n	8008eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a0a      	ldr	r2, [pc, #40]	; (8008f08 <TIM_Base_SetConfig+0x114>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d003      	beq.n	8008eec <TIM_Base_SetConfig+0xf8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a0c      	ldr	r2, [pc, #48]	; (8008f18 <TIM_Base_SetConfig+0x124>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d103      	bne.n	8008ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	615a      	str	r2, [r3, #20]
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40014400 	.word	0x40014400
 8008f24:	40014800 	.word	0x40014800
 8008f28:	40001800 	.word	0x40001800
 8008f2c:	40001c00 	.word	0x40001c00
 8008f30:	40002000 	.word	0x40002000

08008f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e03f      	b.n	8008fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fa fa80 	bl	8003488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	; 0x24
 8008f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fab3 	bl	800950c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695a      	ldr	r2, [r3, #20]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	4613      	mov	r3, r2
 8009002:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b20      	cmp	r3, #32
 800900e:	d140      	bne.n	8009092 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <HAL_UART_Receive_IT+0x26>
 8009016:	88fb      	ldrh	r3, [r7, #6]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e039      	b.n	8009094 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_UART_Receive_IT+0x38>
 800902a:	2302      	movs	r3, #2
 800902c:	e032      	b.n	8009094 <HAL_UART_Receive_IT+0x9e>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	88fa      	ldrh	r2, [r7, #6]
 8009040:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	88fa      	ldrh	r2, [r7, #6]
 8009046:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2222      	movs	r2, #34	; 0x22
 8009052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800906c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	695a      	ldr	r2, [r3, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 0201 	orr.w	r2, r2, #1
 800907c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0220 	orr.w	r2, r2, #32
 800908c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	e000      	b.n	8009094 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009092:	2302      	movs	r3, #2
  }
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10d      	bne.n	80090f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f003 0320 	and.w	r3, r3, #32
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_UART_IRQHandler+0x52>
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f98c 	bl	8009408 <UART_Receive_IT>
      return;
 80090f0:	e0d0      	b.n	8009294 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 80b0 	beq.w	800925a <HAL_UART_IRQHandler+0x1ba>
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d105      	bne.n	8009110 <HAL_UART_IRQHandler+0x70>
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 80a5 	beq.w	800925a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <HAL_UART_IRQHandler+0x90>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009128:	f043 0201 	orr.w	r2, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <HAL_UART_IRQHandler+0xb0>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009148:	f043 0202 	orr.w	r2, r3, #2
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <HAL_UART_IRQHandler+0xd0>
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009168:	f043 0204 	orr.w	r2, r3, #4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00f      	beq.n	800919a <HAL_UART_IRQHandler+0xfa>
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_UART_IRQHandler+0xee>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009192:	f043 0208 	orr.w	r2, r3, #8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d077      	beq.n	8009292 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d007      	beq.n	80091bc <HAL_UART_IRQHandler+0x11c>
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f926 	bl	8009408 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	bf0c      	ite	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	2300      	movne	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	f003 0308 	and.w	r3, r3, #8
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <HAL_UART_IRQHandler+0x144>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d031      	beq.n	8009248 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f86f 	bl	80092c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f4:	2b40      	cmp	r3, #64	; 0x40
 80091f6:	d123      	bne.n	8009240 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695a      	ldr	r2, [r3, #20]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009206:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920c:	2b00      	cmp	r3, #0
 800920e:	d013      	beq.n	8009238 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009214:	4a21      	ldr	r2, [pc, #132]	; (800929c <HAL_UART_IRQHandler+0x1fc>)
 8009216:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	4618      	mov	r0, r3
 800921e:	f7fb f941 	bl	80044a4 <HAL_DMA_Abort_IT>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d016      	beq.n	8009256 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009232:	4610      	mov	r0, r2
 8009234:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009236:	e00e      	b.n	8009256 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f83b 	bl	80092b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923e:	e00a      	b.n	8009256 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f837 	bl	80092b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009246:	e006      	b.n	8009256 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f833 	bl	80092b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009254:	e01d      	b.n	8009292 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009256:	bf00      	nop
    return;
 8009258:	e01b      	b.n	8009292 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <HAL_UART_IRQHandler+0x1d6>
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f85c 	bl	800932c <UART_Transmit_IT>
    return;
 8009274:	e00e      	b.n	8009294 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <HAL_UART_IRQHandler+0x1f4>
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f8a4 	bl	80093d8 <UART_EndTransmit_IT>
    return;
 8009290:	e000      	b.n	8009294 <HAL_UART_IRQHandler+0x1f4>
    return;
 8009292:	bf00      	nop
  }
}
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	08009305 	.word	0x08009305

080092a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0201 	bic.w	r2, r2, #1
 80092ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff ffc8 	bl	80092b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b21      	cmp	r3, #33	; 0x21
 800933e:	d144      	bne.n	80093ca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009348:	d11a      	bne.n	8009380 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	461a      	mov	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800935e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d105      	bne.n	8009374 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	1c9a      	adds	r2, r3, #2
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	621a      	str	r2, [r3, #32]
 8009372:	e00e      	b.n	8009392 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	621a      	str	r2, [r3, #32]
 800937e:	e008      	b.n	8009392 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	1c59      	adds	r1, r3, #1
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	6211      	str	r1, [r2, #32]
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009396:	b29b      	uxth	r3, r3
 8009398:	3b01      	subs	r3, #1
 800939a:	b29b      	uxth	r3, r3
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4619      	mov	r1, r3
 80093a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10f      	bne.n	80093c6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68da      	ldr	r2, [r3, #12]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	e000      	b.n	80093cc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80093ca:	2302      	movs	r3, #2
  }
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff ff51 	bl	80092a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b22      	cmp	r3, #34	; 0x22
 800941a:	d171      	bne.n	8009500 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009424:	d123      	bne.n	800946e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10e      	bne.n	8009452 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944a:	1c9a      	adds	r2, r3, #2
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	629a      	str	r2, [r3, #40]	; 0x28
 8009450:	e029      	b.n	80094a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	b29b      	uxth	r3, r3
 800945a:	b2db      	uxtb	r3, r3
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	629a      	str	r2, [r3, #40]	; 0x28
 800946c:	e01b      	b.n	80094a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10a      	bne.n	800948c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6858      	ldr	r0, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	1c59      	adds	r1, r3, #1
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6291      	str	r1, [r2, #40]	; 0x28
 8009486:	b2c2      	uxtb	r2, r0
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	e00c      	b.n	80094a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	b2da      	uxtb	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009498:	1c58      	adds	r0, r3, #1
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	6288      	str	r0, [r1, #40]	; 0x28
 800949e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4619      	mov	r1, r3
 80094b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d120      	bne.n	80094fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0220 	bic.w	r2, r2, #32
 80094c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695a      	ldr	r2, [r3, #20]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7f7 fd40 	bl	8000f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	e002      	b.n	8009502 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	e000      	b.n	8009502 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009500:	2302      	movs	r3, #2
  }
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	b0bd      	sub	sp, #244	; 0xf4
 8009512:	af00      	add	r7, sp, #0
 8009514:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009528:	68d9      	ldr	r1, [r3, #12]
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	ea40 0301 	orr.w	r3, r0, r1
 8009534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	431a      	orrs	r2, r3
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	431a      	orrs	r2, r3
 800954c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009564:	f021 010c 	bic.w	r1, r1, #12
 8009568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009572:	430b      	orrs	r3, r1
 8009574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009586:	6999      	ldr	r1, [r3, #24]
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	ea40 0301 	orr.w	r3, r0, r1
 8009592:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800959e:	f040 81b6 	bne.w	800990e <UART_SetConfig+0x402>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80095a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	4b70      	ldr	r3, [pc, #448]	; (800976c <UART_SetConfig+0x260>)
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d012      	beq.n	80095d4 <UART_SetConfig+0xc8>
 80095ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	4b6e      	ldr	r3, [pc, #440]	; (8009770 <UART_SetConfig+0x264>)
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d00c      	beq.n	80095d4 <UART_SetConfig+0xc8>
 80095ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	4b6c      	ldr	r3, [pc, #432]	; (8009774 <UART_SetConfig+0x268>)
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d006      	beq.n	80095d4 <UART_SetConfig+0xc8>
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	4b6a      	ldr	r3, [pc, #424]	; (8009778 <UART_SetConfig+0x26c>)
 80095ce:	429a      	cmp	r2, r3
 80095d0:	f040 80d6 	bne.w	8009780 <UART_SetConfig+0x274>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095d4:	f7fd fe5e 	bl	8007294 <HAL_RCC_GetPCLK2Freq>
 80095d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095e0:	461c      	mov	r4, r3
 80095e2:	f04f 0500 	mov.w	r5, #0
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	1891      	adds	r1, r2, r2
 80095ec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80095f0:	415b      	adcs	r3, r3
 80095f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80095f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80095fa:	1912      	adds	r2, r2, r4
 80095fc:	eb45 0303 	adc.w	r3, r5, r3
 8009600:	f04f 0000 	mov.w	r0, #0
 8009604:	f04f 0100 	mov.w	r1, #0
 8009608:	00d9      	lsls	r1, r3, #3
 800960a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800960e:	00d0      	lsls	r0, r2, #3
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	1911      	adds	r1, r2, r4
 8009616:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800961a:	416b      	adcs	r3, r5
 800961c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	461a      	mov	r2, r3
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	1891      	adds	r1, r2, r2
 800962e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009632:	415b      	adcs	r3, r3
 8009634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009638:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800963c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009640:	f7f7 fad2 	bl	8000be8 <__aeabi_uldivmod>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4b4c      	ldr	r3, [pc, #304]	; (800977c <UART_SetConfig+0x270>)
 800964a:	fba3 2302 	umull	r2, r3, r3, r2
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	011e      	lsls	r6, r3, #4
 8009652:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009656:	461c      	mov	r4, r3
 8009658:	f04f 0500 	mov.w	r5, #0
 800965c:	4622      	mov	r2, r4
 800965e:	462b      	mov	r3, r5
 8009660:	1891      	adds	r1, r2, r2
 8009662:	67b9      	str	r1, [r7, #120]	; 0x78
 8009664:	415b      	adcs	r3, r3
 8009666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009668:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800966c:	1912      	adds	r2, r2, r4
 800966e:	eb45 0303 	adc.w	r3, r5, r3
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f04f 0100 	mov.w	r1, #0
 800967a:	00d9      	lsls	r1, r3, #3
 800967c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009680:	00d0      	lsls	r0, r2, #3
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	1911      	adds	r1, r2, r4
 8009688:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800968c:	416b      	adcs	r3, r5
 800968e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	461a      	mov	r2, r3
 800969a:	f04f 0300 	mov.w	r3, #0
 800969e:	1891      	adds	r1, r2, r2
 80096a0:	6739      	str	r1, [r7, #112]	; 0x70
 80096a2:	415b      	adcs	r3, r3
 80096a4:	677b      	str	r3, [r7, #116]	; 0x74
 80096a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80096aa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80096ae:	f7f7 fa9b 	bl	8000be8 <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4b31      	ldr	r3, [pc, #196]	; (800977c <UART_SetConfig+0x270>)
 80096b8:	fba3 1302 	umull	r1, r3, r3, r2
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	2164      	movs	r1, #100	; 0x64
 80096c0:	fb01 f303 	mul.w	r3, r1, r3
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	3332      	adds	r3, #50	; 0x32
 80096ca:	4a2c      	ldr	r2, [pc, #176]	; (800977c <UART_SetConfig+0x270>)
 80096cc:	fba2 2303 	umull	r2, r3, r2, r3
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096d8:	441e      	add	r6, r3
 80096da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096de:	4618      	mov	r0, r3
 80096e0:	f04f 0100 	mov.w	r1, #0
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	1894      	adds	r4, r2, r2
 80096ea:	66bc      	str	r4, [r7, #104]	; 0x68
 80096ec:	415b      	adcs	r3, r3
 80096ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80096f4:	1812      	adds	r2, r2, r0
 80096f6:	eb41 0303 	adc.w	r3, r1, r3
 80096fa:	f04f 0400 	mov.w	r4, #0
 80096fe:	f04f 0500 	mov.w	r5, #0
 8009702:	00dd      	lsls	r5, r3, #3
 8009704:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009708:	00d4      	lsls	r4, r2, #3
 800970a:	4622      	mov	r2, r4
 800970c:	462b      	mov	r3, r5
 800970e:	1814      	adds	r4, r2, r0
 8009710:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009714:	414b      	adcs	r3, r1
 8009716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800971a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	461a      	mov	r2, r3
 8009722:	f04f 0300 	mov.w	r3, #0
 8009726:	1891      	adds	r1, r2, r2
 8009728:	6639      	str	r1, [r7, #96]	; 0x60
 800972a:	415b      	adcs	r3, r3
 800972c:	667b      	str	r3, [r7, #100]	; 0x64
 800972e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009736:	f7f7 fa57 	bl	8000be8 <__aeabi_uldivmod>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4b0f      	ldr	r3, [pc, #60]	; (800977c <UART_SetConfig+0x270>)
 8009740:	fba3 1302 	umull	r1, r3, r3, r2
 8009744:	095b      	lsrs	r3, r3, #5
 8009746:	2164      	movs	r1, #100	; 0x64
 8009748:	fb01 f303 	mul.w	r3, r1, r3
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	3332      	adds	r3, #50	; 0x32
 8009752:	4a0a      	ldr	r2, [pc, #40]	; (800977c <UART_SetConfig+0x270>)
 8009754:	fba2 2303 	umull	r2, r3, r2, r3
 8009758:	095b      	lsrs	r3, r3, #5
 800975a:	f003 0207 	and.w	r2, r3, #7
 800975e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4432      	add	r2, r6
 8009766:	609a      	str	r2, [r3, #8]
 8009768:	e288      	b.n	8009c7c <UART_SetConfig+0x770>
 800976a:	bf00      	nop
 800976c:	40011000 	.word	0x40011000
 8009770:	40011400 	.word	0x40011400
 8009774:	40011800 	.word	0x40011800
 8009778:	40011c00 	.word	0x40011c00
 800977c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009780:	f7fd fd74 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 8009784:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009788:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800978c:	461c      	mov	r4, r3
 800978e:	f04f 0500 	mov.w	r5, #0
 8009792:	4622      	mov	r2, r4
 8009794:	462b      	mov	r3, r5
 8009796:	1891      	adds	r1, r2, r2
 8009798:	65b9      	str	r1, [r7, #88]	; 0x58
 800979a:	415b      	adcs	r3, r3
 800979c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800979e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80097a2:	1912      	adds	r2, r2, r4
 80097a4:	eb45 0303 	adc.w	r3, r5, r3
 80097a8:	f04f 0000 	mov.w	r0, #0
 80097ac:	f04f 0100 	mov.w	r1, #0
 80097b0:	00d9      	lsls	r1, r3, #3
 80097b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097b6:	00d0      	lsls	r0, r2, #3
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	1911      	adds	r1, r2, r4
 80097be:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80097c2:	416b      	adcs	r3, r5
 80097c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f04f 0300 	mov.w	r3, #0
 80097d4:	1891      	adds	r1, r2, r2
 80097d6:	6539      	str	r1, [r7, #80]	; 0x50
 80097d8:	415b      	adcs	r3, r3
 80097da:	657b      	str	r3, [r7, #84]	; 0x54
 80097dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80097e0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80097e4:	f7f7 fa00 	bl	8000be8 <__aeabi_uldivmod>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4bb9      	ldr	r3, [pc, #740]	; (8009ad4 <UART_SetConfig+0x5c8>)
 80097ee:	fba3 2302 	umull	r2, r3, r3, r2
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	011e      	lsls	r6, r3, #4
 80097f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097fa:	461c      	mov	r4, r3
 80097fc:	f04f 0500 	mov.w	r5, #0
 8009800:	4622      	mov	r2, r4
 8009802:	462b      	mov	r3, r5
 8009804:	1891      	adds	r1, r2, r2
 8009806:	64b9      	str	r1, [r7, #72]	; 0x48
 8009808:	415b      	adcs	r3, r3
 800980a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800980c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009810:	1912      	adds	r2, r2, r4
 8009812:	eb45 0303 	adc.w	r3, r5, r3
 8009816:	f04f 0000 	mov.w	r0, #0
 800981a:	f04f 0100 	mov.w	r1, #0
 800981e:	00d9      	lsls	r1, r3, #3
 8009820:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009824:	00d0      	lsls	r0, r2, #3
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	1911      	adds	r1, r2, r4
 800982c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009830:	416b      	adcs	r3, r5
 8009832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	461a      	mov	r2, r3
 800983e:	f04f 0300 	mov.w	r3, #0
 8009842:	1891      	adds	r1, r2, r2
 8009844:	6439      	str	r1, [r7, #64]	; 0x40
 8009846:	415b      	adcs	r3, r3
 8009848:	647b      	str	r3, [r7, #68]	; 0x44
 800984a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800984e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009852:	f7f7 f9c9 	bl	8000be8 <__aeabi_uldivmod>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4b9e      	ldr	r3, [pc, #632]	; (8009ad4 <UART_SetConfig+0x5c8>)
 800985c:	fba3 1302 	umull	r1, r3, r3, r2
 8009860:	095b      	lsrs	r3, r3, #5
 8009862:	2164      	movs	r1, #100	; 0x64
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	3332      	adds	r3, #50	; 0x32
 800986e:	4a99      	ldr	r2, [pc, #612]	; (8009ad4 <UART_SetConfig+0x5c8>)
 8009870:	fba2 2303 	umull	r2, r3, r2, r3
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800987c:	441e      	add	r6, r3
 800987e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009882:	4618      	mov	r0, r3
 8009884:	f04f 0100 	mov.w	r1, #0
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	1894      	adds	r4, r2, r2
 800988e:	63bc      	str	r4, [r7, #56]	; 0x38
 8009890:	415b      	adcs	r3, r3
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009898:	1812      	adds	r2, r2, r0
 800989a:	eb41 0303 	adc.w	r3, r1, r3
 800989e:	f04f 0400 	mov.w	r4, #0
 80098a2:	f04f 0500 	mov.w	r5, #0
 80098a6:	00dd      	lsls	r5, r3, #3
 80098a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098ac:	00d4      	lsls	r4, r2, #3
 80098ae:	4622      	mov	r2, r4
 80098b0:	462b      	mov	r3, r5
 80098b2:	1814      	adds	r4, r2, r0
 80098b4:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80098b8:	414b      	adcs	r3, r1
 80098ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	461a      	mov	r2, r3
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	1891      	adds	r1, r2, r2
 80098cc:	6339      	str	r1, [r7, #48]	; 0x30
 80098ce:	415b      	adcs	r3, r3
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
 80098d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80098d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098da:	f7f7 f985 	bl	8000be8 <__aeabi_uldivmod>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4b7c      	ldr	r3, [pc, #496]	; (8009ad4 <UART_SetConfig+0x5c8>)
 80098e4:	fba3 1302 	umull	r1, r3, r3, r2
 80098e8:	095b      	lsrs	r3, r3, #5
 80098ea:	2164      	movs	r1, #100	; 0x64
 80098ec:	fb01 f303 	mul.w	r3, r1, r3
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	3332      	adds	r3, #50	; 0x32
 80098f6:	4a77      	ldr	r2, [pc, #476]	; (8009ad4 <UART_SetConfig+0x5c8>)
 80098f8:	fba2 2303 	umull	r2, r3, r2, r3
 80098fc:	095b      	lsrs	r3, r3, #5
 80098fe:	f003 0207 	and.w	r2, r3, #7
 8009902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4432      	add	r2, r6
 800990a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800990c:	e1b6      	b.n	8009c7c <UART_SetConfig+0x770>
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800990e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	4b70      	ldr	r3, [pc, #448]	; (8009ad8 <UART_SetConfig+0x5cc>)
 8009916:	429a      	cmp	r2, r3
 8009918:	d012      	beq.n	8009940 <UART_SetConfig+0x434>
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	4b6e      	ldr	r3, [pc, #440]	; (8009adc <UART_SetConfig+0x5d0>)
 8009922:	429a      	cmp	r2, r3
 8009924:	d00c      	beq.n	8009940 <UART_SetConfig+0x434>
 8009926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	4b6c      	ldr	r3, [pc, #432]	; (8009ae0 <UART_SetConfig+0x5d4>)
 800992e:	429a      	cmp	r2, r3
 8009930:	d006      	beq.n	8009940 <UART_SetConfig+0x434>
 8009932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b6a      	ldr	r3, [pc, #424]	; (8009ae4 <UART_SetConfig+0x5d8>)
 800993a:	429a      	cmp	r2, r3
 800993c:	f040 80d4 	bne.w	8009ae8 <UART_SetConfig+0x5dc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009940:	f7fd fca8 	bl	8007294 <HAL_RCC_GetPCLK2Freq>
 8009944:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009948:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800994c:	461c      	mov	r4, r3
 800994e:	f04f 0500 	mov.w	r5, #0
 8009952:	4622      	mov	r2, r4
 8009954:	462b      	mov	r3, r5
 8009956:	1891      	adds	r1, r2, r2
 8009958:	62b9      	str	r1, [r7, #40]	; 0x28
 800995a:	415b      	adcs	r3, r3
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009962:	1912      	adds	r2, r2, r4
 8009964:	eb45 0303 	adc.w	r3, r5, r3
 8009968:	f04f 0000 	mov.w	r0, #0
 800996c:	f04f 0100 	mov.w	r1, #0
 8009970:	00d9      	lsls	r1, r3, #3
 8009972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009976:	00d0      	lsls	r0, r2, #3
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	eb12 0a04 	adds.w	sl, r2, r4
 8009980:	eb43 0b05 	adc.w	fp, r3, r5
 8009984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	4618      	mov	r0, r3
 800998c:	f04f 0100 	mov.w	r1, #0
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	f04f 0300 	mov.w	r3, #0
 8009998:	008b      	lsls	r3, r1, #2
 800999a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800999e:	0082      	lsls	r2, r0, #2
 80099a0:	4650      	mov	r0, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	f7f7 f920 	bl	8000be8 <__aeabi_uldivmod>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4b49      	ldr	r3, [pc, #292]	; (8009ad4 <UART_SetConfig+0x5c8>)
 80099ae:	fba3 2302 	umull	r2, r3, r3, r2
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	011e      	lsls	r6, r3, #4
 80099b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099ba:	4618      	mov	r0, r3
 80099bc:	f04f 0100 	mov.w	r1, #0
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	1894      	adds	r4, r2, r2
 80099c6:	623c      	str	r4, [r7, #32]
 80099c8:	415b      	adcs	r3, r3
 80099ca:	627b      	str	r3, [r7, #36]	; 0x24
 80099cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099d0:	1812      	adds	r2, r2, r0
 80099d2:	eb41 0303 	adc.w	r3, r1, r3
 80099d6:	f04f 0400 	mov.w	r4, #0
 80099da:	f04f 0500 	mov.w	r5, #0
 80099de:	00dd      	lsls	r5, r3, #3
 80099e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099e4:	00d4      	lsls	r4, r2, #3
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	1814      	adds	r4, r2, r0
 80099ec:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80099f0:	414b      	adcs	r3, r1
 80099f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f04f 0100 	mov.w	r1, #0
 8009a02:	f04f 0200 	mov.w	r2, #0
 8009a06:	f04f 0300 	mov.w	r3, #0
 8009a0a:	008b      	lsls	r3, r1, #2
 8009a0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a10:	0082      	lsls	r2, r0, #2
 8009a12:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009a16:	f7f7 f8e7 	bl	8000be8 <__aeabi_uldivmod>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <UART_SetConfig+0x5c8>)
 8009a20:	fba3 1302 	umull	r1, r3, r3, r2
 8009a24:	095b      	lsrs	r3, r3, #5
 8009a26:	2164      	movs	r1, #100	; 0x64
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	011b      	lsls	r3, r3, #4
 8009a30:	3332      	adds	r3, #50	; 0x32
 8009a32:	4a28      	ldr	r2, [pc, #160]	; (8009ad4 <UART_SetConfig+0x5c8>)
 8009a34:	fba2 2303 	umull	r2, r3, r2, r3
 8009a38:	095b      	lsrs	r3, r3, #5
 8009a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a3e:	441e      	add	r6, r3
 8009a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f04f 0100 	mov.w	r1, #0
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	1894      	adds	r4, r2, r2
 8009a50:	61bc      	str	r4, [r7, #24]
 8009a52:	415b      	adcs	r3, r3
 8009a54:	61fb      	str	r3, [r7, #28]
 8009a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a5a:	1812      	adds	r2, r2, r0
 8009a5c:	eb41 0303 	adc.w	r3, r1, r3
 8009a60:	f04f 0400 	mov.w	r4, #0
 8009a64:	f04f 0500 	mov.w	r5, #0
 8009a68:	00dd      	lsls	r5, r3, #3
 8009a6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a6e:	00d4      	lsls	r4, r2, #3
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	1814      	adds	r4, r2, r0
 8009a76:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009a7a:	414b      	adcs	r3, r1
 8009a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f04f 0100 	mov.w	r1, #0
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	f04f 0300 	mov.w	r3, #0
 8009a94:	008b      	lsls	r3, r1, #2
 8009a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a9a:	0082      	lsls	r2, r0, #2
 8009a9c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009aa0:	f7f7 f8a2 	bl	8000be8 <__aeabi_uldivmod>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <UART_SetConfig+0x5c8>)
 8009aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	2164      	movs	r1, #100	; 0x64
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	3332      	adds	r3, #50	; 0x32
 8009abc:	4a05      	ldr	r2, [pc, #20]	; (8009ad4 <UART_SetConfig+0x5c8>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f003 020f 	and.w	r2, r3, #15
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4432      	add	r2, r6
 8009ad0:	609a      	str	r2, [r3, #8]
 8009ad2:	e0d3      	b.n	8009c7c <UART_SetConfig+0x770>
 8009ad4:	51eb851f 	.word	0x51eb851f
 8009ad8:	40011000 	.word	0x40011000
 8009adc:	40011400 	.word	0x40011400
 8009ae0:	40011800 	.word	0x40011800
 8009ae4:	40011c00 	.word	0x40011c00
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ae8:	f7fd fbc0 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 8009aec:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009af0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009af4:	461c      	mov	r4, r3
 8009af6:	f04f 0500 	mov.w	r5, #0
 8009afa:	4622      	mov	r2, r4
 8009afc:	462b      	mov	r3, r5
 8009afe:	1891      	adds	r1, r2, r2
 8009b00:	6139      	str	r1, [r7, #16]
 8009b02:	415b      	adcs	r3, r3
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009b0a:	1912      	adds	r2, r2, r4
 8009b0c:	eb45 0303 	adc.w	r3, r5, r3
 8009b10:	f04f 0000 	mov.w	r0, #0
 8009b14:	f04f 0100 	mov.w	r1, #0
 8009b18:	00d9      	lsls	r1, r3, #3
 8009b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b1e:	00d0      	lsls	r0, r2, #3
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	eb12 0804 	adds.w	r8, r2, r4
 8009b28:	eb43 0905 	adc.w	r9, r3, r5
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f04f 0100 	mov.w	r1, #0
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	008b      	lsls	r3, r1, #2
 8009b42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b46:	0082      	lsls	r2, r0, #2
 8009b48:	4640      	mov	r0, r8
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	f7f7 f84c 	bl	8000be8 <__aeabi_uldivmod>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4b4c      	ldr	r3, [pc, #304]	; (8009c88 <UART_SetConfig+0x77c>)
 8009b56:	fba3 2302 	umull	r2, r3, r3, r2
 8009b5a:	095b      	lsrs	r3, r3, #5
 8009b5c:	011e      	lsls	r6, r3, #4
 8009b5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b62:	4618      	mov	r0, r3
 8009b64:	f04f 0100 	mov.w	r1, #0
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	1894      	adds	r4, r2, r2
 8009b6e:	60bc      	str	r4, [r7, #8]
 8009b70:	415b      	adcs	r3, r3
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b78:	1812      	adds	r2, r2, r0
 8009b7a:	eb41 0303 	adc.w	r3, r1, r3
 8009b7e:	f04f 0400 	mov.w	r4, #0
 8009b82:	f04f 0500 	mov.w	r5, #0
 8009b86:	00dd      	lsls	r5, r3, #3
 8009b88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b8c:	00d4      	lsls	r4, r2, #3
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	1814      	adds	r4, r2, r0
 8009b94:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009b98:	414b      	adcs	r3, r1
 8009b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f04f 0100 	mov.w	r1, #0
 8009baa:	f04f 0200 	mov.w	r2, #0
 8009bae:	f04f 0300 	mov.w	r3, #0
 8009bb2:	008b      	lsls	r3, r1, #2
 8009bb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009bb8:	0082      	lsls	r2, r0, #2
 8009bba:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bbe:	f7f7 f813 	bl	8000be8 <__aeabi_uldivmod>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4b30      	ldr	r3, [pc, #192]	; (8009c88 <UART_SetConfig+0x77c>)
 8009bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	2164      	movs	r1, #100	; 0x64
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	3332      	adds	r3, #50	; 0x32
 8009bda:	4a2b      	ldr	r2, [pc, #172]	; (8009c88 <UART_SetConfig+0x77c>)
 8009bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009be6:	441e      	add	r6, r3
 8009be8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bec:	4618      	mov	r0, r3
 8009bee:	f04f 0100 	mov.w	r1, #0
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	1894      	adds	r4, r2, r2
 8009bf8:	603c      	str	r4, [r7, #0]
 8009bfa:	415b      	adcs	r3, r3
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c02:	1812      	adds	r2, r2, r0
 8009c04:	eb41 0303 	adc.w	r3, r1, r3
 8009c08:	f04f 0400 	mov.w	r4, #0
 8009c0c:	f04f 0500 	mov.w	r5, #0
 8009c10:	00dd      	lsls	r5, r3, #3
 8009c12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c16:	00d4      	lsls	r4, r2, #3
 8009c18:	4622      	mov	r2, r4
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	1814      	adds	r4, r2, r0
 8009c1e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009c22:	414b      	adcs	r3, r1
 8009c24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f04f 0100 	mov.w	r1, #0
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	f04f 0300 	mov.w	r3, #0
 8009c3c:	008b      	lsls	r3, r1, #2
 8009c3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c42:	0082      	lsls	r2, r0, #2
 8009c44:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009c48:	f7f6 ffce 	bl	8000be8 <__aeabi_uldivmod>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <UART_SetConfig+0x77c>)
 8009c52:	fba3 1302 	umull	r1, r3, r3, r2
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	2164      	movs	r1, #100	; 0x64
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	3332      	adds	r3, #50	; 0x32
 8009c64:	4a08      	ldr	r2, [pc, #32]	; (8009c88 <UART_SetConfig+0x77c>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4432      	add	r2, r6
 8009c78:	609a      	str	r2, [r3, #8]
}
 8009c7a:	e7ff      	b.n	8009c7c <UART_SetConfig+0x770>
 8009c7c:	bf00      	nop
 8009c7e:	37f4      	adds	r7, #244	; 0xf4
 8009c80:	46bd      	mov	sp, r7
 8009c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c86:	bf00      	nop
 8009c88:	51eb851f 	.word	0x51eb851f

08009c8c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4b2f      	ldr	r3, [pc, #188]	; (8009d68 <FSMC_NORSRAM_Init+0xdc>)
 8009caa:	4013      	ands	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009cb6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009cbc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009cc2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009cc8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8009cce:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009cd4:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009cda:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009ce0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009ce6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8009cec:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8009cf2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8009cf8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8009cfe:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	d103      	bne.n	8009d16 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d14:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d2a:	d10a      	bne.n	8009d42 <FSMC_NORSRAM_Init+0xb6>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d006      	beq.n	8009d58 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	431a      	orrs	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	ffc00480 	.word	0xffc00480

08009d6c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d86:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009d8e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009d9a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009da2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009daa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009db4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	3b02      	subs	r3, #2
 8009dbc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009dbe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6979      	ldr	r1, [r7, #20]
 8009dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de4:	d10e      	bne.n	8009e04 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dee:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	051b      	lsls	r3, r3, #20
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
	...

08009e14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e2c:	d122      	bne.n	8009e74 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e36:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	4b15      	ldr	r3, [pc, #84]	; (8009e90 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e4a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009e52:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009e5a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009e60:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6979      	ldr	r1, [r7, #20]
 8009e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009e72:	e005      	b.n	8009e80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	371c      	adds	r7, #28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	cff00000 	.word	0xcff00000

08009e94 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009e94:	b084      	sub	sp, #16
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	f107 001c 	add.w	r0, r7, #28
 8009ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009eaa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009eac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009eae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009eb2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009eb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009eba:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009ebe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009ece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	b004      	add	sp, #16
 8009ee8:	4770      	bx	lr

08009eea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2203      	movs	r2, #3
 8009f10:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009f12:	2002      	movs	r0, #2
 8009f14:	f7f9 fd2c 	bl	8003970 <HAL_Delay>
  
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0303 	and.w	r3, r3, #3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f5c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009f62:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009f68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009f78:	f023 030f 	bic.w	r3, r3, #15
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	b2db      	uxtb	r3, r3
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3314      	adds	r3, #20
 8009fba:	461a      	mov	r2, r3
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
}  
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ff8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009ffe:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a004:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0

}
 800a01e:	4618      	mov	r0, r3
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a038:	2310      	movs	r3, #16
 800a03a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a03c:	2340      	movs	r3, #64	; 0x40
 800a03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a048:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a04a:	f107 0308 	add.w	r3, r7, #8
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ff74 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a056:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05a:	2110      	movs	r1, #16
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f975 	bl	800a34c <SDMMC_GetCmdResp1>
 800a062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a064:	69fb      	ldr	r3, [r7, #28]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3720      	adds	r7, #32
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b08a      	sub	sp, #40	; 0x28
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a07e:	2307      	movs	r3, #7
 800a080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a082:	2340      	movs	r3, #64	; 0x40
 800a084:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a086:	2300      	movs	r3, #0
 800a088:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a08e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a090:	f107 0310 	add.w	r3, r7, #16
 800a094:	4619      	mov	r1, r3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff ff51 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a09c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a0:	2107      	movs	r1, #7
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 f952 	bl	800a34c <SDMMC_GetCmdResp1>
 800a0a8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3728      	adds	r7, #40	; 0x28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff30 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f90c 	bl	800a2fc <SDMMC_GetCmdError>
 800a0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0e6:	69fb      	ldr	r3, [r7, #28]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3720      	adds	r7, #32
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a0f8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a0fe:	2308      	movs	r3, #8
 800a100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a102:	2340      	movs	r3, #64	; 0x40
 800a104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a10e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a110:	f107 0308 	add.w	r3, r7, #8
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff ff11 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 faf5 	bl	800a70c <SDMMC_GetCmdResp7>
 800a122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a124:	69fb      	ldr	r3, [r7, #28]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3720      	adds	r7, #32
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b088      	sub	sp, #32
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a13c:	2337      	movs	r3, #55	; 0x37
 800a13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a14e:	f107 0308 	add.w	r3, r7, #8
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fef2 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15e:	2137      	movs	r1, #55	; 0x37
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f8f3 	bl	800a34c <SDMMC_GetCmdResp1>
 800a166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a168:	69fb      	ldr	r3, [r7, #28]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b088      	sub	sp, #32
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a188:	2329      	movs	r3, #41	; 0x29
 800a18a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a19a:	f107 0308 	add.w	r3, r7, #8
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff fecc 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa02 	bl	800a5b0 <SDMMC_GetCmdResp3>
 800a1ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3720      	adds	r7, #32
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a1c6:	2306      	movs	r3, #6
 800a1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1ca:	2340      	movs	r3, #64	; 0x40
 800a1cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1d8:	f107 0308 	add.w	r3, r7, #8
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff fead 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e8:	2106      	movs	r1, #6
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f8ae 	bl	800a34c <SDMMC_GetCmdResp1>
 800a1f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b088      	sub	sp, #32
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a208:	2333      	movs	r3, #51	; 0x33
 800a20a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a20c:	2340      	movs	r3, #64	; 0x40
 800a20e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a21a:	f107 0308 	add.w	r3, r7, #8
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff fe8c 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a226:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22a:	2133      	movs	r1, #51	; 0x33
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f88d 	bl	800a34c <SDMMC_GetCmdResp1>
 800a232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a234:	69fb      	ldr	r3, [r7, #28]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3720      	adds	r7, #32
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b088      	sub	sp, #32
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a24a:	2302      	movs	r3, #2
 800a24c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a24e:	23c0      	movs	r3, #192	; 0xc0
 800a250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a25c:	f107 0308 	add.w	r3, r7, #8
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff fe6b 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f95b 	bl	800a524 <SDMMC_GetCmdResp2>
 800a26e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a270:	69fb      	ldr	r3, [r7, #28]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b088      	sub	sp, #32
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a288:	2309      	movs	r3, #9
 800a28a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a28c:	23c0      	movs	r3, #192	; 0xc0
 800a28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a298:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7ff fe4c 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f93c 	bl	800a524 <SDMMC_GetCmdResp2>
 800a2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ae:	69fb      	ldr	r3, [r7, #28]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3720      	adds	r7, #32
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2ca:	2340      	movs	r3, #64	; 0x40
 800a2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2d8:	f107 0308 	add.w	r3, r7, #8
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff fe2d 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	2103      	movs	r1, #3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f99b 	bl	800a624 <SDMMC_GetCmdResp6>
 800a2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a2fc:	b490      	push	{r4, r7}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a304:	4b0f      	ldr	r3, [pc, #60]	; (800a344 <SDMMC_GetCmdError+0x48>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a0f      	ldr	r2, [pc, #60]	; (800a348 <SDMMC_GetCmdError+0x4c>)
 800a30a:	fba2 2303 	umull	r2, r3, r2, r3
 800a30e:	0a5b      	lsrs	r3, r3, #9
 800a310:	f241 3288 	movw	r2, #5000	; 0x1388
 800a314:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a318:	4623      	mov	r3, r4
 800a31a:	1e5c      	subs	r4, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a320:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a324:	e009      	b.n	800a33a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f2      	beq.n	800a318 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	22c5      	movs	r2, #197	; 0xc5
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc90      	pop	{r4, r7}
 800a342:	4770      	bx	lr
 800a344:	20000000 	.word	0x20000000
 800a348:	10624dd3 	.word	0x10624dd3

0800a34c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a34c:	b590      	push	{r4, r7, lr}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	460b      	mov	r3, r1
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a35a:	4b6f      	ldr	r3, [pc, #444]	; (800a518 <SDMMC_GetCmdResp1+0x1cc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a6f      	ldr	r2, [pc, #444]	; (800a51c <SDMMC_GetCmdResp1+0x1d0>)
 800a360:	fba2 2303 	umull	r2, r3, r2, r3
 800a364:	0a5b      	lsrs	r3, r3, #9
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a36c:	4623      	mov	r3, r4
 800a36e:	1e5c      	subs	r4, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a378:	e0c9      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0f0      	beq.n	800a36c <SDMMC_GetCmdResp1+0x20>
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1eb      	bne.n	800a36c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2204      	movs	r2, #4
 800a3a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3a6:	2304      	movs	r3, #4
 800a3a8:	e0b1      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e0a6      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	22c5      	movs	r2, #197	; 0xc5
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fde3 	bl	8009f92 <SDIO_GetCommandResponse>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	7afb      	ldrb	r3, [r7, #11]
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d001      	beq.n	800a3da <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e099      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a3da:	2100      	movs	r1, #0
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff fde5 	bl	8009fac <SDIO_GetResponse>
 800a3e2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4b4e      	ldr	r3, [pc, #312]	; (800a520 <SDMMC_GetCmdResp1+0x1d4>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e08d      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	da02      	bge.n	800a3fe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3fc:	e087      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	e080      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a416:	2380      	movs	r3, #128	; 0x80
 800a418:	e079      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a424:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a428:	e071      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a434:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a438:	e069      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a448:	e061      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a458:	e059      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a468:	e051      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a478:	e049      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a484:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a488:	e041      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a498:	e039      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4a8:	e031      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4b8:	e029      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4c8:	e021      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a4d8:	e019      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4e8:	e011      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a4f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4f8:	e009      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a504:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a508:	e001      	b.n	800a50e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a50a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a50e:	4618      	mov	r0, r3
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd90      	pop	{r4, r7, pc}
 800a516:	bf00      	nop
 800a518:	20000000 	.word	0x20000000
 800a51c:	10624dd3 	.word	0x10624dd3
 800a520:	fdffe008 	.word	0xfdffe008

0800a524 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a524:	b490      	push	{r4, r7}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a52c:	4b1e      	ldr	r3, [pc, #120]	; (800a5a8 <SDMMC_GetCmdResp2+0x84>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1e      	ldr	r2, [pc, #120]	; (800a5ac <SDMMC_GetCmdResp2+0x88>)
 800a532:	fba2 2303 	umull	r2, r3, r2, r3
 800a536:	0a5b      	lsrs	r3, r3, #9
 800a538:	f241 3288 	movw	r2, #5000	; 0x1388
 800a53c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a540:	4623      	mov	r3, r4
 800a542:	1e5c      	subs	r4, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a54c:	e026      	b.n	800a59c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a552:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0f0      	beq.n	800a540 <SDMMC_GetCmdResp2+0x1c>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1eb      	bne.n	800a540 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2204      	movs	r2, #4
 800a578:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a57a:	2304      	movs	r3, #4
 800a57c:	e00e      	b.n	800a59c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a590:	2301      	movs	r3, #1
 800a592:	e003      	b.n	800a59c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	22c5      	movs	r2, #197	; 0xc5
 800a598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc90      	pop	{r4, r7}
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000000 	.word	0x20000000
 800a5ac:	10624dd3 	.word	0x10624dd3

0800a5b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a5b0:	b490      	push	{r4, r7}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5b8:	4b18      	ldr	r3, [pc, #96]	; (800a61c <SDMMC_GetCmdResp3+0x6c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a18      	ldr	r2, [pc, #96]	; (800a620 <SDMMC_GetCmdResp3+0x70>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	0a5b      	lsrs	r3, r3, #9
 800a5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	1e5c      	subs	r4, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d102      	bne.n	800a5da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5d8:	e01b      	b.n	800a612 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0f0      	beq.n	800a5cc <SDMMC_GetCmdResp3+0x1c>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1eb      	bne.n	800a5cc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d004      	beq.n	800a60a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2204      	movs	r2, #4
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a606:	2304      	movs	r3, #4
 800a608:	e003      	b.n	800a612 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	22c5      	movs	r2, #197	; 0xc5
 800a60e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bc90      	pop	{r4, r7}
 800a61a:	4770      	bx	lr
 800a61c:	20000000 	.word	0x20000000
 800a620:	10624dd3 	.word	0x10624dd3

0800a624 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	460b      	mov	r3, r1
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a632:	4b34      	ldr	r3, [pc, #208]	; (800a704 <SDMMC_GetCmdResp6+0xe0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a34      	ldr	r2, [pc, #208]	; (800a708 <SDMMC_GetCmdResp6+0xe4>)
 800a638:	fba2 2303 	umull	r2, r3, r2, r3
 800a63c:	0a5b      	lsrs	r3, r3, #9
 800a63e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a642:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a646:	4623      	mov	r3, r4
 800a648:	1e5c      	subs	r4, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d102      	bne.n	800a654 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a64e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a652:	e052      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a658:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a660:	2b00      	cmp	r3, #0
 800a662:	d0f0      	beq.n	800a646 <SDMMC_GetCmdResp6+0x22>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1eb      	bne.n	800a646 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	d004      	beq.n	800a684 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2204      	movs	r2, #4
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a680:	2304      	movs	r3, #4
 800a682:	e03a      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2201      	movs	r2, #1
 800a694:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a696:	2301      	movs	r3, #1
 800a698:	e02f      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fc79 	bl	8009f92 <SDIO_GetCommandResponse>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	7afb      	ldrb	r3, [r7, #11]
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d001      	beq.n	800a6ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e025      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	22c5      	movs	r2, #197	; 0xc5
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fc78 	bl	8009fac <SDIO_GetResponse>
 800a6bc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	0c1b      	lsrs	r3, r3, #16
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e011      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6e4:	e009      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6f4:	e001      	b.n	800a6fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd90      	pop	{r4, r7, pc}
 800a702:	bf00      	nop
 800a704:	20000000 	.word	0x20000000
 800a708:	10624dd3 	.word	0x10624dd3

0800a70c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a70c:	b490      	push	{r4, r7}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a714:	4b21      	ldr	r3, [pc, #132]	; (800a79c <SDMMC_GetCmdResp7+0x90>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a21      	ldr	r2, [pc, #132]	; (800a7a0 <SDMMC_GetCmdResp7+0x94>)
 800a71a:	fba2 2303 	umull	r2, r3, r2, r3
 800a71e:	0a5b      	lsrs	r3, r3, #9
 800a720:	f241 3288 	movw	r2, #5000	; 0x1388
 800a724:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a728:	4623      	mov	r3, r4
 800a72a:	1e5c      	subs	r4, r3, #1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a734:	e02c      	b.n	800a790 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0f0      	beq.n	800a728 <SDMMC_GetCmdResp7+0x1c>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1eb      	bne.n	800a728 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a754:	f003 0304 	and.w	r3, r3, #4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2204      	movs	r2, #4
 800a760:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a762:	2304      	movs	r3, #4
 800a764:	e014      	b.n	800a790 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a778:	2301      	movs	r3, #1
 800a77a:	e009      	b.n	800a790 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2240      	movs	r2, #64	; 0x40
 800a78c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a78e:	2300      	movs	r3, #0
  
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bc90      	pop	{r4, r7}
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20000000 	.word	0x20000000
 800a7a0:	10624dd3 	.word	0x10624dd3

0800a7a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	f107 001c 	add.w	r0, r7, #28
 800a7b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d122      	bne.n	800a802 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a7d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d105      	bne.n	800a7f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f94a 	bl	800aa90 <USB_CoreReset>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
 800a800:	e01a      	b.n	800a838 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f93e 	bl	800aa90 <USB_CoreReset>
 800a814:	4603      	mov	r3, r0
 800a816:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d106      	bne.n	800a82c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
 800a82a:	e005      	b.n	800a838 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d10b      	bne.n	800a856 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f043 0206 	orr.w	r2, r3, #6
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f043 0220 	orr.w	r2, r3, #32
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a862:	b004      	add	sp, #16
 800a864:	4770      	bx	lr

0800a866 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f043 0201 	orr.w	r2, r3, #1
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f023 0201 	bic.w	r2, r3, #1
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d106      	bne.n	800a8d6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	60da      	str	r2, [r3, #12]
 800a8d4:	e00b      	b.n	800a8ee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	60da      	str	r2, [r3, #12]
 800a8e8:	e001      	b.n	800a8ee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e003      	b.n	800a8f6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a8ee:	2032      	movs	r0, #50	; 0x32
 800a8f0:	f7f9 f83e 	bl	8003970 <HAL_Delay>

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	019b      	lsls	r3, r3, #6
 800a912:	f043 0220 	orr.w	r2, r3, #32
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3301      	adds	r3, #1
 800a91e:	60fb      	str	r3, [r7, #12]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4a09      	ldr	r2, [pc, #36]	; (800a948 <USB_FlushTxFifo+0x48>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d901      	bls.n	800a92c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e006      	b.n	800a93a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	f003 0320 	and.w	r3, r3, #32
 800a934:	2b20      	cmp	r3, #32
 800a936:	d0f0      	beq.n	800a91a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	00030d40 	.word	0x00030d40

0800a94c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2210      	movs	r2, #16
 800a95c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3301      	adds	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4a09      	ldr	r2, [pc, #36]	; (800a98c <USB_FlushRxFifo+0x40>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d901      	bls.n	800a970 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e006      	b.n	800a97e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	f003 0310 	and.w	r3, r3, #16
 800a978:	2b10      	cmp	r3, #16
 800a97a:	d0f0      	beq.n	800a95e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	00030d40 	.word	0x00030d40

0800a990 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a990:	b480      	push	{r7}
 800a992:	b089      	sub	sp, #36	; 0x24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	4611      	mov	r1, r2
 800a99c:	461a      	mov	r2, r3
 800a99e:	460b      	mov	r3, r1
 800a9a0:	71fb      	strb	r3, [r7, #7]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a9ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d11a      	bne.n	800a9ec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9b6:	88bb      	ldrh	r3, [r7, #4]
 800a9b8:	3303      	adds	r3, #3
 800a9ba:	089b      	lsrs	r3, r3, #2
 800a9bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	e00f      	b.n	800a9e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	031a      	lsls	r2, r3, #12
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	61bb      	str	r3, [r7, #24]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d3eb      	bcc.n	800a9c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3724      	adds	r7, #36	; 0x24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b089      	sub	sp, #36	; 0x24
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	60b9      	str	r1, [r7, #8]
 800aa04:	4613      	mov	r3, r2
 800aa06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	3303      	adds	r3, #3
 800aa14:	089b      	lsrs	r3, r3, #2
 800aa16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aa18:	2300      	movs	r3, #0
 800aa1a:	61bb      	str	r3, [r7, #24]
 800aa1c:	e00b      	b.n	800aa36 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	3301      	adds	r3, #1
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d3ef      	bcc.n	800aa1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aa3e:	69fb      	ldr	r3, [r7, #28]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3724      	adds	r7, #36	; 0x24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4013      	ands	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa64:	68fb      	ldr	r3, [r7, #12]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f003 0301 	and.w	r3, r3, #1
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4a13      	ldr	r2, [pc, #76]	; (800aaf4 <USB_CoreReset+0x64>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d901      	bls.n	800aaae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e01b      	b.n	800aae6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	daf2      	bge.n	800aa9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f043 0201 	orr.w	r2, r3, #1
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a09      	ldr	r2, [pc, #36]	; (800aaf4 <USB_CoreReset+0x64>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d901      	bls.n	800aad8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e006      	b.n	800aae6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	f003 0301 	and.w	r3, r3, #1
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d0f0      	beq.n	800aac6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	00030d40 	.word	0x00030d40

0800aaf8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aaf8:	b084      	sub	sp, #16
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	f107 001c 	add.w	r0, r7, #28
 800ab06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab14:	461a      	mov	r2, r3
 800ab16:	2300      	movs	r3, #0
 800ab18:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d018      	beq.n	800ab70 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d10a      	bne.n	800ab5a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab52:	f043 0304 	orr.w	r3, r3, #4
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	e014      	b.n	800ab84 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab68:	f023 0304 	bic.w	r3, r3, #4
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	e009      	b.n	800ab84 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab7e:	f023 0304 	bic.w	r3, r3, #4
 800ab82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ab84:	2110      	movs	r1, #16
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f7ff feba 	bl	800a900 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff fedd 	bl	800a94c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab92:	2300      	movs	r3, #0
 800ab94:	60fb      	str	r3, [r7, #12]
 800ab96:	e015      	b.n	800abc4 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	015a      	lsls	r2, r3, #5
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	4413      	add	r3, r2
 800aba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba4:	461a      	mov	r2, r3
 800aba6:	f04f 33ff 	mov.w	r3, #4294967295
 800abaa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb8:	461a      	mov	r2, r3
 800abba:	2300      	movs	r3, #0
 800abbc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d3e5      	bcc.n	800ab98 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800abcc:	2101      	movs	r1, #1
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f8ac 	bl	800ad2c <USB_DriveVbus>

  HAL_Delay(200U);
 800abd4:	20c8      	movs	r0, #200	; 0xc8
 800abd6:	f7f8 fecb 	bl	8003970 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f04f 32ff 	mov.w	r2, #4294967295
 800abe6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abfa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4a14      	ldr	r2, [pc, #80]	; (800ac50 <USB_HostInit+0x158>)
 800ac00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a13      	ldr	r2, [pc, #76]	; (800ac54 <USB_HostInit+0x15c>)
 800ac06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ac0a:	e009      	b.n	800ac20 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2280      	movs	r2, #128	; 0x80
 800ac10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a10      	ldr	r2, [pc, #64]	; (800ac58 <USB_HostInit+0x160>)
 800ac16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a10      	ldr	r2, [pc, #64]	; (800ac5c <USB_HostInit+0x164>)
 800ac1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d105      	bne.n	800ac32 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	f043 0210 	orr.w	r2, r3, #16
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699a      	ldr	r2, [r3, #24]
 800ac36:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <USB_HostInit+0x168>)
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac4a:	b004      	add	sp, #16
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	01000200 	.word	0x01000200
 800ac54:	00e00300 	.word	0x00e00300
 800ac58:	00600080 	.word	0x00600080
 800ac5c:	004000e0 	.word	0x004000e0
 800ac60:	a3200008 	.word	0xa3200008

0800ac64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac82:	f023 0303 	bic.w	r3, r3, #3
 800ac86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	f003 0303 	and.w	r3, r3, #3
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d107      	bne.n	800acb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acac:	461a      	mov	r2, r3
 800acae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800acb2:	6053      	str	r3, [r2, #4]
 800acb4:	e009      	b.n	800acca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d106      	bne.n	800acca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acc2:	461a      	mov	r2, r3
 800acc4:	f241 7370 	movw	r3, #6000	; 0x1770
 800acc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800acf8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ad08:	2064      	movs	r0, #100	; 0x64
 800ad0a:	f7f8 fe31 	bl	8003970 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ad1c:	200a      	movs	r0, #10
 800ad1e:	f7f8 fe27 	bl	8003970 <HAL_Delay>

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ad50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d109      	bne.n	800ad70 <USB_DriveVbus+0x44>
 800ad5c:	78fb      	ldrb	r3, [r7, #3]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d106      	bne.n	800ad70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad7a:	d109      	bne.n	800ad90 <USB_DriveVbus+0x64>
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d106      	bne.n	800ad90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ad8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b085      	sub	sp, #20
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	0c5b      	lsrs	r3, r3, #17
 800adbc:	f003 0303 	and.w	r3, r3, #3
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	b29b      	uxth	r3, r3
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
	...

0800adf0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	4608      	mov	r0, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	4603      	mov	r3, r0
 800ae00:	70fb      	strb	r3, [r7, #3]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70bb      	strb	r3, [r7, #2]
 800ae06:	4613      	mov	r3, r2
 800ae08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ae12:	78fb      	ldrb	r3, [r7, #3]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f04f 33ff 	mov.w	r3, #4294967295
 800ae24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ae26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d87e      	bhi.n	800af2c <USB_HC_Init+0x13c>
 800ae2e:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <USB_HC_Init+0x44>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800ae45 	.word	0x0800ae45
 800ae38:	0800aeef 	.word	0x0800aeef
 800ae3c:	0800ae45 	.word	0x0800ae45
 800ae40:	0800aeb1 	.word	0x0800aeb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae50:	461a      	mov	r2, r3
 800ae52:	f240 439d 	movw	r3, #1181	; 0x49d
 800ae56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ae58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	da10      	bge.n	800ae82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ae60:	78fb      	ldrb	r3, [r7, #3]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	78fa      	ldrb	r2, [r7, #3]
 800ae70:	0151      	lsls	r1, r2, #5
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	440a      	add	r2, r1
 800ae76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae7e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ae80:	e057      	b.n	800af32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d051      	beq.n	800af32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ae8e:	78fb      	ldrb	r3, [r7, #3]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	0151      	lsls	r1, r2, #5
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	440a      	add	r2, r1
 800aea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aea8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aeac:	60d3      	str	r3, [r2, #12]
      break;
 800aeae:	e040      	b.n	800af32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aebc:	461a      	mov	r2, r3
 800aebe:	f240 639d 	movw	r3, #1693	; 0x69d
 800aec2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aec4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da34      	bge.n	800af36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	78fa      	ldrb	r2, [r7, #3]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeea:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aeec:	e023      	b.n	800af36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aeee:	78fb      	ldrb	r3, [r7, #3]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aefa:	461a      	mov	r2, r3
 800aefc:	f240 2325 	movw	r3, #549	; 0x225
 800af00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af06:	2b00      	cmp	r3, #0
 800af08:	da17      	bge.n	800af3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	4413      	add	r3, r2
 800af12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	0151      	lsls	r1, r2, #5
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	440a      	add	r2, r1
 800af20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800af28:	60d3      	str	r3, [r2, #12]
      }
      break;
 800af2a:	e006      	b.n	800af3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	75fb      	strb	r3, [r7, #23]
      break;
 800af30:	e004      	b.n	800af3c <USB_HC_Init+0x14c>
      break;
 800af32:	bf00      	nop
 800af34:	e002      	b.n	800af3c <USB_HC_Init+0x14c>
      break;
 800af36:	bf00      	nop
 800af38:	e000      	b.n	800af3c <USB_HC_Init+0x14c>
      break;
 800af3a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	2101      	movs	r1, #1
 800af4c:	fa01 f303 	lsl.w	r3, r1, r3
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800af56:	4313      	orrs	r3, r2
 800af58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800af66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da03      	bge.n	800af76 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800af6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	e001      	b.n	800af7a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800af7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d103      	bne.n	800af8a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800af82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	e001      	b.n	800af8e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af8e:	787b      	ldrb	r3, [r7, #1]
 800af90:	059b      	lsls	r3, r3, #22
 800af92:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800af96:	78bb      	ldrb	r3, [r7, #2]
 800af98:	02db      	lsls	r3, r3, #11
 800af9a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800af9e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800afa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800afa4:	049b      	lsls	r3, r3, #18
 800afa6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800afaa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800afac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800afb2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800afb8:	78fb      	ldrb	r3, [r7, #3]
 800afba:	0159      	lsls	r1, r3, #5
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	440b      	add	r3, r1
 800afc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800afca:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800afcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d10f      	bne.n	800aff4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800afd4:	78fb      	ldrb	r3, [r7, #3]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	78fa      	ldrb	r2, [r7, #3]
 800afe4:	0151      	lsls	r1, r2, #5
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	440a      	add	r2, r1
 800afea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aff2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop

0800b004 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08c      	sub	sp, #48	; 0x30
 800b008:	af02      	add	r7, sp, #8
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4613      	mov	r3, r2
 800b010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	785b      	ldrb	r3, [r3, #1]
 800b01a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b01c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b020:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d028      	beq.n	800b080 <USB_HC_StartXfer+0x7c>
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	791b      	ldrb	r3, [r3, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d124      	bne.n	800b080 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10b      	bne.n	800b054 <USB_HC_StartXfer+0x50>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	795b      	ldrb	r3, [r3, #5]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d107      	bne.n	800b054 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	785b      	ldrb	r3, [r3, #1]
 800b048:	4619      	mov	r1, r3
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 fa2e 	bl	800b4ac <USB_DoPing>
      return HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	e113      	b.n	800b27c <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d112      	bne.n	800b080 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	4413      	add	r3, r2
 800b062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	69fa      	ldr	r2, [r7, #28]
 800b06a:	0151      	lsls	r1, r2, #5
 800b06c:	6a3a      	ldr	r2, [r7, #32]
 800b06e:	440a      	add	r2, r1
 800b070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b074:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b078:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2200      	movs	r2, #0
 800b07e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d018      	beq.n	800b0ba <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	8912      	ldrh	r2, [r2, #8]
 800b090:	4413      	add	r3, r2
 800b092:	3b01      	subs	r3, #1
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	8912      	ldrh	r2, [r2, #8]
 800b098:	fbb3 f3f2 	udiv	r3, r3, r2
 800b09c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b09e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b0a0:	8b7b      	ldrh	r3, [r7, #26]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d90b      	bls.n	800b0be <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b0a6:	8b7b      	ldrh	r3, [r7, #26]
 800b0a8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b0aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	8912      	ldrh	r2, [r2, #8]
 800b0b0:	fb02 f203 	mul.w	r2, r2, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	611a      	str	r2, [r3, #16]
 800b0b8:	e001      	b.n	800b0be <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	78db      	ldrb	r3, [r3, #3]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d006      	beq.n	800b0d4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b0c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	8912      	ldrh	r2, [r2, #8]
 800b0cc:	fb02 f203 	mul.w	r2, r2, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b0dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0de:	04d9      	lsls	r1, r3, #19
 800b0e0:	4b68      	ldr	r3, [pc, #416]	; (800b284 <USB_HC_StartXfer+0x280>)
 800b0e2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b0e4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	7a9b      	ldrb	r3, [r3, #10]
 800b0ea:	075b      	lsls	r3, r3, #29
 800b0ec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b0f0:	69f9      	ldr	r1, [r7, #28]
 800b0f2:	0148      	lsls	r0, r1, #5
 800b0f4:	6a39      	ldr	r1, [r7, #32]
 800b0f6:	4401      	add	r1, r0
 800b0f8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b0fc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b0fe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b100:	79fb      	ldrb	r3, [r7, #7]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	68d9      	ldr	r1, [r3, #12]
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	4413      	add	r3, r2
 800b112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b116:	460a      	mov	r2, r1
 800b118:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	f003 0301 	and.w	r3, r3, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	bf0c      	ite	eq
 800b12a:	2301      	moveq	r3, #1
 800b12c:	2300      	movne	r3, #0
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69fa      	ldr	r2, [r7, #28]
 800b142:	0151      	lsls	r1, r2, #5
 800b144:	6a3a      	ldr	r2, [r7, #32]
 800b146:	440a      	add	r2, r1
 800b148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b14c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b150:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	7e7b      	ldrb	r3, [r7, #25]
 800b162:	075b      	lsls	r3, r3, #29
 800b164:	69f9      	ldr	r1, [r7, #28]
 800b166:	0148      	lsls	r0, r1, #5
 800b168:	6a39      	ldr	r1, [r7, #32]
 800b16a:	4401      	add	r1, r0
 800b16c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b170:	4313      	orrs	r3, r2
 800b172:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a41      	ldr	r2, [pc, #260]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b184:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b186:	4b40      	ldr	r3, [pc, #256]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b18e:	4a3e      	ldr	r2, [pc, #248]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b190:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	78db      	ldrb	r3, [r3, #3]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d006      	beq.n	800b1a8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b19a:	4b3b      	ldr	r3, [pc, #236]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1a2:	4a39      	ldr	r2, [pc, #228]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	e005      	b.n	800b1b4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b1a8:	4b37      	ldr	r3, [pc, #220]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1b0:	4a35      	ldr	r2, [pc, #212]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b1b2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b1b4:	4b34      	ldr	r3, [pc, #208]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1bc:	4a32      	ldr	r2, [pc, #200]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b1be:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	4b2e      	ldr	r3, [pc, #184]	; (800b288 <USB_HC_StartXfer+0x284>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e04e      	b.n	800b27c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	78db      	ldrb	r3, [r3, #3]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d149      	bne.n	800b27a <USB_HC_StartXfer+0x276>
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d045      	beq.n	800b27a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	79db      	ldrb	r3, [r3, #7]
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d830      	bhi.n	800b258 <USB_HC_StartXfer+0x254>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <USB_HC_StartXfer+0x1f8>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b20d 	.word	0x0800b20d
 800b200:	0800b231 	.word	0x0800b231
 800b204:	0800b20d 	.word	0x0800b20d
 800b208:	0800b231 	.word	0x0800b231
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	3303      	adds	r3, #3
 800b212:	089b      	lsrs	r3, r3, #2
 800b214:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b216:	8afa      	ldrh	r2, [r7, #22]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	429a      	cmp	r2, r3
 800b220:	d91c      	bls.n	800b25c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f043 0220 	orr.w	r2, r3, #32
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b22e:	e015      	b.n	800b25c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	3303      	adds	r3, #3
 800b236:	089b      	lsrs	r3, r3, #2
 800b238:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b23a:	8afa      	ldrh	r2, [r7, #22]
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	b29b      	uxth	r3, r3
 800b246:	429a      	cmp	r2, r3
 800b248:	d90a      	bls.n	800b260 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	619a      	str	r2, [r3, #24]
        }
        break;
 800b256:	e003      	b.n	800b260 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b258:	bf00      	nop
 800b25a:	e002      	b.n	800b262 <USB_HC_StartXfer+0x25e>
        break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <USB_HC_StartXfer+0x25e>
        break;
 800b260:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	68d9      	ldr	r1, [r3, #12]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	785a      	ldrb	r2, [r3, #1]
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	2000      	movs	r0, #0
 800b272:	9000      	str	r0, [sp, #0]
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f7ff fb8b 	bl	800a990 <USB_WritePacket>
  }

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3728      	adds	r7, #40	; 0x28
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	1ff80000 	.word	0x1ff80000
 800b288:	20000c6c 	.word	0x20000c6c

0800b28c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	b29b      	uxth	r3, r3
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b087      	sub	sp, #28
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	0c9b      	lsrs	r3, r3, #18
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <USB_HC_Halt+0x3a>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d16c      	bne.n	800b3c2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	0151      	lsls	r1, r2, #5
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	440a      	add	r2, r1
 800b2fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b306:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d143      	bne.n	800b39c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	0151      	lsls	r1, r2, #5
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	440a      	add	r2, r1
 800b32a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b32e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b332:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b34e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b352:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b36e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b372:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	3301      	adds	r3, #1
 800b378:	617b      	str	r3, [r7, #20]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b380:	d81d      	bhi.n	800b3be <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b398:	d0ec      	beq.n	800b374 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b39a:	e080      	b.n	800b49e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	0151      	lsls	r1, r2, #5
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	440a      	add	r2, r1
 800b3b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3ba:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3bc:	e06f      	b.n	800b49e <USB_HC_Halt+0x1f0>
          break;
 800b3be:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3c0:	e06d      	b.n	800b49e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3e0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d143      	bne.n	800b47a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	440a      	add	r2, r1
 800b408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b410:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	440a      	add	r2, r1
 800b428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b42c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b430:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	440a      	add	r2, r1
 800b448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b44c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b450:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	3301      	adds	r3, #1
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b45e:	d81d      	bhi.n	800b49c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	4413      	add	r3, r2
 800b468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b476:	d0ec      	beq.n	800b452 <USB_HC_Halt+0x1a4>
 800b478:	e011      	b.n	800b49e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	4413      	add	r3, r2
 800b482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	0151      	lsls	r1, r2, #5
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	440a      	add	r2, r1
 800b490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	e000      	b.n	800b49e <USB_HC_Halt+0x1f0>
          break;
 800b49c:	bf00      	nop
    }
  }

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	04da      	lsls	r2, r3, #19
 800b4c8:	4b15      	ldr	r3, [pc, #84]	; (800b520 <USB_DoPing+0x74>)
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	0151      	lsls	r1, r2, #5
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	440a      	add	r2, r1
 800b4d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	015a      	lsls	r2, r3, #5
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	4413      	add	r3, r2
 800b506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b50a:	461a      	mov	r2, r3
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	371c      	adds	r7, #28
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	1ff80000 	.word	0x1ff80000

0800b524 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff f9a7 	bl	800a888 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b53a:	2110      	movs	r1, #16
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff f9df 	bl	800a900 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7ff fa02 	bl	800a94c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b548:	2300      	movs	r3, #0
 800b54a:	613b      	str	r3, [r7, #16]
 800b54c:	e01f      	b.n	800b58e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b564:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b56c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b574:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b582:	461a      	mov	r2, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	3301      	adds	r3, #1
 800b58c:	613b      	str	r3, [r7, #16]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	2b0f      	cmp	r3, #15
 800b592:	d9dc      	bls.n	800b54e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	e034      	b.n	800b604 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5c0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	015a      	lsls	r2, r3, #5
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5e0:	d80c      	bhi.n	800b5fc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	015a      	lsls	r2, r3, #5
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5f8:	d0ec      	beq.n	800b5d4 <USB_StopHost+0xb0>
 800b5fa:	e000      	b.n	800b5fe <USB_StopHost+0xda>
        break;
 800b5fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	3301      	adds	r3, #1
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2b0f      	cmp	r3, #15
 800b608:	d9c7      	bls.n	800b59a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b610:	461a      	mov	r2, r3
 800b612:	f04f 33ff 	mov.w	r3, #4294967295
 800b616:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295
 800b61e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff f920 	bl	800a866 <USB_EnableGlobalInt>

  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b089      	sub	sp, #36	; 0x24
 800b634:	af04      	add	r7, sp, #16
 800b636:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b638:	2301      	movs	r3, #1
 800b63a:	2202      	movs	r2, #2
 800b63c:	2102      	movs	r1, #2
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fcb2 	bl	800bfa8 <USBH_FindInterface>
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	2bff      	cmp	r3, #255	; 0xff
 800b64c:	d002      	beq.n	800b654 <USBH_CDC_InterfaceInit+0x24>
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d901      	bls.n	800b658 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b654:	2302      	movs	r3, #2
 800b656:	e13d      	b.n	800b8d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fc87 	bl	800bf70 <USBH_SelectInterface>
 800b662:	4603      	mov	r3, r0
 800b664:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b66c:	2302      	movs	r3, #2
 800b66e:	e131      	b.n	800b8d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b676:	2050      	movs	r0, #80	; 0x50
 800b678:	f006 fc6a 	bl	8011f50 <malloc>
 800b67c:	4603      	mov	r3, r0
 800b67e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b690:	2302      	movs	r3, #2
 800b692:	e11f      	b.n	800b8d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b694:	2250      	movs	r2, #80	; 0x50
 800b696:	2100      	movs	r1, #0
 800b698:	68b8      	ldr	r0, [r7, #8]
 800b69a:	f006 fc91 	bl	8011fc0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	211a      	movs	r1, #26
 800b6a4:	fb01 f303 	mul.w	r3, r1, r3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	b25b      	sxtb	r3, r3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	da15      	bge.n	800b6e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	211a      	movs	r1, #26
 800b6bc:	fb01 f303 	mul.w	r3, r1, r3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b6c6:	781a      	ldrb	r2, [r3, #0]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	211a      	movs	r1, #26
 800b6d2:	fb01 f303 	mul.w	r3, r1, r3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b6dc:	881a      	ldrh	r2, [r3, #0]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	785b      	ldrb	r3, [r3, #1]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f002 f88c 	bl	800d806 <USBH_AllocPipe>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	7819      	ldrb	r1, [r3, #0]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	7858      	ldrb	r0, [r3, #1]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	8952      	ldrh	r2, [r2, #10]
 800b70e:	9202      	str	r2, [sp, #8]
 800b710:	2203      	movs	r2, #3
 800b712:	9201      	str	r2, [sp, #4]
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	4623      	mov	r3, r4
 800b718:	4602      	mov	r2, r0
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f002 f844 	bl	800d7a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2200      	movs	r2, #0
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f005 fb05 	bl	8010d38 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b72e:	2300      	movs	r3, #0
 800b730:	2200      	movs	r2, #0
 800b732:	210a      	movs	r1, #10
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 fc37 	bl	800bfa8 <USBH_FindInterface>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2bff      	cmp	r3, #255	; 0xff
 800b742:	d002      	beq.n	800b74a <USBH_CDC_InterfaceInit+0x11a>
 800b744:	7bfb      	ldrb	r3, [r7, #15]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d901      	bls.n	800b74e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b74a:	2302      	movs	r3, #2
 800b74c:	e0c2      	b.n	800b8d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	211a      	movs	r1, #26
 800b754:	fb01 f303 	mul.w	r3, r1, r3
 800b758:	4413      	add	r3, r2
 800b75a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b25b      	sxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	da16      	bge.n	800b794 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	211a      	movs	r1, #26
 800b76c:	fb01 f303 	mul.w	r3, r1, r3
 800b770:	4413      	add	r3, r2
 800b772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	211a      	movs	r1, #26
 800b782:	fb01 f303 	mul.w	r3, r1, r3
 800b786:	4413      	add	r3, r2
 800b788:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b78c:	881a      	ldrh	r2, [r3, #0]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	835a      	strh	r2, [r3, #26]
 800b792:	e015      	b.n	800b7c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	211a      	movs	r1, #26
 800b79a:	fb01 f303 	mul.w	r3, r1, r3
 800b79e:	4413      	add	r3, r2
 800b7a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b7a4:	781a      	ldrb	r2, [r3, #0]
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	211a      	movs	r1, #26
 800b7b0:	fb01 f303 	mul.w	r3, r1, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b7ba:	881a      	ldrh	r2, [r3, #0]
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	211a      	movs	r1, #26
 800b7c6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ca:	4413      	add	r3, r2
 800b7cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b25b      	sxtb	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da16      	bge.n	800b806 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	211a      	movs	r1, #26
 800b7de:	fb01 f303 	mul.w	r3, r1, r3
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b7e8:	781a      	ldrb	r2, [r3, #0]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	211a      	movs	r1, #26
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b7fe:	881a      	ldrh	r2, [r3, #0]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	835a      	strh	r2, [r3, #26]
 800b804:	e015      	b.n	800b832 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b806:	7bfb      	ldrb	r3, [r7, #15]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	211a      	movs	r1, #26
 800b80c:	fb01 f303 	mul.w	r3, r1, r3
 800b810:	4413      	add	r3, r2
 800b812:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	211a      	movs	r1, #26
 800b822:	fb01 f303 	mul.w	r3, r1, r3
 800b826:	4413      	add	r3, r2
 800b828:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b82c:	881a      	ldrh	r2, [r3, #0]
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	7b9b      	ldrb	r3, [r3, #14]
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 ffe4 	bl	800d806 <USBH_AllocPipe>
 800b83e:	4603      	mov	r3, r0
 800b840:	461a      	mov	r2, r3
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	7bdb      	ldrb	r3, [r3, #15]
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 ffda 	bl	800d806 <USBH_AllocPipe>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	7b59      	ldrb	r1, [r3, #13]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	7b98      	ldrb	r0, [r3, #14]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	8b12      	ldrh	r2, [r2, #24]
 800b872:	9202      	str	r2, [sp, #8]
 800b874:	2202      	movs	r2, #2
 800b876:	9201      	str	r2, [sp, #4]
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	4623      	mov	r3, r4
 800b87c:	4602      	mov	r2, r0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 ff92 	bl	800d7a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	7b19      	ldrb	r1, [r3, #12]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	7bd8      	ldrb	r0, [r3, #15]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	8b52      	ldrh	r2, [r2, #26]
 800b89c:	9202      	str	r2, [sp, #8]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	9201      	str	r2, [sp, #4]
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	4623      	mov	r3, r4
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f001 ff7d 	bl	800d7a8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	7b5b      	ldrb	r3, [r3, #13]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f005 fa3a 	bl	8010d38 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	7b1b      	ldrb	r3, [r3, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f005 fa33 	bl	8010d38 <USBH_LL_SetToggle>

  return USBH_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd90      	pop	{r4, r7, pc}

0800b8dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00e      	beq.n	800b914 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 ff72 	bl	800d7e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 ff9d 	bl	800d848 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	7b1b      	ldrb	r3, [r3, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00e      	beq.n	800b93a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	7b1b      	ldrb	r3, [r3, #12]
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 ff5f 	bl	800d7e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	7b1b      	ldrb	r3, [r3, #12]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 ff8a 	bl	800d848 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	7b5b      	ldrb	r3, [r3, #13]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00e      	beq.n	800b960 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	7b5b      	ldrb	r3, [r3, #13]
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 ff4c 	bl	800d7e6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	7b5b      	ldrb	r3, [r3, #13]
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f001 ff77 	bl	800d848 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b966:	69db      	ldr	r3, [r3, #28]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	4618      	mov	r0, r3
 800b976:	f006 faf3 	bl	8011f60 <free>
    phost->pActiveClass->pData = 0U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b980:	2200      	movs	r2, #0
 800b982:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3340      	adds	r3, #64	; 0x40
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f8b1 	bl	800bb0e <GetLineCoding>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d105      	bne.n	800b9c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9bc:	2102      	movs	r1, #2
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	d877      	bhi.n	800bae0 <USBH_CDC_Process+0x114>
 800b9f0:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <USBH_CDC_Process+0x2c>)
 800b9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800ba0d 	.word	0x0800ba0d
 800b9fc:	0800ba13 	.word	0x0800ba13
 800ba00:	0800ba43 	.word	0x0800ba43
 800ba04:	0800bab7 	.word	0x0800bab7
 800ba08:	0800bac5 	.word	0x0800bac5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba10:	e06d      	b.n	800baee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f897 	bl	800bb4c <SetLineCoding>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d104      	bne.n	800ba32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ba30:	e058      	b.n	800bae4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d055      	beq.n	800bae4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ba40:	e050      	b.n	800bae4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	3340      	adds	r3, #64	; 0x40
 800ba46:	4619      	mov	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f860 	bl	800bb0e <GetLineCoding>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d126      	bne.n	800baa6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba6a:	791b      	ldrb	r3, [r3, #4]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d13b      	bne.n	800bae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d133      	bne.n	800bae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d12b      	bne.n	800bae8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d124      	bne.n	800bae8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f982 	bl	800bda8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800baa4:	e020      	b.n	800bae8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d01d      	beq.n	800bae8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2204      	movs	r2, #4
 800bab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bab4:	e018      	b.n	800bae8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f867 	bl	800bb8a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f8f6 	bl	800bcae <CDC_ProcessReception>
      break;
 800bac2:	e014      	b.n	800baee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800bac4:	2100      	movs	r1, #0
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 f94d 	bl	800cd66 <USBH_ClrFeature>
 800bacc:	4603      	mov	r3, r0
 800bace:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d10a      	bne.n	800baec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800bade:	e005      	b.n	800baec <USBH_CDC_Process+0x120>

    default:
      break;
 800bae0:	bf00      	nop
 800bae2:	e004      	b.n	800baee <USBH_CDC_Process+0x122>
      break;
 800bae4:	bf00      	nop
 800bae6:	e002      	b.n	800baee <USBH_CDC_Process+0x122>
      break;
 800bae8:	bf00      	nop
 800baea:	e000      	b.n	800baee <USBH_CDC_Process+0x122>
      break;
 800baec:	bf00      	nop

  }

  return status;
 800baee:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	22a1      	movs	r2, #161	; 0xa1
 800bb1c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2221      	movs	r2, #33	; 0x21
 800bb22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2207      	movs	r2, #7
 800bb34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2207      	movs	r2, #7
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 faf2 	bl	800d126 <USBH_CtlReq>
 800bb42:	4603      	mov	r3, r0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2221      	movs	r2, #33	; 0x21
 800bb5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2207      	movs	r2, #7
 800bb72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2207      	movs	r2, #7
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f001 fad3 	bl	800d126 <USBH_CtlReq>
 800bb80:	4603      	mov	r3, r0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b086      	sub	sp, #24
 800bb8e:	af02      	add	r7, sp, #8
 800bb90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb98:	69db      	ldr	r3, [r3, #28]
 800bb9a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d002      	beq.n	800bbb0 <CDC_ProcessTransmission+0x26>
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d023      	beq.n	800bbf6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800bbae:	e07a      	b.n	800bca6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	8b12      	ldrh	r2, [r2, #24]
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d90b      	bls.n	800bbd4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	69d9      	ldr	r1, [r3, #28]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	8b1a      	ldrh	r2, [r3, #24]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	7b5b      	ldrb	r3, [r3, #13]
 800bbc8:	2001      	movs	r0, #1
 800bbca:	9000      	str	r0, [sp, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 fda8 	bl	800d722 <USBH_BulkSendData>
 800bbd2:	e00b      	b.n	800bbec <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	7b5b      	ldrb	r3, [r3, #13]
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	9000      	str	r0, [sp, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fd9b 	bl	800d722 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bbf4:	e057      	b.n	800bca6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	7b5b      	ldrb	r3, [r3, #13]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f005 f871 	bl	8010ce4 <USBH_LL_GetURBState>
 800bc02:	4603      	mov	r3, r0
 800bc04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d136      	bne.n	800bc7a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	8b12      	ldrh	r2, [r2, #24]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d90e      	bls.n	800bc36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	8b12      	ldrh	r2, [r2, #24]
 800bc20:	1a9a      	subs	r2, r3, r2
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	8b12      	ldrh	r2, [r2, #24]
 800bc2e:	441a      	add	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	61da      	str	r2, [r3, #28]
 800bc34:	e002      	b.n	800bc3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d004      	beq.n	800bc4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800bc4c:	e006      	b.n	800bc5c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f892 	bl	800bd80 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2204      	movs	r2, #4
 800bc60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc70:	2300      	movs	r3, #0
 800bc72:	2200      	movs	r2, #0
 800bc74:	f001 fff6 	bl	800dc64 <osMessageQueuePut>
      break;
 800bc78:	e014      	b.n	800bca4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800bc7a:	7afb      	ldrb	r3, [r7, #11]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d111      	bne.n	800bca4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2204      	movs	r2, #4
 800bc8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f001 ffe0 	bl	800dc64 <osMessageQueuePut>
      break;
 800bca4:	bf00      	nop
  }
}
 800bca6:	bf00      	nop
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b086      	sub	sp, #24
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d002      	beq.n	800bcd4 <CDC_ProcessReception+0x26>
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d00e      	beq.n	800bcf0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bcd2:	e051      	b.n	800bd78 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	6a19      	ldr	r1, [r3, #32]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	8b5a      	ldrh	r2, [r3, #26]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	7b1b      	ldrb	r3, [r3, #12]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 fd43 	bl	800d76c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2204      	movs	r2, #4
 800bcea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bcee:	e043      	b.n	800bd78 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	7b1b      	ldrb	r3, [r3, #12]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f004 fff4 	bl	8010ce4 <USBH_LL_GetURBState>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bd00:	7cfb      	ldrb	r3, [r7, #19]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d137      	bne.n	800bd76 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	7b1b      	ldrb	r3, [r3, #12]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f004 ff57 	bl	8010bc0 <USBH_LL_GetLastXferSize>
 800bd12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d016      	beq.n	800bd4c <CDC_ProcessReception+0x9e>
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	8b5b      	ldrh	r3, [r3, #26]
 800bd22:	461a      	mov	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d910      	bls.n	800bd4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1ad2      	subs	r2, r2, r3
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	6a1a      	ldr	r2, [r3, #32]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	441a      	add	r2, r3
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2203      	movs	r2, #3
 800bd46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800bd4a:	e006      	b.n	800bd5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f81d 	bl	800bd94 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2204      	movs	r2, #4
 800bd5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2200      	movs	r2, #0
 800bd72:	f001 ff77 	bl	800dc64 <osMessageQueuePut>
      break;
 800bd76:	bf00      	nop
  }
}
 800bd78:	bf00      	nop
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	e044      	b.n	800be5e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	79fa      	ldrb	r2, [r7, #7]
 800bdd8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f000 f841 	bl	800be74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800be20:	2200      	movs	r2, #0
 800be22:	2104      	movs	r1, #4
 800be24:	2010      	movs	r0, #16
 800be26:	f001 fe97 	bl	800db58 <osMessageQueueNew>
 800be2a:	4602      	mov	r2, r0
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800be32:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <USBH_Init+0xac>)
 800be34:	4a0d      	ldr	r2, [pc, #52]	; (800be6c <USBH_Init+0xb0>)
 800be36:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800be38:	4b0b      	ldr	r3, [pc, #44]	; (800be68 <USBH_Init+0xac>)
 800be3a:	2280      	movs	r2, #128	; 0x80
 800be3c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800be3e:	4b0a      	ldr	r3, [pc, #40]	; (800be68 <USBH_Init+0xac>)
 800be40:	2218      	movs	r2, #24
 800be42:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800be44:	4a08      	ldr	r2, [pc, #32]	; (800be68 <USBH_Init+0xac>)
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	4809      	ldr	r0, [pc, #36]	; (800be70 <USBH_Init+0xb4>)
 800be4a:	f001 fdb1 	bl	800d9b0 <osThreadNew>
 800be4e:	4602      	mov	r2, r0
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f004 fdfe 	bl	8010a58 <USBH_LL_Init>

  return USBH_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	200055cc 	.word	0x200055cc
 800be6c:	0801235c 	.word	0x0801235c
 800be70:	0800cadd 	.word	0x0800cadd

0800be74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800be7c:	2300      	movs	r3, #0
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
 800be84:	e009      	b.n	800be9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	33e0      	adds	r3, #224	; 0xe0
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	2200      	movs	r2, #0
 800be92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3301      	adds	r3, #1
 800be98:	60fb      	str	r3, [r7, #12]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2b0e      	cmp	r3, #14
 800be9e:	d9f2      	bls.n	800be86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	e009      	b.n	800beba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800beb0:	2200      	movs	r2, #0
 800beb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	3301      	adds	r3, #1
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bec0:	d3f1      	bcc.n	800bea6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2240      	movs	r2, #64	; 0x40
 800bee6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d016      	beq.n	800bf5e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10e      	bne.n	800bf58 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bf40:	1c59      	adds	r1, r3, #1
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	33de      	adds	r3, #222	; 0xde
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]
 800bf56:	e004      	b.n	800bf62 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bf58:	2302      	movs	r3, #2
 800bf5a:	73fb      	strb	r3, [r7, #15]
 800bf5c:	e001      	b.n	800bf62 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bf86:	78fa      	ldrb	r2, [r7, #3]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d204      	bcs.n	800bf96 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	78fa      	ldrb	r2, [r7, #3]
 800bf90:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bf94:	e001      	b.n	800bf9a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bf96:	2302      	movs	r3, #2
 800bf98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	70fb      	strb	r3, [r7, #3]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	70bb      	strb	r3, [r7, #2]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bfd0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bfd2:	e025      	b.n	800c020 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	221a      	movs	r2, #26
 800bfd8:	fb02 f303 	mul.w	r3, r2, r3
 800bfdc:	3308      	adds	r3, #8
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	3302      	adds	r3, #2
 800bfe4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	795b      	ldrb	r3, [r3, #5]
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d002      	beq.n	800bff6 <USBH_FindInterface+0x4e>
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	2bff      	cmp	r3, #255	; 0xff
 800bff4:	d111      	bne.n	800c01a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bffa:	78ba      	ldrb	r2, [r7, #2]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d002      	beq.n	800c006 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c000:	78bb      	ldrb	r3, [r7, #2]
 800c002:	2bff      	cmp	r3, #255	; 0xff
 800c004:	d109      	bne.n	800c01a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c00a:	787a      	ldrb	r2, [r7, #1]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d002      	beq.n	800c016 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c010:	787b      	ldrb	r3, [r7, #1]
 800c012:	2bff      	cmp	r3, #255	; 0xff
 800c014:	d101      	bne.n	800c01a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	e006      	b.n	800c028 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c01a:	7dfb      	ldrb	r3, [r7, #23]
 800c01c:	3301      	adds	r3, #1
 800c01e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d9d6      	bls.n	800bfd4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c026:	23ff      	movs	r3, #255	; 0xff
}
 800c028:	4618      	mov	r0, r3
 800c02a:	371c      	adds	r7, #28
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f004 fd47 	bl	8010ad0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c042:	2101      	movs	r1, #1
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f004 fe60 	bl	8010d0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af04      	add	r7, sp, #16
 800c05a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c05c:	2302      	movs	r3, #2
 800c05e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d102      	bne.n	800c076 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2203      	movs	r2, #3
 800c074:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	2b0b      	cmp	r3, #11
 800c07e:	f200 823c 	bhi.w	800c4fa <USBH_Process+0x4a6>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <USBH_Process+0x34>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c0b9 	.word	0x0800c0b9
 800c08c:	0800c107 	.word	0x0800c107
 800c090:	0800c18b 	.word	0x0800c18b
 800c094:	0800c479 	.word	0x0800c479
 800c098:	0800c4fb 	.word	0x0800c4fb
 800c09c:	0800c24b 	.word	0x0800c24b
 800c0a0:	0800c403 	.word	0x0800c403
 800c0a4:	0800c29d 	.word	0x0800c29d
 800c0a8:	0800c2d9 	.word	0x0800c2d9
 800c0ac:	0800c313 	.word	0x0800c313
 800c0b0:	0800c35b 	.word	0x0800c35b
 800c0b4:	0800c461 	.word	0x0800c461
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 821c 	beq.w	800c4fe <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c0cc:	20c8      	movs	r0, #200	; 0xc8
 800c0ce:	f004 fe66 	bl	8010d9e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f004 fd59 	bl	8010b8a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	2200      	movs	r2, #0
 800c100:	f001 fdb0 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c104:	e1fb      	b.n	800c4fe <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d107      	bne.n	800c120 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2202      	movs	r2, #2
 800c11c:	701a      	strb	r2, [r3, #0]
 800c11e:	e025      	b.n	800c16c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c12a:	d914      	bls.n	800c156 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c132:	3301      	adds	r3, #1
 800c134:	b2da      	uxtb	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c142:	2b03      	cmp	r3, #3
 800c144:	d903      	bls.n	800c14e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	220d      	movs	r2, #13
 800c14a:	701a      	strb	r2, [r3, #0]
 800c14c:	e00e      	b.n	800c16c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	e00a      	b.n	800c16c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c15c:	f103 020a 	add.w	r2, r3, #10
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c166:	200a      	movs	r0, #10
 800c168:	f004 fe19 	bl	8010d9e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c180:	2300      	movs	r3, #0
 800c182:	2200      	movs	r2, #0
 800c184:	f001 fd6e 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c188:	e1c0      	b.n	800c50c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c190:	2b00      	cmp	r3, #0
 800c192:	d005      	beq.n	800c1a0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c19a:	2104      	movs	r1, #4
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c1a0:	2064      	movs	r0, #100	; 0x64
 800c1a2:	f004 fdfc 	bl	8010d9e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f004 fcc8 	bl	8010b3c <USBH_LL_GetSpeed>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2205      	movs	r2, #5
 800c1ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c1bc:	2100      	movs	r1, #0
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 fb21 	bl	800d806 <USBH_AllocPipe>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c1cc:	2180      	movs	r1, #128	; 0x80
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 fb19 	bl	800d806 <USBH_AllocPipe>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7919      	ldrb	r1, [r3, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c1f0:	b292      	uxth	r2, r2
 800c1f2:	9202      	str	r2, [sp, #8]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	9201      	str	r2, [sp, #4]
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2280      	movs	r2, #128	; 0x80
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f001 fad2 	bl	800d7a8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7959      	ldrb	r1, [r3, #5]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c218:	b292      	uxth	r2, r2
 800c21a:	9202      	str	r2, [sp, #8]
 800c21c:	2200      	movs	r2, #0
 800c21e:	9201      	str	r2, [sp, #4]
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	4603      	mov	r3, r0
 800c224:	2200      	movs	r2, #0
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fabe 	bl	800d7a8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c240:	2300      	movs	r3, #0
 800c242:	2200      	movs	r2, #0
 800c244:	f001 fd0e 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c248:	e160      	b.n	800c50c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f964 	bl	800c518 <USBH_HandleEnum>
 800c250:	4603      	mov	r3, r0
 800c252:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f040 8152 	bne.w	800c502 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d103      	bne.n	800c278 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2208      	movs	r2, #8
 800c274:	701a      	strb	r2, [r3, #0]
 800c276:	e002      	b.n	800c27e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2207      	movs	r2, #7
 800c27c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2205      	movs	r2, #5
 800c282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c292:	2300      	movs	r3, #0
 800c294:	2200      	movs	r2, #0
 800c296:	f001 fce5 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c29a:	e132      	b.n	800c502 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 812f 	beq.w	800c506 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2208      	movs	r2, #8
 800c2b8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2205      	movs	r2, #5
 800c2be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f001 fcc7 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c2d6:	e116      	b.n	800c506 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fcf8 	bl	800ccd8 <USBH_SetCfg>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d102      	bne.n	800c2f4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2209      	movs	r2, #9
 800c2f2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c308:	2300      	movs	r3, #0
 800c30a:	2200      	movs	r2, #0
 800c30c:	f001 fcaa 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c310:	e0fc      	b.n	800c50c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c318:	f003 0320 	and.w	r3, r3, #32
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00a      	beq.n	800c336 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c320:	2101      	movs	r1, #1
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fcfb 	bl	800cd1e <USBH_SetFeature>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	220a      	movs	r2, #10
 800c332:	701a      	strb	r2, [r3, #0]
 800c334:	e002      	b.n	800c33c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	220a      	movs	r2, #10
 800c33a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c350:	2300      	movs	r3, #0
 800c352:	2200      	movs	r2, #0
 800c354:	f001 fc86 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c358:	e0d8      	b.n	800c50c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c360:	2b00      	cmp	r3, #0
 800c362:	d03f      	beq.n	800c3e4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
 800c370:	e016      	b.n	800c3a0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c372:	7bfa      	ldrb	r2, [r7, #15]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	32de      	adds	r2, #222	; 0xde
 800c378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37c:	791a      	ldrb	r2, [r3, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c384:	429a      	cmp	r2, r3
 800c386:	d108      	bne.n	800c39a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c388:	7bfa      	ldrb	r2, [r7, #15]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	32de      	adds	r2, #222	; 0xde
 800c38e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c398:	e005      	b.n	800c3a6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	3301      	adds	r3, #1
 800c39e:	73fb      	strb	r3, [r7, #15]
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0e5      	beq.n	800c372 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d016      	beq.n	800c3de <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	4798      	blx	r3
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2206      	movs	r2, #6
 800c3c6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c3ce:	2103      	movs	r1, #3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	4798      	blx	r3
 800c3d4:	e006      	b.n	800c3e4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	220d      	movs	r2, #13
 800c3da:	701a      	strb	r2, [r3, #0]
 800c3dc:	e002      	b.n	800c3e4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	220d      	movs	r2, #13
 800c3e2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2205      	movs	r2, #5
 800c3e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f001 fc32 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c400:	e084      	b.n	800c50c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d017      	beq.n	800c43c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	4798      	blx	r3
 800c418:	4603      	mov	r3, r0
 800c41a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d103      	bne.n	800c42c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	220b      	movs	r2, #11
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	e00a      	b.n	800c442 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b02      	cmp	r3, #2
 800c432:	d106      	bne.n	800c442 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	220d      	movs	r2, #13
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	e002      	b.n	800c442 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	220d      	movs	r2, #13
 800c440:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2205      	movs	r2, #5
 800c446:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c456:	2300      	movs	r3, #0
 800c458:	2200      	movs	r2, #0
 800c45a:	f001 fc03 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c45e:	e055      	b.n	800c50c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d04f      	beq.n	800c50a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
      }
      break;
 800c476:	e048      	b.n	800c50a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff fcf7 	bl	800be74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d009      	beq.n	800c4a4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4b4:	2105      	movs	r1, #5
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d107      	bne.n	800c4d6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fdb0 	bl	800c034 <USBH_Start>
 800c4d4:	e002      	b.n	800c4dc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f004 fafa 	bl	8010ad0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f001 fbb6 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      break;
 800c4f8:	e008      	b.n	800c50c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c4fa:	bf00      	nop
 800c4fc:	e006      	b.n	800c50c <USBH_Process+0x4b8>
      break;
 800c4fe:	bf00      	nop
 800c500:	e004      	b.n	800c50c <USBH_Process+0x4b8>
      break;
 800c502:	bf00      	nop
 800c504:	e002      	b.n	800c50c <USBH_Process+0x4b8>
    break;
 800c506:	bf00      	nop
 800c508:	e000      	b.n	800c50c <USBH_Process+0x4b8>
      break;
 800c50a:	bf00      	nop
  }
  return USBH_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop

0800c518 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af04      	add	r7, sp, #16
 800c51e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c520:	2301      	movs	r3, #1
 800c522:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c524:	2301      	movs	r3, #1
 800c526:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	785b      	ldrb	r3, [r3, #1]
 800c52c:	2b07      	cmp	r3, #7
 800c52e:	f200 8208 	bhi.w	800c942 <USBH_HandleEnum+0x42a>
 800c532:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <USBH_HandleEnum+0x20>)
 800c534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c538:	0800c559 	.word	0x0800c559
 800c53c:	0800c617 	.word	0x0800c617
 800c540:	0800c681 	.word	0x0800c681
 800c544:	0800c70f 	.word	0x0800c70f
 800c548:	0800c779 	.word	0x0800c779
 800c54c:	0800c7e9 	.word	0x0800c7e9
 800c550:	0800c885 	.word	0x0800c885
 800c554:	0800c903 	.word	0x0800c903
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c558:	2108      	movs	r1, #8
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 faec 	bl	800cb38 <USBH_Get_DevDesc>
 800c560:	4603      	mov	r3, r0
 800c562:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c564:	7bbb      	ldrb	r3, [r7, #14]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d130      	bne.n	800c5cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	7919      	ldrb	r1, [r3, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c58e:	b292      	uxth	r2, r2
 800c590:	9202      	str	r2, [sp, #8]
 800c592:	2200      	movs	r2, #0
 800c594:	9201      	str	r2, [sp, #4]
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	4603      	mov	r3, r0
 800c59a:	2280      	movs	r2, #128	; 0x80
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 f903 	bl	800d7a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7959      	ldrb	r1, [r3, #5]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c5b6:	b292      	uxth	r2, r2
 800c5b8:	9202      	str	r2, [sp, #8]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	9201      	str	r2, [sp, #4]
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f001 f8ef 	bl	800d7a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c5ca:	e1bc      	b.n	800c946 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	f040 81b9 	bne.w	800c946 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5da:	3301      	adds	r3, #1
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d903      	bls.n	800c5f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	220d      	movs	r2, #13
 800c5f2:	701a      	strb	r2, [r3, #0]
      break;
 800c5f4:	e1a7      	b.n	800c946 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	795b      	ldrb	r3, [r3, #5]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 f923 	bl	800d848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	791b      	ldrb	r3, [r3, #4]
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f001 f91d 	bl	800d848 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	701a      	strb	r2, [r3, #0]
      break;
 800c614:	e197      	b.n	800c946 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c616:	2112      	movs	r1, #18
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fa8d 	bl	800cb38 <USBH_Get_DevDesc>
 800c61e:	4603      	mov	r3, r0
 800c620:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d103      	bne.n	800c630 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c62e:	e18c      	b.n	800c94a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	2b03      	cmp	r3, #3
 800c634:	f040 8189 	bne.w	800c94a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c63e:	3301      	adds	r3, #1
 800c640:	b2da      	uxtb	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d903      	bls.n	800c65a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	220d      	movs	r2, #13
 800c656:	701a      	strb	r2, [r3, #0]
      break;
 800c658:	e177      	b.n	800c94a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	795b      	ldrb	r3, [r3, #5]
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f001 f8f1 	bl	800d848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	791b      	ldrb	r3, [r3, #4]
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f001 f8eb 	bl	800d848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	701a      	strb	r2, [r3, #0]
      break;
 800c67e:	e164      	b.n	800c94a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c680:	2101      	movs	r1, #1
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fb04 	bl	800cc90 <USBH_SetAddress>
 800c688:	4603      	mov	r3, r0
 800c68a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c68c:	7bbb      	ldrb	r3, [r7, #14]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d132      	bne.n	800c6f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c692:	2002      	movs	r0, #2
 800c694:	f004 fb83 	bl	8010d9e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2203      	movs	r2, #3
 800c6a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	7919      	ldrb	r1, [r3, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c6ba:	b292      	uxth	r2, r2
 800c6bc:	9202      	str	r2, [sp, #8]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	9201      	str	r2, [sp, #4]
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2280      	movs	r2, #128	; 0x80
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 f86d 	bl	800d7a8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7959      	ldrb	r1, [r3, #5]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6e2:	b292      	uxth	r2, r2
 800c6e4:	9202      	str	r2, [sp, #8]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	9201      	str	r2, [sp, #4]
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f001 f859 	bl	800d7a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c6f6:	e12a      	b.n	800c94e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	f040 8127 	bne.w	800c94e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	220d      	movs	r2, #13
 800c704:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	705a      	strb	r2, [r3, #1]
      break;
 800c70c:	e11f      	b.n	800c94e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c70e:	2109      	movs	r1, #9
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fa39 	bl	800cb88 <USBH_Get_CfgDesc>
 800c716:	4603      	mov	r3, r0
 800c718:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c71a:	7bbb      	ldrb	r3, [r7, #14]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d103      	bne.n	800c728 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2204      	movs	r2, #4
 800c724:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c726:	e114      	b.n	800c952 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c728:	7bbb      	ldrb	r3, [r7, #14]
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	f040 8111 	bne.w	800c952 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c736:	3301      	adds	r3, #1
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c746:	2b03      	cmp	r3, #3
 800c748:	d903      	bls.n	800c752 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	220d      	movs	r2, #13
 800c74e:	701a      	strb	r2, [r3, #0]
      break;
 800c750:	e0ff      	b.n	800c952 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	795b      	ldrb	r3, [r3, #5]
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f001 f875 	bl	800d848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	791b      	ldrb	r3, [r3, #4]
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 f86f 	bl	800d848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
      break;
 800c776:	e0ec      	b.n	800c952 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fa01 	bl	800cb88 <USBH_Get_CfgDesc>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d103      	bne.n	800c798 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2205      	movs	r2, #5
 800c794:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c796:	e0de      	b.n	800c956 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	f040 80db 	bne.w	800c956 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	d903      	bls.n	800c7c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	220d      	movs	r2, #13
 800c7be:	701a      	strb	r2, [r3, #0]
      break;
 800c7c0:	e0c9      	b.n	800c956 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	795b      	ldrb	r3, [r3, #5]
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 f83d 	bl	800d848 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	791b      	ldrb	r3, [r3, #4]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f001 f837 	bl	800d848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
      break;
 800c7e6:	e0b6      	b.n	800c956 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d036      	beq.n	800c860 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c7fe:	23ff      	movs	r3, #255	; 0xff
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f9e5 	bl	800cbd0 <USBH_Get_StringDesc>
 800c806:	4603      	mov	r3, r0
 800c808:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d111      	bne.n	800c834 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2206      	movs	r2, #6
 800c814:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2205      	movs	r2, #5
 800c81a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c82a:	2300      	movs	r3, #0
 800c82c:	2200      	movs	r2, #0
 800c82e:	f001 fa19 	bl	800dc64 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c832:	e092      	b.n	800c95a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	2b03      	cmp	r3, #3
 800c838:	f040 808f 	bne.w	800c95a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2206      	movs	r2, #6
 800c840:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2205      	movs	r2, #5
 800c846:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c856:	2300      	movs	r3, #0
 800c858:	2200      	movs	r2, #0
 800c85a:	f001 fa03 	bl	800dc64 <osMessageQueuePut>
      break;
 800c85e:	e07c      	b.n	800c95a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2206      	movs	r2, #6
 800c864:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2205      	movs	r2, #5
 800c86a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c87a:	2300      	movs	r3, #0
 800c87c:	2200      	movs	r2, #0
 800c87e:	f001 f9f1 	bl	800dc64 <osMessageQueuePut>
      break;
 800c882:	e06a      	b.n	800c95a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d027      	beq.n	800c8de <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c89a:	23ff      	movs	r3, #255	; 0xff
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f997 	bl	800cbd0 <USBH_Get_StringDesc>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d103      	bne.n	800c8b4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2207      	movs	r2, #7
 800c8b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c8b2:	e054      	b.n	800c95e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	2b03      	cmp	r3, #3
 800c8b8:	d151      	bne.n	800c95e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2207      	movs	r2, #7
 800c8be:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2205      	movs	r2, #5
 800c8c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f001 f9c4 	bl	800dc64 <osMessageQueuePut>
      break;
 800c8dc:	e03f      	b.n	800c95e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2207      	movs	r2, #7
 800c8e2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2205      	movs	r2, #5
 800c8e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f001 f9b2 	bl	800dc64 <osMessageQueuePut>
      break;
 800c900:	e02d      	b.n	800c95e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d017      	beq.n	800c93c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c918:	23ff      	movs	r3, #255	; 0xff
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f958 	bl	800cbd0 <USBH_Get_StringDesc>
 800c920:	4603      	mov	r3, r0
 800c922:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c92e:	e018      	b.n	800c962 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	2b03      	cmp	r3, #3
 800c934:	d115      	bne.n	800c962 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	73fb      	strb	r3, [r7, #15]
      break;
 800c93a:	e012      	b.n	800c962 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]
      break;
 800c940:	e00f      	b.n	800c962 <USBH_HandleEnum+0x44a>

    default:
      break;
 800c942:	bf00      	nop
 800c944:	e00e      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c946:	bf00      	nop
 800c948:	e00c      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c94a:	bf00      	nop
 800c94c:	e00a      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c94e:	bf00      	nop
 800c950:	e008      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c952:	bf00      	nop
 800c954:	e006      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c956:	bf00      	nop
 800c958:	e004      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c95a:	bf00      	nop
 800c95c:	e002      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c95e:	bf00      	nop
 800c960:	e000      	b.n	800c964 <USBH_HandleEnum+0x44c>
      break;
 800c962:	bf00      	nop
  }
  return Status;
 800c964:	7bfb      	ldrb	r3, [r7, #15]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop

0800c970 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	683a      	ldr	r2, [r7, #0]
 800c97e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f804 	bl	800c9b2 <USBH_HandleSof>
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b0b      	cmp	r3, #11
 800c9c2:	d10a      	bne.n	800c9da <USBH_HandleSof+0x28>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d005      	beq.n	800c9da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	4798      	blx	r3
  }
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca06:	2300      	movs	r3, #0
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f001 f92b 	bl	800dc64 <osMessageQueuePut>
#endif
#endif

  return;
 800ca0e:	bf00      	nop
}
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ca26:	bf00      	nop
}
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b082      	sub	sp, #8
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca66:	2300      	movs	r3, #0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f001 f8fb 	bl	800dc64 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f004 f834 	bl	8010b06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	791b      	ldrb	r3, [r3, #4]
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fecf 	bl	800d848 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	795b      	ldrb	r3, [r3, #5]
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fec9 	bl	800d848 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800caca:	2300      	movs	r3, #0
 800cacc:	2200      	movs	r2, #0
 800cace:	f001 f8c9 	bl	800dc64 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800caf0:	f04f 33ff 	mov.w	r3, #4294967295
 800caf4:	2200      	movs	r2, #0
 800caf6:	f001 f929 	bl	800dd4c <osMessageQueueGet>
 800cafa:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1f0      	bne.n	800cae4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff faa6 	bl	800c054 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cb08:	e7ec      	b.n	800cae4 <USBH_Process_OS+0x8>

0800cb0a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb26:	2300      	movs	r3, #0
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f001 f89b 	bl	800dc64 <osMessageQueuePut>
#endif

  return USBH_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af02      	add	r7, sp, #8
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cb4a:	78fb      	ldrb	r3, [r7, #3]
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	4613      	mov	r3, r2
 800cb52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb56:	2100      	movs	r1, #0
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 f864 	bl	800cc26 <USBH_GetDescriptor>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	73fb      	strb	r3, [r7, #15]
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10a      	bne.n	800cb7e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb74:	78fa      	ldrb	r2, [r7, #3]
 800cb76:	b292      	uxth	r2, r2
 800cb78:	4619      	mov	r1, r3
 800cb7a:	f000 f918 	bl	800cdae <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af02      	add	r7, sp, #8
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	331c      	adds	r3, #28
 800cb98:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cb9a:	887b      	ldrh	r3, [r7, #2]
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cba4:	2100      	movs	r1, #0
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f83d 	bl	800cc26 <USBH_GetDescriptor>
 800cbac:	4603      	mov	r3, r0
 800cbae:	72fb      	strb	r3, [r7, #11]
 800cbb0:	7afb      	ldrb	r3, [r7, #11]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d107      	bne.n	800cbc6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cbbc:	887a      	ldrh	r2, [r7, #2]
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 f964 	bl	800ce8e <USBH_ParseCfgDesc>
  }

  return status;
 800cbc6:	7afb      	ldrb	r3, [r7, #11]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b088      	sub	sp, #32
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	607a      	str	r2, [r7, #4]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	460b      	mov	r3, r1
 800cbde:	72fb      	strb	r3, [r7, #11]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cbe4:	7afb      	ldrb	r3, [r7, #11]
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cbec:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cbf4:	893b      	ldrh	r3, [r7, #8]
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 f812 	bl	800cc26 <USBH_GetDescriptor>
 800cc02:	4603      	mov	r3, r0
 800cc04:	75fb      	strb	r3, [r7, #23]
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d107      	bne.n	800cc1c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cc12:	893a      	ldrh	r2, [r7, #8]
 800cc14:	6879      	ldr	r1, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 fa37 	bl	800d08a <USBH_ParseStringDesc>
  }

  return status;
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3718      	adds	r7, #24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	60f8      	str	r0, [r7, #12]
 800cc2e:	607b      	str	r3, [r7, #4]
 800cc30:	460b      	mov	r3, r1
 800cc32:	72fb      	strb	r3, [r7, #11]
 800cc34:	4613      	mov	r3, r2
 800cc36:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	789b      	ldrb	r3, [r3, #2]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d11c      	bne.n	800cc7a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cc40:	7afb      	ldrb	r3, [r7, #11]
 800cc42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2206      	movs	r2, #6
 800cc50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	893a      	ldrh	r2, [r7, #8]
 800cc56:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cc58:	893b      	ldrh	r3, [r7, #8]
 800cc5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cc5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc62:	d104      	bne.n	800cc6e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f240 4209 	movw	r2, #1033	; 0x409
 800cc6a:	829a      	strh	r2, [r3, #20]
 800cc6c:	e002      	b.n	800cc74 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	8b3a      	ldrh	r2, [r7, #24]
 800cc78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cc7a:	8b3b      	ldrh	r3, [r7, #24]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6879      	ldr	r1, [r7, #4]
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f000 fa50 	bl	800d126 <USBH_CtlReq>
 800cc86:	4603      	mov	r3, r0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	789b      	ldrb	r3, [r3, #2]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d10f      	bne.n	800ccc4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2205      	movs	r2, #5
 800ccae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fa2c 	bl	800d126 <USBH_CtlReq>
 800ccce:	4603      	mov	r3, r0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	789b      	ldrb	r3, [r3, #2]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d10e      	bne.n	800cd0a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2209      	movs	r2, #9
 800ccf6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	887a      	ldrh	r2, [r7, #2]
 800ccfc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa09 	bl	800d126 <USBH_CtlReq>
 800cd14:	4603      	mov	r3, r0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b082      	sub	sp, #8
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	460b      	mov	r3, r1
 800cd28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	789b      	ldrb	r3, [r3, #2]
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d10f      	bne.n	800cd52 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cd3e:	78fb      	ldrb	r3, [r7, #3]
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cd52:	2200      	movs	r2, #0
 800cd54:	2100      	movs	r1, #0
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f9e5 	bl	800d126 <USBH_CtlReq>
 800cd5c:	4603      	mov	r3, r0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b082      	sub	sp, #8
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	460b      	mov	r3, r1
 800cd70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	789b      	ldrb	r3, [r3, #2]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d10f      	bne.n	800cd9a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2202      	movs	r2, #2
 800cd7e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cd8c:	78fb      	ldrb	r3, [r7, #3]
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f9c1 	bl	800d126 <USBH_CtlReq>
 800cda4:	4603      	mov	r3, r0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	60b9      	str	r1, [r7, #8]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	781a      	ldrb	r2, [r3, #0]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	785a      	ldrb	r2, [r3, #1]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	3302      	adds	r3, #2
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	3303      	adds	r3, #3
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	021b      	lsls	r3, r3, #8
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	4313      	orrs	r3, r2
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	791a      	ldrb	r2, [r3, #4]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	795a      	ldrb	r2, [r3, #5]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	799a      	ldrb	r2, [r3, #6]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	79da      	ldrb	r2, [r3, #7]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ce08:	88fb      	ldrh	r3, [r7, #6]
 800ce0a:	2b08      	cmp	r3, #8
 800ce0c:	d939      	bls.n	800ce82 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	3308      	adds	r3, #8
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	3309      	adds	r3, #9
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	4313      	orrs	r3, r2
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	330a      	adds	r3, #10
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	330b      	adds	r3, #11
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	021b      	lsls	r3, r3, #8
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	330c      	adds	r3, #12
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	330d      	adds	r3, #13
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	021b      	lsls	r3, r3, #8
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	7b9a      	ldrb	r2, [r3, #14]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	7bda      	ldrb	r2, [r3, #15]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	7c1a      	ldrb	r2, [r3, #16]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	7c5a      	ldrb	r2, [r3, #17]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	745a      	strb	r2, [r3, #17]
  }
}
 800ce82:	bf00      	nop
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b08a      	sub	sp, #40	; 0x28
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	60f8      	str	r0, [r7, #12]
 800ce96:	60b9      	str	r1, [r7, #8]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cea6:	2300      	movs	r3, #0
 800cea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	781a      	ldrb	r2, [r3, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	785a      	ldrb	r2, [r3, #1]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	3302      	adds	r3, #2
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	3303      	adds	r3, #3
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	021b      	lsls	r3, r3, #8
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	4313      	orrs	r3, r2
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	791a      	ldrb	r2, [r3, #4]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	795a      	ldrb	r2, [r3, #5]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	799a      	ldrb	r2, [r3, #6]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	79da      	ldrb	r2, [r3, #7]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	7a1a      	ldrb	r2, [r3, #8]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cf04:	88fb      	ldrh	r3, [r7, #6]
 800cf06:	2b09      	cmp	r3, #9
 800cf08:	d95f      	bls.n	800cfca <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cf0a:	2309      	movs	r3, #9
 800cf0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cf12:	e051      	b.n	800cfb8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cf14:	f107 0316 	add.w	r3, r7, #22
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf1c:	f000 f8e8 	bl	800d0f0 <USBH_GetNextDesc>
 800cf20:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	785b      	ldrb	r3, [r3, #1]
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	d146      	bne.n	800cfb8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cf2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf2e:	221a      	movs	r2, #26
 800cf30:	fb02 f303 	mul.w	r3, r2, r3
 800cf34:	3308      	adds	r3, #8
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	4413      	add	r3, r2
 800cf3a:	3302      	adds	r3, #2
 800cf3c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cf3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf40:	69f8      	ldr	r0, [r7, #28]
 800cf42:	f000 f846 	bl	800cfd2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cf50:	e022      	b.n	800cf98 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cf52:	f107 0316 	add.w	r3, r7, #22
 800cf56:	4619      	mov	r1, r3
 800cf58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf5a:	f000 f8c9 	bl	800d0f0 <USBH_GetNextDesc>
 800cf5e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	785b      	ldrb	r3, [r3, #1]
 800cf64:	2b05      	cmp	r3, #5
 800cf66:	d117      	bne.n	800cf98 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cf68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cf70:	3201      	adds	r2, #1
 800cf72:	00d2      	lsls	r2, r2, #3
 800cf74:	211a      	movs	r1, #26
 800cf76:	fb01 f303 	mul.w	r3, r1, r3
 800cf7a:	4413      	add	r3, r2
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	4413      	add	r3, r2
 800cf82:	3304      	adds	r3, #4
 800cf84:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800cf86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf88:	69b8      	ldr	r0, [r7, #24]
 800cf8a:	f000 f851 	bl	800d030 <USBH_ParseEPDesc>
            ep_ix++;
 800cf8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf92:	3301      	adds	r3, #1
 800cf94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	791b      	ldrb	r3, [r3, #4]
 800cf9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d204      	bcs.n	800cfae <USBH_ParseCfgDesc+0x120>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	885a      	ldrh	r2, [r3, #2]
 800cfa8:	8afb      	ldrh	r3, [r7, #22]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d8d1      	bhi.n	800cf52 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cfae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cfb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d804      	bhi.n	800cfca <USBH_ParseCfgDesc+0x13c>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	885a      	ldrh	r2, [r3, #2]
 800cfc4:	8afb      	ldrh	r3, [r7, #22]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d8a4      	bhi.n	800cf14 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cfca:	bf00      	nop
 800cfcc:	3728      	adds	r7, #40	; 0x28
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b083      	sub	sp, #12
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781a      	ldrb	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	785a      	ldrb	r2, [r3, #1]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	789a      	ldrb	r2, [r3, #2]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	78da      	ldrb	r2, [r3, #3]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	791a      	ldrb	r2, [r3, #4]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	795a      	ldrb	r2, [r3, #5]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	799a      	ldrb	r2, [r3, #6]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	79da      	ldrb	r2, [r3, #7]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	7a1a      	ldrb	r2, [r3, #8]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	721a      	strb	r2, [r3, #8]
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	781a      	ldrb	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	785a      	ldrb	r2, [r3, #1]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	789a      	ldrb	r2, [r3, #2]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	78da      	ldrb	r2, [r3, #3]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	3304      	adds	r3, #4
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	b29a      	uxth	r2, r3
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	3305      	adds	r3, #5
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	021b      	lsls	r3, r3, #8
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	4313      	orrs	r3, r2
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	799a      	ldrb	r2, [r3, #6]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	719a      	strb	r2, [r3, #6]
}
 800d07e:	bf00      	nop
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b087      	sub	sp, #28
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	4613      	mov	r3, r2
 800d096:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3301      	adds	r3, #1
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d120      	bne.n	800d0e4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	1e9a      	subs	r2, r3, #2
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	bf28      	it	cs
 800d0ae:	4613      	movcs	r3, r2
 800d0b0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	3302      	adds	r3, #2
 800d0b6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	82fb      	strh	r3, [r7, #22]
 800d0bc:	e00b      	b.n	800d0d6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d0be:	8afb      	ldrh	r3, [r7, #22]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	781a      	ldrb	r2, [r3, #0]
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d0d0:	8afb      	ldrh	r3, [r7, #22]
 800d0d2:	3302      	adds	r3, #2
 800d0d4:	82fb      	strh	r3, [r7, #22]
 800d0d6:	8afa      	ldrh	r2, [r7, #22]
 800d0d8:	8abb      	ldrh	r3, [r7, #20]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d3ef      	bcc.n	800d0be <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	701a      	strb	r2, [r3, #0]
  }
}
 800d0e4:	bf00      	nop
 800d0e6:	371c      	adds	r7, #28
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	881a      	ldrh	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	b29b      	uxth	r3, r3
 800d104:	4413      	add	r3, r2
 800d106:	b29a      	uxth	r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4413      	add	r3, r2
 800d116:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d118:	68fb      	ldr	r3, [r7, #12]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d126:	b580      	push	{r7, lr}
 800d128:	b086      	sub	sp, #24
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	60f8      	str	r0, [r7, #12]
 800d12e:	60b9      	str	r1, [r7, #8]
 800d130:	4613      	mov	r3, r2
 800d132:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d134:	2301      	movs	r3, #1
 800d136:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	789b      	ldrb	r3, [r3, #2]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d002      	beq.n	800d146 <USBH_CtlReq+0x20>
 800d140:	2b02      	cmp	r3, #2
 800d142:	d01d      	beq.n	800d180 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d144:	e043      	b.n	800d1ce <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	88fa      	ldrh	r2, [r7, #6]
 800d150:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2201      	movs	r2, #1
 800d156:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2202      	movs	r2, #2
 800d15c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d15e:	2301      	movs	r3, #1
 800d160:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2203      	movs	r2, #3
 800d166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d176:	2300      	movs	r3, #0
 800d178:	2200      	movs	r2, #0
 800d17a:	f000 fd73 	bl	800dc64 <osMessageQueuePut>
      break;
 800d17e:	e026      	b.n	800d1ce <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 f829 	bl	800d1d8 <USBH_HandleControl>
 800d186:	4603      	mov	r3, r0
 800d188:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <USBH_CtlReq+0x70>
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	2b03      	cmp	r3, #3
 800d194:	d106      	bne.n	800d1a4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2201      	movs	r2, #1
 800d19a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	761a      	strb	r2, [r3, #24]
 800d1a2:	e005      	b.n	800d1b0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d102      	bne.n	800d1b0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2203      	movs	r2, #3
 800d1b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f000 fd4c 	bl	800dc64 <osMessageQueuePut>
      break;
 800d1cc:	bf00      	nop
  }
  return status;
 800d1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	7e1b      	ldrb	r3, [r3, #24]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	2b0a      	cmp	r3, #10
 800d1f0:	f200 8229 	bhi.w	800d646 <USBH_HandleControl+0x46e>
 800d1f4:	a201      	add	r2, pc, #4	; (adr r2, 800d1fc <USBH_HandleControl+0x24>)
 800d1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fa:	bf00      	nop
 800d1fc:	0800d229 	.word	0x0800d229
 800d200:	0800d243 	.word	0x0800d243
 800d204:	0800d2e5 	.word	0x0800d2e5
 800d208:	0800d30b 	.word	0x0800d30b
 800d20c:	0800d397 	.word	0x0800d397
 800d210:	0800d3c1 	.word	0x0800d3c1
 800d214:	0800d483 	.word	0x0800d483
 800d218:	0800d4a5 	.word	0x0800d4a5
 800d21c:	0800d537 	.word	0x0800d537
 800d220:	0800d55d 	.word	0x0800d55d
 800d224:	0800d5ef 	.word	0x0800d5ef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f103 0110 	add.w	r1, r3, #16
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	795b      	ldrb	r3, [r3, #5]
 800d232:	461a      	mov	r2, r3
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa17 	bl	800d668 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2202      	movs	r2, #2
 800d23e:	761a      	strb	r2, [r3, #24]
      break;
 800d240:	e20c      	b.n	800d65c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	795b      	ldrb	r3, [r3, #5]
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f003 fd4b 	bl	8010ce4 <USBH_LL_GetURBState>
 800d24e:	4603      	mov	r3, r0
 800d250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d252:	7bbb      	ldrb	r3, [r7, #14]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d12c      	bne.n	800d2b2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7c1b      	ldrb	r3, [r3, #16]
 800d25c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	8adb      	ldrh	r3, [r3, #22]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00a      	beq.n	800d280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d26a:	7b7b      	ldrb	r3, [r7, #13]
 800d26c:	2b80      	cmp	r3, #128	; 0x80
 800d26e:	d103      	bne.n	800d278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2203      	movs	r2, #3
 800d274:	761a      	strb	r2, [r3, #24]
 800d276:	e00d      	b.n	800d294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2205      	movs	r2, #5
 800d27c:	761a      	strb	r2, [r3, #24]
 800d27e:	e009      	b.n	800d294 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d280:	7b7b      	ldrb	r3, [r7, #13]
 800d282:	2b80      	cmp	r3, #128	; 0x80
 800d284:	d103      	bne.n	800d28e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2209      	movs	r2, #9
 800d28a:	761a      	strb	r2, [r3, #24]
 800d28c:	e002      	b.n	800d294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2207      	movs	r2, #7
 800d292:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2203      	movs	r2, #3
 800d298:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f000 fcda 	bl	800dc64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d2b0:	e1cb      	b.n	800d64a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d2b2:	7bbb      	ldrb	r3, [r7, #14]
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d003      	beq.n	800d2c0 <USBH_HandleControl+0xe8>
 800d2b8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	f040 81c5 	bne.w	800d64a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	220b      	movs	r2, #11
 800d2c4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2203      	movs	r2, #3
 800d2ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2da:	2300      	movs	r3, #0
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f000 fcc1 	bl	800dc64 <osMessageQueuePut>
      break;
 800d2e2:	e1b2      	b.n	800d64a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6899      	ldr	r1, [r3, #8]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	899a      	ldrh	r2, [r3, #12]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	791b      	ldrb	r3, [r3, #4]
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f9f2 	bl	800d6e6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2204      	movs	r2, #4
 800d306:	761a      	strb	r2, [r3, #24]
      break;
 800d308:	e1a8      	b.n	800d65c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f003 fce7 	bl	8010ce4 <USBH_LL_GetURBState>
 800d316:	4603      	mov	r3, r0
 800d318:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d110      	bne.n	800d342 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2209      	movs	r2, #9
 800d324:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2203      	movs	r2, #3
 800d32a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d33a:	2300      	movs	r3, #0
 800d33c:	2200      	movs	r2, #0
 800d33e:	f000 fc91 	bl	800dc64 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d342:	7bbb      	ldrb	r3, [r7, #14]
 800d344:	2b05      	cmp	r3, #5
 800d346:	d110      	bne.n	800d36a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d348:	2303      	movs	r3, #3
 800d34a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2203      	movs	r2, #3
 800d350:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d360:	2300      	movs	r3, #0
 800d362:	2200      	movs	r2, #0
 800d364:	f000 fc7e 	bl	800dc64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d368:	e171      	b.n	800d64e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d36a:	7bbb      	ldrb	r3, [r7, #14]
 800d36c:	2b04      	cmp	r3, #4
 800d36e:	f040 816e 	bne.w	800d64e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	220b      	movs	r2, #11
 800d376:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2203      	movs	r2, #3
 800d37c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d38c:	2300      	movs	r3, #0
 800d38e:	2200      	movs	r2, #0
 800d390:	f000 fc68 	bl	800dc64 <osMessageQueuePut>
      break;
 800d394:	e15b      	b.n	800d64e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6899      	ldr	r1, [r3, #8]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	899a      	ldrh	r2, [r3, #12]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	795b      	ldrb	r3, [r3, #5]
 800d3a2:	2001      	movs	r0, #1
 800d3a4:	9000      	str	r0, [sp, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f978 	bl	800d69c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2206      	movs	r2, #6
 800d3bc:	761a      	strb	r2, [r3, #24]
      break;
 800d3be:	e14d      	b.n	800d65c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	795b      	ldrb	r3, [r3, #5]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f003 fc8c 	bl	8010ce4 <USBH_LL_GetURBState>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d3d0:	7bbb      	ldrb	r3, [r7, #14]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d111      	bne.n	800d3fa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2207      	movs	r2, #7
 800d3da:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2203      	movs	r2, #3
 800d3e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f000 fc36 	bl	800dc64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d3f8:	e12b      	b.n	800d652 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	2b05      	cmp	r3, #5
 800d3fe:	d113      	bne.n	800d428 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	220c      	movs	r2, #12
 800d404:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d406:	2303      	movs	r3, #3
 800d408:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2203      	movs	r2, #3
 800d40e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d41e:	2300      	movs	r3, #0
 800d420:	2200      	movs	r2, #0
 800d422:	f000 fc1f 	bl	800dc64 <osMessageQueuePut>
      break;
 800d426:	e114      	b.n	800d652 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d111      	bne.n	800d452 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2205      	movs	r2, #5
 800d432:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2203      	movs	r2, #3
 800d438:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d448:	2300      	movs	r3, #0
 800d44a:	2200      	movs	r2, #0
 800d44c:	f000 fc0a 	bl	800dc64 <osMessageQueuePut>
      break;
 800d450:	e0ff      	b.n	800d652 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	2b04      	cmp	r3, #4
 800d456:	f040 80fc 	bne.w	800d652 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	220b      	movs	r2, #11
 800d45e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d460:	2302      	movs	r3, #2
 800d462:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2203      	movs	r2, #3
 800d468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d478:	2300      	movs	r3, #0
 800d47a:	2200      	movs	r2, #0
 800d47c:	f000 fbf2 	bl	800dc64 <osMessageQueuePut>
      break;
 800d480:	e0e7      	b.n	800d652 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	791b      	ldrb	r3, [r3, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	2100      	movs	r1, #0
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f92b 	bl	800d6e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d496:	b29a      	uxth	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2208      	movs	r2, #8
 800d4a0:	761a      	strb	r2, [r3, #24]

      break;
 800d4a2:	e0db      	b.n	800d65c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	791b      	ldrb	r3, [r3, #4]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f003 fc1a 	bl	8010ce4 <USBH_LL_GetURBState>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d4b4:	7bbb      	ldrb	r3, [r7, #14]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d113      	bne.n	800d4e2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	220d      	movs	r2, #13
 800d4be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2203      	movs	r2, #3
 800d4c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4d8:	2300      	movs	r3, #0
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f000 fbc2 	bl	800dc64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d4e0:	e0b9      	b.n	800d656 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
 800d4e4:	2b04      	cmp	r3, #4
 800d4e6:	d111      	bne.n	800d50c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	220b      	movs	r2, #11
 800d4ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2203      	movs	r2, #3
 800d4f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d502:	2300      	movs	r3, #0
 800d504:	2200      	movs	r2, #0
 800d506:	f000 fbad 	bl	800dc64 <osMessageQueuePut>
      break;
 800d50a:	e0a4      	b.n	800d656 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	2b05      	cmp	r3, #5
 800d510:	f040 80a1 	bne.w	800d656 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d514:	2303      	movs	r3, #3
 800d516:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2203      	movs	r2, #3
 800d51c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d52c:	2300      	movs	r3, #0
 800d52e:	2200      	movs	r2, #0
 800d530:	f000 fb98 	bl	800dc64 <osMessageQueuePut>
      break;
 800d534:	e08f      	b.n	800d656 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	795b      	ldrb	r3, [r3, #5]
 800d53a:	2201      	movs	r2, #1
 800d53c:	9200      	str	r2, [sp, #0]
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f8aa 	bl	800d69c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d54e:	b29a      	uxth	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	220a      	movs	r2, #10
 800d558:	761a      	strb	r2, [r3, #24]
      break;
 800d55a:	e07f      	b.n	800d65c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	795b      	ldrb	r3, [r3, #5]
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f003 fbbe 	bl	8010ce4 <USBH_LL_GetURBState>
 800d568:	4603      	mov	r3, r0
 800d56a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d56c:	7bbb      	ldrb	r3, [r7, #14]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d113      	bne.n	800d59a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	220d      	movs	r2, #13
 800d57a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2203      	movs	r2, #3
 800d580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d590:	2300      	movs	r3, #0
 800d592:	2200      	movs	r2, #0
 800d594:	f000 fb66 	bl	800dc64 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d598:	e05f      	b.n	800d65a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d59a:	7bbb      	ldrb	r3, [r7, #14]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d111      	bne.n	800d5c4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2209      	movs	r2, #9
 800d5a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2203      	movs	r2, #3
 800d5aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f000 fb51 	bl	800dc64 <osMessageQueuePut>
      break;
 800d5c2:	e04a      	b.n	800d65a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d5c4:	7bbb      	ldrb	r3, [r7, #14]
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d147      	bne.n	800d65a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	220b      	movs	r2, #11
 800d5ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f000 fb3c 	bl	800dc64 <osMessageQueuePut>
      break;
 800d5ec:	e035      	b.n	800d65a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	7e5b      	ldrb	r3, [r3, #25]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	765a      	strb	r2, [r3, #25]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7e5b      	ldrb	r3, [r3, #25]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d806      	bhi.n	800d610 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d60e:	e025      	b.n	800d65c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d616:	2106      	movs	r1, #6
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	795b      	ldrb	r3, [r3, #5]
 800d626:	4619      	mov	r1, r3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f90d 	bl	800d848 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	791b      	ldrb	r3, [r3, #4]
 800d632:	4619      	mov	r1, r3
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 f907 	bl	800d848 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d640:	2302      	movs	r3, #2
 800d642:	73fb      	strb	r3, [r7, #15]
      break;
 800d644:	e00a      	b.n	800d65c <USBH_HandleControl+0x484>

    default:
      break;
 800d646:	bf00      	nop
 800d648:	e008      	b.n	800d65c <USBH_HandleControl+0x484>
      break;
 800d64a:	bf00      	nop
 800d64c:	e006      	b.n	800d65c <USBH_HandleControl+0x484>
      break;
 800d64e:	bf00      	nop
 800d650:	e004      	b.n	800d65c <USBH_HandleControl+0x484>
      break;
 800d652:	bf00      	nop
 800d654:	e002      	b.n	800d65c <USBH_HandleControl+0x484>
      break;
 800d656:	bf00      	nop
 800d658:	e000      	b.n	800d65c <USBH_HandleControl+0x484>
      break;
 800d65a:	bf00      	nop
  }

  return status;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop

0800d668 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af04      	add	r7, sp, #16
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	4613      	mov	r3, r2
 800d674:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d676:	79f9      	ldrb	r1, [r7, #7]
 800d678:	2300      	movs	r3, #0
 800d67a:	9303      	str	r3, [sp, #12]
 800d67c:	2308      	movs	r3, #8
 800d67e:	9302      	str	r3, [sp, #8]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	9301      	str	r3, [sp, #4]
 800d684:	2300      	movs	r3, #0
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	2300      	movs	r3, #0
 800d68a:	2200      	movs	r2, #0
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f003 faf8 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3710      	adds	r7, #16
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b088      	sub	sp, #32
 800d6a0:	af04      	add	r7, sp, #16
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	80fb      	strh	r3, [r7, #6]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d6c0:	7979      	ldrb	r1, [r7, #5]
 800d6c2:	7e3b      	ldrb	r3, [r7, #24]
 800d6c4:	9303      	str	r3, [sp, #12]
 800d6c6:	88fb      	ldrh	r3, [r7, #6]
 800d6c8:	9302      	str	r3, [sp, #8]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	9301      	str	r3, [sp, #4]
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f003 fad3 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b088      	sub	sp, #32
 800d6ea:	af04      	add	r7, sp, #16
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	80fb      	strh	r3, [r7, #6]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d6fc:	7979      	ldrb	r1, [r7, #5]
 800d6fe:	2300      	movs	r3, #0
 800d700:	9303      	str	r3, [sp, #12]
 800d702:	88fb      	ldrh	r3, [r7, #6]
 800d704:	9302      	str	r3, [sp, #8]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	2301      	movs	r3, #1
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	2300      	movs	r3, #0
 800d710:	2201      	movs	r2, #1
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f003 fab5 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d718:	2300      	movs	r3, #0

}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b088      	sub	sp, #32
 800d726:	af04      	add	r7, sp, #16
 800d728:	60f8      	str	r0, [r7, #12]
 800d72a:	60b9      	str	r1, [r7, #8]
 800d72c:	4611      	mov	r1, r2
 800d72e:	461a      	mov	r2, r3
 800d730:	460b      	mov	r3, r1
 800d732:	80fb      	strh	r3, [r7, #6]
 800d734:	4613      	mov	r3, r2
 800d736:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d742:	2300      	movs	r3, #0
 800d744:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d746:	7979      	ldrb	r1, [r7, #5]
 800d748:	7e3b      	ldrb	r3, [r7, #24]
 800d74a:	9303      	str	r3, [sp, #12]
 800d74c:	88fb      	ldrh	r3, [r7, #6]
 800d74e:	9302      	str	r3, [sp, #8]
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	2301      	movs	r3, #1
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	2302      	movs	r3, #2
 800d75a:	2200      	movs	r2, #0
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f003 fa90 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b088      	sub	sp, #32
 800d770:	af04      	add	r7, sp, #16
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	4611      	mov	r1, r2
 800d778:	461a      	mov	r2, r3
 800d77a:	460b      	mov	r3, r1
 800d77c:	80fb      	strh	r3, [r7, #6]
 800d77e:	4613      	mov	r3, r2
 800d780:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d782:	7979      	ldrb	r1, [r7, #5]
 800d784:	2300      	movs	r3, #0
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	88fb      	ldrh	r3, [r7, #6]
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	2301      	movs	r3, #1
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	2302      	movs	r3, #2
 800d796:	2201      	movs	r2, #1
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f003 fa72 	bl	8010c82 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af04      	add	r7, sp, #16
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	70fb      	strb	r3, [r7, #3]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70bb      	strb	r3, [r7, #2]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d7c2:	7878      	ldrb	r0, [r7, #1]
 800d7c4:	78ba      	ldrb	r2, [r7, #2]
 800d7c6:	78f9      	ldrb	r1, [r7, #3]
 800d7c8:	8b3b      	ldrh	r3, [r7, #24]
 800d7ca:	9302      	str	r3, [sp, #8]
 800d7cc:	7d3b      	ldrb	r3, [r7, #20]
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	7c3b      	ldrb	r3, [r7, #16]
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f003 fa05 	bl	8010be6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d7f2:	78fb      	ldrb	r3, [r7, #3]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f003 fa24 	bl	8010c44 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f836 	bl	800d884 <USBH_GetFreePipe>
 800d818:	4603      	mov	r3, r0
 800d81a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d81c:	89fb      	ldrh	r3, [r7, #14]
 800d81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d822:	4293      	cmp	r3, r2
 800d824:	d00a      	beq.n	800d83c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d826:	78fa      	ldrb	r2, [r7, #3]
 800d828:	89fb      	ldrh	r3, [r7, #14]
 800d82a:	f003 030f 	and.w	r3, r3, #15
 800d82e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	33e0      	adds	r3, #224	; 0xe0
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	440b      	add	r3, r1
 800d83a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d83c:	89fb      	ldrh	r3, [r7, #14]
 800d83e:	b2db      	uxtb	r3, r3
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d854:	78fb      	ldrb	r3, [r7, #3]
 800d856:	2b0a      	cmp	r3, #10
 800d858:	d80d      	bhi.n	800d876 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	33e0      	adds	r3, #224	; 0xe0
 800d860:	009b      	lsls	r3, r3, #2
 800d862:	4413      	add	r3, r2
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	78fb      	ldrb	r3, [r7, #3]
 800d868:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d86c:	6879      	ldr	r1, [r7, #4]
 800d86e:	33e0      	adds	r3, #224	; 0xe0
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	440b      	add	r3, r1
 800d874:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d890:	2300      	movs	r3, #0
 800d892:	73fb      	strb	r3, [r7, #15]
 800d894:	e00f      	b.n	800d8b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d896:	7bfb      	ldrb	r3, [r7, #15]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	33e0      	adds	r3, #224	; 0xe0
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d102      	bne.n	800d8b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	e007      	b.n	800d8c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	2b0a      	cmp	r3, #10
 800d8ba:	d9ec      	bls.n	800d896 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d8bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3714      	adds	r7, #20
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d8cc:	b480      	push	{r7}
 800d8ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d8d0:	bf00      	nop
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8e2:	f3ef 8305 	mrs	r3, IPSR
 800d8e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d8e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10f      	bne.n	800d90e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f2:	607b      	str	r3, [r7, #4]
  return(result);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d105      	bne.n	800d906 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8fa:	f3ef 8311 	mrs	r3, BASEPRI
 800d8fe:	603b      	str	r3, [r7, #0]
  return(result);
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d007      	beq.n	800d916 <osKernelInitialize+0x3a>
 800d906:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <osKernelInitialize+0x64>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d103      	bne.n	800d916 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d90e:	f06f 0305 	mvn.w	r3, #5
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	e00c      	b.n	800d930 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d916:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <osKernelInitialize+0x64>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d105      	bne.n	800d92a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d91e:	4b08      	ldr	r3, [pc, #32]	; (800d940 <osKernelInitialize+0x64>)
 800d920:	2201      	movs	r2, #1
 800d922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e002      	b.n	800d930 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d92a:	f04f 33ff 	mov.w	r3, #4294967295
 800d92e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d930:	68fb      	ldr	r3, [r7, #12]
}
 800d932:	4618      	mov	r0, r3
 800d934:	3714      	adds	r7, #20
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	20000c70 	.word	0x20000c70

0800d944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d94a:	f3ef 8305 	mrs	r3, IPSR
 800d94e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10f      	bne.n	800d976 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d956:	f3ef 8310 	mrs	r3, PRIMASK
 800d95a:	607b      	str	r3, [r7, #4]
  return(result);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d105      	bne.n	800d96e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d962:	f3ef 8311 	mrs	r3, BASEPRI
 800d966:	603b      	str	r3, [r7, #0]
  return(result);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d007      	beq.n	800d97e <osKernelStart+0x3a>
 800d96e:	4b0f      	ldr	r3, [pc, #60]	; (800d9ac <osKernelStart+0x68>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b02      	cmp	r3, #2
 800d974:	d103      	bne.n	800d97e <osKernelStart+0x3a>
    stat = osErrorISR;
 800d976:	f06f 0305 	mvn.w	r3, #5
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	e010      	b.n	800d9a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d97e:	4b0b      	ldr	r3, [pc, #44]	; (800d9ac <osKernelStart+0x68>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d109      	bne.n	800d99a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d986:	f7ff ffa1 	bl	800d8cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d98a:	4b08      	ldr	r3, [pc, #32]	; (800d9ac <osKernelStart+0x68>)
 800d98c:	2202      	movs	r2, #2
 800d98e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d990:	f001 fab4 	bl	800eefc <vTaskStartScheduler>
      stat = osOK;
 800d994:	2300      	movs	r3, #0
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	e002      	b.n	800d9a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d99a:	f04f 33ff 	mov.w	r3, #4294967295
 800d99e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	20000c70 	.word	0x20000c70

0800d9b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b090      	sub	sp, #64	; 0x40
 800d9b4:	af04      	add	r7, sp, #16
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9c0:	f3ef 8305 	mrs	r3, IPSR
 800d9c4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d9c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f040 808f 	bne.w	800daec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d105      	bne.n	800d9e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9da:	f3ef 8311 	mrs	r3, BASEPRI
 800d9de:	617b      	str	r3, [r7, #20]
  return(result);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <osThreadNew+0x3e>
 800d9e6:	4b44      	ldr	r3, [pc, #272]	; (800daf8 <osThreadNew+0x148>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d07e      	beq.n	800daec <osThreadNew+0x13c>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d07b      	beq.n	800daec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d9f4:	2380      	movs	r3, #128	; 0x80
 800d9f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d9f8:	2318      	movs	r3, #24
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d045      	beq.n	800da98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <osThreadNew+0x6a>
        name = attr->name;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d008      	beq.n	800da40 <osThreadNew+0x90>
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	2b38      	cmp	r3, #56	; 0x38
 800da32:	d805      	bhi.n	800da40 <osThreadNew+0x90>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	f003 0301 	and.w	r3, r3, #1
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <osThreadNew+0x94>
        return (NULL);
 800da40:	2300      	movs	r3, #0
 800da42:	e054      	b.n	800daee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	695b      	ldr	r3, [r3, #20]
 800da50:	089b      	lsrs	r3, r3, #2
 800da52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00e      	beq.n	800da7a <osThreadNew+0xca>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	2b5b      	cmp	r3, #91	; 0x5b
 800da62:	d90a      	bls.n	800da7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d006      	beq.n	800da7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <osThreadNew+0xca>
        mem = 1;
 800da74:	2301      	movs	r3, #1
 800da76:	623b      	str	r3, [r7, #32]
 800da78:	e010      	b.n	800da9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10c      	bne.n	800da9c <osThreadNew+0xec>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d108      	bne.n	800da9c <osThreadNew+0xec>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d104      	bne.n	800da9c <osThreadNew+0xec>
          mem = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	623b      	str	r3, [r7, #32]
 800da96:	e001      	b.n	800da9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d110      	bne.n	800dac4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800daaa:	9202      	str	r2, [sp, #8]
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f001 f849 	bl	800eb50 <xTaskCreateStatic>
 800dabe:	4603      	mov	r3, r0
 800dac0:	613b      	str	r3, [r7, #16]
 800dac2:	e013      	b.n	800daec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d110      	bne.n	800daec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800daca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dacc:	b29a      	uxth	r2, r3
 800dace:	f107 0310 	add.w	r3, r7, #16
 800dad2:	9301      	str	r3, [sp, #4]
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f001 f894 	bl	800ec0a <xTaskCreate>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d001      	beq.n	800daec <osThreadNew+0x13c>
          hTask = NULL;
 800dae8:	2300      	movs	r3, #0
 800daea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800daec:	693b      	ldr	r3, [r7, #16]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3730      	adds	r7, #48	; 0x30
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20000c70 	.word	0x20000c70

0800dafc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db04:	f3ef 8305 	mrs	r3, IPSR
 800db08:	613b      	str	r3, [r7, #16]
  return(result);
 800db0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10f      	bne.n	800db30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db10:	f3ef 8310 	mrs	r3, PRIMASK
 800db14:	60fb      	str	r3, [r7, #12]
  return(result);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d105      	bne.n	800db28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db1c:	f3ef 8311 	mrs	r3, BASEPRI
 800db20:	60bb      	str	r3, [r7, #8]
  return(result);
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d007      	beq.n	800db38 <osDelay+0x3c>
 800db28:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <osDelay+0x58>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d103      	bne.n	800db38 <osDelay+0x3c>
    stat = osErrorISR;
 800db30:	f06f 0305 	mvn.w	r3, #5
 800db34:	617b      	str	r3, [r7, #20]
 800db36:	e007      	b.n	800db48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800db38:	2300      	movs	r3, #0
 800db3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d002      	beq.n	800db48 <osDelay+0x4c>
      vTaskDelay(ticks);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f001 f9a6 	bl	800ee94 <vTaskDelay>
    }
  }

  return (stat);
 800db48:	697b      	ldr	r3, [r7, #20]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	20000c70 	.word	0x20000c70

0800db58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08c      	sub	sp, #48	; 0x30
 800db5c:	af02      	add	r7, sp, #8
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db68:	f3ef 8305 	mrs	r3, IPSR
 800db6c:	61bb      	str	r3, [r7, #24]
  return(result);
 800db6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800db70:	2b00      	cmp	r3, #0
 800db72:	d16f      	bne.n	800dc54 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db74:	f3ef 8310 	mrs	r3, PRIMASK
 800db78:	617b      	str	r3, [r7, #20]
  return(result);
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d105      	bne.n	800db8c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db80:	f3ef 8311 	mrs	r3, BASEPRI
 800db84:	613b      	str	r3, [r7, #16]
  return(result);
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d003      	beq.n	800db94 <osMessageQueueNew+0x3c>
 800db8c:	4b34      	ldr	r3, [pc, #208]	; (800dc60 <osMessageQueueNew+0x108>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d05f      	beq.n	800dc54 <osMessageQueueNew+0xfc>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d05c      	beq.n	800dc54 <osMessageQueueNew+0xfc>
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d059      	beq.n	800dc54 <osMessageQueueNew+0xfc>
    mem = -1;
 800dba0:	f04f 33ff 	mov.w	r3, #4294967295
 800dba4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d029      	beq.n	800dc00 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d012      	beq.n	800dbda <osMessageQueueNew+0x82>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	2b4f      	cmp	r3, #79	; 0x4f
 800dbba:	d90e      	bls.n	800dbda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00a      	beq.n	800dbda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	695a      	ldr	r2, [r3, #20]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	fb01 f303 	mul.w	r3, r1, r3
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d302      	bcc.n	800dbda <osMessageQueueNew+0x82>
        mem = 1;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	623b      	str	r3, [r7, #32]
 800dbd8:	e014      	b.n	800dc04 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d110      	bne.n	800dc04 <osMessageQueueNew+0xac>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10c      	bne.n	800dc04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d108      	bne.n	800dc04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d104      	bne.n	800dc04 <osMessageQueueNew+0xac>
          mem = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	623b      	str	r3, [r7, #32]
 800dbfe:	e001      	b.n	800dc04 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d10b      	bne.n	800dc22 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	691a      	ldr	r2, [r3, #16]
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	2100      	movs	r1, #0
 800dc14:	9100      	str	r1, [sp, #0]
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f000 fa59 	bl	800e0d0 <xQueueGenericCreateStatic>
 800dc1e:	6278      	str	r0, [r7, #36]	; 0x24
 800dc20:	e008      	b.n	800dc34 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d105      	bne.n	800dc34 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800dc28:	2200      	movs	r2, #0
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 fac7 	bl	800e1c0 <xQueueGenericCreate>
 800dc32:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00c      	beq.n	800dc54 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <osMessageQueueNew+0xf0>
        name = attr->name;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	61fb      	str	r3, [r7, #28]
 800dc46:	e001      	b.n	800dc4c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800dc4c:	69f9      	ldr	r1, [r7, #28]
 800dc4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc50:	f000 ff20 	bl	800ea94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3728      	adds	r7, #40	; 0x28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	20000c70 	.word	0x20000c70

0800dc64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08a      	sub	sp, #40	; 0x28
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	603b      	str	r3, [r7, #0]
 800dc70:	4613      	mov	r3, r2
 800dc72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc7c:	f3ef 8305 	mrs	r3, IPSR
 800dc80:	61fb      	str	r3, [r7, #28]
  return(result);
 800dc82:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10f      	bne.n	800dca8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc88:	f3ef 8310 	mrs	r3, PRIMASK
 800dc8c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d105      	bne.n	800dca0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc94:	f3ef 8311 	mrs	r3, BASEPRI
 800dc98:	617b      	str	r3, [r7, #20]
  return(result);
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d02c      	beq.n	800dcfa <osMessageQueuePut+0x96>
 800dca0:	4b28      	ldr	r3, [pc, #160]	; (800dd44 <osMessageQueuePut+0xe0>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d128      	bne.n	800dcfa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dca8:	6a3b      	ldr	r3, [r7, #32]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d005      	beq.n	800dcba <osMessageQueuePut+0x56>
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <osMessageQueuePut+0x56>
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d003      	beq.n	800dcc2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dcba:	f06f 0303 	mvn.w	r3, #3
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcc0:	e039      	b.n	800dd36 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dcc6:	f107 0210 	add.w	r2, r7, #16
 800dcca:	2300      	movs	r3, #0
 800dccc:	68b9      	ldr	r1, [r7, #8]
 800dcce:	6a38      	ldr	r0, [r7, #32]
 800dcd0:	f000 fbd8 	bl	800e484 <xQueueGenericSendFromISR>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d003      	beq.n	800dce2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dcda:	f06f 0302 	mvn.w	r3, #2
 800dcde:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dce0:	e029      	b.n	800dd36 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d026      	beq.n	800dd36 <osMessageQueuePut+0xd2>
 800dce8:	4b17      	ldr	r3, [pc, #92]	; (800dd48 <osMessageQueuePut+0xe4>)
 800dcea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcee:	601a      	str	r2, [r3, #0]
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcf8:	e01d      	b.n	800dd36 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <osMessageQueuePut+0xa2>
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d103      	bne.n	800dd0e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800dd06:	f06f 0303 	mvn.w	r3, #3
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd0c:	e014      	b.n	800dd38 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd0e:	2300      	movs	r3, #0
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	6a38      	ldr	r0, [r7, #32]
 800dd16:	f000 fab7 	bl	800e288 <xQueueGenericSend>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d00b      	beq.n	800dd38 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d003      	beq.n	800dd2e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800dd26:	f06f 0301 	mvn.w	r3, #1
 800dd2a:	627b      	str	r3, [r7, #36]	; 0x24
 800dd2c:	e004      	b.n	800dd38 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800dd2e:	f06f 0302 	mvn.w	r3, #2
 800dd32:	627b      	str	r3, [r7, #36]	; 0x24
 800dd34:	e000      	b.n	800dd38 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3728      	adds	r7, #40	; 0x28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	20000c70 	.word	0x20000c70
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08a      	sub	sp, #40	; 0x28
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd62:	f3ef 8305 	mrs	r3, IPSR
 800dd66:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd68:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10f      	bne.n	800dd8e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd6e:	f3ef 8310 	mrs	r3, PRIMASK
 800dd72:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd7a:	f3ef 8311 	mrs	r3, BASEPRI
 800dd7e:	617b      	str	r3, [r7, #20]
  return(result);
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d02c      	beq.n	800dde0 <osMessageQueueGet+0x94>
 800dd86:	4b28      	ldr	r3, [pc, #160]	; (800de28 <osMessageQueueGet+0xdc>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d128      	bne.n	800dde0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <osMessageQueueGet+0x54>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <osMessageQueueGet+0x54>
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d003      	beq.n	800dda8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800dda0:	f06f 0303 	mvn.w	r3, #3
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dda6:	e038      	b.n	800de1a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ddac:	f107 0310 	add.w	r3, r7, #16
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	68b9      	ldr	r1, [r7, #8]
 800ddb4:	6a38      	ldr	r0, [r7, #32]
 800ddb6:	f000 fcdd 	bl	800e774 <xQueueReceiveFromISR>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d003      	beq.n	800ddc8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ddc0:	f06f 0302 	mvn.w	r3, #2
 800ddc4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddc6:	e028      	b.n	800de1a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d025      	beq.n	800de1a <osMessageQueueGet+0xce>
 800ddce:	4b17      	ldr	r3, [pc, #92]	; (800de2c <osMessageQueueGet+0xe0>)
 800ddd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddde:	e01c      	b.n	800de1a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dde0:	6a3b      	ldr	r3, [r7, #32]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d002      	beq.n	800ddec <osMessageQueueGet+0xa0>
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d103      	bne.n	800ddf4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ddec:	f06f 0303 	mvn.w	r3, #3
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf2:	e013      	b.n	800de1c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	68b9      	ldr	r1, [r7, #8]
 800ddf8:	6a38      	ldr	r0, [r7, #32]
 800ddfa:	f000 fbdb 	bl	800e5b4 <xQueueReceive>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b01      	cmp	r3, #1
 800de02:	d00b      	beq.n	800de1c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800de0a:	f06f 0301 	mvn.w	r3, #1
 800de0e:	627b      	str	r3, [r7, #36]	; 0x24
 800de10:	e004      	b.n	800de1c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800de12:	f06f 0302 	mvn.w	r3, #2
 800de16:	627b      	str	r3, [r7, #36]	; 0x24
 800de18:	e000      	b.n	800de1c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de1a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3728      	adds	r7, #40	; 0x28
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	20000c70 	.word	0x20000c70
 800de2c:	e000ed04 	.word	0xe000ed04

0800de30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	4a07      	ldr	r2, [pc, #28]	; (800de5c <vApplicationGetIdleTaskMemory+0x2c>)
 800de40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	4a06      	ldr	r2, [pc, #24]	; (800de60 <vApplicationGetIdleTaskMemory+0x30>)
 800de46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2280      	movs	r2, #128	; 0x80
 800de4c:	601a      	str	r2, [r3, #0]
}
 800de4e:	bf00      	nop
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	20000c74 	.word	0x20000c74
 800de60:	20000cd0 	.word	0x20000cd0

0800de64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a07      	ldr	r2, [pc, #28]	; (800de90 <vApplicationGetTimerTaskMemory+0x2c>)
 800de74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	4a06      	ldr	r2, [pc, #24]	; (800de94 <vApplicationGetTimerTaskMemory+0x30>)
 800de7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de82:	601a      	str	r2, [r3, #0]
}
 800de84:	bf00      	nop
 800de86:	3714      	adds	r7, #20
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr
 800de90:	20000ed0 	.word	0x20000ed0
 800de94:	20000f2c 	.word	0x20000f2c

0800de98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f103 0208 	add.w	r2, r3, #8
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f103 0208 	add.w	r2, r3, #8
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f103 0208 	add.w	r2, r3, #8
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dee6:	bf00      	nop
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800def2:	b480      	push	{r7}
 800def4:	b085      	sub	sp, #20
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	689a      	ldr	r2, [r3, #8]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	683a      	ldr	r2, [r7, #0]
 800df16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	1c5a      	adds	r2, r3, #1
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	601a      	str	r2, [r3, #0]
}
 800df2e:	bf00      	nop
 800df30:	3714      	adds	r7, #20
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df3a:	b480      	push	{r7}
 800df3c:	b085      	sub	sp, #20
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df50:	d103      	bne.n	800df5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	60fb      	str	r3, [r7, #12]
 800df58:	e00c      	b.n	800df74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	3308      	adds	r3, #8
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e002      	b.n	800df68 <vListInsert+0x2e>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	429a      	cmp	r2, r3
 800df72:	d2f6      	bcs.n	800df62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	1c5a      	adds	r2, r3, #1
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	601a      	str	r2, [r3, #0]
}
 800dfa0:	bf00      	nop
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	6892      	ldr	r2, [r2, #8]
 800dfc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	6852      	ldr	r2, [r2, #4]
 800dfcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d103      	bne.n	800dfe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	689a      	ldr	r2, [r3, #8]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	1e5a      	subs	r2, r3, #1
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10a      	bne.n	800e02a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e02a:	f002 f90b 	bl	8010244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e036:	68f9      	ldr	r1, [r7, #12]
 800e038:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e03a:	fb01 f303 	mul.w	r3, r1, r3
 800e03e:	441a      	add	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e05a:	3b01      	subs	r3, #1
 800e05c:	68f9      	ldr	r1, [r7, #12]
 800e05e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e060:	fb01 f303 	mul.w	r3, r1, r3
 800e064:	441a      	add	r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	22ff      	movs	r2, #255	; 0xff
 800e06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	22ff      	movs	r2, #255	; 0xff
 800e076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d114      	bne.n	800e0aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d01a      	beq.n	800e0be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3310      	adds	r3, #16
 800e08c:	4618      	mov	r0, r3
 800e08e:	f001 f9bf 	bl	800f410 <xTaskRemoveFromEventList>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d012      	beq.n	800e0be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e098:	4b0c      	ldr	r3, [pc, #48]	; (800e0cc <xQueueGenericReset+0xcc>)
 800e09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	e009      	b.n	800e0be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff fef2 	bl	800de98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3324      	adds	r3, #36	; 0x24
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff feed 	bl	800de98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0be:	f002 f8f1 	bl	80102a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0c2:	2301      	movs	r3, #1
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	e000ed04 	.word	0xe000ed04

0800e0d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b08e      	sub	sp, #56	; 0x38
 800e0d4:	af02      	add	r7, sp, #8
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
 800e0dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10a      	bne.n	800e0fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e8:	f383 8811 	msr	BASEPRI, r3
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e0f6:	bf00      	nop
 800e0f8:	e7fe      	b.n	800e0f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10a      	bne.n	800e116 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <xQueueGenericCreateStatic+0x52>
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <xQueueGenericCreateStatic+0x56>
 800e122:	2301      	movs	r3, #1
 800e124:	e000      	b.n	800e128 <xQueueGenericCreateStatic+0x58>
 800e126:	2300      	movs	r3, #0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10a      	bne.n	800e142 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	623b      	str	r3, [r7, #32]
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d102      	bne.n	800e14e <xQueueGenericCreateStatic+0x7e>
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <xQueueGenericCreateStatic+0x82>
 800e14e:	2301      	movs	r3, #1
 800e150:	e000      	b.n	800e154 <xQueueGenericCreateStatic+0x84>
 800e152:	2300      	movs	r3, #0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10a      	bne.n	800e16e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	61fb      	str	r3, [r7, #28]
}
 800e16a:	bf00      	nop
 800e16c:	e7fe      	b.n	800e16c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e16e:	2350      	movs	r3, #80	; 0x50
 800e170:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2b50      	cmp	r3, #80	; 0x50
 800e176:	d00a      	beq.n	800e18e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	61bb      	str	r3, [r7, #24]
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e18e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00d      	beq.n	800e1b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	68b9      	ldr	r1, [r7, #8]
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f000 f845 	bl	800e240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3730      	adds	r7, #48	; 0x30
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08a      	sub	sp, #40	; 0x28
 800e1c4:	af02      	add	r7, sp, #8
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10a      	bne.n	800e1ea <xQueueGenericCreate+0x2a>
	__asm volatile
 800e1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	613b      	str	r3, [r7, #16]
}
 800e1e6:	bf00      	nop
 800e1e8:	e7fe      	b.n	800e1e8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d102      	bne.n	800e1f6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	61fb      	str	r3, [r7, #28]
 800e1f4:	e004      	b.n	800e200 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	fb02 f303 	mul.w	r3, r2, r3
 800e1fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	3350      	adds	r3, #80	; 0x50
 800e204:	4618      	mov	r0, r3
 800e206:	f002 f93f 	bl	8010488 <pvPortMalloc>
 800e20a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d011      	beq.n	800e236 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	3350      	adds	r3, #80	; 0x50
 800e21a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e224:	79fa      	ldrb	r2, [r7, #7]
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	4613      	mov	r3, r2
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	68b9      	ldr	r1, [r7, #8]
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f000 f805 	bl	800e240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e236:	69bb      	ldr	r3, [r7, #24]
	}
 800e238:	4618      	mov	r0, r3
 800e23a:	3720      	adds	r7, #32
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
 800e24c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	69ba      	ldr	r2, [r7, #24]
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	e002      	b.n	800e262 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e26e:	2101      	movs	r1, #1
 800e270:	69b8      	ldr	r0, [r7, #24]
 800e272:	f7ff fec5 	bl	800e000 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	78fa      	ldrb	r2, [r7, #3]
 800e27a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e27e:	bf00      	nop
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08e      	sub	sp, #56	; 0x38
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e296:	2300      	movs	r3, #0
 800e298:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10a      	bne.n	800e2ba <xQueueGenericSend+0x32>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e2b6:	bf00      	nop
 800e2b8:	e7fe      	b.n	800e2b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d103      	bne.n	800e2c8 <xQueueGenericSend+0x40>
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <xQueueGenericSend+0x44>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e000      	b.n	800e2ce <xQueueGenericSend+0x46>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10a      	bne.n	800e2e8 <xQueueGenericSend+0x60>
	__asm volatile
 800e2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d6:	f383 8811 	msr	BASEPRI, r3
 800e2da:	f3bf 8f6f 	isb	sy
 800e2de:	f3bf 8f4f 	dsb	sy
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e2e4:	bf00      	nop
 800e2e6:	e7fe      	b.n	800e2e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d103      	bne.n	800e2f6 <xQueueGenericSend+0x6e>
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d101      	bne.n	800e2fa <xQueueGenericSend+0x72>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e000      	b.n	800e2fc <xQueueGenericSend+0x74>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10a      	bne.n	800e316 <xQueueGenericSend+0x8e>
	__asm volatile
 800e300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e304:	f383 8811 	msr	BASEPRI, r3
 800e308:	f3bf 8f6f 	isb	sy
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	623b      	str	r3, [r7, #32]
}
 800e312:	bf00      	nop
 800e314:	e7fe      	b.n	800e314 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e316:	f001 fa39 	bl	800f78c <xTaskGetSchedulerState>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <xQueueGenericSend+0x9e>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d101      	bne.n	800e32a <xQueueGenericSend+0xa2>
 800e326:	2301      	movs	r3, #1
 800e328:	e000      	b.n	800e32c <xQueueGenericSend+0xa4>
 800e32a:	2300      	movs	r3, #0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10a      	bne.n	800e346 <xQueueGenericSend+0xbe>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	61fb      	str	r3, [r7, #28]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e346:	f001 ff7d 	bl	8010244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e352:	429a      	cmp	r2, r3
 800e354:	d302      	bcc.n	800e35c <xQueueGenericSend+0xd4>
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d129      	bne.n	800e3b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	68b9      	ldr	r1, [r7, #8]
 800e360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e362:	f000 fa87 	bl	800e874 <prvCopyDataToQueue>
 800e366:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d010      	beq.n	800e392 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	3324      	adds	r3, #36	; 0x24
 800e374:	4618      	mov	r0, r3
 800e376:	f001 f84b 	bl	800f410 <xTaskRemoveFromEventList>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d013      	beq.n	800e3a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e380:	4b3f      	ldr	r3, [pc, #252]	; (800e480 <xQueueGenericSend+0x1f8>)
 800e382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	f3bf 8f6f 	isb	sy
 800e390:	e00a      	b.n	800e3a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e394:	2b00      	cmp	r3, #0
 800e396:	d007      	beq.n	800e3a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e398:	4b39      	ldr	r3, [pc, #228]	; (800e480 <xQueueGenericSend+0x1f8>)
 800e39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3a8:	f001 ff7c 	bl	80102a4 <vPortExitCritical>
				return pdPASS;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e063      	b.n	800e478 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d103      	bne.n	800e3be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3b6:	f001 ff75 	bl	80102a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e05c      	b.n	800e478 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3c4:	f107 0314 	add.w	r3, r7, #20
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f001 f885 	bl	800f4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3d2:	f001 ff67 	bl	80102a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3d6:	f000 fdf7 	bl	800efc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3da:	f001 ff33 	bl	8010244 <vPortEnterCritical>
 800e3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3e4:	b25b      	sxtb	r3, r3
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ea:	d103      	bne.n	800e3f4 <xQueueGenericSend+0x16c>
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3fa:	b25b      	sxtb	r3, r3
 800e3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e400:	d103      	bne.n	800e40a <xQueueGenericSend+0x182>
 800e402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e404:	2200      	movs	r2, #0
 800e406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e40a:	f001 ff4b 	bl	80102a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e40e:	1d3a      	adds	r2, r7, #4
 800e410:	f107 0314 	add.w	r3, r7, #20
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f001 f874 	bl	800f504 <xTaskCheckForTimeOut>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d124      	bne.n	800e46c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e424:	f000 fb1e 	bl	800ea64 <prvIsQueueFull>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d018      	beq.n	800e460 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	3310      	adds	r3, #16
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	4611      	mov	r1, r2
 800e436:	4618      	mov	r0, r3
 800e438:	f000 ff9a 	bl	800f370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e43e:	f000 faa9 	bl	800e994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e442:	f000 fdcf 	bl	800efe4 <xTaskResumeAll>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f47f af7c 	bne.w	800e346 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e44e:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <xQueueGenericSend+0x1f8>)
 800e450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e454:	601a      	str	r2, [r3, #0]
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	e772      	b.n	800e346 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e462:	f000 fa97 	bl	800e994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e466:	f000 fdbd 	bl	800efe4 <xTaskResumeAll>
 800e46a:	e76c      	b.n	800e346 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e46e:	f000 fa91 	bl	800e994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e472:	f000 fdb7 	bl	800efe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e476:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3738      	adds	r7, #56	; 0x38
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	e000ed04 	.word	0xe000ed04

0800e484 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08e      	sub	sp, #56	; 0x38
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
 800e490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10a      	bne.n	800e4b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4ae:	bf00      	nop
 800e4b0:	e7fe      	b.n	800e4b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d103      	bne.n	800e4c0 <xQueueGenericSendFromISR+0x3c>
 800e4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d101      	bne.n	800e4c4 <xQueueGenericSendFromISR+0x40>
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	e000      	b.n	800e4c6 <xQueueGenericSendFromISR+0x42>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10a      	bne.n	800e4e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	623b      	str	r3, [r7, #32]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d103      	bne.n	800e4ee <xQueueGenericSendFromISR+0x6a>
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d101      	bne.n	800e4f2 <xQueueGenericSendFromISR+0x6e>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e000      	b.n	800e4f4 <xQueueGenericSendFromISR+0x70>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10a      	bne.n	800e50e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	61fb      	str	r3, [r7, #28]
}
 800e50a:	bf00      	nop
 800e50c:	e7fe      	b.n	800e50c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e50e:	f001 ff7b 	bl	8010408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e512:	f3ef 8211 	mrs	r2, BASEPRI
 800e516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	61ba      	str	r2, [r7, #24]
 800e528:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e52a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e52c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e536:	429a      	cmp	r2, r3
 800e538:	d302      	bcc.n	800e540 <xQueueGenericSendFromISR+0xbc>
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d12c      	bne.n	800e59a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	68b9      	ldr	r1, [r7, #8]
 800e54e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e550:	f000 f990 	bl	800e874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e554:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55c:	d112      	bne.n	800e584 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e562:	2b00      	cmp	r3, #0
 800e564:	d016      	beq.n	800e594 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e568:	3324      	adds	r3, #36	; 0x24
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 ff50 	bl	800f410 <xTaskRemoveFromEventList>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00e      	beq.n	800e594 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00b      	beq.n	800e594 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	601a      	str	r2, [r3, #0]
 800e582:	e007      	b.n	800e594 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e584:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e588:	3301      	adds	r3, #1
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	b25a      	sxtb	r2, r3
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e594:	2301      	movs	r3, #1
 800e596:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e598:	e001      	b.n	800e59e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	637b      	str	r3, [r7, #52]	; 0x34
 800e59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3738      	adds	r7, #56	; 0x38
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08c      	sub	sp, #48	; 0x30
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <xQueueReceive+0x30>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	623b      	str	r3, [r7, #32]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d103      	bne.n	800e5f2 <xQueueReceive+0x3e>
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d101      	bne.n	800e5f6 <xQueueReceive+0x42>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e000      	b.n	800e5f8 <xQueueReceive+0x44>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10a      	bne.n	800e612 <xQueueReceive+0x5e>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	61fb      	str	r3, [r7, #28]
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e612:	f001 f8bb 	bl	800f78c <xTaskGetSchedulerState>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d102      	bne.n	800e622 <xQueueReceive+0x6e>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <xQueueReceive+0x72>
 800e622:	2301      	movs	r3, #1
 800e624:	e000      	b.n	800e628 <xQueueReceive+0x74>
 800e626:	2300      	movs	r3, #0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10a      	bne.n	800e642 <xQueueReceive+0x8e>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	61bb      	str	r3, [r7, #24]
}
 800e63e:	bf00      	nop
 800e640:	e7fe      	b.n	800e640 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e642:	f001 fdff 	bl	8010244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e64a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d01f      	beq.n	800e692 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e652:	68b9      	ldr	r1, [r7, #8]
 800e654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e656:	f000 f977 	bl	800e948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	1e5a      	subs	r2, r3, #1
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00f      	beq.n	800e68a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	3310      	adds	r3, #16
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 fece 	bl	800f410 <xTaskRemoveFromEventList>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d007      	beq.n	800e68a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e67a:	4b3d      	ldr	r3, [pc, #244]	; (800e770 <xQueueReceive+0x1bc>)
 800e67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e680:	601a      	str	r2, [r3, #0]
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e68a:	f001 fe0b 	bl	80102a4 <vPortExitCritical>
				return pdPASS;
 800e68e:	2301      	movs	r3, #1
 800e690:	e069      	b.n	800e766 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d103      	bne.n	800e6a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e698:	f001 fe04 	bl	80102a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e69c:	2300      	movs	r3, #0
 800e69e:	e062      	b.n	800e766 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6a6:	f107 0310 	add.w	r3, r7, #16
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 ff14 	bl	800f4d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6b4:	f001 fdf6 	bl	80102a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6b8:	f000 fc86 	bl	800efc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6bc:	f001 fdc2 	bl	8010244 <vPortEnterCritical>
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6c6:	b25b      	sxtb	r3, r3
 800e6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6cc:	d103      	bne.n	800e6d6 <xQueueReceive+0x122>
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6dc:	b25b      	sxtb	r3, r3
 800e6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e2:	d103      	bne.n	800e6ec <xQueueReceive+0x138>
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6ec:	f001 fdda 	bl	80102a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6f0:	1d3a      	adds	r2, r7, #4
 800e6f2:	f107 0310 	add.w	r3, r7, #16
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f000 ff03 	bl	800f504 <xTaskCheckForTimeOut>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d123      	bne.n	800e74c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e706:	f000 f997 	bl	800ea38 <prvIsQueueEmpty>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d017      	beq.n	800e740 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	3324      	adds	r3, #36	; 0x24
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	4611      	mov	r1, r2
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 fe29 	bl	800f370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e71e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e720:	f000 f938 	bl	800e994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e724:	f000 fc5e 	bl	800efe4 <xTaskResumeAll>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d189      	bne.n	800e642 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e72e:	4b10      	ldr	r3, [pc, #64]	; (800e770 <xQueueReceive+0x1bc>)
 800e730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e734:	601a      	str	r2, [r3, #0]
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	e780      	b.n	800e642 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e742:	f000 f927 	bl	800e994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e746:	f000 fc4d 	bl	800efe4 <xTaskResumeAll>
 800e74a:	e77a      	b.n	800e642 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e74e:	f000 f921 	bl	800e994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e752:	f000 fc47 	bl	800efe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e758:	f000 f96e 	bl	800ea38 <prvIsQueueEmpty>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f43f af6f 	beq.w	800e642 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e766:	4618      	mov	r0, r3
 800e768:	3730      	adds	r7, #48	; 0x30
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	e000ed04 	.word	0xe000ed04

0800e774 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08e      	sub	sp, #56	; 0x38
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10a      	bne.n	800e7a0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78e:	f383 8811 	msr	BASEPRI, r3
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	623b      	str	r3, [r7, #32]
}
 800e79c:	bf00      	nop
 800e79e:	e7fe      	b.n	800e79e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d103      	bne.n	800e7ae <xQueueReceiveFromISR+0x3a>
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <xQueueReceiveFromISR+0x3e>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e000      	b.n	800e7b4 <xQueueReceiveFromISR+0x40>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10a      	bne.n	800e7ce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	61fb      	str	r3, [r7, #28]
}
 800e7ca:	bf00      	nop
 800e7cc:	e7fe      	b.n	800e7cc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ce:	f001 fe1b 	bl	8010408 <vPortValidateInterruptPriority>
	__asm volatile
 800e7d2:	f3ef 8211 	mrs	r2, BASEPRI
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	61ba      	str	r2, [r7, #24]
 800e7e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e7ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d02f      	beq.n	800e85a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e804:	68b9      	ldr	r1, [r7, #8]
 800e806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e808:	f000 f89e 	bl	800e948 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	1e5a      	subs	r2, r3, #1
 800e810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e812:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81c:	d112      	bne.n	800e844 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d016      	beq.n	800e854 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	3310      	adds	r3, #16
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 fdf0 	bl	800f410 <xTaskRemoveFromEventList>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00e      	beq.n	800e854 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00b      	beq.n	800e854 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2201      	movs	r2, #1
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	e007      	b.n	800e854 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e848:	3301      	adds	r3, #1
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	b25a      	sxtb	r2, r3
 800e84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e854:	2301      	movs	r3, #1
 800e856:	637b      	str	r3, [r7, #52]	; 0x34
 800e858:	e001      	b.n	800e85e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e85a:	2300      	movs	r3, #0
 800e85c:	637b      	str	r3, [r7, #52]	; 0x34
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	f383 8811 	msr	BASEPRI, r3
}
 800e868:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3738      	adds	r7, #56	; 0x38
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e880:	2300      	movs	r3, #0
 800e882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10d      	bne.n	800e8ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d14d      	bne.n	800e936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f000 ff92 	bl	800f7c8 <xTaskPriorityDisinherit>
 800e8a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	609a      	str	r2, [r3, #8]
 800e8ac:	e043      	b.n	800e936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d119      	bne.n	800e8e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6858      	ldr	r0, [r3, #4]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	f003 fb56 	bl	8011f70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8cc:	441a      	add	r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	685a      	ldr	r2, [r3, #4]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d32b      	bcc.n	800e936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	605a      	str	r2, [r3, #4]
 800e8e6:	e026      	b.n	800e936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	68d8      	ldr	r0, [r3, #12]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	68b9      	ldr	r1, [r7, #8]
 800e8f4:	f003 fb3c 	bl	8011f70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	68da      	ldr	r2, [r3, #12]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e900:	425b      	negs	r3, r3
 800e902:	441a      	add	r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	68da      	ldr	r2, [r3, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	d207      	bcs.n	800e924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	689a      	ldr	r2, [r3, #8]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91c:	425b      	negs	r3, r3
 800e91e:	441a      	add	r2, r3
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b02      	cmp	r3, #2
 800e928:	d105      	bne.n	800e936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	3b01      	subs	r3, #1
 800e934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e93e:	697b      	ldr	r3, [r7, #20]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3718      	adds	r7, #24
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e956:	2b00      	cmp	r3, #0
 800e958:	d018      	beq.n	800e98c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	68da      	ldr	r2, [r3, #12]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e962:	441a      	add	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68da      	ldr	r2, [r3, #12]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	429a      	cmp	r2, r3
 800e972:	d303      	bcc.n	800e97c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	68d9      	ldr	r1, [r3, #12]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e984:	461a      	mov	r2, r3
 800e986:	6838      	ldr	r0, [r7, #0]
 800e988:	f003 faf2 	bl	8011f70 <memcpy>
	}
}
 800e98c:	bf00      	nop
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e99c:	f001 fc52 	bl	8010244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9a8:	e011      	b.n	800e9ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d012      	beq.n	800e9d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3324      	adds	r3, #36	; 0x24
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f000 fd2a 	bl	800f410 <xTaskRemoveFromEventList>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9c2:	f000 fe01 	bl	800f5c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9c6:	7bfb      	ldrb	r3, [r7, #15]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	dce9      	bgt.n	800e9aa <prvUnlockQueue+0x16>
 800e9d6:	e000      	b.n	800e9da <prvUnlockQueue+0x46>
					break;
 800e9d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	22ff      	movs	r2, #255	; 0xff
 800e9de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e9e2:	f001 fc5f 	bl	80102a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9e6:	f001 fc2d 	bl	8010244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9f2:	e011      	b.n	800ea18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d012      	beq.n	800ea22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3310      	adds	r3, #16
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 fd05 	bl	800f410 <xTaskRemoveFromEventList>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea0c:	f000 fddc 	bl	800f5c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea10:	7bbb      	ldrb	r3, [r7, #14]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	dce9      	bgt.n	800e9f4 <prvUnlockQueue+0x60>
 800ea20:	e000      	b.n	800ea24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	22ff      	movs	r2, #255	; 0xff
 800ea28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea2c:	f001 fc3a 	bl	80102a4 <vPortExitCritical>
}
 800ea30:	bf00      	nop
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea40:	f001 fc00 	bl	8010244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	e001      	b.n	800ea56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea52:	2300      	movs	r3, #0
 800ea54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea56:	f001 fc25 	bl	80102a4 <vPortExitCritical>

	return xReturn;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea6c:	f001 fbea 	bl	8010244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d102      	bne.n	800ea82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	e001      	b.n	800ea86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea86:	f001 fc0d 	bl	80102a4 <vPortExitCritical>

	return xReturn;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	60fb      	str	r3, [r7, #12]
 800eaa2:	e014      	b.n	800eace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eaa4:	4a0f      	ldr	r2, [pc, #60]	; (800eae4 <vQueueAddToRegistry+0x50>)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d10b      	bne.n	800eac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eab0:	490c      	ldr	r1, [pc, #48]	; (800eae4 <vQueueAddToRegistry+0x50>)
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	683a      	ldr	r2, [r7, #0]
 800eab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eaba:	4a0a      	ldr	r2, [pc, #40]	; (800eae4 <vQueueAddToRegistry+0x50>)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	4413      	add	r3, r2
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eac6:	e006      	b.n	800ead6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3301      	adds	r3, #1
 800eacc:	60fb      	str	r3, [r7, #12]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2b07      	cmp	r3, #7
 800ead2:	d9e7      	bls.n	800eaa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	200055f0 	.word	0x200055f0

0800eae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b086      	sub	sp, #24
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eaf8:	f001 fba4 	bl	8010244 <vPortEnterCritical>
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb02:	b25b      	sxtb	r3, r3
 800eb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb08:	d103      	bne.n	800eb12 <vQueueWaitForMessageRestricted+0x2a>
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb18:	b25b      	sxtb	r3, r3
 800eb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1e:	d103      	bne.n	800eb28 <vQueueWaitForMessageRestricted+0x40>
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb28:	f001 fbbc 	bl	80102a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d106      	bne.n	800eb42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	3324      	adds	r3, #36	; 0x24
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	68b9      	ldr	r1, [r7, #8]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 fc3b 	bl	800f3b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb42:	6978      	ldr	r0, [r7, #20]
 800eb44:	f7ff ff26 	bl	800e994 <prvUnlockQueue>
	}
 800eb48:	bf00      	nop
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08e      	sub	sp, #56	; 0x38
 800eb54:	af04      	add	r7, sp, #16
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10a      	bne.n	800eb7a <xTaskCreateStatic+0x2a>
	__asm volatile
 800eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	623b      	str	r3, [r7, #32]
}
 800eb76:	bf00      	nop
 800eb78:	e7fe      	b.n	800eb78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10a      	bne.n	800eb96 <xTaskCreateStatic+0x46>
	__asm volatile
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	61fb      	str	r3, [r7, #28]
}
 800eb92:	bf00      	nop
 800eb94:	e7fe      	b.n	800eb94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb96:	235c      	movs	r3, #92	; 0x5c
 800eb98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	2b5c      	cmp	r3, #92	; 0x5c
 800eb9e:	d00a      	beq.n	800ebb6 <xTaskCreateStatic+0x66>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	61bb      	str	r3, [r7, #24]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d01e      	beq.n	800ebfc <xTaskCreateStatic+0xac>
 800ebbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01b      	beq.n	800ebfc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd0:	2202      	movs	r2, #2
 800ebd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	9303      	str	r3, [sp, #12]
 800ebda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebdc:	9302      	str	r3, [sp, #8]
 800ebde:	f107 0314 	add.w	r3, r7, #20
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	68b9      	ldr	r1, [r7, #8]
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	f000 f850 	bl	800ec94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebf6:	f000 f8dd 	bl	800edb4 <prvAddNewTaskToReadyList>
 800ebfa:	e001      	b.n	800ec00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec00:	697b      	ldr	r3, [r7, #20]
	}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3728      	adds	r7, #40	; 0x28
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b08c      	sub	sp, #48	; 0x30
 800ec0e:	af04      	add	r7, sp, #16
 800ec10:	60f8      	str	r0, [r7, #12]
 800ec12:	60b9      	str	r1, [r7, #8]
 800ec14:	603b      	str	r3, [r7, #0]
 800ec16:	4613      	mov	r3, r2
 800ec18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec1a:	88fb      	ldrh	r3, [r7, #6]
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f001 fc32 	bl	8010488 <pvPortMalloc>
 800ec24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00e      	beq.n	800ec4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec2c:	205c      	movs	r0, #92	; 0x5c
 800ec2e:	f001 fc2b 	bl	8010488 <pvPortMalloc>
 800ec32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d003      	beq.n	800ec42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	697a      	ldr	r2, [r7, #20]
 800ec3e:	631a      	str	r2, [r3, #48]	; 0x30
 800ec40:	e005      	b.n	800ec4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec42:	6978      	ldr	r0, [r7, #20]
 800ec44:	f001 fce4 	bl	8010610 <vPortFree>
 800ec48:	e001      	b.n	800ec4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d017      	beq.n	800ec84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec5c:	88fa      	ldrh	r2, [r7, #6]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	9303      	str	r3, [sp, #12]
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	9302      	str	r3, [sp, #8]
 800ec66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	68b9      	ldr	r1, [r7, #8]
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 f80e 	bl	800ec94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec78:	69f8      	ldr	r0, [r7, #28]
 800ec7a:	f000 f89b 	bl	800edb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	61bb      	str	r3, [r7, #24]
 800ec82:	e002      	b.n	800ec8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec84:	f04f 33ff 	mov.w	r3, #4294967295
 800ec88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec8a:	69bb      	ldr	r3, [r7, #24]
	}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3720      	adds	r7, #32
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b088      	sub	sp, #32
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	461a      	mov	r2, r3
 800ecac:	21a5      	movs	r1, #165	; 0xa5
 800ecae:	f003 f987 	bl	8011fc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	4413      	add	r3, r2
 800ecc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	f023 0307 	bic.w	r3, r3, #7
 800ecca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	f003 0307 	and.w	r3, r3, #7
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00a      	beq.n	800ecec <prvInitialiseNewTask+0x58>
	__asm volatile
 800ecd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecda:	f383 8811 	msr	BASEPRI, r3
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f3bf 8f4f 	dsb	sy
 800ece6:	617b      	str	r3, [r7, #20]
}
 800ece8:	bf00      	nop
 800ecea:	e7fe      	b.n	800ecea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d01f      	beq.n	800ed32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	61fb      	str	r3, [r7, #28]
 800ecf6:	e012      	b.n	800ed1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ecf8:	68ba      	ldr	r2, [r7, #8]
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	7819      	ldrb	r1, [r3, #0]
 800ed00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	4413      	add	r3, r2
 800ed06:	3334      	adds	r3, #52	; 0x34
 800ed08:	460a      	mov	r2, r1
 800ed0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	4413      	add	r3, r2
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d006      	beq.n	800ed26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	61fb      	str	r3, [r7, #28]
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	2b0f      	cmp	r3, #15
 800ed22:	d9e9      	bls.n	800ecf8 <prvInitialiseNewTask+0x64>
 800ed24:	e000      	b.n	800ed28 <prvInitialiseNewTask+0x94>
			{
				break;
 800ed26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed30:	e003      	b.n	800ed3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	2b37      	cmp	r3, #55	; 0x37
 800ed3e:	d901      	bls.n	800ed44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed40:	2337      	movs	r3, #55	; 0x37
 800ed42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	2200      	movs	r2, #0
 800ed54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	3304      	adds	r3, #4
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff f8bc 	bl	800ded8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	3318      	adds	r3, #24
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff f8b7 	bl	800ded8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	2200      	movs	r2, #0
 800ed84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	68f9      	ldr	r1, [r7, #12]
 800ed92:	69b8      	ldr	r0, [r7, #24]
 800ed94:	f001 f928 	bl	800ffe8 <pxPortInitialiseStack>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eda8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edaa:	bf00      	nop
 800edac:	3720      	adds	r7, #32
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
	...

0800edb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edbc:	f001 fa42 	bl	8010244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edc0:	4b2d      	ldr	r3, [pc, #180]	; (800ee78 <prvAddNewTaskToReadyList+0xc4>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	3301      	adds	r3, #1
 800edc6:	4a2c      	ldr	r2, [pc, #176]	; (800ee78 <prvAddNewTaskToReadyList+0xc4>)
 800edc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edca:	4b2c      	ldr	r3, [pc, #176]	; (800ee7c <prvAddNewTaskToReadyList+0xc8>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d109      	bne.n	800ede6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edd2:	4a2a      	ldr	r2, [pc, #168]	; (800ee7c <prvAddNewTaskToReadyList+0xc8>)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800edd8:	4b27      	ldr	r3, [pc, #156]	; (800ee78 <prvAddNewTaskToReadyList+0xc4>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d110      	bne.n	800ee02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ede0:	f000 fc16 	bl	800f610 <prvInitialiseTaskLists>
 800ede4:	e00d      	b.n	800ee02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ede6:	4b26      	ldr	r3, [pc, #152]	; (800ee80 <prvAddNewTaskToReadyList+0xcc>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d109      	bne.n	800ee02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edee:	4b23      	ldr	r3, [pc, #140]	; (800ee7c <prvAddNewTaskToReadyList+0xc8>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d802      	bhi.n	800ee02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800edfc:	4a1f      	ldr	r2, [pc, #124]	; (800ee7c <prvAddNewTaskToReadyList+0xc8>)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee02:	4b20      	ldr	r3, [pc, #128]	; (800ee84 <prvAddNewTaskToReadyList+0xd0>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3301      	adds	r3, #1
 800ee08:	4a1e      	ldr	r2, [pc, #120]	; (800ee84 <prvAddNewTaskToReadyList+0xd0>)
 800ee0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee0c:	4b1d      	ldr	r3, [pc, #116]	; (800ee84 <prvAddNewTaskToReadyList+0xd0>)
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee18:	4b1b      	ldr	r3, [pc, #108]	; (800ee88 <prvAddNewTaskToReadyList+0xd4>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d903      	bls.n	800ee28 <prvAddNewTaskToReadyList+0x74>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee24:	4a18      	ldr	r2, [pc, #96]	; (800ee88 <prvAddNewTaskToReadyList+0xd4>)
 800ee26:	6013      	str	r3, [r2, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4413      	add	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4a15      	ldr	r2, [pc, #84]	; (800ee8c <prvAddNewTaskToReadyList+0xd8>)
 800ee36:	441a      	add	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	4610      	mov	r0, r2
 800ee40:	f7ff f857 	bl	800def2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee44:	f001 fa2e 	bl	80102a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee48:	4b0d      	ldr	r3, [pc, #52]	; (800ee80 <prvAddNewTaskToReadyList+0xcc>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00e      	beq.n	800ee6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee50:	4b0a      	ldr	r3, [pc, #40]	; (800ee7c <prvAddNewTaskToReadyList+0xc8>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d207      	bcs.n	800ee6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee5e:	4b0c      	ldr	r3, [pc, #48]	; (800ee90 <prvAddNewTaskToReadyList+0xdc>)
 800ee60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee6e:	bf00      	nop
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	20001800 	.word	0x20001800
 800ee7c:	2000132c 	.word	0x2000132c
 800ee80:	2000180c 	.word	0x2000180c
 800ee84:	2000181c 	.word	0x2000181c
 800ee88:	20001808 	.word	0x20001808
 800ee8c:	20001330 	.word	0x20001330
 800ee90:	e000ed04 	.word	0xe000ed04

0800ee94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d017      	beq.n	800eed6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eea6:	4b13      	ldr	r3, [pc, #76]	; (800eef4 <vTaskDelay+0x60>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00a      	beq.n	800eec4 <vTaskDelay+0x30>
	__asm volatile
 800eeae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb2:	f383 8811 	msr	BASEPRI, r3
 800eeb6:	f3bf 8f6f 	isb	sy
 800eeba:	f3bf 8f4f 	dsb	sy
 800eebe:	60bb      	str	r3, [r7, #8]
}
 800eec0:	bf00      	nop
 800eec2:	e7fe      	b.n	800eec2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eec4:	f000 f880 	bl	800efc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eec8:	2100      	movs	r1, #0
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 fcea 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eed0:	f000 f888 	bl	800efe4 <xTaskResumeAll>
 800eed4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d107      	bne.n	800eeec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eedc:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <vTaskDelay+0x64>)
 800eede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee2:	601a      	str	r2, [r3, #0]
 800eee4:	f3bf 8f4f 	dsb	sy
 800eee8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eeec:	bf00      	nop
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	20001828 	.word	0x20001828
 800eef8:	e000ed04 	.word	0xe000ed04

0800eefc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b08a      	sub	sp, #40	; 0x28
 800ef00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef02:	2300      	movs	r3, #0
 800ef04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef0a:	463a      	mov	r2, r7
 800ef0c:	1d39      	adds	r1, r7, #4
 800ef0e:	f107 0308 	add.w	r3, r7, #8
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fe ff8c 	bl	800de30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	9202      	str	r2, [sp, #8]
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	2300      	movs	r3, #0
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	2300      	movs	r3, #0
 800ef28:	460a      	mov	r2, r1
 800ef2a:	4921      	ldr	r1, [pc, #132]	; (800efb0 <vTaskStartScheduler+0xb4>)
 800ef2c:	4821      	ldr	r0, [pc, #132]	; (800efb4 <vTaskStartScheduler+0xb8>)
 800ef2e:	f7ff fe0f 	bl	800eb50 <xTaskCreateStatic>
 800ef32:	4603      	mov	r3, r0
 800ef34:	4a20      	ldr	r2, [pc, #128]	; (800efb8 <vTaskStartScheduler+0xbc>)
 800ef36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef38:	4b1f      	ldr	r3, [pc, #124]	; (800efb8 <vTaskStartScheduler+0xbc>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d002      	beq.n	800ef46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef40:	2301      	movs	r3, #1
 800ef42:	617b      	str	r3, [r7, #20]
 800ef44:	e001      	b.n	800ef4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d102      	bne.n	800ef56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef50:	f000 fcfc 	bl	800f94c <xTimerCreateTimerTask>
 800ef54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d116      	bne.n	800ef8a <vTaskStartScheduler+0x8e>
	__asm volatile
 800ef5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	613b      	str	r3, [r7, #16]
}
 800ef6e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef70:	4b12      	ldr	r3, [pc, #72]	; (800efbc <vTaskStartScheduler+0xc0>)
 800ef72:	f04f 32ff 	mov.w	r2, #4294967295
 800ef76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef78:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <vTaskStartScheduler+0xc4>)
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef7e:	4b11      	ldr	r3, [pc, #68]	; (800efc4 <vTaskStartScheduler+0xc8>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef84:	f001 f8bc 	bl	8010100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef88:	e00e      	b.n	800efa8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef90:	d10a      	bne.n	800efa8 <vTaskStartScheduler+0xac>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	60fb      	str	r3, [r7, #12]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <vTaskStartScheduler+0xaa>
}
 800efa8:	bf00      	nop
 800efaa:	3718      	adds	r7, #24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	08012368 	.word	0x08012368
 800efb4:	0800f5e1 	.word	0x0800f5e1
 800efb8:	20001824 	.word	0x20001824
 800efbc:	20001820 	.word	0x20001820
 800efc0:	2000180c 	.word	0x2000180c
 800efc4:	20001804 	.word	0x20001804

0800efc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efc8:	b480      	push	{r7}
 800efca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800efcc:	4b04      	ldr	r3, [pc, #16]	; (800efe0 <vTaskSuspendAll+0x18>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3301      	adds	r3, #1
 800efd2:	4a03      	ldr	r2, [pc, #12]	; (800efe0 <vTaskSuspendAll+0x18>)
 800efd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800efd6:	bf00      	nop
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr
 800efe0:	20001828 	.word	0x20001828

0800efe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800efea:	2300      	movs	r3, #0
 800efec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800efee:	2300      	movs	r3, #0
 800eff0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eff2:	4b42      	ldr	r3, [pc, #264]	; (800f0fc <xTaskResumeAll+0x118>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d10a      	bne.n	800f010 <xTaskResumeAll+0x2c>
	__asm volatile
 800effa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	603b      	str	r3, [r7, #0]
}
 800f00c:	bf00      	nop
 800f00e:	e7fe      	b.n	800f00e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f010:	f001 f918 	bl	8010244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f014:	4b39      	ldr	r3, [pc, #228]	; (800f0fc <xTaskResumeAll+0x118>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	3b01      	subs	r3, #1
 800f01a:	4a38      	ldr	r2, [pc, #224]	; (800f0fc <xTaskResumeAll+0x118>)
 800f01c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f01e:	4b37      	ldr	r3, [pc, #220]	; (800f0fc <xTaskResumeAll+0x118>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d162      	bne.n	800f0ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f026:	4b36      	ldr	r3, [pc, #216]	; (800f100 <xTaskResumeAll+0x11c>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d05e      	beq.n	800f0ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f02e:	e02f      	b.n	800f090 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f030:	4b34      	ldr	r3, [pc, #208]	; (800f104 <xTaskResumeAll+0x120>)
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	3318      	adds	r3, #24
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fe ffb5 	bl	800dfac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3304      	adds	r3, #4
 800f046:	4618      	mov	r0, r3
 800f048:	f7fe ffb0 	bl	800dfac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f050:	4b2d      	ldr	r3, [pc, #180]	; (800f108 <xTaskResumeAll+0x124>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	429a      	cmp	r2, r3
 800f056:	d903      	bls.n	800f060 <xTaskResumeAll+0x7c>
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05c:	4a2a      	ldr	r2, [pc, #168]	; (800f108 <xTaskResumeAll+0x124>)
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f064:	4613      	mov	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	4413      	add	r3, r2
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	4a27      	ldr	r2, [pc, #156]	; (800f10c <xTaskResumeAll+0x128>)
 800f06e:	441a      	add	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3304      	adds	r3, #4
 800f074:	4619      	mov	r1, r3
 800f076:	4610      	mov	r0, r2
 800f078:	f7fe ff3b 	bl	800def2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f080:	4b23      	ldr	r3, [pc, #140]	; (800f110 <xTaskResumeAll+0x12c>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f086:	429a      	cmp	r2, r3
 800f088:	d302      	bcc.n	800f090 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f08a:	4b22      	ldr	r3, [pc, #136]	; (800f114 <xTaskResumeAll+0x130>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f090:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <xTaskResumeAll+0x120>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1cb      	bne.n	800f030 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f09e:	f000 fb55 	bl	800f74c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f0a2:	4b1d      	ldr	r3, [pc, #116]	; (800f118 <xTaskResumeAll+0x134>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d010      	beq.n	800f0d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0ae:	f000 f847 	bl	800f140 <xTaskIncrementTick>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0b8:	4b16      	ldr	r3, [pc, #88]	; (800f114 <xTaskResumeAll+0x130>)
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d1f1      	bne.n	800f0ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800f0ca:	4b13      	ldr	r3, [pc, #76]	; (800f118 <xTaskResumeAll+0x134>)
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0d0:	4b10      	ldr	r3, [pc, #64]	; (800f114 <xTaskResumeAll+0x130>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d009      	beq.n	800f0ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0dc:	4b0f      	ldr	r3, [pc, #60]	; (800f11c <xTaskResumeAll+0x138>)
 800f0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e2:	601a      	str	r2, [r3, #0]
 800f0e4:	f3bf 8f4f 	dsb	sy
 800f0e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0ec:	f001 f8da 	bl	80102a4 <vPortExitCritical>

	return xAlreadyYielded;
 800f0f0:	68bb      	ldr	r3, [r7, #8]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	20001828 	.word	0x20001828
 800f100:	20001800 	.word	0x20001800
 800f104:	200017c0 	.word	0x200017c0
 800f108:	20001808 	.word	0x20001808
 800f10c:	20001330 	.word	0x20001330
 800f110:	2000132c 	.word	0x2000132c
 800f114:	20001814 	.word	0x20001814
 800f118:	20001810 	.word	0x20001810
 800f11c:	e000ed04 	.word	0xe000ed04

0800f120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f126:	4b05      	ldr	r3, [pc, #20]	; (800f13c <xTaskGetTickCount+0x1c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f12c:	687b      	ldr	r3, [r7, #4]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	370c      	adds	r7, #12
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	20001804 	.word	0x20001804

0800f140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f146:	2300      	movs	r3, #0
 800f148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f14a:	4b4f      	ldr	r3, [pc, #316]	; (800f288 <xTaskIncrementTick+0x148>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f040 8089 	bne.w	800f266 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f154:	4b4d      	ldr	r3, [pc, #308]	; (800f28c <xTaskIncrementTick+0x14c>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	3301      	adds	r3, #1
 800f15a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f15c:	4a4b      	ldr	r2, [pc, #300]	; (800f28c <xTaskIncrementTick+0x14c>)
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d120      	bne.n	800f1aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f168:	4b49      	ldr	r3, [pc, #292]	; (800f290 <xTaskIncrementTick+0x150>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00a      	beq.n	800f188 <xTaskIncrementTick+0x48>
	__asm volatile
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	603b      	str	r3, [r7, #0]
}
 800f184:	bf00      	nop
 800f186:	e7fe      	b.n	800f186 <xTaskIncrementTick+0x46>
 800f188:	4b41      	ldr	r3, [pc, #260]	; (800f290 <xTaskIncrementTick+0x150>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	60fb      	str	r3, [r7, #12]
 800f18e:	4b41      	ldr	r3, [pc, #260]	; (800f294 <xTaskIncrementTick+0x154>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4a3f      	ldr	r2, [pc, #252]	; (800f290 <xTaskIncrementTick+0x150>)
 800f194:	6013      	str	r3, [r2, #0]
 800f196:	4a3f      	ldr	r2, [pc, #252]	; (800f294 <xTaskIncrementTick+0x154>)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6013      	str	r3, [r2, #0]
 800f19c:	4b3e      	ldr	r3, [pc, #248]	; (800f298 <xTaskIncrementTick+0x158>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	4a3d      	ldr	r2, [pc, #244]	; (800f298 <xTaskIncrementTick+0x158>)
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	f000 fad1 	bl	800f74c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1aa:	4b3c      	ldr	r3, [pc, #240]	; (800f29c <xTaskIncrementTick+0x15c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	693a      	ldr	r2, [r7, #16]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d349      	bcc.n	800f248 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1b4:	4b36      	ldr	r3, [pc, #216]	; (800f290 <xTaskIncrementTick+0x150>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d104      	bne.n	800f1c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1be:	4b37      	ldr	r3, [pc, #220]	; (800f29c <xTaskIncrementTick+0x15c>)
 800f1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c4:	601a      	str	r2, [r3, #0]
					break;
 800f1c6:	e03f      	b.n	800f248 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1c8:	4b31      	ldr	r3, [pc, #196]	; (800f290 <xTaskIncrementTick+0x150>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1d8:	693a      	ldr	r2, [r7, #16]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d203      	bcs.n	800f1e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1e0:	4a2e      	ldr	r2, [pc, #184]	; (800f29c <xTaskIncrementTick+0x15c>)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1e6:	e02f      	b.n	800f248 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fe fedd 	bl	800dfac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d004      	beq.n	800f204 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	3318      	adds	r3, #24
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fe fed4 	bl	800dfac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f208:	4b25      	ldr	r3, [pc, #148]	; (800f2a0 <xTaskIncrementTick+0x160>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d903      	bls.n	800f218 <xTaskIncrementTick+0xd8>
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f214:	4a22      	ldr	r2, [pc, #136]	; (800f2a0 <xTaskIncrementTick+0x160>)
 800f216:	6013      	str	r3, [r2, #0]
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21c:	4613      	mov	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4a1f      	ldr	r2, [pc, #124]	; (800f2a4 <xTaskIncrementTick+0x164>)
 800f226:	441a      	add	r2, r3
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	3304      	adds	r3, #4
 800f22c:	4619      	mov	r1, r3
 800f22e:	4610      	mov	r0, r2
 800f230:	f7fe fe5f 	bl	800def2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f238:	4b1b      	ldr	r3, [pc, #108]	; (800f2a8 <xTaskIncrementTick+0x168>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23e:	429a      	cmp	r2, r3
 800f240:	d3b8      	bcc.n	800f1b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f242:	2301      	movs	r3, #1
 800f244:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f246:	e7b5      	b.n	800f1b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f248:	4b17      	ldr	r3, [pc, #92]	; (800f2a8 <xTaskIncrementTick+0x168>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24e:	4915      	ldr	r1, [pc, #84]	; (800f2a4 <xTaskIncrementTick+0x164>)
 800f250:	4613      	mov	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	440b      	add	r3, r1
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d907      	bls.n	800f270 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800f260:	2301      	movs	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
 800f264:	e004      	b.n	800f270 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f266:	4b11      	ldr	r3, [pc, #68]	; (800f2ac <xTaskIncrementTick+0x16c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3301      	adds	r3, #1
 800f26c:	4a0f      	ldr	r2, [pc, #60]	; (800f2ac <xTaskIncrementTick+0x16c>)
 800f26e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f270:	4b0f      	ldr	r3, [pc, #60]	; (800f2b0 <xTaskIncrementTick+0x170>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800f278:	2301      	movs	r3, #1
 800f27a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f27c:	697b      	ldr	r3, [r7, #20]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	20001828 	.word	0x20001828
 800f28c:	20001804 	.word	0x20001804
 800f290:	200017b8 	.word	0x200017b8
 800f294:	200017bc 	.word	0x200017bc
 800f298:	20001818 	.word	0x20001818
 800f29c:	20001820 	.word	0x20001820
 800f2a0:	20001808 	.word	0x20001808
 800f2a4:	20001330 	.word	0x20001330
 800f2a8:	2000132c 	.word	0x2000132c
 800f2ac:	20001810 	.word	0x20001810
 800f2b0:	20001814 	.word	0x20001814

0800f2b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2ba:	4b28      	ldr	r3, [pc, #160]	; (800f35c <vTaskSwitchContext+0xa8>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d003      	beq.n	800f2ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2c2:	4b27      	ldr	r3, [pc, #156]	; (800f360 <vTaskSwitchContext+0xac>)
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2c8:	e041      	b.n	800f34e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f2ca:	4b25      	ldr	r3, [pc, #148]	; (800f360 <vTaskSwitchContext+0xac>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2d0:	4b24      	ldr	r3, [pc, #144]	; (800f364 <vTaskSwitchContext+0xb0>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	60fb      	str	r3, [r7, #12]
 800f2d6:	e010      	b.n	800f2fa <vTaskSwitchContext+0x46>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10a      	bne.n	800f2f4 <vTaskSwitchContext+0x40>
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	607b      	str	r3, [r7, #4]
}
 800f2f0:	bf00      	nop
 800f2f2:	e7fe      	b.n	800f2f2 <vTaskSwitchContext+0x3e>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	60fb      	str	r3, [r7, #12]
 800f2fa:	491b      	ldr	r1, [pc, #108]	; (800f368 <vTaskSwitchContext+0xb4>)
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	4613      	mov	r3, r2
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	4413      	add	r3, r2
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	440b      	add	r3, r1
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d0e4      	beq.n	800f2d8 <vTaskSwitchContext+0x24>
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	4613      	mov	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4413      	add	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	4a13      	ldr	r2, [pc, #76]	; (800f368 <vTaskSwitchContext+0xb4>)
 800f31a:	4413      	add	r3, r2
 800f31c:	60bb      	str	r3, [r7, #8]
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	605a      	str	r2, [r3, #4]
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	685a      	ldr	r2, [r3, #4]
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	3308      	adds	r3, #8
 800f330:	429a      	cmp	r2, r3
 800f332:	d104      	bne.n	800f33e <vTaskSwitchContext+0x8a>
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	605a      	str	r2, [r3, #4]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	4a09      	ldr	r2, [pc, #36]	; (800f36c <vTaskSwitchContext+0xb8>)
 800f346:	6013      	str	r3, [r2, #0]
 800f348:	4a06      	ldr	r2, [pc, #24]	; (800f364 <vTaskSwitchContext+0xb0>)
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6013      	str	r3, [r2, #0]
}
 800f34e:	bf00      	nop
 800f350:	3714      	adds	r7, #20
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	20001828 	.word	0x20001828
 800f360:	20001814 	.word	0x20001814
 800f364:	20001808 	.word	0x20001808
 800f368:	20001330 	.word	0x20001330
 800f36c:	2000132c 	.word	0x2000132c

0800f370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d10a      	bne.n	800f396 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f384:	f383 8811 	msr	BASEPRI, r3
 800f388:	f3bf 8f6f 	isb	sy
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	60fb      	str	r3, [r7, #12]
}
 800f392:	bf00      	nop
 800f394:	e7fe      	b.n	800f394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f396:	4b07      	ldr	r3, [pc, #28]	; (800f3b4 <vTaskPlaceOnEventList+0x44>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3318      	adds	r3, #24
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe fdcb 	bl	800df3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	6838      	ldr	r0, [r7, #0]
 800f3a8:	f000 fa7c 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
}
 800f3ac:	bf00      	nop
 800f3ae:	3710      	adds	r7, #16
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	2000132c 	.word	0x2000132c

0800f3b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d10a      	bne.n	800f3e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ce:	f383 8811 	msr	BASEPRI, r3
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	617b      	str	r3, [r7, #20]
}
 800f3dc:	bf00      	nop
 800f3de:	e7fe      	b.n	800f3de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3e0:	4b0a      	ldr	r3, [pc, #40]	; (800f40c <vTaskPlaceOnEventListRestricted+0x54>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	3318      	adds	r3, #24
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7fe fd82 	bl	800def2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f3fa:	6879      	ldr	r1, [r7, #4]
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f000 fa51 	bl	800f8a4 <prvAddCurrentTaskToDelayedList>
	}
 800f402:	bf00      	nop
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	2000132c 	.word	0x2000132c

0800f410 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10a      	bne.n	800f43c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	60fb      	str	r3, [r7, #12]
}
 800f438:	bf00      	nop
 800f43a:	e7fe      	b.n	800f43a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	3318      	adds	r3, #24
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fdb3 	bl	800dfac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f446:	4b1e      	ldr	r3, [pc, #120]	; (800f4c0 <xTaskRemoveFromEventList+0xb0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11d      	bne.n	800f48a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	3304      	adds	r3, #4
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe fdaa 	bl	800dfac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45c:	4b19      	ldr	r3, [pc, #100]	; (800f4c4 <xTaskRemoveFromEventList+0xb4>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	429a      	cmp	r2, r3
 800f462:	d903      	bls.n	800f46c <xTaskRemoveFromEventList+0x5c>
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f468:	4a16      	ldr	r2, [pc, #88]	; (800f4c4 <xTaskRemoveFromEventList+0xb4>)
 800f46a:	6013      	str	r3, [r2, #0]
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f470:	4613      	mov	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	4413      	add	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4a13      	ldr	r2, [pc, #76]	; (800f4c8 <xTaskRemoveFromEventList+0xb8>)
 800f47a:	441a      	add	r2, r3
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	3304      	adds	r3, #4
 800f480:	4619      	mov	r1, r3
 800f482:	4610      	mov	r0, r2
 800f484:	f7fe fd35 	bl	800def2 <vListInsertEnd>
 800f488:	e005      	b.n	800f496 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	3318      	adds	r3, #24
 800f48e:	4619      	mov	r1, r3
 800f490:	480e      	ldr	r0, [pc, #56]	; (800f4cc <xTaskRemoveFromEventList+0xbc>)
 800f492:	f7fe fd2e 	bl	800def2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f49a:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <xTaskRemoveFromEventList+0xc0>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d905      	bls.n	800f4b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4a8:	4b0a      	ldr	r3, [pc, #40]	; (800f4d4 <xTaskRemoveFromEventList+0xc4>)
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	e001      	b.n	800f4b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4b4:	697b      	ldr	r3, [r7, #20]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	20001828 	.word	0x20001828
 800f4c4:	20001808 	.word	0x20001808
 800f4c8:	20001330 	.word	0x20001330
 800f4cc:	200017c0 	.word	0x200017c0
 800f4d0:	2000132c 	.word	0x2000132c
 800f4d4:	20001814 	.word	0x20001814

0800f4d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4e0:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <vTaskInternalSetTimeOutState+0x24>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4e8:	4b05      	ldr	r3, [pc, #20]	; (800f500 <vTaskInternalSetTimeOutState+0x28>)
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	605a      	str	r2, [r3, #4]
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	20001818 	.word	0x20001818
 800f500:	20001804 	.word	0x20001804

0800f504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10a      	bne.n	800f52a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f518:	f383 8811 	msr	BASEPRI, r3
 800f51c:	f3bf 8f6f 	isb	sy
 800f520:	f3bf 8f4f 	dsb	sy
 800f524:	613b      	str	r3, [r7, #16]
}
 800f526:	bf00      	nop
 800f528:	e7fe      	b.n	800f528 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d10a      	bne.n	800f546 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	60fb      	str	r3, [r7, #12]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f546:	f000 fe7d 	bl	8010244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f54a:	4b1d      	ldr	r3, [pc, #116]	; (800f5c0 <xTaskCheckForTimeOut+0xbc>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d102      	bne.n	800f56a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f564:	2300      	movs	r3, #0
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	e023      	b.n	800f5b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	4b15      	ldr	r3, [pc, #84]	; (800f5c4 <xTaskCheckForTimeOut+0xc0>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	429a      	cmp	r2, r3
 800f574:	d007      	beq.n	800f586 <xTaskCheckForTimeOut+0x82>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	69ba      	ldr	r2, [r7, #24]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d302      	bcc.n	800f586 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f580:	2301      	movs	r3, #1
 800f582:	61fb      	str	r3, [r7, #28]
 800f584:	e015      	b.n	800f5b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d20b      	bcs.n	800f5a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	1ad2      	subs	r2, r2, r3
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7ff ff9b 	bl	800f4d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	61fb      	str	r3, [r7, #28]
 800f5a6:	e004      	b.n	800f5b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5b2:	f000 fe77 	bl	80102a4 <vPortExitCritical>

	return xReturn;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3720      	adds	r7, #32
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	20001804 	.word	0x20001804
 800f5c4:	20001818 	.word	0x20001818

0800f5c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5cc:	4b03      	ldr	r3, [pc, #12]	; (800f5dc <vTaskMissedYield+0x14>)
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	601a      	str	r2, [r3, #0]
}
 800f5d2:	bf00      	nop
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr
 800f5dc:	20001814 	.word	0x20001814

0800f5e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5e8:	f000 f852 	bl	800f690 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5ec:	4b06      	ldr	r3, [pc, #24]	; (800f608 <prvIdleTask+0x28>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d9f9      	bls.n	800f5e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <prvIdleTask+0x2c>)
 800f5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f604:	e7f0      	b.n	800f5e8 <prvIdleTask+0x8>
 800f606:	bf00      	nop
 800f608:	20001330 	.word	0x20001330
 800f60c:	e000ed04 	.word	0xe000ed04

0800f610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f616:	2300      	movs	r3, #0
 800f618:	607b      	str	r3, [r7, #4]
 800f61a:	e00c      	b.n	800f636 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	4613      	mov	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4413      	add	r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4a12      	ldr	r2, [pc, #72]	; (800f670 <prvInitialiseTaskLists+0x60>)
 800f628:	4413      	add	r3, r2
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fc34 	bl	800de98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3301      	adds	r3, #1
 800f634:	607b      	str	r3, [r7, #4]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2b37      	cmp	r3, #55	; 0x37
 800f63a:	d9ef      	bls.n	800f61c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f63c:	480d      	ldr	r0, [pc, #52]	; (800f674 <prvInitialiseTaskLists+0x64>)
 800f63e:	f7fe fc2b 	bl	800de98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f642:	480d      	ldr	r0, [pc, #52]	; (800f678 <prvInitialiseTaskLists+0x68>)
 800f644:	f7fe fc28 	bl	800de98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f648:	480c      	ldr	r0, [pc, #48]	; (800f67c <prvInitialiseTaskLists+0x6c>)
 800f64a:	f7fe fc25 	bl	800de98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f64e:	480c      	ldr	r0, [pc, #48]	; (800f680 <prvInitialiseTaskLists+0x70>)
 800f650:	f7fe fc22 	bl	800de98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f654:	480b      	ldr	r0, [pc, #44]	; (800f684 <prvInitialiseTaskLists+0x74>)
 800f656:	f7fe fc1f 	bl	800de98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f65a:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <prvInitialiseTaskLists+0x78>)
 800f65c:	4a05      	ldr	r2, [pc, #20]	; (800f674 <prvInitialiseTaskLists+0x64>)
 800f65e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <prvInitialiseTaskLists+0x7c>)
 800f662:	4a05      	ldr	r2, [pc, #20]	; (800f678 <prvInitialiseTaskLists+0x68>)
 800f664:	601a      	str	r2, [r3, #0]
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	20001330 	.word	0x20001330
 800f674:	20001790 	.word	0x20001790
 800f678:	200017a4 	.word	0x200017a4
 800f67c:	200017c0 	.word	0x200017c0
 800f680:	200017d4 	.word	0x200017d4
 800f684:	200017ec 	.word	0x200017ec
 800f688:	200017b8 	.word	0x200017b8
 800f68c:	200017bc 	.word	0x200017bc

0800f690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f696:	e019      	b.n	800f6cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f698:	f000 fdd4 	bl	8010244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f69c:	4b10      	ldr	r3, [pc, #64]	; (800f6e0 <prvCheckTasksWaitingTermination+0x50>)
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	3304      	adds	r3, #4
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7fe fc7f 	bl	800dfac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6ae:	4b0d      	ldr	r3, [pc, #52]	; (800f6e4 <prvCheckTasksWaitingTermination+0x54>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	4a0b      	ldr	r2, [pc, #44]	; (800f6e4 <prvCheckTasksWaitingTermination+0x54>)
 800f6b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6b8:	4b0b      	ldr	r3, [pc, #44]	; (800f6e8 <prvCheckTasksWaitingTermination+0x58>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	4a0a      	ldr	r2, [pc, #40]	; (800f6e8 <prvCheckTasksWaitingTermination+0x58>)
 800f6c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6c2:	f000 fdef 	bl	80102a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 f810 	bl	800f6ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6cc:	4b06      	ldr	r3, [pc, #24]	; (800f6e8 <prvCheckTasksWaitingTermination+0x58>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e1      	bne.n	800f698 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6d4:	bf00      	nop
 800f6d6:	bf00      	nop
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	200017d4 	.word	0x200017d4
 800f6e4:	20001800 	.word	0x20001800
 800f6e8:	200017e8 	.word	0x200017e8

0800f6ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d108      	bne.n	800f710 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f702:	4618      	mov	r0, r3
 800f704:	f000 ff84 	bl	8010610 <vPortFree>
				vPortFree( pxTCB );
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 ff81 	bl	8010610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f70e:	e018      	b.n	800f742 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f716:	2b01      	cmp	r3, #1
 800f718:	d103      	bne.n	800f722 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 ff78 	bl	8010610 <vPortFree>
	}
 800f720:	e00f      	b.n	800f742 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d00a      	beq.n	800f742 <prvDeleteTCB+0x56>
	__asm volatile
 800f72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f730:	f383 8811 	msr	BASEPRI, r3
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	f3bf 8f4f 	dsb	sy
 800f73c:	60fb      	str	r3, [r7, #12]
}
 800f73e:	bf00      	nop
 800f740:	e7fe      	b.n	800f740 <prvDeleteTCB+0x54>
	}
 800f742:	bf00      	nop
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
	...

0800f74c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f752:	4b0c      	ldr	r3, [pc, #48]	; (800f784 <prvResetNextTaskUnblockTime+0x38>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d104      	bne.n	800f766 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f75c:	4b0a      	ldr	r3, [pc, #40]	; (800f788 <prvResetNextTaskUnblockTime+0x3c>)
 800f75e:	f04f 32ff 	mov.w	r2, #4294967295
 800f762:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f764:	e008      	b.n	800f778 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f766:	4b07      	ldr	r3, [pc, #28]	; (800f784 <prvResetNextTaskUnblockTime+0x38>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	4a04      	ldr	r2, [pc, #16]	; (800f788 <prvResetNextTaskUnblockTime+0x3c>)
 800f776:	6013      	str	r3, [r2, #0]
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	200017b8 	.word	0x200017b8
 800f788:	20001820 	.word	0x20001820

0800f78c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f792:	4b0b      	ldr	r3, [pc, #44]	; (800f7c0 <xTaskGetSchedulerState+0x34>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d102      	bne.n	800f7a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f79a:	2301      	movs	r3, #1
 800f79c:	607b      	str	r3, [r7, #4]
 800f79e:	e008      	b.n	800f7b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7a0:	4b08      	ldr	r3, [pc, #32]	; (800f7c4 <xTaskGetSchedulerState+0x38>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d102      	bne.n	800f7ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	607b      	str	r3, [r7, #4]
 800f7ac:	e001      	b.n	800f7b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7b2:	687b      	ldr	r3, [r7, #4]
	}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	2000180c 	.word	0x2000180c
 800f7c4:	20001828 	.word	0x20001828

0800f7c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d056      	beq.n	800f88c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f7de:	4b2e      	ldr	r3, [pc, #184]	; (800f898 <xTaskPriorityDisinherit+0xd0>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d00a      	beq.n	800f7fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ec:	f383 8811 	msr	BASEPRI, r3
 800f7f0:	f3bf 8f6f 	isb	sy
 800f7f4:	f3bf 8f4f 	dsb	sy
 800f7f8:	60fb      	str	r3, [r7, #12]
}
 800f7fa:	bf00      	nop
 800f7fc:	e7fe      	b.n	800f7fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	60bb      	str	r3, [r7, #8]
}
 800f818:	bf00      	nop
 800f81a:	e7fe      	b.n	800f81a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f820:	1e5a      	subs	r2, r3, #1
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f82e:	429a      	cmp	r2, r3
 800f830:	d02c      	beq.n	800f88c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f836:	2b00      	cmp	r3, #0
 800f838:	d128      	bne.n	800f88c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	3304      	adds	r3, #4
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fe fbb4 	bl	800dfac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f850:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f85c:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <xTaskPriorityDisinherit+0xd4>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	d903      	bls.n	800f86c <xTaskPriorityDisinherit+0xa4>
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f868:	4a0c      	ldr	r2, [pc, #48]	; (800f89c <xTaskPriorityDisinherit+0xd4>)
 800f86a:	6013      	str	r3, [r2, #0]
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f870:	4613      	mov	r3, r2
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	4413      	add	r3, r2
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	4a09      	ldr	r2, [pc, #36]	; (800f8a0 <xTaskPriorityDisinherit+0xd8>)
 800f87a:	441a      	add	r2, r3
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	3304      	adds	r3, #4
 800f880:	4619      	mov	r1, r3
 800f882:	4610      	mov	r0, r2
 800f884:	f7fe fb35 	bl	800def2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f888:	2301      	movs	r3, #1
 800f88a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f88c:	697b      	ldr	r3, [r7, #20]
	}
 800f88e:	4618      	mov	r0, r3
 800f890:	3718      	adds	r7, #24
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	2000132c 	.word	0x2000132c
 800f89c:	20001808 	.word	0x20001808
 800f8a0:	20001330 	.word	0x20001330

0800f8a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f8ae:	4b21      	ldr	r3, [pc, #132]	; (800f934 <prvAddCurrentTaskToDelayedList+0x90>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8b4:	4b20      	ldr	r3, [pc, #128]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe fb76 	bl	800dfac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c6:	d10a      	bne.n	800f8de <prvAddCurrentTaskToDelayedList+0x3a>
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d007      	beq.n	800f8de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8ce:	4b1a      	ldr	r3, [pc, #104]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4819      	ldr	r0, [pc, #100]	; (800f93c <prvAddCurrentTaskToDelayedList+0x98>)
 800f8d8:	f7fe fb0b 	bl	800def2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f8dc:	e026      	b.n	800f92c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f8e6:	4b14      	ldr	r3, [pc, #80]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68ba      	ldr	r2, [r7, #8]
 800f8ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d209      	bcs.n	800f90a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8f6:	4b12      	ldr	r3, [pc, #72]	; (800f940 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	4b0f      	ldr	r3, [pc, #60]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3304      	adds	r3, #4
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fe fb19 	bl	800df3a <vListInsert>
}
 800f908:	e010      	b.n	800f92c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f90a:	4b0e      	ldr	r3, [pc, #56]	; (800f944 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <prvAddCurrentTaskToDelayedList+0x94>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3304      	adds	r3, #4
 800f914:	4619      	mov	r1, r3
 800f916:	4610      	mov	r0, r2
 800f918:	f7fe fb0f 	bl	800df3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	429a      	cmp	r2, r3
 800f924:	d202      	bcs.n	800f92c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f926:	4a08      	ldr	r2, [pc, #32]	; (800f948 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	6013      	str	r3, [r2, #0]
}
 800f92c:	bf00      	nop
 800f92e:	3710      	adds	r7, #16
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20001804 	.word	0x20001804
 800f938:	2000132c 	.word	0x2000132c
 800f93c:	200017ec 	.word	0x200017ec
 800f940:	200017bc 	.word	0x200017bc
 800f944:	200017b8 	.word	0x200017b8
 800f948:	20001820 	.word	0x20001820

0800f94c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08a      	sub	sp, #40	; 0x28
 800f950:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f952:	2300      	movs	r3, #0
 800f954:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f956:	f000 fb07 	bl	800ff68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f95a:	4b1c      	ldr	r3, [pc, #112]	; (800f9cc <xTimerCreateTimerTask+0x80>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d021      	beq.n	800f9a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f962:	2300      	movs	r3, #0
 800f964:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f96a:	1d3a      	adds	r2, r7, #4
 800f96c:	f107 0108 	add.w	r1, r7, #8
 800f970:	f107 030c 	add.w	r3, r7, #12
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe fa75 	bl	800de64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f97a:	6879      	ldr	r1, [r7, #4]
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	9202      	str	r2, [sp, #8]
 800f982:	9301      	str	r3, [sp, #4]
 800f984:	2302      	movs	r3, #2
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	2300      	movs	r3, #0
 800f98a:	460a      	mov	r2, r1
 800f98c:	4910      	ldr	r1, [pc, #64]	; (800f9d0 <xTimerCreateTimerTask+0x84>)
 800f98e:	4811      	ldr	r0, [pc, #68]	; (800f9d4 <xTimerCreateTimerTask+0x88>)
 800f990:	f7ff f8de 	bl	800eb50 <xTaskCreateStatic>
 800f994:	4603      	mov	r3, r0
 800f996:	4a10      	ldr	r2, [pc, #64]	; (800f9d8 <xTimerCreateTimerTask+0x8c>)
 800f998:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f99a:	4b0f      	ldr	r3, [pc, #60]	; (800f9d8 <xTimerCreateTimerTask+0x8c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10a      	bne.n	800f9c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	613b      	str	r3, [r7, #16]
}
 800f9be:	bf00      	nop
 800f9c0:	e7fe      	b.n	800f9c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f9c2:	697b      	ldr	r3, [r7, #20]
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3718      	adds	r7, #24
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	2000185c 	.word	0x2000185c
 800f9d0:	08012370 	.word	0x08012370
 800f9d4:	0800fb11 	.word	0x0800fb11
 800f9d8:	20001860 	.word	0x20001860

0800f9dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b08a      	sub	sp, #40	; 0x28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
 800f9e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	623b      	str	r3, [r7, #32]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa0a:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d02a      	beq.n	800fa68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2b05      	cmp	r3, #5
 800fa22:	dc18      	bgt.n	800fa56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa24:	f7ff feb2 	bl	800f78c <xTaskGetSchedulerState>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d109      	bne.n	800fa42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa2e:	4b11      	ldr	r3, [pc, #68]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa30:	6818      	ldr	r0, [r3, #0]
 800fa32:	f107 0110 	add.w	r1, r7, #16
 800fa36:	2300      	movs	r3, #0
 800fa38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa3a:	f7fe fc25 	bl	800e288 <xQueueGenericSend>
 800fa3e:	6278      	str	r0, [r7, #36]	; 0x24
 800fa40:	e012      	b.n	800fa68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa42:	4b0c      	ldr	r3, [pc, #48]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa44:	6818      	ldr	r0, [r3, #0]
 800fa46:	f107 0110 	add.w	r1, r7, #16
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f7fe fc1b 	bl	800e288 <xQueueGenericSend>
 800fa52:	6278      	str	r0, [r7, #36]	; 0x24
 800fa54:	e008      	b.n	800fa68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa56:	4b07      	ldr	r3, [pc, #28]	; (800fa74 <xTimerGenericCommand+0x98>)
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f107 0110 	add.w	r1, r7, #16
 800fa5e:	2300      	movs	r3, #0
 800fa60:	683a      	ldr	r2, [r7, #0]
 800fa62:	f7fe fd0f 	bl	800e484 <xQueueGenericSendFromISR>
 800fa66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3728      	adds	r7, #40	; 0x28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	2000185c 	.word	0x2000185c

0800fa78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b088      	sub	sp, #32
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa82:	4b22      	ldr	r3, [pc, #136]	; (800fb0c <prvProcessExpiredTimer+0x94>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fe fa8b 	bl	800dfac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9c:	f003 0304 	and.w	r3, r3, #4
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d022      	beq.n	800faea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	699a      	ldr	r2, [r3, #24]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	18d1      	adds	r1, r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	683a      	ldr	r2, [r7, #0]
 800fab0:	6978      	ldr	r0, [r7, #20]
 800fab2:	f000 f8d1 	bl	800fc58 <prvInsertTimerInActiveList>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d01f      	beq.n	800fafc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fabc:	2300      	movs	r3, #0
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	2300      	movs	r3, #0
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	2100      	movs	r1, #0
 800fac6:	6978      	ldr	r0, [r7, #20]
 800fac8:	f7ff ff88 	bl	800f9dc <xTimerGenericCommand>
 800facc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d113      	bne.n	800fafc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	60fb      	str	r3, [r7, #12]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faf0:	f023 0301 	bic.w	r3, r3, #1
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	6a1b      	ldr	r3, [r3, #32]
 800fb00:	6978      	ldr	r0, [r7, #20]
 800fb02:	4798      	blx	r3
}
 800fb04:	bf00      	nop
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	20001854 	.word	0x20001854

0800fb10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb18:	f107 0308 	add.w	r3, r7, #8
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 f857 	bl	800fbd0 <prvGetNextExpireTime>
 800fb22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	4619      	mov	r1, r3
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 f803 	bl	800fb34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb2e:	f000 f8d5 	bl	800fcdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb32:	e7f1      	b.n	800fb18 <prvTimerTask+0x8>

0800fb34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb3e:	f7ff fa43 	bl	800efc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	4618      	mov	r0, r3
 800fb48:	f000 f866 	bl	800fc18 <prvSampleTimeNow>
 800fb4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d130      	bne.n	800fbb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <prvProcessTimerOrBlockTask+0x3c>
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d806      	bhi.n	800fb70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fb62:	f7ff fa3f 	bl	800efe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fb66:	68f9      	ldr	r1, [r7, #12]
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff ff85 	bl	800fa78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fb6e:	e024      	b.n	800fbba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d008      	beq.n	800fb88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fb76:	4b13      	ldr	r3, [pc, #76]	; (800fbc4 <prvProcessTimerOrBlockTask+0x90>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d101      	bne.n	800fb84 <prvProcessTimerOrBlockTask+0x50>
 800fb80:	2301      	movs	r3, #1
 800fb82:	e000      	b.n	800fb86 <prvProcessTimerOrBlockTask+0x52>
 800fb84:	2300      	movs	r3, #0
 800fb86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fb88:	4b0f      	ldr	r3, [pc, #60]	; (800fbc8 <prvProcessTimerOrBlockTask+0x94>)
 800fb8a:	6818      	ldr	r0, [r3, #0]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	4619      	mov	r1, r3
 800fb96:	f7fe ffa7 	bl	800eae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fb9a:	f7ff fa23 	bl	800efe4 <xTaskResumeAll>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10a      	bne.n	800fbba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fba4:	4b09      	ldr	r3, [pc, #36]	; (800fbcc <prvProcessTimerOrBlockTask+0x98>)
 800fba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbaa:	601a      	str	r2, [r3, #0]
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	f3bf 8f6f 	isb	sy
}
 800fbb4:	e001      	b.n	800fbba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fbb6:	f7ff fa15 	bl	800efe4 <xTaskResumeAll>
}
 800fbba:	bf00      	nop
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20001858 	.word	0x20001858
 800fbc8:	2000185c 	.word	0x2000185c
 800fbcc:	e000ed04 	.word	0xe000ed04

0800fbd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fbd8:	4b0e      	ldr	r3, [pc, #56]	; (800fc14 <prvGetNextExpireTime+0x44>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d101      	bne.n	800fbe6 <prvGetNextExpireTime+0x16>
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	e000      	b.n	800fbe8 <prvGetNextExpireTime+0x18>
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fbf4:	4b07      	ldr	r3, [pc, #28]	; (800fc14 <prvGetNextExpireTime+0x44>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	60fb      	str	r3, [r7, #12]
 800fbfe:	e001      	b.n	800fc04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc00:	2300      	movs	r3, #0
 800fc02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc04:	68fb      	ldr	r3, [r7, #12]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	20001854 	.word	0x20001854

0800fc18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc20:	f7ff fa7e 	bl	800f120 <xTaskGetTickCount>
 800fc24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc26:	4b0b      	ldr	r3, [pc, #44]	; (800fc54 <prvSampleTimeNow+0x3c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d205      	bcs.n	800fc3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc30:	f000 f936 	bl	800fea0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2201      	movs	r2, #1
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	e002      	b.n	800fc42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc42:	4a04      	ldr	r2, [pc, #16]	; (800fc54 <prvSampleTimeNow+0x3c>)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc48:	68fb      	ldr	r3, [r7, #12]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	20001864 	.word	0x20001864

0800fc58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b086      	sub	sp, #24
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fc66:	2300      	movs	r3, #0
 800fc68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d812      	bhi.n	800fca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	1ad2      	subs	r2, r2, r3
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d302      	bcc.n	800fc92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	617b      	str	r3, [r7, #20]
 800fc90:	e01b      	b.n	800fcca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc92:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <prvInsertTimerInActiveList+0x7c>)
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3304      	adds	r3, #4
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	f7fe f94c 	bl	800df3a <vListInsert>
 800fca2:	e012      	b.n	800fcca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d206      	bcs.n	800fcba <prvInsertTimerInActiveList+0x62>
 800fcac:	68ba      	ldr	r2, [r7, #8]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d302      	bcc.n	800fcba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	617b      	str	r3, [r7, #20]
 800fcb8:	e007      	b.n	800fcca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcba:	4b07      	ldr	r3, [pc, #28]	; (800fcd8 <prvInsertTimerInActiveList+0x80>)
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	3304      	adds	r3, #4
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	f7fe f938 	bl	800df3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fcca:	697b      	ldr	r3, [r7, #20]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	20001858 	.word	0x20001858
 800fcd8:	20001854 	.word	0x20001854

0800fcdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08e      	sub	sp, #56	; 0x38
 800fce0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fce2:	e0ca      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	da18      	bge.n	800fd1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fcea:	1d3b      	adds	r3, r7, #4
 800fcec:	3304      	adds	r3, #4
 800fcee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10a      	bne.n	800fd0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	61fb      	str	r3, [r7, #28]
}
 800fd08:	bf00      	nop
 800fd0a:	e7fe      	b.n	800fd0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd12:	6850      	ldr	r0, [r2, #4]
 800fd14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd16:	6892      	ldr	r2, [r2, #8]
 800fd18:	4611      	mov	r1, r2
 800fd1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f2c0 80aa 	blt.w	800fe78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d004      	beq.n	800fd3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	3304      	adds	r3, #4
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fe f939 	bl	800dfac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd3a:	463b      	mov	r3, r7
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff ff6b 	bl	800fc18 <prvSampleTimeNow>
 800fd42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b09      	cmp	r3, #9
 800fd48:	f200 8097 	bhi.w	800fe7a <prvProcessReceivedCommands+0x19e>
 800fd4c:	a201      	add	r2, pc, #4	; (adr r2, 800fd54 <prvProcessReceivedCommands+0x78>)
 800fd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd52:	bf00      	nop
 800fd54:	0800fd7d 	.word	0x0800fd7d
 800fd58:	0800fd7d 	.word	0x0800fd7d
 800fd5c:	0800fd7d 	.word	0x0800fd7d
 800fd60:	0800fdf1 	.word	0x0800fdf1
 800fd64:	0800fe05 	.word	0x0800fe05
 800fd68:	0800fe4f 	.word	0x0800fe4f
 800fd6c:	0800fd7d 	.word	0x0800fd7d
 800fd70:	0800fd7d 	.word	0x0800fd7d
 800fd74:	0800fdf1 	.word	0x0800fdf1
 800fd78:	0800fe05 	.word	0x0800fe05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd82:	f043 0301 	orr.w	r3, r3, #1
 800fd86:	b2da      	uxtb	r2, r3
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	18d1      	adds	r1, r2, r3
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd9c:	f7ff ff5c 	bl	800fc58 <prvInsertTimerInActiveList>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d069      	beq.n	800fe7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdb4:	f003 0304 	and.w	r3, r3, #4
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d05e      	beq.n	800fe7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	699b      	ldr	r3, [r3, #24]
 800fdc2:	441a      	add	r2, r3
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2100      	movs	r1, #0
 800fdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdce:	f7ff fe05 	bl	800f9dc <xTimerGenericCommand>
 800fdd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d14f      	bne.n	800fe7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdde:	f383 8811 	msr	BASEPRI, r3
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	f3bf 8f4f 	dsb	sy
 800fdea:	61bb      	str	r3, [r7, #24]
}
 800fdec:	bf00      	nop
 800fdee:	e7fe      	b.n	800fdee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdf6:	f023 0301 	bic.w	r3, r3, #1
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe02:	e03a      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe0a:	f043 0301 	orr.w	r3, r3, #1
 800fe0e:	b2da      	uxtb	r2, r3
 800fe10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d10a      	bne.n	800fe3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe28:	f383 8811 	msr	BASEPRI, r3
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	f3bf 8f4f 	dsb	sy
 800fe34:	617b      	str	r3, [r7, #20]
}
 800fe36:	bf00      	nop
 800fe38:	e7fe      	b.n	800fe38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	699a      	ldr	r2, [r3, #24]
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe40:	18d1      	adds	r1, r2, r3
 800fe42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe48:	f7ff ff06 	bl	800fc58 <prvInsertTimerInActiveList>
					break;
 800fe4c:	e015      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe54:	f003 0302 	and.w	r3, r3, #2
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d103      	bne.n	800fe64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fe5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe5e:	f000 fbd7 	bl	8010610 <vPortFree>
 800fe62:	e00a      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe6a:	f023 0301 	bic.w	r3, r3, #1
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fe76:	e000      	b.n	800fe7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fe78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe7a:	4b08      	ldr	r3, [pc, #32]	; (800fe9c <prvProcessReceivedCommands+0x1c0>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	1d39      	adds	r1, r7, #4
 800fe80:	2200      	movs	r2, #0
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe fb96 	bl	800e5b4 <xQueueReceive>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f47f af2a 	bne.w	800fce4 <prvProcessReceivedCommands+0x8>
	}
}
 800fe90:	bf00      	nop
 800fe92:	bf00      	nop
 800fe94:	3730      	adds	r7, #48	; 0x30
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	2000185c 	.word	0x2000185c

0800fea0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b088      	sub	sp, #32
 800fea4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fea6:	e048      	b.n	800ff3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fea8:	4b2d      	ldr	r3, [pc, #180]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb2:	4b2b      	ldr	r3, [pc, #172]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	3304      	adds	r3, #4
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe f873 	bl	800dfac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	68f8      	ldr	r0, [r7, #12]
 800fecc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fed4:	f003 0304 	and.w	r3, r3, #4
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d02e      	beq.n	800ff3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	4413      	add	r3, r2
 800fee4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	429a      	cmp	r2, r3
 800feec:	d90e      	bls.n	800ff0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	68ba      	ldr	r2, [r7, #8]
 800fef2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fefa:	4b19      	ldr	r3, [pc, #100]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	3304      	adds	r3, #4
 800ff02:	4619      	mov	r1, r3
 800ff04:	4610      	mov	r0, r2
 800ff06:	f7fe f818 	bl	800df3a <vListInsert>
 800ff0a:	e016      	b.n	800ff3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	2300      	movs	r3, #0
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	2100      	movs	r1, #0
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f7ff fd60 	bl	800f9dc <xTimerGenericCommand>
 800ff1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d10a      	bne.n	800ff3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff28:	f383 8811 	msr	BASEPRI, r3
 800ff2c:	f3bf 8f6f 	isb	sy
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	603b      	str	r3, [r7, #0]
}
 800ff36:	bf00      	nop
 800ff38:	e7fe      	b.n	800ff38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff3a:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d1b1      	bne.n	800fea8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff44:	4b06      	ldr	r3, [pc, #24]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff4a:	4b06      	ldr	r3, [pc, #24]	; (800ff64 <prvSwitchTimerLists+0xc4>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	4a04      	ldr	r2, [pc, #16]	; (800ff60 <prvSwitchTimerLists+0xc0>)
 800ff50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff52:	4a04      	ldr	r2, [pc, #16]	; (800ff64 <prvSwitchTimerLists+0xc4>)
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	6013      	str	r3, [r2, #0]
}
 800ff58:	bf00      	nop
 800ff5a:	3718      	adds	r7, #24
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	20001854 	.word	0x20001854
 800ff64:	20001858 	.word	0x20001858

0800ff68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ff6e:	f000 f969 	bl	8010244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ff72:	4b15      	ldr	r3, [pc, #84]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d120      	bne.n	800ffbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ff7a:	4814      	ldr	r0, [pc, #80]	; (800ffcc <prvCheckForValidListAndQueue+0x64>)
 800ff7c:	f7fd ff8c 	bl	800de98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ff80:	4813      	ldr	r0, [pc, #76]	; (800ffd0 <prvCheckForValidListAndQueue+0x68>)
 800ff82:	f7fd ff89 	bl	800de98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ff86:	4b13      	ldr	r3, [pc, #76]	; (800ffd4 <prvCheckForValidListAndQueue+0x6c>)
 800ff88:	4a10      	ldr	r2, [pc, #64]	; (800ffcc <prvCheckForValidListAndQueue+0x64>)
 800ff8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ff8c:	4b12      	ldr	r3, [pc, #72]	; (800ffd8 <prvCheckForValidListAndQueue+0x70>)
 800ff8e:	4a10      	ldr	r2, [pc, #64]	; (800ffd0 <prvCheckForValidListAndQueue+0x68>)
 800ff90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ff92:	2300      	movs	r3, #0
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <prvCheckForValidListAndQueue+0x74>)
 800ff98:	4a11      	ldr	r2, [pc, #68]	; (800ffe0 <prvCheckForValidListAndQueue+0x78>)
 800ff9a:	2110      	movs	r1, #16
 800ff9c:	200a      	movs	r0, #10
 800ff9e:	f7fe f897 	bl	800e0d0 <xQueueGenericCreateStatic>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	4a08      	ldr	r2, [pc, #32]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ffa6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ffa8:	4b07      	ldr	r3, [pc, #28]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d005      	beq.n	800ffbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <prvCheckForValidListAndQueue+0x60>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	490b      	ldr	r1, [pc, #44]	; (800ffe4 <prvCheckForValidListAndQueue+0x7c>)
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe fd6c 	bl	800ea94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffbc:	f000 f972 	bl	80102a4 <vPortExitCritical>
}
 800ffc0:	bf00      	nop
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	2000185c 	.word	0x2000185c
 800ffcc:	2000182c 	.word	0x2000182c
 800ffd0:	20001840 	.word	0x20001840
 800ffd4:	20001854 	.word	0x20001854
 800ffd8:	20001858 	.word	0x20001858
 800ffdc:	20001908 	.word	0x20001908
 800ffe0:	20001868 	.word	0x20001868
 800ffe4:	08012378 	.word	0x08012378

0800ffe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	3b04      	subs	r3, #4
 800fff8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	3b04      	subs	r3, #4
 8010006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	f023 0201 	bic.w	r2, r3, #1
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	3b04      	subs	r3, #4
 8010016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010018:	4a0c      	ldr	r2, [pc, #48]	; (801004c <pxPortInitialiseStack+0x64>)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3b14      	subs	r3, #20
 8010022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	3b04      	subs	r3, #4
 801002e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f06f 0202 	mvn.w	r2, #2
 8010036:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	3b20      	subs	r3, #32
 801003c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801003e:	68fb      	ldr	r3, [r7, #12]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3714      	adds	r7, #20
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	08010051 	.word	0x08010051

08010050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010056:	2300      	movs	r3, #0
 8010058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801005a:	4b12      	ldr	r3, [pc, #72]	; (80100a4 <prvTaskExitError+0x54>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010062:	d00a      	beq.n	801007a <prvTaskExitError+0x2a>
	__asm volatile
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	60fb      	str	r3, [r7, #12]
}
 8010076:	bf00      	nop
 8010078:	e7fe      	b.n	8010078 <prvTaskExitError+0x28>
	__asm volatile
 801007a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801007e:	f383 8811 	msr	BASEPRI, r3
 8010082:	f3bf 8f6f 	isb	sy
 8010086:	f3bf 8f4f 	dsb	sy
 801008a:	60bb      	str	r3, [r7, #8]
}
 801008c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801008e:	bf00      	nop
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d0fc      	beq.n	8010090 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010096:	bf00      	nop
 8010098:	bf00      	nop
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	2000002c 	.word	0x2000002c
	...

080100b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <pxCurrentTCBConst2>)
 80100b2:	6819      	ldr	r1, [r3, #0]
 80100b4:	6808      	ldr	r0, [r1, #0]
 80100b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ba:	f380 8809 	msr	PSP, r0
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f04f 0000 	mov.w	r0, #0
 80100c6:	f380 8811 	msr	BASEPRI, r0
 80100ca:	4770      	bx	lr
 80100cc:	f3af 8000 	nop.w

080100d0 <pxCurrentTCBConst2>:
 80100d0:	2000132c 	.word	0x2000132c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100d4:	bf00      	nop
 80100d6:	bf00      	nop

080100d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100d8:	4808      	ldr	r0, [pc, #32]	; (80100fc <prvPortStartFirstTask+0x24>)
 80100da:	6800      	ldr	r0, [r0, #0]
 80100dc:	6800      	ldr	r0, [r0, #0]
 80100de:	f380 8808 	msr	MSP, r0
 80100e2:	f04f 0000 	mov.w	r0, #0
 80100e6:	f380 8814 	msr	CONTROL, r0
 80100ea:	b662      	cpsie	i
 80100ec:	b661      	cpsie	f
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	f3bf 8f6f 	isb	sy
 80100f6:	df00      	svc	0
 80100f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80100fa:	bf00      	nop
 80100fc:	e000ed08 	.word	0xe000ed08

08010100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010106:	4b46      	ldr	r3, [pc, #280]	; (8010220 <xPortStartScheduler+0x120>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a46      	ldr	r2, [pc, #280]	; (8010224 <xPortStartScheduler+0x124>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d10a      	bne.n	8010126 <xPortStartScheduler+0x26>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	613b      	str	r3, [r7, #16]
}
 8010122:	bf00      	nop
 8010124:	e7fe      	b.n	8010124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010126:	4b3e      	ldr	r3, [pc, #248]	; (8010220 <xPortStartScheduler+0x120>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4a3f      	ldr	r2, [pc, #252]	; (8010228 <xPortStartScheduler+0x128>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d10a      	bne.n	8010146 <xPortStartScheduler+0x46>
	__asm volatile
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	f383 8811 	msr	BASEPRI, r3
 8010138:	f3bf 8f6f 	isb	sy
 801013c:	f3bf 8f4f 	dsb	sy
 8010140:	60fb      	str	r3, [r7, #12]
}
 8010142:	bf00      	nop
 8010144:	e7fe      	b.n	8010144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010146:	4b39      	ldr	r3, [pc, #228]	; (801022c <xPortStartScheduler+0x12c>)
 8010148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	b2db      	uxtb	r3, r3
 8010150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	22ff      	movs	r2, #255	; 0xff
 8010156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	b2db      	uxtb	r3, r3
 801015e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010160:	78fb      	ldrb	r3, [r7, #3]
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010168:	b2da      	uxtb	r2, r3
 801016a:	4b31      	ldr	r3, [pc, #196]	; (8010230 <xPortStartScheduler+0x130>)
 801016c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801016e:	4b31      	ldr	r3, [pc, #196]	; (8010234 <xPortStartScheduler+0x134>)
 8010170:	2207      	movs	r2, #7
 8010172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010174:	e009      	b.n	801018a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010176:	4b2f      	ldr	r3, [pc, #188]	; (8010234 <xPortStartScheduler+0x134>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3b01      	subs	r3, #1
 801017c:	4a2d      	ldr	r2, [pc, #180]	; (8010234 <xPortStartScheduler+0x134>)
 801017e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010180:	78fb      	ldrb	r3, [r7, #3]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	b2db      	uxtb	r3, r3
 8010188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801018a:	78fb      	ldrb	r3, [r7, #3]
 801018c:	b2db      	uxtb	r3, r3
 801018e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010192:	2b80      	cmp	r3, #128	; 0x80
 8010194:	d0ef      	beq.n	8010176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010196:	4b27      	ldr	r3, [pc, #156]	; (8010234 <xPortStartScheduler+0x134>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f1c3 0307 	rsb	r3, r3, #7
 801019e:	2b04      	cmp	r3, #4
 80101a0:	d00a      	beq.n	80101b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80101a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	60bb      	str	r3, [r7, #8]
}
 80101b4:	bf00      	nop
 80101b6:	e7fe      	b.n	80101b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101b8:	4b1e      	ldr	r3, [pc, #120]	; (8010234 <xPortStartScheduler+0x134>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	021b      	lsls	r3, r3, #8
 80101be:	4a1d      	ldr	r2, [pc, #116]	; (8010234 <xPortStartScheduler+0x134>)
 80101c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101c2:	4b1c      	ldr	r3, [pc, #112]	; (8010234 <xPortStartScheduler+0x134>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101ca:	4a1a      	ldr	r2, [pc, #104]	; (8010234 <xPortStartScheduler+0x134>)
 80101cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101d6:	4b18      	ldr	r3, [pc, #96]	; (8010238 <xPortStartScheduler+0x138>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a17      	ldr	r2, [pc, #92]	; (8010238 <xPortStartScheduler+0x138>)
 80101dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101e2:	4b15      	ldr	r3, [pc, #84]	; (8010238 <xPortStartScheduler+0x138>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4a14      	ldr	r2, [pc, #80]	; (8010238 <xPortStartScheduler+0x138>)
 80101e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80101ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101ee:	f000 f8dd 	bl	80103ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80101f2:	4b12      	ldr	r3, [pc, #72]	; (801023c <xPortStartScheduler+0x13c>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80101f8:	f000 f8fc 	bl	80103f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80101fc:	4b10      	ldr	r3, [pc, #64]	; (8010240 <xPortStartScheduler+0x140>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4a0f      	ldr	r2, [pc, #60]	; (8010240 <xPortStartScheduler+0x140>)
 8010202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010208:	f7ff ff66 	bl	80100d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801020c:	f7ff f852 	bl	800f2b4 <vTaskSwitchContext>
	prvTaskExitError();
 8010210:	f7ff ff1e 	bl	8010050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3718      	adds	r7, #24
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	e000ed00 	.word	0xe000ed00
 8010224:	410fc271 	.word	0x410fc271
 8010228:	410fc270 	.word	0x410fc270
 801022c:	e000e400 	.word	0xe000e400
 8010230:	20001958 	.word	0x20001958
 8010234:	2000195c 	.word	0x2000195c
 8010238:	e000ed20 	.word	0xe000ed20
 801023c:	2000002c 	.word	0x2000002c
 8010240:	e000ef34 	.word	0xe000ef34

08010244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
	__asm volatile
 801024a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024e:	f383 8811 	msr	BASEPRI, r3
 8010252:	f3bf 8f6f 	isb	sy
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	607b      	str	r3, [r7, #4]
}
 801025c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801025e:	4b0f      	ldr	r3, [pc, #60]	; (801029c <vPortEnterCritical+0x58>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3301      	adds	r3, #1
 8010264:	4a0d      	ldr	r2, [pc, #52]	; (801029c <vPortEnterCritical+0x58>)
 8010266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010268:	4b0c      	ldr	r3, [pc, #48]	; (801029c <vPortEnterCritical+0x58>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d10f      	bne.n	8010290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010270:	4b0b      	ldr	r3, [pc, #44]	; (80102a0 <vPortEnterCritical+0x5c>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	b2db      	uxtb	r3, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00a      	beq.n	8010290 <vPortEnterCritical+0x4c>
	__asm volatile
 801027a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	603b      	str	r3, [r7, #0]
}
 801028c:	bf00      	nop
 801028e:	e7fe      	b.n	801028e <vPortEnterCritical+0x4a>
	}
}
 8010290:	bf00      	nop
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	2000002c 	.word	0x2000002c
 80102a0:	e000ed04 	.word	0xe000ed04

080102a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102aa:	4b12      	ldr	r3, [pc, #72]	; (80102f4 <vPortExitCritical+0x50>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d10a      	bne.n	80102c8 <vPortExitCritical+0x24>
	__asm volatile
 80102b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b6:	f383 8811 	msr	BASEPRI, r3
 80102ba:	f3bf 8f6f 	isb	sy
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	607b      	str	r3, [r7, #4]
}
 80102c4:	bf00      	nop
 80102c6:	e7fe      	b.n	80102c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102c8:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <vPortExitCritical+0x50>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	3b01      	subs	r3, #1
 80102ce:	4a09      	ldr	r2, [pc, #36]	; (80102f4 <vPortExitCritical+0x50>)
 80102d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102d2:	4b08      	ldr	r3, [pc, #32]	; (80102f4 <vPortExitCritical+0x50>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d105      	bne.n	80102e6 <vPortExitCritical+0x42>
 80102da:	2300      	movs	r3, #0
 80102dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	f383 8811 	msr	BASEPRI, r3
}
 80102e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102e6:	bf00      	nop
 80102e8:	370c      	adds	r7, #12
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	2000002c 	.word	0x2000002c
	...

08010300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010300:	f3ef 8009 	mrs	r0, PSP
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	4b15      	ldr	r3, [pc, #84]	; (8010360 <pxCurrentTCBConst>)
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	f01e 0f10 	tst.w	lr, #16
 8010310:	bf08      	it	eq
 8010312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031a:	6010      	str	r0, [r2, #0]
 801031c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010324:	f380 8811 	msr	BASEPRI, r0
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f7fe ffc0 	bl	800f2b4 <vTaskSwitchContext>
 8010334:	f04f 0000 	mov.w	r0, #0
 8010338:	f380 8811 	msr	BASEPRI, r0
 801033c:	bc09      	pop	{r0, r3}
 801033e:	6819      	ldr	r1, [r3, #0]
 8010340:	6808      	ldr	r0, [r1, #0]
 8010342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010346:	f01e 0f10 	tst.w	lr, #16
 801034a:	bf08      	it	eq
 801034c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010350:	f380 8809 	msr	PSP, r0
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop
 801035c:	f3af 8000 	nop.w

08010360 <pxCurrentTCBConst>:
 8010360:	2000132c 	.word	0x2000132c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010364:	bf00      	nop
 8010366:	bf00      	nop

08010368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
	__asm volatile
 801036e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	607b      	str	r3, [r7, #4]
}
 8010380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010382:	f7fe fedd 	bl	800f140 <xTaskIncrementTick>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801038c:	4b06      	ldr	r3, [pc, #24]	; (80103a8 <SysTick_Handler+0x40>)
 801038e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	2300      	movs	r3, #0
 8010396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	f383 8811 	msr	BASEPRI, r3
}
 801039e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	e000ed04 	.word	0xe000ed04

080103ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103ac:	b480      	push	{r7}
 80103ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103b0:	4b0b      	ldr	r3, [pc, #44]	; (80103e0 <vPortSetupTimerInterrupt+0x34>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103b6:	4b0b      	ldr	r3, [pc, #44]	; (80103e4 <vPortSetupTimerInterrupt+0x38>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103bc:	4b0a      	ldr	r3, [pc, #40]	; (80103e8 <vPortSetupTimerInterrupt+0x3c>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a0a      	ldr	r2, [pc, #40]	; (80103ec <vPortSetupTimerInterrupt+0x40>)
 80103c2:	fba2 2303 	umull	r2, r3, r2, r3
 80103c6:	099b      	lsrs	r3, r3, #6
 80103c8:	4a09      	ldr	r2, [pc, #36]	; (80103f0 <vPortSetupTimerInterrupt+0x44>)
 80103ca:	3b01      	subs	r3, #1
 80103cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103ce:	4b04      	ldr	r3, [pc, #16]	; (80103e0 <vPortSetupTimerInterrupt+0x34>)
 80103d0:	2207      	movs	r2, #7
 80103d2:	601a      	str	r2, [r3, #0]
}
 80103d4:	bf00      	nop
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr
 80103de:	bf00      	nop
 80103e0:	e000e010 	.word	0xe000e010
 80103e4:	e000e018 	.word	0xe000e018
 80103e8:	20000000 	.word	0x20000000
 80103ec:	10624dd3 	.word	0x10624dd3
 80103f0:	e000e014 	.word	0xe000e014

080103f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80103f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010404 <vPortEnableVFP+0x10>
 80103f8:	6801      	ldr	r1, [r0, #0]
 80103fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80103fe:	6001      	str	r1, [r0, #0]
 8010400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010402:	bf00      	nop
 8010404:	e000ed88 	.word	0xe000ed88

08010408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801040e:	f3ef 8305 	mrs	r3, IPSR
 8010412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b0f      	cmp	r3, #15
 8010418:	d914      	bls.n	8010444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801041a:	4a17      	ldr	r2, [pc, #92]	; (8010478 <vPortValidateInterruptPriority+0x70>)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4413      	add	r3, r2
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010424:	4b15      	ldr	r3, [pc, #84]	; (801047c <vPortValidateInterruptPriority+0x74>)
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	7afa      	ldrb	r2, [r7, #11]
 801042a:	429a      	cmp	r2, r3
 801042c:	d20a      	bcs.n	8010444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010432:	f383 8811 	msr	BASEPRI, r3
 8010436:	f3bf 8f6f 	isb	sy
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	607b      	str	r3, [r7, #4]
}
 8010440:	bf00      	nop
 8010442:	e7fe      	b.n	8010442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010444:	4b0e      	ldr	r3, [pc, #56]	; (8010480 <vPortValidateInterruptPriority+0x78>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801044c:	4b0d      	ldr	r3, [pc, #52]	; (8010484 <vPortValidateInterruptPriority+0x7c>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	429a      	cmp	r2, r3
 8010452:	d90a      	bls.n	801046a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	f383 8811 	msr	BASEPRI, r3
 801045c:	f3bf 8f6f 	isb	sy
 8010460:	f3bf 8f4f 	dsb	sy
 8010464:	603b      	str	r3, [r7, #0]
}
 8010466:	bf00      	nop
 8010468:	e7fe      	b.n	8010468 <vPortValidateInterruptPriority+0x60>
	}
 801046a:	bf00      	nop
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	e000e3f0 	.word	0xe000e3f0
 801047c:	20001958 	.word	0x20001958
 8010480:	e000ed0c 	.word	0xe000ed0c
 8010484:	2000195c 	.word	0x2000195c

08010488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b08a      	sub	sp, #40	; 0x28
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010490:	2300      	movs	r3, #0
 8010492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010494:	f7fe fd98 	bl	800efc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010498:	4b58      	ldr	r3, [pc, #352]	; (80105fc <pvPortMalloc+0x174>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104a0:	f000 f910 	bl	80106c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104a4:	4b56      	ldr	r3, [pc, #344]	; (8010600 <pvPortMalloc+0x178>)
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4013      	ands	r3, r2
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	f040 808e 	bne.w	80105ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d01d      	beq.n	80104f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80104b8:	2208      	movs	r2, #8
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4413      	add	r3, r2
 80104be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f003 0307 	and.w	r3, r3, #7
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d014      	beq.n	80104f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f023 0307 	bic.w	r3, r3, #7
 80104d0:	3308      	adds	r3, #8
 80104d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f003 0307 	and.w	r3, r3, #7
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00a      	beq.n	80104f4 <pvPortMalloc+0x6c>
	__asm volatile
 80104de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	617b      	str	r3, [r7, #20]
}
 80104f0:	bf00      	nop
 80104f2:	e7fe      	b.n	80104f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d069      	beq.n	80105ce <pvPortMalloc+0x146>
 80104fa:	4b42      	ldr	r3, [pc, #264]	; (8010604 <pvPortMalloc+0x17c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	429a      	cmp	r2, r3
 8010502:	d864      	bhi.n	80105ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010504:	4b40      	ldr	r3, [pc, #256]	; (8010608 <pvPortMalloc+0x180>)
 8010506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010508:	4b3f      	ldr	r3, [pc, #252]	; (8010608 <pvPortMalloc+0x180>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801050e:	e004      	b.n	801051a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	429a      	cmp	r2, r3
 8010522:	d903      	bls.n	801052c <pvPortMalloc+0xa4>
 8010524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d1f1      	bne.n	8010510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801052c:	4b33      	ldr	r3, [pc, #204]	; (80105fc <pvPortMalloc+0x174>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010532:	429a      	cmp	r2, r3
 8010534:	d04b      	beq.n	80105ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010536:	6a3b      	ldr	r3, [r7, #32]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2208      	movs	r2, #8
 801053c:	4413      	add	r3, r2
 801053e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	6a3b      	ldr	r3, [r7, #32]
 8010546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054a:	685a      	ldr	r2, [r3, #4]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	1ad2      	subs	r2, r2, r3
 8010550:	2308      	movs	r3, #8
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	429a      	cmp	r2, r3
 8010556:	d91f      	bls.n	8010598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4413      	add	r3, r2
 801055e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	f003 0307 	and.w	r3, r3, #7
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <pvPortMalloc+0xf8>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	613b      	str	r3, [r7, #16]
}
 801057c:	bf00      	nop
 801057e:	e7fe      	b.n	801057e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	1ad2      	subs	r2, r2, r3
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010592:	69b8      	ldr	r0, [r7, #24]
 8010594:	f000 f8f8 	bl	8010788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010598:	4b1a      	ldr	r3, [pc, #104]	; (8010604 <pvPortMalloc+0x17c>)
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	4a18      	ldr	r2, [pc, #96]	; (8010604 <pvPortMalloc+0x17c>)
 80105a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105a6:	4b17      	ldr	r3, [pc, #92]	; (8010604 <pvPortMalloc+0x17c>)
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	4b18      	ldr	r3, [pc, #96]	; (801060c <pvPortMalloc+0x184>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d203      	bcs.n	80105ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105b2:	4b14      	ldr	r3, [pc, #80]	; (8010604 <pvPortMalloc+0x17c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a15      	ldr	r2, [pc, #84]	; (801060c <pvPortMalloc+0x184>)
 80105b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	4b10      	ldr	r3, [pc, #64]	; (8010600 <pvPortMalloc+0x178>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	431a      	orrs	r2, r3
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80105c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ca:	2200      	movs	r2, #0
 80105cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80105ce:	f7fe fd09 	bl	800efe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	f003 0307 	and.w	r3, r3, #7
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00a      	beq.n	80105f2 <pvPortMalloc+0x16a>
	__asm volatile
 80105dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	60fb      	str	r3, [r7, #12]
}
 80105ee:	bf00      	nop
 80105f0:	e7fe      	b.n	80105f0 <pvPortMalloc+0x168>
	return pvReturn;
 80105f2:	69fb      	ldr	r3, [r7, #28]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3728      	adds	r7, #40	; 0x28
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	20005568 	.word	0x20005568
 8010600:	20005574 	.word	0x20005574
 8010604:	2000556c 	.word	0x2000556c
 8010608:	20005560 	.word	0x20005560
 801060c:	20005570 	.word	0x20005570

08010610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b086      	sub	sp, #24
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d048      	beq.n	80106b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010622:	2308      	movs	r3, #8
 8010624:	425b      	negs	r3, r3
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	4413      	add	r3, r2
 801062a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	685a      	ldr	r2, [r3, #4]
 8010634:	4b21      	ldr	r3, [pc, #132]	; (80106bc <vPortFree+0xac>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4013      	ands	r3, r2
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10a      	bne.n	8010654 <vPortFree+0x44>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	f383 8811 	msr	BASEPRI, r3
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	60fb      	str	r3, [r7, #12]
}
 8010650:	bf00      	nop
 8010652:	e7fe      	b.n	8010652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d00a      	beq.n	8010672 <vPortFree+0x62>
	__asm volatile
 801065c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	60bb      	str	r3, [r7, #8]
}
 801066e:	bf00      	nop
 8010670:	e7fe      	b.n	8010670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	4b11      	ldr	r3, [pc, #68]	; (80106bc <vPortFree+0xac>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4013      	ands	r3, r2
 801067c:	2b00      	cmp	r3, #0
 801067e:	d019      	beq.n	80106b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d115      	bne.n	80106b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	685a      	ldr	r2, [r3, #4]
 801068c:	4b0b      	ldr	r3, [pc, #44]	; (80106bc <vPortFree+0xac>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	43db      	mvns	r3, r3
 8010692:	401a      	ands	r2, r3
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010698:	f7fe fc96 	bl	800efc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	685a      	ldr	r2, [r3, #4]
 80106a0:	4b07      	ldr	r3, [pc, #28]	; (80106c0 <vPortFree+0xb0>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4413      	add	r3, r2
 80106a6:	4a06      	ldr	r2, [pc, #24]	; (80106c0 <vPortFree+0xb0>)
 80106a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106aa:	6938      	ldr	r0, [r7, #16]
 80106ac:	f000 f86c 	bl	8010788 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80106b0:	f7fe fc98 	bl	800efe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80106b4:	bf00      	nop
 80106b6:	3718      	adds	r7, #24
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20005574 	.word	0x20005574
 80106c0:	2000556c 	.word	0x2000556c

080106c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80106ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80106ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80106d0:	4b27      	ldr	r3, [pc, #156]	; (8010770 <prvHeapInit+0xac>)
 80106d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f003 0307 	and.w	r3, r3, #7
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00c      	beq.n	80106f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	3307      	adds	r3, #7
 80106e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f023 0307 	bic.w	r3, r3, #7
 80106ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	4a1f      	ldr	r2, [pc, #124]	; (8010770 <prvHeapInit+0xac>)
 80106f4:	4413      	add	r3, r2
 80106f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80106fc:	4a1d      	ldr	r2, [pc, #116]	; (8010774 <prvHeapInit+0xb0>)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010702:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <prvHeapInit+0xb0>)
 8010704:	2200      	movs	r2, #0
 8010706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	68ba      	ldr	r2, [r7, #8]
 801070c:	4413      	add	r3, r2
 801070e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010710:	2208      	movs	r2, #8
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	1a9b      	subs	r3, r3, r2
 8010716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f023 0307 	bic.w	r3, r3, #7
 801071e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	4a15      	ldr	r2, [pc, #84]	; (8010778 <prvHeapInit+0xb4>)
 8010724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <prvHeapInit+0xb4>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	2200      	movs	r2, #0
 801072c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801072e:	4b12      	ldr	r3, [pc, #72]	; (8010778 <prvHeapInit+0xb4>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2200      	movs	r2, #0
 8010734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	1ad2      	subs	r2, r2, r3
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010744:	4b0c      	ldr	r3, [pc, #48]	; (8010778 <prvHeapInit+0xb4>)
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4a0a      	ldr	r2, [pc, #40]	; (801077c <prvHeapInit+0xb8>)
 8010752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	4a09      	ldr	r2, [pc, #36]	; (8010780 <prvHeapInit+0xbc>)
 801075a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801075c:	4b09      	ldr	r3, [pc, #36]	; (8010784 <prvHeapInit+0xc0>)
 801075e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010762:	601a      	str	r2, [r3, #0]
}
 8010764:	bf00      	nop
 8010766:	3714      	adds	r7, #20
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	20001960 	.word	0x20001960
 8010774:	20005560 	.word	0x20005560
 8010778:	20005568 	.word	0x20005568
 801077c:	20005570 	.word	0x20005570
 8010780:	2000556c 	.word	0x2000556c
 8010784:	20005574 	.word	0x20005574

08010788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010790:	4b28      	ldr	r3, [pc, #160]	; (8010834 <prvInsertBlockIntoFreeList+0xac>)
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	e002      	b.n	801079c <prvInsertBlockIntoFreeList+0x14>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d8f7      	bhi.n	8010796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	68ba      	ldr	r2, [r7, #8]
 80107b0:	4413      	add	r3, r2
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d108      	bne.n	80107ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	441a      	add	r2, r3
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	441a      	add	r2, r3
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d118      	bne.n	8010810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	4b15      	ldr	r3, [pc, #84]	; (8010838 <prvInsertBlockIntoFreeList+0xb0>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d00d      	beq.n	8010806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685a      	ldr	r2, [r3, #4]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	441a      	add	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	601a      	str	r2, [r3, #0]
 8010804:	e008      	b.n	8010818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010806:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <prvInsertBlockIntoFreeList+0xb0>)
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	e003      	b.n	8010818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	429a      	cmp	r2, r3
 801081e:	d002      	beq.n	8010826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010826:	bf00      	nop
 8010828:	3714      	adds	r7, #20
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	20005560 	.word	0x20005560
 8010838:	20005568 	.word	0x20005568

0801083c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010840:	2201      	movs	r2, #1
 8010842:	490e      	ldr	r1, [pc, #56]	; (801087c <MX_USB_HOST_Init+0x40>)
 8010844:	480e      	ldr	r0, [pc, #56]	; (8010880 <MX_USB_HOST_Init+0x44>)
 8010846:	f7fb fab9 	bl	800bdbc <USBH_Init>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d001      	beq.n	8010854 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010850:	f7f1 fbde 	bl	8002010 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010854:	490b      	ldr	r1, [pc, #44]	; (8010884 <MX_USB_HOST_Init+0x48>)
 8010856:	480a      	ldr	r0, [pc, #40]	; (8010880 <MX_USB_HOST_Init+0x44>)
 8010858:	f7fb fb60 	bl	800bf1c <USBH_RegisterClass>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d001      	beq.n	8010866 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010862:	f7f1 fbd5 	bl	8002010 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010866:	4806      	ldr	r0, [pc, #24]	; (8010880 <MX_USB_HOST_Init+0x44>)
 8010868:	f7fb fbe4 	bl	800c034 <USBH_Start>
 801086c:	4603      	mov	r3, r0
 801086e:	2b00      	cmp	r3, #0
 8010870:	d001      	beq.n	8010876 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010872:	f7f1 fbcd 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010876:	bf00      	nop
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	08010889 	.word	0x08010889
 8010880:	20005630 	.word	0x20005630
 8010884:	2000000c 	.word	0x2000000c

08010888 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	460b      	mov	r3, r1
 8010892:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010894:	78fb      	ldrb	r3, [r7, #3]
 8010896:	3b01      	subs	r3, #1
 8010898:	2b04      	cmp	r3, #4
 801089a:	d819      	bhi.n	80108d0 <USBH_UserProcess+0x48>
 801089c:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <USBH_UserProcess+0x1c>)
 801089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a2:	bf00      	nop
 80108a4:	080108d1 	.word	0x080108d1
 80108a8:	080108c1 	.word	0x080108c1
 80108ac:	080108d1 	.word	0x080108d1
 80108b0:	080108c9 	.word	0x080108c9
 80108b4:	080108b9 	.word	0x080108b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80108b8:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <USBH_UserProcess+0x58>)
 80108ba:	2203      	movs	r2, #3
 80108bc:	701a      	strb	r2, [r3, #0]
  break;
 80108be:	e008      	b.n	80108d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80108c0:	4b07      	ldr	r3, [pc, #28]	; (80108e0 <USBH_UserProcess+0x58>)
 80108c2:	2202      	movs	r2, #2
 80108c4:	701a      	strb	r2, [r3, #0]
  break;
 80108c6:	e004      	b.n	80108d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80108c8:	4b05      	ldr	r3, [pc, #20]	; (80108e0 <USBH_UserProcess+0x58>)
 80108ca:	2201      	movs	r2, #1
 80108cc:	701a      	strb	r2, [r3, #0]
  break;
 80108ce:	e000      	b.n	80108d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80108d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80108d2:	bf00      	nop
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	20005578 	.word	0x20005578

080108e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08a      	sub	sp, #40	; 0x28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108ec:	f107 0314 	add.w	r3, r7, #20
 80108f0:	2200      	movs	r2, #0
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	605a      	str	r2, [r3, #4]
 80108f6:	609a      	str	r2, [r3, #8]
 80108f8:	60da      	str	r2, [r3, #12]
 80108fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010904:	d147      	bne.n	8010996 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010906:	2300      	movs	r3, #0
 8010908:	613b      	str	r3, [r7, #16]
 801090a:	4b25      	ldr	r3, [pc, #148]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 801090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090e:	4a24      	ldr	r2, [pc, #144]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010910:	f043 0301 	orr.w	r3, r3, #1
 8010914:	6313      	str	r3, [r2, #48]	; 0x30
 8010916:	4b22      	ldr	r3, [pc, #136]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	613b      	str	r3, [r7, #16]
 8010920:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8010922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010928:	2300      	movs	r3, #0
 801092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801092c:	2300      	movs	r3, #0
 801092e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010930:	f107 0314 	add.w	r3, r7, #20
 8010934:	4619      	mov	r1, r3
 8010936:	481b      	ldr	r0, [pc, #108]	; (80109a4 <HAL_HCD_MspInit+0xc0>)
 8010938:	f7f3 feb0 	bl	800469c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801093c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010942:	2302      	movs	r3, #2
 8010944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010946:	2300      	movs	r3, #0
 8010948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801094a:	2303      	movs	r3, #3
 801094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801094e:	230a      	movs	r3, #10
 8010950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010952:	f107 0314 	add.w	r3, r7, #20
 8010956:	4619      	mov	r1, r3
 8010958:	4812      	ldr	r0, [pc, #72]	; (80109a4 <HAL_HCD_MspInit+0xc0>)
 801095a:	f7f3 fe9f 	bl	800469c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801095e:	4b10      	ldr	r3, [pc, #64]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010962:	4a0f      	ldr	r2, [pc, #60]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010968:	6353      	str	r3, [r2, #52]	; 0x34
 801096a:	2300      	movs	r3, #0
 801096c:	60fb      	str	r3, [r7, #12]
 801096e:	4b0c      	ldr	r3, [pc, #48]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010972:	4a0b      	ldr	r2, [pc, #44]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 8010974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010978:	6453      	str	r3, [r2, #68]	; 0x44
 801097a:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <HAL_HCD_MspInit+0xbc>)
 801097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010986:	2200      	movs	r2, #0
 8010988:	2100      	movs	r1, #0
 801098a:	2043      	movs	r0, #67	; 0x43
 801098c:	f7f3 fb3e 	bl	800400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010990:	2043      	movs	r0, #67	; 0x43
 8010992:	f7f3 fb57 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010996:	bf00      	nop
 8010998:	3728      	adds	r7, #40	; 0x28
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	40023800 	.word	0x40023800
 80109a4:	40020000 	.word	0x40020000

080109a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fb ffe9 	bl	800c98e <USBH_LL_IncTimer>
}
 80109bc:	bf00      	nop
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fc f82d 	bl	800ca32 <USBH_LL_Connect>
}
 80109d8:	bf00      	nop
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fc f842 	bl	800ca78 <USBH_LL_Disconnect>
}
 80109f4:	bf00      	nop
 80109f6:	3708      	adds	r7, #8
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fc f879 	bl	800cb0a <USBH_LL_NotifyURBChange>
#endif
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fb ffd7 	bl	800c9e2 <USBH_LL_PortEnabled>
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fb ffe3 	bl	800ca16 <USBH_LL_PortDisabled>
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d12a      	bne.n	8010ac0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010a6a:	4a18      	ldr	r2, [pc, #96]	; (8010acc <USBH_LL_Init+0x74>)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4a15      	ldr	r2, [pc, #84]	; (8010acc <USBH_LL_Init+0x74>)
 8010a76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010a7a:	4b14      	ldr	r3, [pc, #80]	; (8010acc <USBH_LL_Init+0x74>)
 8010a7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010a80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8010a82:	4b12      	ldr	r3, [pc, #72]	; (8010acc <USBH_LL_Init+0x74>)
 8010a84:	220c      	movs	r2, #12
 8010a86:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010a88:	4b10      	ldr	r3, [pc, #64]	; (8010acc <USBH_LL_Init+0x74>)
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010a8e:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <USBH_LL_Init+0x74>)
 8010a90:	2200      	movs	r2, #0
 8010a92:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010a94:	4b0d      	ldr	r3, [pc, #52]	; (8010acc <USBH_LL_Init+0x74>)
 8010a96:	2202      	movs	r2, #2
 8010a98:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010a9a:	4b0c      	ldr	r3, [pc, #48]	; (8010acc <USBH_LL_Init+0x74>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010aa0:	480a      	ldr	r0, [pc, #40]	; (8010acc <USBH_LL_Init+0x74>)
 8010aa2:	f7f3 ffc3 	bl	8004a2c <HAL_HCD_Init>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010aac:	f7f1 fab0 	bl	8002010 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010ab0:	4806      	ldr	r0, [pc, #24]	; (8010acc <USBH_LL_Init+0x74>)
 8010ab2:	f7f4 fbc7 	bl	8005244 <HAL_HCD_GetCurrentFrame>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	4619      	mov	r1, r3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7fb ff58 	bl	800c970 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	20005a14 	.word	0x20005a14

08010ad0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b084      	sub	sp, #16
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010adc:	2300      	movs	r3, #0
 8010ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7f4 fb34 	bl	8005154 <HAL_HCD_Start>
 8010aec:	4603      	mov	r3, r0
 8010aee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 f95e 	bl	8010db4 <USBH_Get_USB_Status>
 8010af8:	4603      	mov	r3, r0
 8010afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f4 fb3c 	bl	800519a <HAL_HCD_Stop>
 8010b22:	4603      	mov	r3, r0
 8010b24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b26:	7bfb      	ldrb	r3, [r7, #15]
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f943 	bl	8010db4 <USBH_Get_USB_Status>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010b44:	2301      	movs	r3, #1
 8010b46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7f4 fb86 	bl	8005260 <HAL_HCD_GetCurrentSpeed>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d00c      	beq.n	8010b74 <USBH_LL_GetSpeed+0x38>
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d80d      	bhi.n	8010b7a <USBH_LL_GetSpeed+0x3e>
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <USBH_LL_GetSpeed+0x2c>
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d003      	beq.n	8010b6e <USBH_LL_GetSpeed+0x32>
 8010b66:	e008      	b.n	8010b7a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b6c:	e008      	b.n	8010b80 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	73fb      	strb	r3, [r7, #15]
    break;
 8010b72:	e005      	b.n	8010b80 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010b74:	2302      	movs	r3, #2
 8010b76:	73fb      	strb	r3, [r7, #15]
    break;
 8010b78:	e002      	b.n	8010b80 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8010b7e:	bf00      	nop
  }
  return  speed;
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b92:	2300      	movs	r3, #0
 8010b94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b96:	2300      	movs	r3, #0
 8010b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7f4 fb17 	bl	80051d4 <HAL_HCD_ResetPort>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f901 	bl	8010db4 <USBH_Get_USB_Status>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bd2:	78fa      	ldrb	r2, [r7, #3]
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7f4 fb1f 	bl	800521a <HAL_HCD_HC_GetXferCount>
 8010bdc:	4603      	mov	r3, r0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010be6:	b590      	push	{r4, r7, lr}
 8010be8:	b089      	sub	sp, #36	; 0x24
 8010bea:	af04      	add	r7, sp, #16
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	4608      	mov	r0, r1
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	70fb      	strb	r3, [r7, #3]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70bb      	strb	r3, [r7, #2]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010c0e:	787c      	ldrb	r4, [r7, #1]
 8010c10:	78ba      	ldrb	r2, [r7, #2]
 8010c12:	78f9      	ldrb	r1, [r7, #3]
 8010c14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c16:	9302      	str	r3, [sp, #8]
 8010c18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c1c:	9301      	str	r3, [sp, #4]
 8010c1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	4623      	mov	r3, r4
 8010c26:	f7f3 ff63 	bl	8004af0 <HAL_HCD_HC_Init>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c2e:	7bfb      	ldrb	r3, [r7, #15]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 f8bf 	bl	8010db4 <USBH_Get_USB_Status>
 8010c36:	4603      	mov	r3, r0
 8010c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3714      	adds	r7, #20
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd90      	pop	{r4, r7, pc}

08010c44 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c5e:	78fa      	ldrb	r2, [r7, #3]
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7f3 ffdc 	bl	8004c20 <HAL_HCD_HC_Halt>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c6c:	7bfb      	ldrb	r3, [r7, #15]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f000 f8a0 	bl	8010db4 <USBH_Get_USB_Status>
 8010c74:	4603      	mov	r3, r0
 8010c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010c82:	b590      	push	{r4, r7, lr}
 8010c84:	b089      	sub	sp, #36	; 0x24
 8010c86:	af04      	add	r7, sp, #16
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	4608      	mov	r0, r1
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	461a      	mov	r2, r3
 8010c90:	4603      	mov	r3, r0
 8010c92:	70fb      	strb	r3, [r7, #3]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70bb      	strb	r3, [r7, #2]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010caa:	787c      	ldrb	r4, [r7, #1]
 8010cac:	78ba      	ldrb	r2, [r7, #2]
 8010cae:	78f9      	ldrb	r1, [r7, #3]
 8010cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010cb4:	9303      	str	r3, [sp, #12]
 8010cb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010cb8:	9302      	str	r3, [sp, #8]
 8010cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	4623      	mov	r3, r4
 8010cc6:	f7f3 ffcf 	bl	8004c68 <HAL_HCD_HC_SubmitRequest>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f000 f86f 	bl	8010db4 <USBH_Get_USB_Status>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3714      	adds	r7, #20
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd90      	pop	{r4, r7, pc}

08010ce4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010cf6:	78fa      	ldrb	r2, [r7, #3]
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f4 fa78 	bl	80051f0 <HAL_HCD_HC_GetURBState>
 8010d00:	4603      	mov	r3, r0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b082      	sub	sp, #8
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
 8010d12:	460b      	mov	r3, r1
 8010d14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d103      	bne.n	8010d28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010d20:	78fb      	ldrb	r3, [r7, #3]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f000 f872 	bl	8010e0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d28:	20c8      	movs	r0, #200	; 0xc8
 8010d2a:	f7f2 fe21 	bl	8003970 <HAL_Delay>
  return USBH_OK;
 8010d2e:	2300      	movs	r3, #0
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b085      	sub	sp, #20
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	460b      	mov	r3, r1
 8010d42:	70fb      	strb	r3, [r7, #3]
 8010d44:	4613      	mov	r3, r2
 8010d46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010d50:	78fa      	ldrb	r2, [r7, #3]
 8010d52:	68f9      	ldr	r1, [r7, #12]
 8010d54:	4613      	mov	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4413      	add	r3, r2
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	440b      	add	r3, r1
 8010d5e:	333b      	adds	r3, #59	; 0x3b
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00a      	beq.n	8010d7c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010d66:	78fa      	ldrb	r2, [r7, #3]
 8010d68:	68f9      	ldr	r1, [r7, #12]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	009b      	lsls	r3, r3, #2
 8010d6e:	4413      	add	r3, r2
 8010d70:	00db      	lsls	r3, r3, #3
 8010d72:	440b      	add	r3, r1
 8010d74:	3350      	adds	r3, #80	; 0x50
 8010d76:	78ba      	ldrb	r2, [r7, #2]
 8010d78:	701a      	strb	r2, [r3, #0]
 8010d7a:	e009      	b.n	8010d90 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010d7c:	78fa      	ldrb	r2, [r7, #3]
 8010d7e:	68f9      	ldr	r1, [r7, #12]
 8010d80:	4613      	mov	r3, r2
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	4413      	add	r3, r2
 8010d86:	00db      	lsls	r3, r3, #3
 8010d88:	440b      	add	r3, r1
 8010d8a:	3351      	adds	r3, #81	; 0x51
 8010d8c:	78ba      	ldrb	r2, [r7, #2]
 8010d8e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3714      	adds	r7, #20
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr

08010d9e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b082      	sub	sp, #8
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7f2 fde2 	bl	8003970 <HAL_Delay>
}
 8010dac:	bf00      	nop
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	4603      	mov	r3, r0
 8010dbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010dc2:	79fb      	ldrb	r3, [r7, #7]
 8010dc4:	2b03      	cmp	r3, #3
 8010dc6:	d817      	bhi.n	8010df8 <USBH_Get_USB_Status+0x44>
 8010dc8:	a201      	add	r2, pc, #4	; (adr r2, 8010dd0 <USBH_Get_USB_Status+0x1c>)
 8010dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dce:	bf00      	nop
 8010dd0:	08010de1 	.word	0x08010de1
 8010dd4:	08010de7 	.word	0x08010de7
 8010dd8:	08010ded 	.word	0x08010ded
 8010ddc:	08010df3 	.word	0x08010df3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	73fb      	strb	r3, [r7, #15]
    break;
 8010de4:	e00b      	b.n	8010dfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010de6:	2302      	movs	r3, #2
 8010de8:	73fb      	strb	r3, [r7, #15]
    break;
 8010dea:	e008      	b.n	8010dfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010dec:	2301      	movs	r3, #1
 8010dee:	73fb      	strb	r3, [r7, #15]
    break;
 8010df0:	e005      	b.n	8010dfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010df2:	2302      	movs	r3, #2
 8010df4:	73fb      	strb	r3, [r7, #15]
    break;
 8010df6:	e002      	b.n	8010dfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010df8:	2302      	movs	r3, #2
 8010dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8010dfc:	bf00      	nop
  }
  return usb_status;
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	4603      	mov	r3, r0
 8010e14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010e16:	79fb      	ldrb	r3, [r7, #7]
 8010e18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010e1a:	79fb      	ldrb	r3, [r7, #7]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d102      	bne.n	8010e26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010e20:	2301      	movs	r3, #1
 8010e22:	73fb      	strb	r3, [r7, #15]
 8010e24:	e001      	b.n	8010e2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8010e2a:	7bfb      	ldrb	r3, [r7, #15]
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e32:	4803      	ldr	r0, [pc, #12]	; (8010e40 <MX_DriverVbusFS+0x34>)
 8010e34:	f7f3 fdc6 	bl	80049c4 <HAL_GPIO_WritePin>
}
 8010e38:	bf00      	nop
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	40021800 	.word	0x40021800

08010e44 <_ZdlPv>:
 8010e44:	f001 b88c 	b.w	8011f60 <free>

08010e48 <_Znwj>:
 8010e48:	2801      	cmp	r0, #1
 8010e4a:	bf38      	it	cc
 8010e4c:	2001      	movcc	r0, #1
 8010e4e:	b510      	push	{r4, lr}
 8010e50:	4604      	mov	r4, r0
 8010e52:	4620      	mov	r0, r4
 8010e54:	f001 f87c 	bl	8011f50 <malloc>
 8010e58:	b930      	cbnz	r0, 8010e68 <_Znwj+0x20>
 8010e5a:	f000 f88b 	bl	8010f74 <_ZSt15get_new_handlerv>
 8010e5e:	b908      	cbnz	r0, 8010e64 <_Znwj+0x1c>
 8010e60:	f001 f844 	bl	8011eec <abort>
 8010e64:	4780      	blx	r0
 8010e66:	e7f4      	b.n	8010e52 <_Znwj+0xa>
 8010e68:	bd10      	pop	{r4, pc}

08010e6a <_ZNSaIcEC1Ev>:
 8010e6a:	4770      	bx	lr

08010e6c <_ZNSaIcED1Ev>:
 8010e6c:	4770      	bx	lr

08010e6e <_ZSt17__throw_bad_allocv>:
 8010e6e:	b508      	push	{r3, lr}
 8010e70:	f001 f83c 	bl	8011eec <abort>

08010e74 <_ZSt19__throw_logic_errorPKc>:
 8010e74:	b508      	push	{r3, lr}
 8010e76:	f001 f839 	bl	8011eec <abort>

08010e7a <_ZSt24__throw_invalid_argumentPKc>:
 8010e7a:	b508      	push	{r3, lr}
 8010e7c:	f001 f836 	bl	8011eec <abort>

08010e80 <_ZSt20__throw_length_errorPKc>:
 8010e80:	b508      	push	{r3, lr}
 8010e82:	f001 f833 	bl	8011eec <abort>

08010e86 <_ZSt20__throw_out_of_rangePKc>:
 8010e86:	b508      	push	{r3, lr}
 8010e88:	f001 f830 	bl	8011eec <abort>

08010e8c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8010e8c:	b10a      	cbz	r2, 8010e92 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8010e8e:	f001 b86f 	b.w	8011f70 <memcpy>
 8010e92:	4770      	bx	lr

08010e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010e94:	b508      	push	{r3, lr}
 8010e96:	680b      	ldr	r3, [r1, #0]
 8010e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e9c:	d302      	bcc.n	8010ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8010e9e:	480d      	ldr	r0, [pc, #52]	; (8010ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8010ea0:	f7ff ffee 	bl	8010e80 <_ZSt20__throw_length_errorPKc>
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d90b      	bls.n	8010ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010ea8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8010eac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8010eb0:	d206      	bcs.n	8010ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010eb2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010eb6:	bf2a      	itet	cs
 8010eb8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8010ebc:	6008      	strcc	r0, [r1, #0]
 8010ebe:	600b      	strcs	r3, [r1, #0]
 8010ec0:	6808      	ldr	r0, [r1, #0]
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	d501      	bpl.n	8010eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8010ec6:	f7ff ffd2 	bl	8010e6e <_ZSt17__throw_bad_allocv>
 8010eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010ece:	f7ff bfbb 	b.w	8010e48 <_Znwj>
 8010ed2:	bf00      	nop
 8010ed4:	080123e0 	.word	0x080123e0

08010ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010ed8:	f850 3b08 	ldr.w	r3, [r0], #8
 8010edc:	4283      	cmp	r3, r0
 8010ede:	d002      	beq.n	8010ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff bfaf 	b.w	8010e44 <_ZdlPv>
 8010ee6:	4770      	bx	lr

08010ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010ee8:	2a01      	cmp	r2, #1
 8010eea:	b510      	push	{r4, lr}
 8010eec:	d102      	bne.n	8010ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8010eee:	780a      	ldrb	r2, [r1, #0]
 8010ef0:	7002      	strb	r2, [r0, #0]
 8010ef2:	bd10      	pop	{r4, pc}
 8010ef4:	f7ff ffca 	bl	8010e8c <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8010ef8:	e7fb      	b.n	8010ef2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08010efa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8010efa:	b508      	push	{r3, lr}
 8010efc:	1a52      	subs	r2, r2, r1
 8010efe:	f7ff fff3 	bl	8010ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010f02:	bd08      	pop	{r3, pc}

08010f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8010f04:	b510      	push	{r4, lr}
 8010f06:	4604      	mov	r4, r0
 8010f08:	f7ff ffe6 	bl	8010ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	bd10      	pop	{r4, pc}

08010f10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8010f10:	6800      	ldr	r0, [r0, #0]
 8010f12:	4770      	bx	lr

08010f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8010f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f16:	4604      	mov	r4, r0
 8010f18:	4616      	mov	r6, r2
 8010f1a:	460d      	mov	r5, r1
 8010f1c:	b919      	cbnz	r1, 8010f26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8010f1e:	b112      	cbz	r2, 8010f26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8010f20:	480d      	ldr	r0, [pc, #52]	; (8010f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8010f22:	f7ff ffa7 	bl	8010e74 <_ZSt19__throw_logic_errorPKc>
 8010f26:	1b73      	subs	r3, r6, r5
 8010f28:	2b0f      	cmp	r3, #15
 8010f2a:	9301      	str	r3, [sp, #4]
 8010f2c:	d907      	bls.n	8010f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8010f2e:	2200      	movs	r2, #0
 8010f30:	a901      	add	r1, sp, #4
 8010f32:	4620      	mov	r0, r4
 8010f34:	f7ff ffae 	bl	8010e94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010f38:	9b01      	ldr	r3, [sp, #4]
 8010f3a:	6020      	str	r0, [r4, #0]
 8010f3c:	60a3      	str	r3, [r4, #8]
 8010f3e:	4632      	mov	r2, r6
 8010f40:	4629      	mov	r1, r5
 8010f42:	6820      	ldr	r0, [r4, #0]
 8010f44:	f7ff ffd9 	bl	8010efa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8010f48:	9b01      	ldr	r3, [sp, #4]
 8010f4a:	6822      	ldr	r2, [r4, #0]
 8010f4c:	6063      	str	r3, [r4, #4]
 8010f4e:	2100      	movs	r1, #0
 8010f50:	54d1      	strb	r1, [r2, r3]
 8010f52:	b002      	add	sp, #8
 8010f54:	bd70      	pop	{r4, r5, r6, pc}
 8010f56:	bf00      	nop
 8010f58:	080123f8 	.word	0x080123f8

08010f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 8010f5c:	b510      	push	{r4, lr}
 8010f5e:	f100 0308 	add.w	r3, r0, #8
 8010f62:	4604      	mov	r4, r0
 8010f64:	6003      	str	r3, [r0, #0]
 8010f66:	440a      	add	r2, r1
 8010f68:	f04f 0300 	mov.w	r3, #0
 8010f6c:	f7ff ffd2 	bl	8010f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8010f70:	4620      	mov	r0, r4
 8010f72:	bd10      	pop	{r4, pc}

08010f74 <_ZSt15get_new_handlerv>:
 8010f74:	4b02      	ldr	r3, [pc, #8]	; (8010f80 <_ZSt15get_new_handlerv+0xc>)
 8010f76:	6818      	ldr	r0, [r3, #0]
 8010f78:	f3bf 8f5b 	dmb	ish
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	2000557c 	.word	0x2000557c

08010f84 <pow>:
 8010f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f88:	ec59 8b10 	vmov	r8, r9, d0
 8010f8c:	ec57 6b11 	vmov	r6, r7, d1
 8010f90:	f000 f8a6 	bl	80110e0 <__ieee754_pow>
 8010f94:	4b4e      	ldr	r3, [pc, #312]	; (80110d0 <pow+0x14c>)
 8010f96:	f993 3000 	ldrsb.w	r3, [r3]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	ec55 4b10 	vmov	r4, r5, d0
 8010fa0:	d015      	beq.n	8010fce <pow+0x4a>
 8010fa2:	4632      	mov	r2, r6
 8010fa4:	463b      	mov	r3, r7
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	4639      	mov	r1, r7
 8010faa:	f7ef fd8f 	bl	8000acc <__aeabi_dcmpun>
 8010fae:	b970      	cbnz	r0, 8010fce <pow+0x4a>
 8010fb0:	4642      	mov	r2, r8
 8010fb2:	464b      	mov	r3, r9
 8010fb4:	4640      	mov	r0, r8
 8010fb6:	4649      	mov	r1, r9
 8010fb8:	f7ef fd88 	bl	8000acc <__aeabi_dcmpun>
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	b148      	cbz	r0, 8010fd6 <pow+0x52>
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	4639      	mov	r1, r7
 8010fc6:	f7ef fd4f 	bl	8000a68 <__aeabi_dcmpeq>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d17d      	bne.n	80110ca <pow+0x146>
 8010fce:	ec45 4b10 	vmov	d0, r4, r5
 8010fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	4649      	mov	r1, r9
 8010fda:	f7ef fd45 	bl	8000a68 <__aeabi_dcmpeq>
 8010fde:	b1e0      	cbz	r0, 801101a <pow+0x96>
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	4639      	mov	r1, r7
 8010fe8:	f7ef fd3e 	bl	8000a68 <__aeabi_dcmpeq>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d16c      	bne.n	80110ca <pow+0x146>
 8010ff0:	ec47 6b10 	vmov	d0, r6, r7
 8010ff4:	f000 fe53 	bl	8011c9e <finite>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d0e8      	beq.n	8010fce <pow+0x4a>
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	2300      	movs	r3, #0
 8011000:	4630      	mov	r0, r6
 8011002:	4639      	mov	r1, r7
 8011004:	f7ef fd3a 	bl	8000a7c <__aeabi_dcmplt>
 8011008:	2800      	cmp	r0, #0
 801100a:	d0e0      	beq.n	8010fce <pow+0x4a>
 801100c:	f000 ff76 	bl	8011efc <__errno>
 8011010:	2321      	movs	r3, #33	; 0x21
 8011012:	6003      	str	r3, [r0, #0]
 8011014:	2400      	movs	r4, #0
 8011016:	4d2f      	ldr	r5, [pc, #188]	; (80110d4 <pow+0x150>)
 8011018:	e7d9      	b.n	8010fce <pow+0x4a>
 801101a:	ec45 4b10 	vmov	d0, r4, r5
 801101e:	f000 fe3e 	bl	8011c9e <finite>
 8011022:	bbb8      	cbnz	r0, 8011094 <pow+0x110>
 8011024:	ec49 8b10 	vmov	d0, r8, r9
 8011028:	f000 fe39 	bl	8011c9e <finite>
 801102c:	b390      	cbz	r0, 8011094 <pow+0x110>
 801102e:	ec47 6b10 	vmov	d0, r6, r7
 8011032:	f000 fe34 	bl	8011c9e <finite>
 8011036:	b368      	cbz	r0, 8011094 <pow+0x110>
 8011038:	4622      	mov	r2, r4
 801103a:	462b      	mov	r3, r5
 801103c:	4620      	mov	r0, r4
 801103e:	4629      	mov	r1, r5
 8011040:	f7ef fd44 	bl	8000acc <__aeabi_dcmpun>
 8011044:	b160      	cbz	r0, 8011060 <pow+0xdc>
 8011046:	f000 ff59 	bl	8011efc <__errno>
 801104a:	2321      	movs	r3, #33	; 0x21
 801104c:	6003      	str	r3, [r0, #0]
 801104e:	2200      	movs	r2, #0
 8011050:	2300      	movs	r3, #0
 8011052:	4610      	mov	r0, r2
 8011054:	4619      	mov	r1, r3
 8011056:	f7ef fbc9 	bl	80007ec <__aeabi_ddiv>
 801105a:	4604      	mov	r4, r0
 801105c:	460d      	mov	r5, r1
 801105e:	e7b6      	b.n	8010fce <pow+0x4a>
 8011060:	f000 ff4c 	bl	8011efc <__errno>
 8011064:	2322      	movs	r3, #34	; 0x22
 8011066:	6003      	str	r3, [r0, #0]
 8011068:	2200      	movs	r2, #0
 801106a:	2300      	movs	r3, #0
 801106c:	4640      	mov	r0, r8
 801106e:	4649      	mov	r1, r9
 8011070:	f7ef fd04 	bl	8000a7c <__aeabi_dcmplt>
 8011074:	2400      	movs	r4, #0
 8011076:	b158      	cbz	r0, 8011090 <pow+0x10c>
 8011078:	ec47 6b10 	vmov	d0, r6, r7
 801107c:	f000 fe24 	bl	8011cc8 <rint>
 8011080:	4632      	mov	r2, r6
 8011082:	ec51 0b10 	vmov	r0, r1, d0
 8011086:	463b      	mov	r3, r7
 8011088:	f7ef fcee 	bl	8000a68 <__aeabi_dcmpeq>
 801108c:	2800      	cmp	r0, #0
 801108e:	d0c2      	beq.n	8011016 <pow+0x92>
 8011090:	4d11      	ldr	r5, [pc, #68]	; (80110d8 <pow+0x154>)
 8011092:	e79c      	b.n	8010fce <pow+0x4a>
 8011094:	2200      	movs	r2, #0
 8011096:	2300      	movs	r3, #0
 8011098:	4620      	mov	r0, r4
 801109a:	4629      	mov	r1, r5
 801109c:	f7ef fce4 	bl	8000a68 <__aeabi_dcmpeq>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d094      	beq.n	8010fce <pow+0x4a>
 80110a4:	ec49 8b10 	vmov	d0, r8, r9
 80110a8:	f000 fdf9 	bl	8011c9e <finite>
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d08e      	beq.n	8010fce <pow+0x4a>
 80110b0:	ec47 6b10 	vmov	d0, r6, r7
 80110b4:	f000 fdf3 	bl	8011c9e <finite>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d088      	beq.n	8010fce <pow+0x4a>
 80110bc:	f000 ff1e 	bl	8011efc <__errno>
 80110c0:	2322      	movs	r3, #34	; 0x22
 80110c2:	6003      	str	r3, [r0, #0]
 80110c4:	2400      	movs	r4, #0
 80110c6:	2500      	movs	r5, #0
 80110c8:	e781      	b.n	8010fce <pow+0x4a>
 80110ca:	4d04      	ldr	r5, [pc, #16]	; (80110dc <pow+0x158>)
 80110cc:	2400      	movs	r4, #0
 80110ce:	e77e      	b.n	8010fce <pow+0x4a>
 80110d0:	20000030 	.word	0x20000030
 80110d4:	fff00000 	.word	0xfff00000
 80110d8:	7ff00000 	.word	0x7ff00000
 80110dc:	3ff00000 	.word	0x3ff00000

080110e0 <__ieee754_pow>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	ed2d 8b06 	vpush	{d8-d10}
 80110e8:	b08d      	sub	sp, #52	; 0x34
 80110ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80110ee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80110f2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80110f6:	ea56 0100 	orrs.w	r1, r6, r0
 80110fa:	ec53 2b10 	vmov	r2, r3, d0
 80110fe:	f000 84d1 	beq.w	8011aa4 <__ieee754_pow+0x9c4>
 8011102:	497f      	ldr	r1, [pc, #508]	; (8011300 <__ieee754_pow+0x220>)
 8011104:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011108:	428c      	cmp	r4, r1
 801110a:	ee10 8a10 	vmov	r8, s0
 801110e:	4699      	mov	r9, r3
 8011110:	dc09      	bgt.n	8011126 <__ieee754_pow+0x46>
 8011112:	d103      	bne.n	801111c <__ieee754_pow+0x3c>
 8011114:	b97a      	cbnz	r2, 8011136 <__ieee754_pow+0x56>
 8011116:	42a6      	cmp	r6, r4
 8011118:	dd02      	ble.n	8011120 <__ieee754_pow+0x40>
 801111a:	e00c      	b.n	8011136 <__ieee754_pow+0x56>
 801111c:	428e      	cmp	r6, r1
 801111e:	dc02      	bgt.n	8011126 <__ieee754_pow+0x46>
 8011120:	428e      	cmp	r6, r1
 8011122:	d110      	bne.n	8011146 <__ieee754_pow+0x66>
 8011124:	b178      	cbz	r0, 8011146 <__ieee754_pow+0x66>
 8011126:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801112a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801112e:	ea54 0308 	orrs.w	r3, r4, r8
 8011132:	f000 84b7 	beq.w	8011aa4 <__ieee754_pow+0x9c4>
 8011136:	4873      	ldr	r0, [pc, #460]	; (8011304 <__ieee754_pow+0x224>)
 8011138:	b00d      	add	sp, #52	; 0x34
 801113a:	ecbd 8b06 	vpop	{d8-d10}
 801113e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011142:	f000 bdb9 	b.w	8011cb8 <nan>
 8011146:	f1b9 0f00 	cmp.w	r9, #0
 801114a:	da36      	bge.n	80111ba <__ieee754_pow+0xda>
 801114c:	496e      	ldr	r1, [pc, #440]	; (8011308 <__ieee754_pow+0x228>)
 801114e:	428e      	cmp	r6, r1
 8011150:	dc51      	bgt.n	80111f6 <__ieee754_pow+0x116>
 8011152:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8011156:	428e      	cmp	r6, r1
 8011158:	f340 84af 	ble.w	8011aba <__ieee754_pow+0x9da>
 801115c:	1531      	asrs	r1, r6, #20
 801115e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011162:	2914      	cmp	r1, #20
 8011164:	dd0f      	ble.n	8011186 <__ieee754_pow+0xa6>
 8011166:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801116a:	fa20 fc01 	lsr.w	ip, r0, r1
 801116e:	fa0c f101 	lsl.w	r1, ip, r1
 8011172:	4281      	cmp	r1, r0
 8011174:	f040 84a1 	bne.w	8011aba <__ieee754_pow+0x9da>
 8011178:	f00c 0c01 	and.w	ip, ip, #1
 801117c:	f1cc 0102 	rsb	r1, ip, #2
 8011180:	9100      	str	r1, [sp, #0]
 8011182:	b180      	cbz	r0, 80111a6 <__ieee754_pow+0xc6>
 8011184:	e059      	b.n	801123a <__ieee754_pow+0x15a>
 8011186:	2800      	cmp	r0, #0
 8011188:	d155      	bne.n	8011236 <__ieee754_pow+0x156>
 801118a:	f1c1 0114 	rsb	r1, r1, #20
 801118e:	fa46 fc01 	asr.w	ip, r6, r1
 8011192:	fa0c f101 	lsl.w	r1, ip, r1
 8011196:	42b1      	cmp	r1, r6
 8011198:	f040 848c 	bne.w	8011ab4 <__ieee754_pow+0x9d4>
 801119c:	f00c 0c01 	and.w	ip, ip, #1
 80111a0:	f1cc 0102 	rsb	r1, ip, #2
 80111a4:	9100      	str	r1, [sp, #0]
 80111a6:	4959      	ldr	r1, [pc, #356]	; (801130c <__ieee754_pow+0x22c>)
 80111a8:	428e      	cmp	r6, r1
 80111aa:	d12d      	bne.n	8011208 <__ieee754_pow+0x128>
 80111ac:	2f00      	cmp	r7, #0
 80111ae:	da79      	bge.n	80112a4 <__ieee754_pow+0x1c4>
 80111b0:	4956      	ldr	r1, [pc, #344]	; (801130c <__ieee754_pow+0x22c>)
 80111b2:	2000      	movs	r0, #0
 80111b4:	f7ef fb1a 	bl	80007ec <__aeabi_ddiv>
 80111b8:	e016      	b.n	80111e8 <__ieee754_pow+0x108>
 80111ba:	2100      	movs	r1, #0
 80111bc:	9100      	str	r1, [sp, #0]
 80111be:	2800      	cmp	r0, #0
 80111c0:	d13b      	bne.n	801123a <__ieee754_pow+0x15a>
 80111c2:	494f      	ldr	r1, [pc, #316]	; (8011300 <__ieee754_pow+0x220>)
 80111c4:	428e      	cmp	r6, r1
 80111c6:	d1ee      	bne.n	80111a6 <__ieee754_pow+0xc6>
 80111c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80111cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80111d0:	ea53 0308 	orrs.w	r3, r3, r8
 80111d4:	f000 8466 	beq.w	8011aa4 <__ieee754_pow+0x9c4>
 80111d8:	4b4d      	ldr	r3, [pc, #308]	; (8011310 <__ieee754_pow+0x230>)
 80111da:	429c      	cmp	r4, r3
 80111dc:	dd0d      	ble.n	80111fa <__ieee754_pow+0x11a>
 80111de:	2f00      	cmp	r7, #0
 80111e0:	f280 8464 	bge.w	8011aac <__ieee754_pow+0x9cc>
 80111e4:	2000      	movs	r0, #0
 80111e6:	2100      	movs	r1, #0
 80111e8:	ec41 0b10 	vmov	d0, r0, r1
 80111ec:	b00d      	add	sp, #52	; 0x34
 80111ee:	ecbd 8b06 	vpop	{d8-d10}
 80111f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f6:	2102      	movs	r1, #2
 80111f8:	e7e0      	b.n	80111bc <__ieee754_pow+0xdc>
 80111fa:	2f00      	cmp	r7, #0
 80111fc:	daf2      	bge.n	80111e4 <__ieee754_pow+0x104>
 80111fe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8011202:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011206:	e7ef      	b.n	80111e8 <__ieee754_pow+0x108>
 8011208:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801120c:	d104      	bne.n	8011218 <__ieee754_pow+0x138>
 801120e:	4610      	mov	r0, r2
 8011210:	4619      	mov	r1, r3
 8011212:	f7ef f9c1 	bl	8000598 <__aeabi_dmul>
 8011216:	e7e7      	b.n	80111e8 <__ieee754_pow+0x108>
 8011218:	493e      	ldr	r1, [pc, #248]	; (8011314 <__ieee754_pow+0x234>)
 801121a:	428f      	cmp	r7, r1
 801121c:	d10d      	bne.n	801123a <__ieee754_pow+0x15a>
 801121e:	f1b9 0f00 	cmp.w	r9, #0
 8011222:	db0a      	blt.n	801123a <__ieee754_pow+0x15a>
 8011224:	ec43 2b10 	vmov	d0, r2, r3
 8011228:	b00d      	add	sp, #52	; 0x34
 801122a:	ecbd 8b06 	vpop	{d8-d10}
 801122e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011232:	f000 bc77 	b.w	8011b24 <__ieee754_sqrt>
 8011236:	2100      	movs	r1, #0
 8011238:	9100      	str	r1, [sp, #0]
 801123a:	ec43 2b10 	vmov	d0, r2, r3
 801123e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011242:	f000 fd23 	bl	8011c8c <fabs>
 8011246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801124a:	ec51 0b10 	vmov	r0, r1, d0
 801124e:	f1b8 0f00 	cmp.w	r8, #0
 8011252:	d12a      	bne.n	80112aa <__ieee754_pow+0x1ca>
 8011254:	b12c      	cbz	r4, 8011262 <__ieee754_pow+0x182>
 8011256:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801130c <__ieee754_pow+0x22c>
 801125a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801125e:	45e6      	cmp	lr, ip
 8011260:	d123      	bne.n	80112aa <__ieee754_pow+0x1ca>
 8011262:	2f00      	cmp	r7, #0
 8011264:	da05      	bge.n	8011272 <__ieee754_pow+0x192>
 8011266:	4602      	mov	r2, r0
 8011268:	460b      	mov	r3, r1
 801126a:	2000      	movs	r0, #0
 801126c:	4927      	ldr	r1, [pc, #156]	; (801130c <__ieee754_pow+0x22c>)
 801126e:	f7ef fabd 	bl	80007ec <__aeabi_ddiv>
 8011272:	f1b9 0f00 	cmp.w	r9, #0
 8011276:	dab7      	bge.n	80111e8 <__ieee754_pow+0x108>
 8011278:	9b00      	ldr	r3, [sp, #0]
 801127a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801127e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011282:	4323      	orrs	r3, r4
 8011284:	d108      	bne.n	8011298 <__ieee754_pow+0x1b8>
 8011286:	4602      	mov	r2, r0
 8011288:	460b      	mov	r3, r1
 801128a:	4610      	mov	r0, r2
 801128c:	4619      	mov	r1, r3
 801128e:	f7ee ffcb 	bl	8000228 <__aeabi_dsub>
 8011292:	4602      	mov	r2, r0
 8011294:	460b      	mov	r3, r1
 8011296:	e78d      	b.n	80111b4 <__ieee754_pow+0xd4>
 8011298:	9b00      	ldr	r3, [sp, #0]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d1a4      	bne.n	80111e8 <__ieee754_pow+0x108>
 801129e:	4602      	mov	r2, r0
 80112a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112a4:	4610      	mov	r0, r2
 80112a6:	4619      	mov	r1, r3
 80112a8:	e79e      	b.n	80111e8 <__ieee754_pow+0x108>
 80112aa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80112ae:	f10c 35ff 	add.w	r5, ip, #4294967295
 80112b2:	950a      	str	r5, [sp, #40]	; 0x28
 80112b4:	9d00      	ldr	r5, [sp, #0]
 80112b6:	46ac      	mov	ip, r5
 80112b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80112ba:	ea5c 0505 	orrs.w	r5, ip, r5
 80112be:	d0e4      	beq.n	801128a <__ieee754_pow+0x1aa>
 80112c0:	4b15      	ldr	r3, [pc, #84]	; (8011318 <__ieee754_pow+0x238>)
 80112c2:	429e      	cmp	r6, r3
 80112c4:	f340 80fc 	ble.w	80114c0 <__ieee754_pow+0x3e0>
 80112c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80112cc:	429e      	cmp	r6, r3
 80112ce:	4b10      	ldr	r3, [pc, #64]	; (8011310 <__ieee754_pow+0x230>)
 80112d0:	dd07      	ble.n	80112e2 <__ieee754_pow+0x202>
 80112d2:	429c      	cmp	r4, r3
 80112d4:	dc0a      	bgt.n	80112ec <__ieee754_pow+0x20c>
 80112d6:	2f00      	cmp	r7, #0
 80112d8:	da84      	bge.n	80111e4 <__ieee754_pow+0x104>
 80112da:	a307      	add	r3, pc, #28	; (adr r3, 80112f8 <__ieee754_pow+0x218>)
 80112dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e0:	e795      	b.n	801120e <__ieee754_pow+0x12e>
 80112e2:	429c      	cmp	r4, r3
 80112e4:	dbf7      	blt.n	80112d6 <__ieee754_pow+0x1f6>
 80112e6:	4b09      	ldr	r3, [pc, #36]	; (801130c <__ieee754_pow+0x22c>)
 80112e8:	429c      	cmp	r4, r3
 80112ea:	dd17      	ble.n	801131c <__ieee754_pow+0x23c>
 80112ec:	2f00      	cmp	r7, #0
 80112ee:	dcf4      	bgt.n	80112da <__ieee754_pow+0x1fa>
 80112f0:	e778      	b.n	80111e4 <__ieee754_pow+0x104>
 80112f2:	bf00      	nop
 80112f4:	f3af 8000 	nop.w
 80112f8:	8800759c 	.word	0x8800759c
 80112fc:	7e37e43c 	.word	0x7e37e43c
 8011300:	7ff00000 	.word	0x7ff00000
 8011304:	08012421 	.word	0x08012421
 8011308:	433fffff 	.word	0x433fffff
 801130c:	3ff00000 	.word	0x3ff00000
 8011310:	3fefffff 	.word	0x3fefffff
 8011314:	3fe00000 	.word	0x3fe00000
 8011318:	41e00000 	.word	0x41e00000
 801131c:	4b64      	ldr	r3, [pc, #400]	; (80114b0 <__ieee754_pow+0x3d0>)
 801131e:	2200      	movs	r2, #0
 8011320:	f7ee ff82 	bl	8000228 <__aeabi_dsub>
 8011324:	a356      	add	r3, pc, #344	; (adr r3, 8011480 <__ieee754_pow+0x3a0>)
 8011326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132a:	4604      	mov	r4, r0
 801132c:	460d      	mov	r5, r1
 801132e:	f7ef f933 	bl	8000598 <__aeabi_dmul>
 8011332:	a355      	add	r3, pc, #340	; (adr r3, 8011488 <__ieee754_pow+0x3a8>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	4606      	mov	r6, r0
 801133a:	460f      	mov	r7, r1
 801133c:	4620      	mov	r0, r4
 801133e:	4629      	mov	r1, r5
 8011340:	f7ef f92a 	bl	8000598 <__aeabi_dmul>
 8011344:	4b5b      	ldr	r3, [pc, #364]	; (80114b4 <__ieee754_pow+0x3d4>)
 8011346:	4682      	mov	sl, r0
 8011348:	468b      	mov	fp, r1
 801134a:	2200      	movs	r2, #0
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f7ef f922 	bl	8000598 <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	a14d      	add	r1, pc, #308	; (adr r1, 8011490 <__ieee754_pow+0x3b0>)
 801135a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801135e:	f7ee ff63 	bl	8000228 <__aeabi_dsub>
 8011362:	4622      	mov	r2, r4
 8011364:	462b      	mov	r3, r5
 8011366:	f7ef f917 	bl	8000598 <__aeabi_dmul>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	2000      	movs	r0, #0
 8011370:	4951      	ldr	r1, [pc, #324]	; (80114b8 <__ieee754_pow+0x3d8>)
 8011372:	f7ee ff59 	bl	8000228 <__aeabi_dsub>
 8011376:	4622      	mov	r2, r4
 8011378:	4680      	mov	r8, r0
 801137a:	4689      	mov	r9, r1
 801137c:	462b      	mov	r3, r5
 801137e:	4620      	mov	r0, r4
 8011380:	4629      	mov	r1, r5
 8011382:	f7ef f909 	bl	8000598 <__aeabi_dmul>
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	4640      	mov	r0, r8
 801138c:	4649      	mov	r1, r9
 801138e:	f7ef f903 	bl	8000598 <__aeabi_dmul>
 8011392:	a341      	add	r3, pc, #260	; (adr r3, 8011498 <__ieee754_pow+0x3b8>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ef f8fe 	bl	8000598 <__aeabi_dmul>
 801139c:	4602      	mov	r2, r0
 801139e:	460b      	mov	r3, r1
 80113a0:	4650      	mov	r0, sl
 80113a2:	4659      	mov	r1, fp
 80113a4:	f7ee ff40 	bl	8000228 <__aeabi_dsub>
 80113a8:	4602      	mov	r2, r0
 80113aa:	460b      	mov	r3, r1
 80113ac:	4680      	mov	r8, r0
 80113ae:	4689      	mov	r9, r1
 80113b0:	4630      	mov	r0, r6
 80113b2:	4639      	mov	r1, r7
 80113b4:	f7ee ff3a 	bl	800022c <__adddf3>
 80113b8:	2400      	movs	r4, #0
 80113ba:	4632      	mov	r2, r6
 80113bc:	463b      	mov	r3, r7
 80113be:	4620      	mov	r0, r4
 80113c0:	460d      	mov	r5, r1
 80113c2:	f7ee ff31 	bl	8000228 <__aeabi_dsub>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4640      	mov	r0, r8
 80113cc:	4649      	mov	r1, r9
 80113ce:	f7ee ff2b 	bl	8000228 <__aeabi_dsub>
 80113d2:	9b00      	ldr	r3, [sp, #0]
 80113d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113d6:	3b01      	subs	r3, #1
 80113d8:	4313      	orrs	r3, r2
 80113da:	4682      	mov	sl, r0
 80113dc:	468b      	mov	fp, r1
 80113de:	f040 81f1 	bne.w	80117c4 <__ieee754_pow+0x6e4>
 80113e2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80114a0 <__ieee754_pow+0x3c0>
 80113e6:	eeb0 8a47 	vmov.f32	s16, s14
 80113ea:	eef0 8a67 	vmov.f32	s17, s15
 80113ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80113f2:	2600      	movs	r6, #0
 80113f4:	4632      	mov	r2, r6
 80113f6:	463b      	mov	r3, r7
 80113f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113fc:	f7ee ff14 	bl	8000228 <__aeabi_dsub>
 8011400:	4622      	mov	r2, r4
 8011402:	462b      	mov	r3, r5
 8011404:	f7ef f8c8 	bl	8000598 <__aeabi_dmul>
 8011408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801140c:	4680      	mov	r8, r0
 801140e:	4689      	mov	r9, r1
 8011410:	4650      	mov	r0, sl
 8011412:	4659      	mov	r1, fp
 8011414:	f7ef f8c0 	bl	8000598 <__aeabi_dmul>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4640      	mov	r0, r8
 801141e:	4649      	mov	r1, r9
 8011420:	f7ee ff04 	bl	800022c <__adddf3>
 8011424:	4632      	mov	r2, r6
 8011426:	463b      	mov	r3, r7
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef f8b2 	bl	8000598 <__aeabi_dmul>
 8011434:	460b      	mov	r3, r1
 8011436:	4604      	mov	r4, r0
 8011438:	460d      	mov	r5, r1
 801143a:	4602      	mov	r2, r0
 801143c:	4649      	mov	r1, r9
 801143e:	4640      	mov	r0, r8
 8011440:	f7ee fef4 	bl	800022c <__adddf3>
 8011444:	4b1d      	ldr	r3, [pc, #116]	; (80114bc <__ieee754_pow+0x3dc>)
 8011446:	4299      	cmp	r1, r3
 8011448:	ec45 4b19 	vmov	d9, r4, r5
 801144c:	4606      	mov	r6, r0
 801144e:	460f      	mov	r7, r1
 8011450:	468b      	mov	fp, r1
 8011452:	f340 82fe 	ble.w	8011a52 <__ieee754_pow+0x972>
 8011456:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801145a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801145e:	4303      	orrs	r3, r0
 8011460:	f000 81f0 	beq.w	8011844 <__ieee754_pow+0x764>
 8011464:	a310      	add	r3, pc, #64	; (adr r3, 80114a8 <__ieee754_pow+0x3c8>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	ec51 0b18 	vmov	r0, r1, d8
 801146e:	f7ef f893 	bl	8000598 <__aeabi_dmul>
 8011472:	a30d      	add	r3, pc, #52	; (adr r3, 80114a8 <__ieee754_pow+0x3c8>)
 8011474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011478:	e6cb      	b.n	8011212 <__ieee754_pow+0x132>
 801147a:	bf00      	nop
 801147c:	f3af 8000 	nop.w
 8011480:	60000000 	.word	0x60000000
 8011484:	3ff71547 	.word	0x3ff71547
 8011488:	f85ddf44 	.word	0xf85ddf44
 801148c:	3e54ae0b 	.word	0x3e54ae0b
 8011490:	55555555 	.word	0x55555555
 8011494:	3fd55555 	.word	0x3fd55555
 8011498:	652b82fe 	.word	0x652b82fe
 801149c:	3ff71547 	.word	0x3ff71547
 80114a0:	00000000 	.word	0x00000000
 80114a4:	bff00000 	.word	0xbff00000
 80114a8:	8800759c 	.word	0x8800759c
 80114ac:	7e37e43c 	.word	0x7e37e43c
 80114b0:	3ff00000 	.word	0x3ff00000
 80114b4:	3fd00000 	.word	0x3fd00000
 80114b8:	3fe00000 	.word	0x3fe00000
 80114bc:	408fffff 	.word	0x408fffff
 80114c0:	4bd7      	ldr	r3, [pc, #860]	; (8011820 <__ieee754_pow+0x740>)
 80114c2:	ea03 0309 	and.w	r3, r3, r9
 80114c6:	2200      	movs	r2, #0
 80114c8:	b92b      	cbnz	r3, 80114d6 <__ieee754_pow+0x3f6>
 80114ca:	4bd6      	ldr	r3, [pc, #856]	; (8011824 <__ieee754_pow+0x744>)
 80114cc:	f7ef f864 	bl	8000598 <__aeabi_dmul>
 80114d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80114d4:	460c      	mov	r4, r1
 80114d6:	1523      	asrs	r3, r4, #20
 80114d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80114dc:	4413      	add	r3, r2
 80114de:	9309      	str	r3, [sp, #36]	; 0x24
 80114e0:	4bd1      	ldr	r3, [pc, #836]	; (8011828 <__ieee754_pow+0x748>)
 80114e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80114e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80114ea:	429c      	cmp	r4, r3
 80114ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80114f0:	dd08      	ble.n	8011504 <__ieee754_pow+0x424>
 80114f2:	4bce      	ldr	r3, [pc, #824]	; (801182c <__ieee754_pow+0x74c>)
 80114f4:	429c      	cmp	r4, r3
 80114f6:	f340 8163 	ble.w	80117c0 <__ieee754_pow+0x6e0>
 80114fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114fc:	3301      	adds	r3, #1
 80114fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011500:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011504:	2400      	movs	r4, #0
 8011506:	00e3      	lsls	r3, r4, #3
 8011508:	930b      	str	r3, [sp, #44]	; 0x2c
 801150a:	4bc9      	ldr	r3, [pc, #804]	; (8011830 <__ieee754_pow+0x750>)
 801150c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011510:	ed93 7b00 	vldr	d7, [r3]
 8011514:	4629      	mov	r1, r5
 8011516:	ec53 2b17 	vmov	r2, r3, d7
 801151a:	eeb0 8a47 	vmov.f32	s16, s14
 801151e:	eef0 8a67 	vmov.f32	s17, s15
 8011522:	4682      	mov	sl, r0
 8011524:	f7ee fe80 	bl	8000228 <__aeabi_dsub>
 8011528:	4652      	mov	r2, sl
 801152a:	4606      	mov	r6, r0
 801152c:	460f      	mov	r7, r1
 801152e:	462b      	mov	r3, r5
 8011530:	ec51 0b18 	vmov	r0, r1, d8
 8011534:	f7ee fe7a 	bl	800022c <__adddf3>
 8011538:	4602      	mov	r2, r0
 801153a:	460b      	mov	r3, r1
 801153c:	2000      	movs	r0, #0
 801153e:	49bd      	ldr	r1, [pc, #756]	; (8011834 <__ieee754_pow+0x754>)
 8011540:	f7ef f954 	bl	80007ec <__aeabi_ddiv>
 8011544:	ec41 0b19 	vmov	d9, r0, r1
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	4630      	mov	r0, r6
 801154e:	4639      	mov	r1, r7
 8011550:	f7ef f822 	bl	8000598 <__aeabi_dmul>
 8011554:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011558:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801155c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011560:	2300      	movs	r3, #0
 8011562:	9304      	str	r3, [sp, #16]
 8011564:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011568:	46ab      	mov	fp, r5
 801156a:	106d      	asrs	r5, r5, #1
 801156c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011570:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011574:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011578:	2200      	movs	r2, #0
 801157a:	4640      	mov	r0, r8
 801157c:	4649      	mov	r1, r9
 801157e:	4614      	mov	r4, r2
 8011580:	461d      	mov	r5, r3
 8011582:	f7ef f809 	bl	8000598 <__aeabi_dmul>
 8011586:	4602      	mov	r2, r0
 8011588:	460b      	mov	r3, r1
 801158a:	4630      	mov	r0, r6
 801158c:	4639      	mov	r1, r7
 801158e:	f7ee fe4b 	bl	8000228 <__aeabi_dsub>
 8011592:	ec53 2b18 	vmov	r2, r3, d8
 8011596:	4606      	mov	r6, r0
 8011598:	460f      	mov	r7, r1
 801159a:	4620      	mov	r0, r4
 801159c:	4629      	mov	r1, r5
 801159e:	f7ee fe43 	bl	8000228 <__aeabi_dsub>
 80115a2:	4602      	mov	r2, r0
 80115a4:	460b      	mov	r3, r1
 80115a6:	4650      	mov	r0, sl
 80115a8:	4659      	mov	r1, fp
 80115aa:	f7ee fe3d 	bl	8000228 <__aeabi_dsub>
 80115ae:	4642      	mov	r2, r8
 80115b0:	464b      	mov	r3, r9
 80115b2:	f7ee fff1 	bl	8000598 <__aeabi_dmul>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4630      	mov	r0, r6
 80115bc:	4639      	mov	r1, r7
 80115be:	f7ee fe33 	bl	8000228 <__aeabi_dsub>
 80115c2:	ec53 2b19 	vmov	r2, r3, d9
 80115c6:	f7ee ffe7 	bl	8000598 <__aeabi_dmul>
 80115ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115ce:	ec41 0b18 	vmov	d8, r0, r1
 80115d2:	4610      	mov	r0, r2
 80115d4:	4619      	mov	r1, r3
 80115d6:	f7ee ffdf 	bl	8000598 <__aeabi_dmul>
 80115da:	a37d      	add	r3, pc, #500	; (adr r3, 80117d0 <__ieee754_pow+0x6f0>)
 80115dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e0:	4604      	mov	r4, r0
 80115e2:	460d      	mov	r5, r1
 80115e4:	f7ee ffd8 	bl	8000598 <__aeabi_dmul>
 80115e8:	a37b      	add	r3, pc, #492	; (adr r3, 80117d8 <__ieee754_pow+0x6f8>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	f7ee fe1d 	bl	800022c <__adddf3>
 80115f2:	4622      	mov	r2, r4
 80115f4:	462b      	mov	r3, r5
 80115f6:	f7ee ffcf 	bl	8000598 <__aeabi_dmul>
 80115fa:	a379      	add	r3, pc, #484	; (adr r3, 80117e0 <__ieee754_pow+0x700>)
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	f7ee fe14 	bl	800022c <__adddf3>
 8011604:	4622      	mov	r2, r4
 8011606:	462b      	mov	r3, r5
 8011608:	f7ee ffc6 	bl	8000598 <__aeabi_dmul>
 801160c:	a376      	add	r3, pc, #472	; (adr r3, 80117e8 <__ieee754_pow+0x708>)
 801160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011612:	f7ee fe0b 	bl	800022c <__adddf3>
 8011616:	4622      	mov	r2, r4
 8011618:	462b      	mov	r3, r5
 801161a:	f7ee ffbd 	bl	8000598 <__aeabi_dmul>
 801161e:	a374      	add	r3, pc, #464	; (adr r3, 80117f0 <__ieee754_pow+0x710>)
 8011620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011624:	f7ee fe02 	bl	800022c <__adddf3>
 8011628:	4622      	mov	r2, r4
 801162a:	462b      	mov	r3, r5
 801162c:	f7ee ffb4 	bl	8000598 <__aeabi_dmul>
 8011630:	a371      	add	r3, pc, #452	; (adr r3, 80117f8 <__ieee754_pow+0x718>)
 8011632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011636:	f7ee fdf9 	bl	800022c <__adddf3>
 801163a:	4622      	mov	r2, r4
 801163c:	4606      	mov	r6, r0
 801163e:	460f      	mov	r7, r1
 8011640:	462b      	mov	r3, r5
 8011642:	4620      	mov	r0, r4
 8011644:	4629      	mov	r1, r5
 8011646:	f7ee ffa7 	bl	8000598 <__aeabi_dmul>
 801164a:	4602      	mov	r2, r0
 801164c:	460b      	mov	r3, r1
 801164e:	4630      	mov	r0, r6
 8011650:	4639      	mov	r1, r7
 8011652:	f7ee ffa1 	bl	8000598 <__aeabi_dmul>
 8011656:	4642      	mov	r2, r8
 8011658:	4604      	mov	r4, r0
 801165a:	460d      	mov	r5, r1
 801165c:	464b      	mov	r3, r9
 801165e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011662:	f7ee fde3 	bl	800022c <__adddf3>
 8011666:	ec53 2b18 	vmov	r2, r3, d8
 801166a:	f7ee ff95 	bl	8000598 <__aeabi_dmul>
 801166e:	4622      	mov	r2, r4
 8011670:	462b      	mov	r3, r5
 8011672:	f7ee fddb 	bl	800022c <__adddf3>
 8011676:	4642      	mov	r2, r8
 8011678:	4682      	mov	sl, r0
 801167a:	468b      	mov	fp, r1
 801167c:	464b      	mov	r3, r9
 801167e:	4640      	mov	r0, r8
 8011680:	4649      	mov	r1, r9
 8011682:	f7ee ff89 	bl	8000598 <__aeabi_dmul>
 8011686:	4b6c      	ldr	r3, [pc, #432]	; (8011838 <__ieee754_pow+0x758>)
 8011688:	2200      	movs	r2, #0
 801168a:	4606      	mov	r6, r0
 801168c:	460f      	mov	r7, r1
 801168e:	f7ee fdcd 	bl	800022c <__adddf3>
 8011692:	4652      	mov	r2, sl
 8011694:	465b      	mov	r3, fp
 8011696:	f7ee fdc9 	bl	800022c <__adddf3>
 801169a:	9c04      	ldr	r4, [sp, #16]
 801169c:	460d      	mov	r5, r1
 801169e:	4622      	mov	r2, r4
 80116a0:	460b      	mov	r3, r1
 80116a2:	4640      	mov	r0, r8
 80116a4:	4649      	mov	r1, r9
 80116a6:	f7ee ff77 	bl	8000598 <__aeabi_dmul>
 80116aa:	4b63      	ldr	r3, [pc, #396]	; (8011838 <__ieee754_pow+0x758>)
 80116ac:	4680      	mov	r8, r0
 80116ae:	4689      	mov	r9, r1
 80116b0:	2200      	movs	r2, #0
 80116b2:	4620      	mov	r0, r4
 80116b4:	4629      	mov	r1, r5
 80116b6:	f7ee fdb7 	bl	8000228 <__aeabi_dsub>
 80116ba:	4632      	mov	r2, r6
 80116bc:	463b      	mov	r3, r7
 80116be:	f7ee fdb3 	bl	8000228 <__aeabi_dsub>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	4650      	mov	r0, sl
 80116c8:	4659      	mov	r1, fp
 80116ca:	f7ee fdad 	bl	8000228 <__aeabi_dsub>
 80116ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116d2:	f7ee ff61 	bl	8000598 <__aeabi_dmul>
 80116d6:	4622      	mov	r2, r4
 80116d8:	4606      	mov	r6, r0
 80116da:	460f      	mov	r7, r1
 80116dc:	462b      	mov	r3, r5
 80116de:	ec51 0b18 	vmov	r0, r1, d8
 80116e2:	f7ee ff59 	bl	8000598 <__aeabi_dmul>
 80116e6:	4602      	mov	r2, r0
 80116e8:	460b      	mov	r3, r1
 80116ea:	4630      	mov	r0, r6
 80116ec:	4639      	mov	r1, r7
 80116ee:	f7ee fd9d 	bl	800022c <__adddf3>
 80116f2:	4606      	mov	r6, r0
 80116f4:	460f      	mov	r7, r1
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	4640      	mov	r0, r8
 80116fc:	4649      	mov	r1, r9
 80116fe:	f7ee fd95 	bl	800022c <__adddf3>
 8011702:	9c04      	ldr	r4, [sp, #16]
 8011704:	a33e      	add	r3, pc, #248	; (adr r3, 8011800 <__ieee754_pow+0x720>)
 8011706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170a:	4620      	mov	r0, r4
 801170c:	460d      	mov	r5, r1
 801170e:	f7ee ff43 	bl	8000598 <__aeabi_dmul>
 8011712:	4642      	mov	r2, r8
 8011714:	ec41 0b18 	vmov	d8, r0, r1
 8011718:	464b      	mov	r3, r9
 801171a:	4620      	mov	r0, r4
 801171c:	4629      	mov	r1, r5
 801171e:	f7ee fd83 	bl	8000228 <__aeabi_dsub>
 8011722:	4602      	mov	r2, r0
 8011724:	460b      	mov	r3, r1
 8011726:	4630      	mov	r0, r6
 8011728:	4639      	mov	r1, r7
 801172a:	f7ee fd7d 	bl	8000228 <__aeabi_dsub>
 801172e:	a336      	add	r3, pc, #216	; (adr r3, 8011808 <__ieee754_pow+0x728>)
 8011730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011734:	f7ee ff30 	bl	8000598 <__aeabi_dmul>
 8011738:	a335      	add	r3, pc, #212	; (adr r3, 8011810 <__ieee754_pow+0x730>)
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	4606      	mov	r6, r0
 8011740:	460f      	mov	r7, r1
 8011742:	4620      	mov	r0, r4
 8011744:	4629      	mov	r1, r5
 8011746:	f7ee ff27 	bl	8000598 <__aeabi_dmul>
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	4630      	mov	r0, r6
 8011750:	4639      	mov	r1, r7
 8011752:	f7ee fd6b 	bl	800022c <__adddf3>
 8011756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011758:	4b38      	ldr	r3, [pc, #224]	; (801183c <__ieee754_pow+0x75c>)
 801175a:	4413      	add	r3, r2
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	f7ee fd64 	bl	800022c <__adddf3>
 8011764:	4682      	mov	sl, r0
 8011766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011768:	468b      	mov	fp, r1
 801176a:	f7ee feab 	bl	80004c4 <__aeabi_i2d>
 801176e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011770:	4b33      	ldr	r3, [pc, #204]	; (8011840 <__ieee754_pow+0x760>)
 8011772:	4413      	add	r3, r2
 8011774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011778:	4606      	mov	r6, r0
 801177a:	460f      	mov	r7, r1
 801177c:	4652      	mov	r2, sl
 801177e:	465b      	mov	r3, fp
 8011780:	ec51 0b18 	vmov	r0, r1, d8
 8011784:	f7ee fd52 	bl	800022c <__adddf3>
 8011788:	4642      	mov	r2, r8
 801178a:	464b      	mov	r3, r9
 801178c:	f7ee fd4e 	bl	800022c <__adddf3>
 8011790:	4632      	mov	r2, r6
 8011792:	463b      	mov	r3, r7
 8011794:	f7ee fd4a 	bl	800022c <__adddf3>
 8011798:	9c04      	ldr	r4, [sp, #16]
 801179a:	4632      	mov	r2, r6
 801179c:	463b      	mov	r3, r7
 801179e:	4620      	mov	r0, r4
 80117a0:	460d      	mov	r5, r1
 80117a2:	f7ee fd41 	bl	8000228 <__aeabi_dsub>
 80117a6:	4642      	mov	r2, r8
 80117a8:	464b      	mov	r3, r9
 80117aa:	f7ee fd3d 	bl	8000228 <__aeabi_dsub>
 80117ae:	ec53 2b18 	vmov	r2, r3, d8
 80117b2:	f7ee fd39 	bl	8000228 <__aeabi_dsub>
 80117b6:	4602      	mov	r2, r0
 80117b8:	460b      	mov	r3, r1
 80117ba:	4650      	mov	r0, sl
 80117bc:	4659      	mov	r1, fp
 80117be:	e606      	b.n	80113ce <__ieee754_pow+0x2ee>
 80117c0:	2401      	movs	r4, #1
 80117c2:	e6a0      	b.n	8011506 <__ieee754_pow+0x426>
 80117c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011818 <__ieee754_pow+0x738>
 80117c8:	e60d      	b.n	80113e6 <__ieee754_pow+0x306>
 80117ca:	bf00      	nop
 80117cc:	f3af 8000 	nop.w
 80117d0:	4a454eef 	.word	0x4a454eef
 80117d4:	3fca7e28 	.word	0x3fca7e28
 80117d8:	93c9db65 	.word	0x93c9db65
 80117dc:	3fcd864a 	.word	0x3fcd864a
 80117e0:	a91d4101 	.word	0xa91d4101
 80117e4:	3fd17460 	.word	0x3fd17460
 80117e8:	518f264d 	.word	0x518f264d
 80117ec:	3fd55555 	.word	0x3fd55555
 80117f0:	db6fabff 	.word	0xdb6fabff
 80117f4:	3fdb6db6 	.word	0x3fdb6db6
 80117f8:	33333303 	.word	0x33333303
 80117fc:	3fe33333 	.word	0x3fe33333
 8011800:	e0000000 	.word	0xe0000000
 8011804:	3feec709 	.word	0x3feec709
 8011808:	dc3a03fd 	.word	0xdc3a03fd
 801180c:	3feec709 	.word	0x3feec709
 8011810:	145b01f5 	.word	0x145b01f5
 8011814:	be3e2fe0 	.word	0xbe3e2fe0
 8011818:	00000000 	.word	0x00000000
 801181c:	3ff00000 	.word	0x3ff00000
 8011820:	7ff00000 	.word	0x7ff00000
 8011824:	43400000 	.word	0x43400000
 8011828:	0003988e 	.word	0x0003988e
 801182c:	000bb679 	.word	0x000bb679
 8011830:	08012428 	.word	0x08012428
 8011834:	3ff00000 	.word	0x3ff00000
 8011838:	40080000 	.word	0x40080000
 801183c:	08012448 	.word	0x08012448
 8011840:	08012438 	.word	0x08012438
 8011844:	a3b5      	add	r3, pc, #724	; (adr r3, 8011b1c <__ieee754_pow+0xa3c>)
 8011846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184a:	4640      	mov	r0, r8
 801184c:	4649      	mov	r1, r9
 801184e:	f7ee fced 	bl	800022c <__adddf3>
 8011852:	4622      	mov	r2, r4
 8011854:	ec41 0b1a 	vmov	d10, r0, r1
 8011858:	462b      	mov	r3, r5
 801185a:	4630      	mov	r0, r6
 801185c:	4639      	mov	r1, r7
 801185e:	f7ee fce3 	bl	8000228 <__aeabi_dsub>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	ec51 0b1a 	vmov	r0, r1, d10
 801186a:	f7ef f925 	bl	8000ab8 <__aeabi_dcmpgt>
 801186e:	2800      	cmp	r0, #0
 8011870:	f47f adf8 	bne.w	8011464 <__ieee754_pow+0x384>
 8011874:	4aa4      	ldr	r2, [pc, #656]	; (8011b08 <__ieee754_pow+0xa28>)
 8011876:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801187a:	4293      	cmp	r3, r2
 801187c:	f340 810b 	ble.w	8011a96 <__ieee754_pow+0x9b6>
 8011880:	151b      	asrs	r3, r3, #20
 8011882:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011886:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801188a:	fa4a f303 	asr.w	r3, sl, r3
 801188e:	445b      	add	r3, fp
 8011890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011894:	4e9d      	ldr	r6, [pc, #628]	; (8011b0c <__ieee754_pow+0xa2c>)
 8011896:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801189a:	4116      	asrs	r6, r2
 801189c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80118a0:	2000      	movs	r0, #0
 80118a2:	ea23 0106 	bic.w	r1, r3, r6
 80118a6:	f1c2 0214 	rsb	r2, r2, #20
 80118aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80118ae:	fa4a fa02 	asr.w	sl, sl, r2
 80118b2:	f1bb 0f00 	cmp.w	fp, #0
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	4620      	mov	r0, r4
 80118bc:	4629      	mov	r1, r5
 80118be:	bfb8      	it	lt
 80118c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80118c4:	f7ee fcb0 	bl	8000228 <__aeabi_dsub>
 80118c8:	ec41 0b19 	vmov	d9, r0, r1
 80118cc:	4642      	mov	r2, r8
 80118ce:	464b      	mov	r3, r9
 80118d0:	ec51 0b19 	vmov	r0, r1, d9
 80118d4:	f7ee fcaa 	bl	800022c <__adddf3>
 80118d8:	2400      	movs	r4, #0
 80118da:	a379      	add	r3, pc, #484	; (adr r3, 8011ac0 <__ieee754_pow+0x9e0>)
 80118dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e0:	4620      	mov	r0, r4
 80118e2:	460d      	mov	r5, r1
 80118e4:	f7ee fe58 	bl	8000598 <__aeabi_dmul>
 80118e8:	ec53 2b19 	vmov	r2, r3, d9
 80118ec:	4606      	mov	r6, r0
 80118ee:	460f      	mov	r7, r1
 80118f0:	4620      	mov	r0, r4
 80118f2:	4629      	mov	r1, r5
 80118f4:	f7ee fc98 	bl	8000228 <__aeabi_dsub>
 80118f8:	4602      	mov	r2, r0
 80118fa:	460b      	mov	r3, r1
 80118fc:	4640      	mov	r0, r8
 80118fe:	4649      	mov	r1, r9
 8011900:	f7ee fc92 	bl	8000228 <__aeabi_dsub>
 8011904:	a370      	add	r3, pc, #448	; (adr r3, 8011ac8 <__ieee754_pow+0x9e8>)
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	f7ee fe45 	bl	8000598 <__aeabi_dmul>
 801190e:	a370      	add	r3, pc, #448	; (adr r3, 8011ad0 <__ieee754_pow+0x9f0>)
 8011910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011914:	4680      	mov	r8, r0
 8011916:	4689      	mov	r9, r1
 8011918:	4620      	mov	r0, r4
 801191a:	4629      	mov	r1, r5
 801191c:	f7ee fe3c 	bl	8000598 <__aeabi_dmul>
 8011920:	4602      	mov	r2, r0
 8011922:	460b      	mov	r3, r1
 8011924:	4640      	mov	r0, r8
 8011926:	4649      	mov	r1, r9
 8011928:	f7ee fc80 	bl	800022c <__adddf3>
 801192c:	4604      	mov	r4, r0
 801192e:	460d      	mov	r5, r1
 8011930:	4602      	mov	r2, r0
 8011932:	460b      	mov	r3, r1
 8011934:	4630      	mov	r0, r6
 8011936:	4639      	mov	r1, r7
 8011938:	f7ee fc78 	bl	800022c <__adddf3>
 801193c:	4632      	mov	r2, r6
 801193e:	463b      	mov	r3, r7
 8011940:	4680      	mov	r8, r0
 8011942:	4689      	mov	r9, r1
 8011944:	f7ee fc70 	bl	8000228 <__aeabi_dsub>
 8011948:	4602      	mov	r2, r0
 801194a:	460b      	mov	r3, r1
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fc6a 	bl	8000228 <__aeabi_dsub>
 8011954:	4642      	mov	r2, r8
 8011956:	4606      	mov	r6, r0
 8011958:	460f      	mov	r7, r1
 801195a:	464b      	mov	r3, r9
 801195c:	4640      	mov	r0, r8
 801195e:	4649      	mov	r1, r9
 8011960:	f7ee fe1a 	bl	8000598 <__aeabi_dmul>
 8011964:	a35c      	add	r3, pc, #368	; (adr r3, 8011ad8 <__ieee754_pow+0x9f8>)
 8011966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196a:	4604      	mov	r4, r0
 801196c:	460d      	mov	r5, r1
 801196e:	f7ee fe13 	bl	8000598 <__aeabi_dmul>
 8011972:	a35b      	add	r3, pc, #364	; (adr r3, 8011ae0 <__ieee754_pow+0xa00>)
 8011974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011978:	f7ee fc56 	bl	8000228 <__aeabi_dsub>
 801197c:	4622      	mov	r2, r4
 801197e:	462b      	mov	r3, r5
 8011980:	f7ee fe0a 	bl	8000598 <__aeabi_dmul>
 8011984:	a358      	add	r3, pc, #352	; (adr r3, 8011ae8 <__ieee754_pow+0xa08>)
 8011986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198a:	f7ee fc4f 	bl	800022c <__adddf3>
 801198e:	4622      	mov	r2, r4
 8011990:	462b      	mov	r3, r5
 8011992:	f7ee fe01 	bl	8000598 <__aeabi_dmul>
 8011996:	a356      	add	r3, pc, #344	; (adr r3, 8011af0 <__ieee754_pow+0xa10>)
 8011998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199c:	f7ee fc44 	bl	8000228 <__aeabi_dsub>
 80119a0:	4622      	mov	r2, r4
 80119a2:	462b      	mov	r3, r5
 80119a4:	f7ee fdf8 	bl	8000598 <__aeabi_dmul>
 80119a8:	a353      	add	r3, pc, #332	; (adr r3, 8011af8 <__ieee754_pow+0xa18>)
 80119aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ae:	f7ee fc3d 	bl	800022c <__adddf3>
 80119b2:	4622      	mov	r2, r4
 80119b4:	462b      	mov	r3, r5
 80119b6:	f7ee fdef 	bl	8000598 <__aeabi_dmul>
 80119ba:	4602      	mov	r2, r0
 80119bc:	460b      	mov	r3, r1
 80119be:	4640      	mov	r0, r8
 80119c0:	4649      	mov	r1, r9
 80119c2:	f7ee fc31 	bl	8000228 <__aeabi_dsub>
 80119c6:	4604      	mov	r4, r0
 80119c8:	460d      	mov	r5, r1
 80119ca:	4602      	mov	r2, r0
 80119cc:	460b      	mov	r3, r1
 80119ce:	4640      	mov	r0, r8
 80119d0:	4649      	mov	r1, r9
 80119d2:	f7ee fde1 	bl	8000598 <__aeabi_dmul>
 80119d6:	2200      	movs	r2, #0
 80119d8:	ec41 0b19 	vmov	d9, r0, r1
 80119dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80119e0:	4620      	mov	r0, r4
 80119e2:	4629      	mov	r1, r5
 80119e4:	f7ee fc20 	bl	8000228 <__aeabi_dsub>
 80119e8:	4602      	mov	r2, r0
 80119ea:	460b      	mov	r3, r1
 80119ec:	ec51 0b19 	vmov	r0, r1, d9
 80119f0:	f7ee fefc 	bl	80007ec <__aeabi_ddiv>
 80119f4:	4632      	mov	r2, r6
 80119f6:	4604      	mov	r4, r0
 80119f8:	460d      	mov	r5, r1
 80119fa:	463b      	mov	r3, r7
 80119fc:	4640      	mov	r0, r8
 80119fe:	4649      	mov	r1, r9
 8011a00:	f7ee fdca 	bl	8000598 <__aeabi_dmul>
 8011a04:	4632      	mov	r2, r6
 8011a06:	463b      	mov	r3, r7
 8011a08:	f7ee fc10 	bl	800022c <__adddf3>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	460b      	mov	r3, r1
 8011a10:	4620      	mov	r0, r4
 8011a12:	4629      	mov	r1, r5
 8011a14:	f7ee fc08 	bl	8000228 <__aeabi_dsub>
 8011a18:	4642      	mov	r2, r8
 8011a1a:	464b      	mov	r3, r9
 8011a1c:	f7ee fc04 	bl	8000228 <__aeabi_dsub>
 8011a20:	460b      	mov	r3, r1
 8011a22:	4602      	mov	r2, r0
 8011a24:	493a      	ldr	r1, [pc, #232]	; (8011b10 <__ieee754_pow+0xa30>)
 8011a26:	2000      	movs	r0, #0
 8011a28:	f7ee fbfe 	bl	8000228 <__aeabi_dsub>
 8011a2c:	e9cd 0100 	strd	r0, r1, [sp]
 8011a30:	9b01      	ldr	r3, [sp, #4]
 8011a32:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a3a:	da2f      	bge.n	8011a9c <__ieee754_pow+0x9bc>
 8011a3c:	4650      	mov	r0, sl
 8011a3e:	ed9d 0b00 	vldr	d0, [sp]
 8011a42:	f000 f9cd 	bl	8011de0 <scalbn>
 8011a46:	ec51 0b10 	vmov	r0, r1, d0
 8011a4a:	ec53 2b18 	vmov	r2, r3, d8
 8011a4e:	f7ff bbe0 	b.w	8011212 <__ieee754_pow+0x132>
 8011a52:	4b30      	ldr	r3, [pc, #192]	; (8011b14 <__ieee754_pow+0xa34>)
 8011a54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011a58:	429e      	cmp	r6, r3
 8011a5a:	f77f af0b 	ble.w	8011874 <__ieee754_pow+0x794>
 8011a5e:	4b2e      	ldr	r3, [pc, #184]	; (8011b18 <__ieee754_pow+0xa38>)
 8011a60:	440b      	add	r3, r1
 8011a62:	4303      	orrs	r3, r0
 8011a64:	d00b      	beq.n	8011a7e <__ieee754_pow+0x99e>
 8011a66:	a326      	add	r3, pc, #152	; (adr r3, 8011b00 <__ieee754_pow+0xa20>)
 8011a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6c:	ec51 0b18 	vmov	r0, r1, d8
 8011a70:	f7ee fd92 	bl	8000598 <__aeabi_dmul>
 8011a74:	a322      	add	r3, pc, #136	; (adr r3, 8011b00 <__ieee754_pow+0xa20>)
 8011a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7a:	f7ff bbca 	b.w	8011212 <__ieee754_pow+0x132>
 8011a7e:	4622      	mov	r2, r4
 8011a80:	462b      	mov	r3, r5
 8011a82:	f7ee fbd1 	bl	8000228 <__aeabi_dsub>
 8011a86:	4642      	mov	r2, r8
 8011a88:	464b      	mov	r3, r9
 8011a8a:	f7ef f80b 	bl	8000aa4 <__aeabi_dcmpge>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f43f aef0 	beq.w	8011874 <__ieee754_pow+0x794>
 8011a94:	e7e7      	b.n	8011a66 <__ieee754_pow+0x986>
 8011a96:	f04f 0a00 	mov.w	sl, #0
 8011a9a:	e717      	b.n	80118cc <__ieee754_pow+0x7ec>
 8011a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	e7d2      	b.n	8011a4a <__ieee754_pow+0x96a>
 8011aa4:	491a      	ldr	r1, [pc, #104]	; (8011b10 <__ieee754_pow+0xa30>)
 8011aa6:	2000      	movs	r0, #0
 8011aa8:	f7ff bb9e 	b.w	80111e8 <__ieee754_pow+0x108>
 8011aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ab0:	f7ff bb9a 	b.w	80111e8 <__ieee754_pow+0x108>
 8011ab4:	9000      	str	r0, [sp, #0]
 8011ab6:	f7ff bb76 	b.w	80111a6 <__ieee754_pow+0xc6>
 8011aba:	2100      	movs	r1, #0
 8011abc:	f7ff bb60 	b.w	8011180 <__ieee754_pow+0xa0>
 8011ac0:	00000000 	.word	0x00000000
 8011ac4:	3fe62e43 	.word	0x3fe62e43
 8011ac8:	fefa39ef 	.word	0xfefa39ef
 8011acc:	3fe62e42 	.word	0x3fe62e42
 8011ad0:	0ca86c39 	.word	0x0ca86c39
 8011ad4:	be205c61 	.word	0xbe205c61
 8011ad8:	72bea4d0 	.word	0x72bea4d0
 8011adc:	3e663769 	.word	0x3e663769
 8011ae0:	c5d26bf1 	.word	0xc5d26bf1
 8011ae4:	3ebbbd41 	.word	0x3ebbbd41
 8011ae8:	af25de2c 	.word	0xaf25de2c
 8011aec:	3f11566a 	.word	0x3f11566a
 8011af0:	16bebd93 	.word	0x16bebd93
 8011af4:	3f66c16c 	.word	0x3f66c16c
 8011af8:	5555553e 	.word	0x5555553e
 8011afc:	3fc55555 	.word	0x3fc55555
 8011b00:	c2f8f359 	.word	0xc2f8f359
 8011b04:	01a56e1f 	.word	0x01a56e1f
 8011b08:	3fe00000 	.word	0x3fe00000
 8011b0c:	000fffff 	.word	0x000fffff
 8011b10:	3ff00000 	.word	0x3ff00000
 8011b14:	4090cbff 	.word	0x4090cbff
 8011b18:	3f6f3400 	.word	0x3f6f3400
 8011b1c:	652b82fe 	.word	0x652b82fe
 8011b20:	3c971547 	.word	0x3c971547

08011b24 <__ieee754_sqrt>:
 8011b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b28:	ec55 4b10 	vmov	r4, r5, d0
 8011b2c:	4e56      	ldr	r6, [pc, #344]	; (8011c88 <__ieee754_sqrt+0x164>)
 8011b2e:	43ae      	bics	r6, r5
 8011b30:	ee10 0a10 	vmov	r0, s0
 8011b34:	ee10 3a10 	vmov	r3, s0
 8011b38:	4629      	mov	r1, r5
 8011b3a:	462a      	mov	r2, r5
 8011b3c:	d110      	bne.n	8011b60 <__ieee754_sqrt+0x3c>
 8011b3e:	ee10 2a10 	vmov	r2, s0
 8011b42:	462b      	mov	r3, r5
 8011b44:	f7ee fd28 	bl	8000598 <__aeabi_dmul>
 8011b48:	4602      	mov	r2, r0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4629      	mov	r1, r5
 8011b50:	f7ee fb6c 	bl	800022c <__adddf3>
 8011b54:	4604      	mov	r4, r0
 8011b56:	460d      	mov	r5, r1
 8011b58:	ec45 4b10 	vmov	d0, r4, r5
 8011b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b60:	2d00      	cmp	r5, #0
 8011b62:	dc10      	bgt.n	8011b86 <__ieee754_sqrt+0x62>
 8011b64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011b68:	4330      	orrs	r0, r6
 8011b6a:	d0f5      	beq.n	8011b58 <__ieee754_sqrt+0x34>
 8011b6c:	b15d      	cbz	r5, 8011b86 <__ieee754_sqrt+0x62>
 8011b6e:	ee10 2a10 	vmov	r2, s0
 8011b72:	462b      	mov	r3, r5
 8011b74:	ee10 0a10 	vmov	r0, s0
 8011b78:	f7ee fb56 	bl	8000228 <__aeabi_dsub>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	460b      	mov	r3, r1
 8011b80:	f7ee fe34 	bl	80007ec <__aeabi_ddiv>
 8011b84:	e7e6      	b.n	8011b54 <__ieee754_sqrt+0x30>
 8011b86:	1509      	asrs	r1, r1, #20
 8011b88:	d076      	beq.n	8011c78 <__ieee754_sqrt+0x154>
 8011b8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011b8e:	07ce      	lsls	r6, r1, #31
 8011b90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011b94:	bf5e      	ittt	pl
 8011b96:	0fda      	lsrpl	r2, r3, #31
 8011b98:	005b      	lslpl	r3, r3, #1
 8011b9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011b9e:	0fda      	lsrs	r2, r3, #31
 8011ba0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011ba4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011ba8:	2000      	movs	r0, #0
 8011baa:	106d      	asrs	r5, r5, #1
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	f04f 0e16 	mov.w	lr, #22
 8011bb2:	4684      	mov	ip, r0
 8011bb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011bb8:	eb0c 0401 	add.w	r4, ip, r1
 8011bbc:	4294      	cmp	r4, r2
 8011bbe:	bfde      	ittt	le
 8011bc0:	1b12      	suble	r2, r2, r4
 8011bc2:	eb04 0c01 	addle.w	ip, r4, r1
 8011bc6:	1840      	addle	r0, r0, r1
 8011bc8:	0052      	lsls	r2, r2, #1
 8011bca:	f1be 0e01 	subs.w	lr, lr, #1
 8011bce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011bd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011bd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011bda:	d1ed      	bne.n	8011bb8 <__ieee754_sqrt+0x94>
 8011bdc:	4671      	mov	r1, lr
 8011bde:	2720      	movs	r7, #32
 8011be0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011be4:	4562      	cmp	r2, ip
 8011be6:	eb04 060e 	add.w	r6, r4, lr
 8011bea:	dc02      	bgt.n	8011bf2 <__ieee754_sqrt+0xce>
 8011bec:	d113      	bne.n	8011c16 <__ieee754_sqrt+0xf2>
 8011bee:	429e      	cmp	r6, r3
 8011bf0:	d811      	bhi.n	8011c16 <__ieee754_sqrt+0xf2>
 8011bf2:	2e00      	cmp	r6, #0
 8011bf4:	eb06 0e04 	add.w	lr, r6, r4
 8011bf8:	da43      	bge.n	8011c82 <__ieee754_sqrt+0x15e>
 8011bfa:	f1be 0f00 	cmp.w	lr, #0
 8011bfe:	db40      	blt.n	8011c82 <__ieee754_sqrt+0x15e>
 8011c00:	f10c 0801 	add.w	r8, ip, #1
 8011c04:	eba2 020c 	sub.w	r2, r2, ip
 8011c08:	429e      	cmp	r6, r3
 8011c0a:	bf88      	it	hi
 8011c0c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011c10:	1b9b      	subs	r3, r3, r6
 8011c12:	4421      	add	r1, r4
 8011c14:	46c4      	mov	ip, r8
 8011c16:	0052      	lsls	r2, r2, #1
 8011c18:	3f01      	subs	r7, #1
 8011c1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011c1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011c22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011c26:	d1dd      	bne.n	8011be4 <__ieee754_sqrt+0xc0>
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	d006      	beq.n	8011c3a <__ieee754_sqrt+0x116>
 8011c2c:	1c4c      	adds	r4, r1, #1
 8011c2e:	bf13      	iteet	ne
 8011c30:	3101      	addne	r1, #1
 8011c32:	3001      	addeq	r0, #1
 8011c34:	4639      	moveq	r1, r7
 8011c36:	f021 0101 	bicne.w	r1, r1, #1
 8011c3a:	1043      	asrs	r3, r0, #1
 8011c3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011c40:	0849      	lsrs	r1, r1, #1
 8011c42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011c46:	07c2      	lsls	r2, r0, #31
 8011c48:	bf48      	it	mi
 8011c4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8011c4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8011c52:	460c      	mov	r4, r1
 8011c54:	463d      	mov	r5, r7
 8011c56:	e77f      	b.n	8011b58 <__ieee754_sqrt+0x34>
 8011c58:	0ada      	lsrs	r2, r3, #11
 8011c5a:	3815      	subs	r0, #21
 8011c5c:	055b      	lsls	r3, r3, #21
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	d0fa      	beq.n	8011c58 <__ieee754_sqrt+0x134>
 8011c62:	02d7      	lsls	r7, r2, #11
 8011c64:	d50a      	bpl.n	8011c7c <__ieee754_sqrt+0x158>
 8011c66:	f1c1 0420 	rsb	r4, r1, #32
 8011c6a:	fa23 f404 	lsr.w	r4, r3, r4
 8011c6e:	1e4d      	subs	r5, r1, #1
 8011c70:	408b      	lsls	r3, r1
 8011c72:	4322      	orrs	r2, r4
 8011c74:	1b41      	subs	r1, r0, r5
 8011c76:	e788      	b.n	8011b8a <__ieee754_sqrt+0x66>
 8011c78:	4608      	mov	r0, r1
 8011c7a:	e7f0      	b.n	8011c5e <__ieee754_sqrt+0x13a>
 8011c7c:	0052      	lsls	r2, r2, #1
 8011c7e:	3101      	adds	r1, #1
 8011c80:	e7ef      	b.n	8011c62 <__ieee754_sqrt+0x13e>
 8011c82:	46e0      	mov	r8, ip
 8011c84:	e7be      	b.n	8011c04 <__ieee754_sqrt+0xe0>
 8011c86:	bf00      	nop
 8011c88:	7ff00000 	.word	0x7ff00000

08011c8c <fabs>:
 8011c8c:	ec51 0b10 	vmov	r0, r1, d0
 8011c90:	ee10 2a10 	vmov	r2, s0
 8011c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c98:	ec43 2b10 	vmov	d0, r2, r3
 8011c9c:	4770      	bx	lr

08011c9e <finite>:
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	ed8d 0b00 	vstr	d0, [sp]
 8011ca4:	9801      	ldr	r0, [sp, #4]
 8011ca6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011caa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011cae:	0fc0      	lsrs	r0, r0, #31
 8011cb0:	b002      	add	sp, #8
 8011cb2:	4770      	bx	lr
 8011cb4:	0000      	movs	r0, r0
	...

08011cb8 <nan>:
 8011cb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011cc0 <nan+0x8>
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	00000000 	.word	0x00000000
 8011cc4:	7ff80000 	.word	0x7ff80000

08011cc8 <rint>:
 8011cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cca:	ec51 0b10 	vmov	r0, r1, d0
 8011cce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011cd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011cd6:	2e13      	cmp	r6, #19
 8011cd8:	ee10 4a10 	vmov	r4, s0
 8011cdc:	460b      	mov	r3, r1
 8011cde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011ce2:	dc58      	bgt.n	8011d96 <rint+0xce>
 8011ce4:	2e00      	cmp	r6, #0
 8011ce6:	da2b      	bge.n	8011d40 <rint+0x78>
 8011ce8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011cec:	4302      	orrs	r2, r0
 8011cee:	d023      	beq.n	8011d38 <rint+0x70>
 8011cf0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011cf4:	4302      	orrs	r2, r0
 8011cf6:	4254      	negs	r4, r2
 8011cf8:	4314      	orrs	r4, r2
 8011cfa:	0c4b      	lsrs	r3, r1, #17
 8011cfc:	0b24      	lsrs	r4, r4, #12
 8011cfe:	045b      	lsls	r3, r3, #17
 8011d00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011d04:	ea44 0103 	orr.w	r1, r4, r3
 8011d08:	4b32      	ldr	r3, [pc, #200]	; (8011dd4 <rint+0x10c>)
 8011d0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011d0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011d12:	4602      	mov	r2, r0
 8011d14:	460b      	mov	r3, r1
 8011d16:	4630      	mov	r0, r6
 8011d18:	4639      	mov	r1, r7
 8011d1a:	f7ee fa87 	bl	800022c <__adddf3>
 8011d1e:	e9cd 0100 	strd	r0, r1, [sp]
 8011d22:	463b      	mov	r3, r7
 8011d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d28:	4632      	mov	r2, r6
 8011d2a:	f7ee fa7d 	bl	8000228 <__aeabi_dsub>
 8011d2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011d36:	4639      	mov	r1, r7
 8011d38:	ec41 0b10 	vmov	d0, r0, r1
 8011d3c:	b003      	add	sp, #12
 8011d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d40:	4a25      	ldr	r2, [pc, #148]	; (8011dd8 <rint+0x110>)
 8011d42:	4132      	asrs	r2, r6
 8011d44:	ea01 0702 	and.w	r7, r1, r2
 8011d48:	4307      	orrs	r7, r0
 8011d4a:	d0f5      	beq.n	8011d38 <rint+0x70>
 8011d4c:	0851      	lsrs	r1, r2, #1
 8011d4e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8011d52:	4314      	orrs	r4, r2
 8011d54:	d00c      	beq.n	8011d70 <rint+0xa8>
 8011d56:	ea23 0201 	bic.w	r2, r3, r1
 8011d5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011d5e:	2e13      	cmp	r6, #19
 8011d60:	fa43 f606 	asr.w	r6, r3, r6
 8011d64:	bf0c      	ite	eq
 8011d66:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011d6a:	2400      	movne	r4, #0
 8011d6c:	ea42 0306 	orr.w	r3, r2, r6
 8011d70:	4918      	ldr	r1, [pc, #96]	; (8011dd4 <rint+0x10c>)
 8011d72:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011d76:	4622      	mov	r2, r4
 8011d78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	4629      	mov	r1, r5
 8011d80:	f7ee fa54 	bl	800022c <__adddf3>
 8011d84:	e9cd 0100 	strd	r0, r1, [sp]
 8011d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d8c:	4622      	mov	r2, r4
 8011d8e:	462b      	mov	r3, r5
 8011d90:	f7ee fa4a 	bl	8000228 <__aeabi_dsub>
 8011d94:	e7d0      	b.n	8011d38 <rint+0x70>
 8011d96:	2e33      	cmp	r6, #51	; 0x33
 8011d98:	dd07      	ble.n	8011daa <rint+0xe2>
 8011d9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011d9e:	d1cb      	bne.n	8011d38 <rint+0x70>
 8011da0:	ee10 2a10 	vmov	r2, s0
 8011da4:	f7ee fa42 	bl	800022c <__adddf3>
 8011da8:	e7c6      	b.n	8011d38 <rint+0x70>
 8011daa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011dae:	f04f 36ff 	mov.w	r6, #4294967295
 8011db2:	40d6      	lsrs	r6, r2
 8011db4:	4230      	tst	r0, r6
 8011db6:	d0bf      	beq.n	8011d38 <rint+0x70>
 8011db8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011dbc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011dc0:	bf1f      	itttt	ne
 8011dc2:	ea24 0101 	bicne.w	r1, r4, r1
 8011dc6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011dca:	fa44 f202 	asrne.w	r2, r4, r2
 8011dce:	ea41 0402 	orrne.w	r4, r1, r2
 8011dd2:	e7cd      	b.n	8011d70 <rint+0xa8>
 8011dd4:	08012458 	.word	0x08012458
 8011dd8:	000fffff 	.word	0x000fffff
 8011ddc:	00000000 	.word	0x00000000

08011de0 <scalbn>:
 8011de0:	b570      	push	{r4, r5, r6, lr}
 8011de2:	ec55 4b10 	vmov	r4, r5, d0
 8011de6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011dea:	4606      	mov	r6, r0
 8011dec:	462b      	mov	r3, r5
 8011dee:	b99a      	cbnz	r2, 8011e18 <scalbn+0x38>
 8011df0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011df4:	4323      	orrs	r3, r4
 8011df6:	d036      	beq.n	8011e66 <scalbn+0x86>
 8011df8:	4b39      	ldr	r3, [pc, #228]	; (8011ee0 <scalbn+0x100>)
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	ee10 0a10 	vmov	r0, s0
 8011e00:	2200      	movs	r2, #0
 8011e02:	f7ee fbc9 	bl	8000598 <__aeabi_dmul>
 8011e06:	4b37      	ldr	r3, [pc, #220]	; (8011ee4 <scalbn+0x104>)
 8011e08:	429e      	cmp	r6, r3
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	da10      	bge.n	8011e32 <scalbn+0x52>
 8011e10:	a32b      	add	r3, pc, #172	; (adr r3, 8011ec0 <scalbn+0xe0>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	e03a      	b.n	8011e8e <scalbn+0xae>
 8011e18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011e1c:	428a      	cmp	r2, r1
 8011e1e:	d10c      	bne.n	8011e3a <scalbn+0x5a>
 8011e20:	ee10 2a10 	vmov	r2, s0
 8011e24:	4620      	mov	r0, r4
 8011e26:	4629      	mov	r1, r5
 8011e28:	f7ee fa00 	bl	800022c <__adddf3>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	460d      	mov	r5, r1
 8011e30:	e019      	b.n	8011e66 <scalbn+0x86>
 8011e32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e36:	460b      	mov	r3, r1
 8011e38:	3a36      	subs	r2, #54	; 0x36
 8011e3a:	4432      	add	r2, r6
 8011e3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011e40:	428a      	cmp	r2, r1
 8011e42:	dd08      	ble.n	8011e56 <scalbn+0x76>
 8011e44:	2d00      	cmp	r5, #0
 8011e46:	a120      	add	r1, pc, #128	; (adr r1, 8011ec8 <scalbn+0xe8>)
 8011e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e4c:	da1c      	bge.n	8011e88 <scalbn+0xa8>
 8011e4e:	a120      	add	r1, pc, #128	; (adr r1, 8011ed0 <scalbn+0xf0>)
 8011e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e54:	e018      	b.n	8011e88 <scalbn+0xa8>
 8011e56:	2a00      	cmp	r2, #0
 8011e58:	dd08      	ble.n	8011e6c <scalbn+0x8c>
 8011e5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e66:	ec45 4b10 	vmov	d0, r4, r5
 8011e6a:	bd70      	pop	{r4, r5, r6, pc}
 8011e6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011e70:	da19      	bge.n	8011ea6 <scalbn+0xc6>
 8011e72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011e76:	429e      	cmp	r6, r3
 8011e78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011e7c:	dd0a      	ble.n	8011e94 <scalbn+0xb4>
 8011e7e:	a112      	add	r1, pc, #72	; (adr r1, 8011ec8 <scalbn+0xe8>)
 8011e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d1e2      	bne.n	8011e4e <scalbn+0x6e>
 8011e88:	a30f      	add	r3, pc, #60	; (adr r3, 8011ec8 <scalbn+0xe8>)
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	f7ee fb83 	bl	8000598 <__aeabi_dmul>
 8011e92:	e7cb      	b.n	8011e2c <scalbn+0x4c>
 8011e94:	a10a      	add	r1, pc, #40	; (adr r1, 8011ec0 <scalbn+0xe0>)
 8011e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d0b8      	beq.n	8011e10 <scalbn+0x30>
 8011e9e:	a10e      	add	r1, pc, #56	; (adr r1, 8011ed8 <scalbn+0xf8>)
 8011ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ea4:	e7b4      	b.n	8011e10 <scalbn+0x30>
 8011ea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011eaa:	3236      	adds	r2, #54	; 0x36
 8011eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011eb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	4b0c      	ldr	r3, [pc, #48]	; (8011ee8 <scalbn+0x108>)
 8011eb8:	2200      	movs	r2, #0
 8011eba:	e7e8      	b.n	8011e8e <scalbn+0xae>
 8011ebc:	f3af 8000 	nop.w
 8011ec0:	c2f8f359 	.word	0xc2f8f359
 8011ec4:	01a56e1f 	.word	0x01a56e1f
 8011ec8:	8800759c 	.word	0x8800759c
 8011ecc:	7e37e43c 	.word	0x7e37e43c
 8011ed0:	8800759c 	.word	0x8800759c
 8011ed4:	fe37e43c 	.word	0xfe37e43c
 8011ed8:	c2f8f359 	.word	0xc2f8f359
 8011edc:	81a56e1f 	.word	0x81a56e1f
 8011ee0:	43500000 	.word	0x43500000
 8011ee4:	ffff3cb0 	.word	0xffff3cb0
 8011ee8:	3c900000 	.word	0x3c900000

08011eec <abort>:
 8011eec:	b508      	push	{r3, lr}
 8011eee:	2006      	movs	r0, #6
 8011ef0:	f000 f950 	bl	8012194 <raise>
 8011ef4:	2001      	movs	r0, #1
 8011ef6:	f7f1 fc79 	bl	80037ec <_exit>
	...

08011efc <__errno>:
 8011efc:	4b01      	ldr	r3, [pc, #4]	; (8011f04 <__errno+0x8>)
 8011efe:	6818      	ldr	r0, [r3, #0]
 8011f00:	4770      	bx	lr
 8011f02:	bf00      	nop
 8011f04:	20000034 	.word	0x20000034

08011f08 <__libc_init_array>:
 8011f08:	b570      	push	{r4, r5, r6, lr}
 8011f0a:	4d0d      	ldr	r5, [pc, #52]	; (8011f40 <__libc_init_array+0x38>)
 8011f0c:	4c0d      	ldr	r4, [pc, #52]	; (8011f44 <__libc_init_array+0x3c>)
 8011f0e:	1b64      	subs	r4, r4, r5
 8011f10:	10a4      	asrs	r4, r4, #2
 8011f12:	2600      	movs	r6, #0
 8011f14:	42a6      	cmp	r6, r4
 8011f16:	d109      	bne.n	8011f2c <__libc_init_array+0x24>
 8011f18:	4d0b      	ldr	r5, [pc, #44]	; (8011f48 <__libc_init_array+0x40>)
 8011f1a:	4c0c      	ldr	r4, [pc, #48]	; (8011f4c <__libc_init_array+0x44>)
 8011f1c:	f000 f9f2 	bl	8012304 <_init>
 8011f20:	1b64      	subs	r4, r4, r5
 8011f22:	10a4      	asrs	r4, r4, #2
 8011f24:	2600      	movs	r6, #0
 8011f26:	42a6      	cmp	r6, r4
 8011f28:	d105      	bne.n	8011f36 <__libc_init_array+0x2e>
 8011f2a:	bd70      	pop	{r4, r5, r6, pc}
 8011f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f30:	4798      	blx	r3
 8011f32:	3601      	adds	r6, #1
 8011f34:	e7ee      	b.n	8011f14 <__libc_init_array+0xc>
 8011f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f3a:	4798      	blx	r3
 8011f3c:	3601      	adds	r6, #1
 8011f3e:	e7f2      	b.n	8011f26 <__libc_init_array+0x1e>
 8011f40:	08012574 	.word	0x08012574
 8011f44:	08012574 	.word	0x08012574
 8011f48:	08012574 	.word	0x08012574
 8011f4c:	0801257c 	.word	0x0801257c

08011f50 <malloc>:
 8011f50:	4b02      	ldr	r3, [pc, #8]	; (8011f5c <malloc+0xc>)
 8011f52:	4601      	mov	r1, r0
 8011f54:	6818      	ldr	r0, [r3, #0]
 8011f56:	f000 b88b 	b.w	8012070 <_malloc_r>
 8011f5a:	bf00      	nop
 8011f5c:	20000034 	.word	0x20000034

08011f60 <free>:
 8011f60:	4b02      	ldr	r3, [pc, #8]	; (8011f6c <free+0xc>)
 8011f62:	4601      	mov	r1, r0
 8011f64:	6818      	ldr	r0, [r3, #0]
 8011f66:	f000 b833 	b.w	8011fd0 <_free_r>
 8011f6a:	bf00      	nop
 8011f6c:	20000034 	.word	0x20000034

08011f70 <memcpy>:
 8011f70:	440a      	add	r2, r1
 8011f72:	4291      	cmp	r1, r2
 8011f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f78:	d100      	bne.n	8011f7c <memcpy+0xc>
 8011f7a:	4770      	bx	lr
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f86:	4291      	cmp	r1, r2
 8011f88:	d1f9      	bne.n	8011f7e <memcpy+0xe>
 8011f8a:	bd10      	pop	{r4, pc}

08011f8c <memmove>:
 8011f8c:	4288      	cmp	r0, r1
 8011f8e:	b510      	push	{r4, lr}
 8011f90:	eb01 0402 	add.w	r4, r1, r2
 8011f94:	d902      	bls.n	8011f9c <memmove+0x10>
 8011f96:	4284      	cmp	r4, r0
 8011f98:	4623      	mov	r3, r4
 8011f9a:	d807      	bhi.n	8011fac <memmove+0x20>
 8011f9c:	1e43      	subs	r3, r0, #1
 8011f9e:	42a1      	cmp	r1, r4
 8011fa0:	d008      	beq.n	8011fb4 <memmove+0x28>
 8011fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011faa:	e7f8      	b.n	8011f9e <memmove+0x12>
 8011fac:	4402      	add	r2, r0
 8011fae:	4601      	mov	r1, r0
 8011fb0:	428a      	cmp	r2, r1
 8011fb2:	d100      	bne.n	8011fb6 <memmove+0x2a>
 8011fb4:	bd10      	pop	{r4, pc}
 8011fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011fbe:	e7f7      	b.n	8011fb0 <memmove+0x24>

08011fc0 <memset>:
 8011fc0:	4402      	add	r2, r0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d100      	bne.n	8011fca <memset+0xa>
 8011fc8:	4770      	bx	lr
 8011fca:	f803 1b01 	strb.w	r1, [r3], #1
 8011fce:	e7f9      	b.n	8011fc4 <memset+0x4>

08011fd0 <_free_r>:
 8011fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fd2:	2900      	cmp	r1, #0
 8011fd4:	d048      	beq.n	8012068 <_free_r+0x98>
 8011fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fda:	9001      	str	r0, [sp, #4]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	f1a1 0404 	sub.w	r4, r1, #4
 8011fe2:	bfb8      	it	lt
 8011fe4:	18e4      	addlt	r4, r4, r3
 8011fe6:	f000 f97f 	bl	80122e8 <__malloc_lock>
 8011fea:	4a20      	ldr	r2, [pc, #128]	; (801206c <_free_r+0x9c>)
 8011fec:	9801      	ldr	r0, [sp, #4]
 8011fee:	6813      	ldr	r3, [r2, #0]
 8011ff0:	4615      	mov	r5, r2
 8011ff2:	b933      	cbnz	r3, 8012002 <_free_r+0x32>
 8011ff4:	6063      	str	r3, [r4, #4]
 8011ff6:	6014      	str	r4, [r2, #0]
 8011ff8:	b003      	add	sp, #12
 8011ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ffe:	f000 b979 	b.w	80122f4 <__malloc_unlock>
 8012002:	42a3      	cmp	r3, r4
 8012004:	d90b      	bls.n	801201e <_free_r+0x4e>
 8012006:	6821      	ldr	r1, [r4, #0]
 8012008:	1862      	adds	r2, r4, r1
 801200a:	4293      	cmp	r3, r2
 801200c:	bf04      	itt	eq
 801200e:	681a      	ldreq	r2, [r3, #0]
 8012010:	685b      	ldreq	r3, [r3, #4]
 8012012:	6063      	str	r3, [r4, #4]
 8012014:	bf04      	itt	eq
 8012016:	1852      	addeq	r2, r2, r1
 8012018:	6022      	streq	r2, [r4, #0]
 801201a:	602c      	str	r4, [r5, #0]
 801201c:	e7ec      	b.n	8011ff8 <_free_r+0x28>
 801201e:	461a      	mov	r2, r3
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	b10b      	cbz	r3, 8012028 <_free_r+0x58>
 8012024:	42a3      	cmp	r3, r4
 8012026:	d9fa      	bls.n	801201e <_free_r+0x4e>
 8012028:	6811      	ldr	r1, [r2, #0]
 801202a:	1855      	adds	r5, r2, r1
 801202c:	42a5      	cmp	r5, r4
 801202e:	d10b      	bne.n	8012048 <_free_r+0x78>
 8012030:	6824      	ldr	r4, [r4, #0]
 8012032:	4421      	add	r1, r4
 8012034:	1854      	adds	r4, r2, r1
 8012036:	42a3      	cmp	r3, r4
 8012038:	6011      	str	r1, [r2, #0]
 801203a:	d1dd      	bne.n	8011ff8 <_free_r+0x28>
 801203c:	681c      	ldr	r4, [r3, #0]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	6053      	str	r3, [r2, #4]
 8012042:	4421      	add	r1, r4
 8012044:	6011      	str	r1, [r2, #0]
 8012046:	e7d7      	b.n	8011ff8 <_free_r+0x28>
 8012048:	d902      	bls.n	8012050 <_free_r+0x80>
 801204a:	230c      	movs	r3, #12
 801204c:	6003      	str	r3, [r0, #0]
 801204e:	e7d3      	b.n	8011ff8 <_free_r+0x28>
 8012050:	6825      	ldr	r5, [r4, #0]
 8012052:	1961      	adds	r1, r4, r5
 8012054:	428b      	cmp	r3, r1
 8012056:	bf04      	itt	eq
 8012058:	6819      	ldreq	r1, [r3, #0]
 801205a:	685b      	ldreq	r3, [r3, #4]
 801205c:	6063      	str	r3, [r4, #4]
 801205e:	bf04      	itt	eq
 8012060:	1949      	addeq	r1, r1, r5
 8012062:	6021      	streq	r1, [r4, #0]
 8012064:	6054      	str	r4, [r2, #4]
 8012066:	e7c7      	b.n	8011ff8 <_free_r+0x28>
 8012068:	b003      	add	sp, #12
 801206a:	bd30      	pop	{r4, r5, pc}
 801206c:	20005580 	.word	0x20005580

08012070 <_malloc_r>:
 8012070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012072:	1ccd      	adds	r5, r1, #3
 8012074:	f025 0503 	bic.w	r5, r5, #3
 8012078:	3508      	adds	r5, #8
 801207a:	2d0c      	cmp	r5, #12
 801207c:	bf38      	it	cc
 801207e:	250c      	movcc	r5, #12
 8012080:	2d00      	cmp	r5, #0
 8012082:	4606      	mov	r6, r0
 8012084:	db01      	blt.n	801208a <_malloc_r+0x1a>
 8012086:	42a9      	cmp	r1, r5
 8012088:	d903      	bls.n	8012092 <_malloc_r+0x22>
 801208a:	230c      	movs	r3, #12
 801208c:	6033      	str	r3, [r6, #0]
 801208e:	2000      	movs	r0, #0
 8012090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012092:	f000 f929 	bl	80122e8 <__malloc_lock>
 8012096:	4921      	ldr	r1, [pc, #132]	; (801211c <_malloc_r+0xac>)
 8012098:	680a      	ldr	r2, [r1, #0]
 801209a:	4614      	mov	r4, r2
 801209c:	b99c      	cbnz	r4, 80120c6 <_malloc_r+0x56>
 801209e:	4f20      	ldr	r7, [pc, #128]	; (8012120 <_malloc_r+0xb0>)
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	b923      	cbnz	r3, 80120ae <_malloc_r+0x3e>
 80120a4:	4621      	mov	r1, r4
 80120a6:	4630      	mov	r0, r6
 80120a8:	f000 f83c 	bl	8012124 <_sbrk_r>
 80120ac:	6038      	str	r0, [r7, #0]
 80120ae:	4629      	mov	r1, r5
 80120b0:	4630      	mov	r0, r6
 80120b2:	f000 f837 	bl	8012124 <_sbrk_r>
 80120b6:	1c43      	adds	r3, r0, #1
 80120b8:	d123      	bne.n	8012102 <_malloc_r+0x92>
 80120ba:	230c      	movs	r3, #12
 80120bc:	6033      	str	r3, [r6, #0]
 80120be:	4630      	mov	r0, r6
 80120c0:	f000 f918 	bl	80122f4 <__malloc_unlock>
 80120c4:	e7e3      	b.n	801208e <_malloc_r+0x1e>
 80120c6:	6823      	ldr	r3, [r4, #0]
 80120c8:	1b5b      	subs	r3, r3, r5
 80120ca:	d417      	bmi.n	80120fc <_malloc_r+0x8c>
 80120cc:	2b0b      	cmp	r3, #11
 80120ce:	d903      	bls.n	80120d8 <_malloc_r+0x68>
 80120d0:	6023      	str	r3, [r4, #0]
 80120d2:	441c      	add	r4, r3
 80120d4:	6025      	str	r5, [r4, #0]
 80120d6:	e004      	b.n	80120e2 <_malloc_r+0x72>
 80120d8:	6863      	ldr	r3, [r4, #4]
 80120da:	42a2      	cmp	r2, r4
 80120dc:	bf0c      	ite	eq
 80120de:	600b      	streq	r3, [r1, #0]
 80120e0:	6053      	strne	r3, [r2, #4]
 80120e2:	4630      	mov	r0, r6
 80120e4:	f000 f906 	bl	80122f4 <__malloc_unlock>
 80120e8:	f104 000b 	add.w	r0, r4, #11
 80120ec:	1d23      	adds	r3, r4, #4
 80120ee:	f020 0007 	bic.w	r0, r0, #7
 80120f2:	1ac2      	subs	r2, r0, r3
 80120f4:	d0cc      	beq.n	8012090 <_malloc_r+0x20>
 80120f6:	1a1b      	subs	r3, r3, r0
 80120f8:	50a3      	str	r3, [r4, r2]
 80120fa:	e7c9      	b.n	8012090 <_malloc_r+0x20>
 80120fc:	4622      	mov	r2, r4
 80120fe:	6864      	ldr	r4, [r4, #4]
 8012100:	e7cc      	b.n	801209c <_malloc_r+0x2c>
 8012102:	1cc4      	adds	r4, r0, #3
 8012104:	f024 0403 	bic.w	r4, r4, #3
 8012108:	42a0      	cmp	r0, r4
 801210a:	d0e3      	beq.n	80120d4 <_malloc_r+0x64>
 801210c:	1a21      	subs	r1, r4, r0
 801210e:	4630      	mov	r0, r6
 8012110:	f000 f808 	bl	8012124 <_sbrk_r>
 8012114:	3001      	adds	r0, #1
 8012116:	d1dd      	bne.n	80120d4 <_malloc_r+0x64>
 8012118:	e7cf      	b.n	80120ba <_malloc_r+0x4a>
 801211a:	bf00      	nop
 801211c:	20005580 	.word	0x20005580
 8012120:	20005584 	.word	0x20005584

08012124 <_sbrk_r>:
 8012124:	b538      	push	{r3, r4, r5, lr}
 8012126:	4d06      	ldr	r5, [pc, #24]	; (8012140 <_sbrk_r+0x1c>)
 8012128:	2300      	movs	r3, #0
 801212a:	4604      	mov	r4, r0
 801212c:	4608      	mov	r0, r1
 801212e:	602b      	str	r3, [r5, #0]
 8012130:	f7f1 fb66 	bl	8003800 <_sbrk>
 8012134:	1c43      	adds	r3, r0, #1
 8012136:	d102      	bne.n	801213e <_sbrk_r+0x1a>
 8012138:	682b      	ldr	r3, [r5, #0]
 801213a:	b103      	cbz	r3, 801213e <_sbrk_r+0x1a>
 801213c:	6023      	str	r3, [r4, #0]
 801213e:	bd38      	pop	{r3, r4, r5, pc}
 8012140:	20005cd8 	.word	0x20005cd8

08012144 <_raise_r>:
 8012144:	291f      	cmp	r1, #31
 8012146:	b538      	push	{r3, r4, r5, lr}
 8012148:	4604      	mov	r4, r0
 801214a:	460d      	mov	r5, r1
 801214c:	d904      	bls.n	8012158 <_raise_r+0x14>
 801214e:	2316      	movs	r3, #22
 8012150:	6003      	str	r3, [r0, #0]
 8012152:	f04f 30ff 	mov.w	r0, #4294967295
 8012156:	bd38      	pop	{r3, r4, r5, pc}
 8012158:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801215a:	b112      	cbz	r2, 8012162 <_raise_r+0x1e>
 801215c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012160:	b94b      	cbnz	r3, 8012176 <_raise_r+0x32>
 8012162:	4620      	mov	r0, r4
 8012164:	f000 f830 	bl	80121c8 <_getpid_r>
 8012168:	462a      	mov	r2, r5
 801216a:	4601      	mov	r1, r0
 801216c:	4620      	mov	r0, r4
 801216e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012172:	f000 b817 	b.w	80121a4 <_kill_r>
 8012176:	2b01      	cmp	r3, #1
 8012178:	d00a      	beq.n	8012190 <_raise_r+0x4c>
 801217a:	1c59      	adds	r1, r3, #1
 801217c:	d103      	bne.n	8012186 <_raise_r+0x42>
 801217e:	2316      	movs	r3, #22
 8012180:	6003      	str	r3, [r0, #0]
 8012182:	2001      	movs	r0, #1
 8012184:	e7e7      	b.n	8012156 <_raise_r+0x12>
 8012186:	2400      	movs	r4, #0
 8012188:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801218c:	4628      	mov	r0, r5
 801218e:	4798      	blx	r3
 8012190:	2000      	movs	r0, #0
 8012192:	e7e0      	b.n	8012156 <_raise_r+0x12>

08012194 <raise>:
 8012194:	4b02      	ldr	r3, [pc, #8]	; (80121a0 <raise+0xc>)
 8012196:	4601      	mov	r1, r0
 8012198:	6818      	ldr	r0, [r3, #0]
 801219a:	f7ff bfd3 	b.w	8012144 <_raise_r>
 801219e:	bf00      	nop
 80121a0:	20000034 	.word	0x20000034

080121a4 <_kill_r>:
 80121a4:	b538      	push	{r3, r4, r5, lr}
 80121a6:	4d07      	ldr	r5, [pc, #28]	; (80121c4 <_kill_r+0x20>)
 80121a8:	2300      	movs	r3, #0
 80121aa:	4604      	mov	r4, r0
 80121ac:	4608      	mov	r0, r1
 80121ae:	4611      	mov	r1, r2
 80121b0:	602b      	str	r3, [r5, #0]
 80121b2:	f7f1 fb0b 	bl	80037cc <_kill>
 80121b6:	1c43      	adds	r3, r0, #1
 80121b8:	d102      	bne.n	80121c0 <_kill_r+0x1c>
 80121ba:	682b      	ldr	r3, [r5, #0]
 80121bc:	b103      	cbz	r3, 80121c0 <_kill_r+0x1c>
 80121be:	6023      	str	r3, [r4, #0]
 80121c0:	bd38      	pop	{r3, r4, r5, pc}
 80121c2:	bf00      	nop
 80121c4:	20005cd8 	.word	0x20005cd8

080121c8 <_getpid_r>:
 80121c8:	f7f1 baf8 	b.w	80037bc <_getpid>

080121cc <_strtol_l.isra.0>:
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121d2:	d001      	beq.n	80121d8 <_strtol_l.isra.0+0xc>
 80121d4:	2b24      	cmp	r3, #36	; 0x24
 80121d6:	d906      	bls.n	80121e6 <_strtol_l.isra.0+0x1a>
 80121d8:	f7ff fe90 	bl	8011efc <__errno>
 80121dc:	2316      	movs	r3, #22
 80121de:	6003      	str	r3, [r0, #0]
 80121e0:	2000      	movs	r0, #0
 80121e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121e6:	4f3a      	ldr	r7, [pc, #232]	; (80122d0 <_strtol_l.isra.0+0x104>)
 80121e8:	468e      	mov	lr, r1
 80121ea:	4676      	mov	r6, lr
 80121ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80121f0:	5de5      	ldrb	r5, [r4, r7]
 80121f2:	f015 0508 	ands.w	r5, r5, #8
 80121f6:	d1f8      	bne.n	80121ea <_strtol_l.isra.0+0x1e>
 80121f8:	2c2d      	cmp	r4, #45	; 0x2d
 80121fa:	d134      	bne.n	8012266 <_strtol_l.isra.0+0x9a>
 80121fc:	f89e 4000 	ldrb.w	r4, [lr]
 8012200:	f04f 0801 	mov.w	r8, #1
 8012204:	f106 0e02 	add.w	lr, r6, #2
 8012208:	2b00      	cmp	r3, #0
 801220a:	d05c      	beq.n	80122c6 <_strtol_l.isra.0+0xfa>
 801220c:	2b10      	cmp	r3, #16
 801220e:	d10c      	bne.n	801222a <_strtol_l.isra.0+0x5e>
 8012210:	2c30      	cmp	r4, #48	; 0x30
 8012212:	d10a      	bne.n	801222a <_strtol_l.isra.0+0x5e>
 8012214:	f89e 4000 	ldrb.w	r4, [lr]
 8012218:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801221c:	2c58      	cmp	r4, #88	; 0x58
 801221e:	d14d      	bne.n	80122bc <_strtol_l.isra.0+0xf0>
 8012220:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012224:	2310      	movs	r3, #16
 8012226:	f10e 0e02 	add.w	lr, lr, #2
 801222a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801222e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012232:	2600      	movs	r6, #0
 8012234:	fbbc f9f3 	udiv	r9, ip, r3
 8012238:	4635      	mov	r5, r6
 801223a:	fb03 ca19 	mls	sl, r3, r9, ip
 801223e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012242:	2f09      	cmp	r7, #9
 8012244:	d818      	bhi.n	8012278 <_strtol_l.isra.0+0xac>
 8012246:	463c      	mov	r4, r7
 8012248:	42a3      	cmp	r3, r4
 801224a:	dd24      	ble.n	8012296 <_strtol_l.isra.0+0xca>
 801224c:	2e00      	cmp	r6, #0
 801224e:	db1f      	blt.n	8012290 <_strtol_l.isra.0+0xc4>
 8012250:	45a9      	cmp	r9, r5
 8012252:	d31d      	bcc.n	8012290 <_strtol_l.isra.0+0xc4>
 8012254:	d101      	bne.n	801225a <_strtol_l.isra.0+0x8e>
 8012256:	45a2      	cmp	sl, r4
 8012258:	db1a      	blt.n	8012290 <_strtol_l.isra.0+0xc4>
 801225a:	fb05 4503 	mla	r5, r5, r3, r4
 801225e:	2601      	movs	r6, #1
 8012260:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012264:	e7eb      	b.n	801223e <_strtol_l.isra.0+0x72>
 8012266:	2c2b      	cmp	r4, #43	; 0x2b
 8012268:	bf08      	it	eq
 801226a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801226e:	46a8      	mov	r8, r5
 8012270:	bf08      	it	eq
 8012272:	f106 0e02 	addeq.w	lr, r6, #2
 8012276:	e7c7      	b.n	8012208 <_strtol_l.isra.0+0x3c>
 8012278:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801227c:	2f19      	cmp	r7, #25
 801227e:	d801      	bhi.n	8012284 <_strtol_l.isra.0+0xb8>
 8012280:	3c37      	subs	r4, #55	; 0x37
 8012282:	e7e1      	b.n	8012248 <_strtol_l.isra.0+0x7c>
 8012284:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012288:	2f19      	cmp	r7, #25
 801228a:	d804      	bhi.n	8012296 <_strtol_l.isra.0+0xca>
 801228c:	3c57      	subs	r4, #87	; 0x57
 801228e:	e7db      	b.n	8012248 <_strtol_l.isra.0+0x7c>
 8012290:	f04f 36ff 	mov.w	r6, #4294967295
 8012294:	e7e4      	b.n	8012260 <_strtol_l.isra.0+0x94>
 8012296:	2e00      	cmp	r6, #0
 8012298:	da05      	bge.n	80122a6 <_strtol_l.isra.0+0xda>
 801229a:	2322      	movs	r3, #34	; 0x22
 801229c:	6003      	str	r3, [r0, #0]
 801229e:	4665      	mov	r5, ip
 80122a0:	b942      	cbnz	r2, 80122b4 <_strtol_l.isra.0+0xe8>
 80122a2:	4628      	mov	r0, r5
 80122a4:	e79d      	b.n	80121e2 <_strtol_l.isra.0+0x16>
 80122a6:	f1b8 0f00 	cmp.w	r8, #0
 80122aa:	d000      	beq.n	80122ae <_strtol_l.isra.0+0xe2>
 80122ac:	426d      	negs	r5, r5
 80122ae:	2a00      	cmp	r2, #0
 80122b0:	d0f7      	beq.n	80122a2 <_strtol_l.isra.0+0xd6>
 80122b2:	b10e      	cbz	r6, 80122b8 <_strtol_l.isra.0+0xec>
 80122b4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80122b8:	6011      	str	r1, [r2, #0]
 80122ba:	e7f2      	b.n	80122a2 <_strtol_l.isra.0+0xd6>
 80122bc:	2430      	movs	r4, #48	; 0x30
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1b3      	bne.n	801222a <_strtol_l.isra.0+0x5e>
 80122c2:	2308      	movs	r3, #8
 80122c4:	e7b1      	b.n	801222a <_strtol_l.isra.0+0x5e>
 80122c6:	2c30      	cmp	r4, #48	; 0x30
 80122c8:	d0a4      	beq.n	8012214 <_strtol_l.isra.0+0x48>
 80122ca:	230a      	movs	r3, #10
 80122cc:	e7ad      	b.n	801222a <_strtol_l.isra.0+0x5e>
 80122ce:	bf00      	nop
 80122d0:	08012469 	.word	0x08012469

080122d4 <strtol>:
 80122d4:	4613      	mov	r3, r2
 80122d6:	460a      	mov	r2, r1
 80122d8:	4601      	mov	r1, r0
 80122da:	4802      	ldr	r0, [pc, #8]	; (80122e4 <strtol+0x10>)
 80122dc:	6800      	ldr	r0, [r0, #0]
 80122de:	f7ff bf75 	b.w	80121cc <_strtol_l.isra.0>
 80122e2:	bf00      	nop
 80122e4:	20000034 	.word	0x20000034

080122e8 <__malloc_lock>:
 80122e8:	4801      	ldr	r0, [pc, #4]	; (80122f0 <__malloc_lock+0x8>)
 80122ea:	f000 b809 	b.w	8012300 <__retarget_lock_acquire_recursive>
 80122ee:	bf00      	nop
 80122f0:	20005ce0 	.word	0x20005ce0

080122f4 <__malloc_unlock>:
 80122f4:	4801      	ldr	r0, [pc, #4]	; (80122fc <__malloc_unlock+0x8>)
 80122f6:	f000 b804 	b.w	8012302 <__retarget_lock_release_recursive>
 80122fa:	bf00      	nop
 80122fc:	20005ce0 	.word	0x20005ce0

08012300 <__retarget_lock_acquire_recursive>:
 8012300:	4770      	bx	lr

08012302 <__retarget_lock_release_recursive>:
 8012302:	4770      	bx	lr

08012304 <_init>:
 8012304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012306:	bf00      	nop
 8012308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801230a:	bc08      	pop	{r3}
 801230c:	469e      	mov	lr, r3
 801230e:	4770      	bx	lr

08012310 <_fini>:
 8012310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012312:	bf00      	nop
 8012314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012316:	bc08      	pop	{r3}
 8012318:	469e      	mov	lr, r3
 801231a:	4770      	bx	lr
